{"metadata": {"dbt_schema_version": "https://schemas.getdbt.com/dbt/manifest/v6.json", "dbt_version": "1.2.1", "generated_at": "2022-12-14T22:08:54.829559Z", "invocation_id": "4a9d1a84-3221-4725-83e0-02f405855df1", "env": {}, "project_id": "39765b078fabd4a7ff72f7e5c8f370e6", "user_id": "813f8ae0-c962-4d36-8a58-1fe8c8fb6a0b", "send_anonymous_usage_stats": true, "adapter_type": "snowflake"}, "nodes": {"model.axelar.bronze__blocks": {"raw_sql": "{{ config(\r\n    materialized = 'view'\r\n) }}\r\n\r\nSELECT\r\n    VALUE,\r\n    _partition_by_block_id,\r\n    block_number AS block_id,\r\n    metadata,\r\n    DATA\r\nFROM\r\n    {{ source(\r\n        'bronze',\r\n        'blocks'\r\n    ) }}\r\nWHERE  \r\n    DATA : error is null", "compiled": true, "resource_type": "model", "depends_on": {"macros": [], "nodes": ["source.axelar.bronze.blocks"]}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {}, "materialized": "view", "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "sync_all_columns", "grants": {}, "copy_grants": true, "post-hook": [], "pre-hook": []}, "database": "AXELAR_DEV", "schema": "bronze", "fqn": ["axelar", "bronze", "bronze__blocks"], "unique_id": "model.axelar.bronze__blocks", "package_name": "axelar", "root_path": "C:\\Users\\jessi\\git\\axelar-models", "path": "bronze\\bronze__blocks.sql", "original_file_path": "models\\bronze\\bronze__blocks.sql", "name": "bronze__blocks", "alias": "blocks", "checksum": {"name": "sha256", "checksum": "8e61e922af20b4cf191b47d62ddd75c00d4f5a25e31a0298ba0022c3b99aa610"}, "tags": [], "refs": [], "sources": [["bronze", "blocks"]], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target\\compiled\\axelar\\models\\bronze\\bronze__blocks.sql", "build_path": null, "deferred": false, "unrendered_config": {"copy_grants": true, "on_schema_change": "sync_all_columns", "materialized": "view"}, "created_at": 1671050799.1588833, "compiled_sql": "\n\nSELECT\n    VALUE,\n    _partition_by_block_id,\n    block_number AS block_id,\n    metadata,\n    DATA\nFROM\n    streamline.axelar_dev.blocks\nWHERE  \n    DATA : error is null", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "AXELAR_DEV.bronze.blocks"}, "model.axelar.bronze__transactions": {"raw_sql": "{{ config(\r\n    materialized = 'view'\r\n) }}\r\n\r\nSELECT \r\n    value, \r\n    _partition_by_block_id, \r\n    block_number AS block_id, \r\n    metadata, \r\n    data\r\nFROM \r\n     {{ source(\r\n    'bronze',\r\n    'txs_details'\r\n  ) }}", "compiled": true, "resource_type": "model", "depends_on": {"macros": [], "nodes": ["source.axelar.bronze.txs_details"]}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {}, "materialized": "view", "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "sync_all_columns", "grants": {}, "copy_grants": true, "post-hook": [], "pre-hook": []}, "database": "AXELAR_DEV", "schema": "bronze", "fqn": ["axelar", "bronze", "bronze__transactions"], "unique_id": "model.axelar.bronze__transactions", "package_name": "axelar", "root_path": "C:\\Users\\jessi\\git\\axelar-models", "path": "bronze\\bronze__transactions.sql", "original_file_path": "models\\bronze\\bronze__transactions.sql", "name": "bronze__transactions", "alias": "transactions", "checksum": {"name": "sha256", "checksum": "210a4b3f1f656c99690b554c0ad22b2320ac96d1c88686d0b9ceb30afbf5018a"}, "tags": [], "refs": [], "sources": [["bronze", "txs_details"]], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target\\compiled\\axelar\\models\\bronze\\bronze__transactions.sql", "build_path": null, "deferred": false, "unrendered_config": {"copy_grants": true, "on_schema_change": "sync_all_columns", "materialized": "view"}, "created_at": 1671050799.166867, "compiled_sql": "\n\nSELECT \n    value, \n    _partition_by_block_id, \n    block_number AS block_id, \n    metadata, \n    data\nFROM \n     streamline.axelar_dev.txs_details", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "AXELAR_DEV.bronze.transactions"}, "model.axelar.core__dim_tokens": {"raw_sql": "{{ config(\r\n    materialized = 'view'\r\n) }}\r\n\r\nSELECT\r\n    'axelar' AS blockchain,\r\n    address,\r\n    creator,\r\n    label_type,\r\n    label_subtype,\r\n    label,\r\n    project_name,\r\n    alias,\r\n    DECIMAL,\r\n    raw_metadata, \r\n    concat_ws(\r\n        '-',\r\n        address,\r\n        creator,\r\n        blockchain\r\n    ) AS unique_key\r\nFROM\r\n    {{ source(\r\n        'osmo',\r\n        'asset_metadata'\r\n    ) }}", "compiled": true, "resource_type": "model", "depends_on": {"macros": [], "nodes": ["source.axelar.osmo.asset_metadata"]}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {}, "materialized": "view", "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "sync_all_columns", "grants": {}, "copy_grants": true, "post-hook": [], "pre-hook": []}, "database": "AXELAR_DEV", "schema": "core", "fqn": ["axelar", "gold", "core__dim_tokens"], "unique_id": "model.axelar.core__dim_tokens", "package_name": "axelar", "root_path": "C:\\Users\\jessi\\git\\axelar-models", "path": "gold\\core__dim_tokens.sql", "original_file_path": "models\\gold\\core__dim_tokens.sql", "name": "core__dim_tokens", "alias": "dim_tokens", "checksum": {"name": "sha256", "checksum": "65382d3bf5021de41113384e06eb7a3be4f43f3f3fe6b9c3f1a45f5920d64a59"}, "tags": [], "refs": [], "sources": [["osmo", "asset_metadata"]], "metrics": [], "description": "Contains token metadata for assets on the Axelar blockchain. This table was sourced from an API and may not contain every token.", "columns": {"ADDRESS": {"name": "ADDRESS", "description": "Address unique to an individual wallet, validator, or token.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "BLOCKCHAIN": {"name": "BLOCKCHAIN", "description": "In this table, always Axelar. Used to join to cross-chain tables.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "CREATOR": {"name": "CREATOR", "description": "Name of the label creator - for now, this will always be \"Flipside.\"", "meta": {}, "data_type": null, "quote": null, "tags": []}, "LABEL_TYPE": {"name": "LABEL_TYPE", "description": "A broad category that describes what a label is representing.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "LABEL_SUBTYPE": {"name": "LABEL_SUBTYPE", "description": "Adds more detail to the label type.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "LABEL": {"name": "LABEL", "description": "The label or name of the address.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "PROJECT_NAME": {"name": "PROJECT_NAME", "description": "The name of the project the label belongs to.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "ALIAS": {"name": "ALIAS", "description": "A secondary address for the token, where available", "meta": {}, "data_type": null, "quote": null, "tags": []}, "DECIMAL": {"name": "DECIMAL", "description": "Divide amount by decimal to get the actual amount of currency being transferred.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "RAW_METADATA": {"name": "RAW_METADATA", "description": "Additional details about the validator or token in json format.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "UNIQUE_KEY": {"name": "UNIQUE_KEY", "description": "The unique key of the table", "meta": {}, "data_type": null, "quote": null, "tags": []}}, "meta": {}, "docs": {"show": true}, "patch_path": "axelar://models\\gold\\core__dim_tokens.yml", "compiled_path": "target\\compiled\\axelar\\models\\gold\\core__dim_tokens.sql", "build_path": null, "deferred": false, "unrendered_config": {"copy_grants": true, "on_schema_change": "sync_all_columns", "materialized": "view"}, "created_at": 1671050799.4278812, "compiled_sql": "\n\nSELECT\n    'axelar' AS blockchain,\n    address,\n    creator,\n    label_type,\n    label_subtype,\n    label,\n    project_name,\n    alias,\n    DECIMAL,\n    raw_metadata, \n    concat_ws(\n        '-',\n        address,\n        creator,\n        blockchain\n    ) AS unique_key\nFROM\n    osmosis.silver.asset_metadata", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "AXELAR_DEV.core.dim_tokens"}, "model.axelar.core__fact_blocks": {"raw_sql": "{{ config(\r\n    materialized = 'view'\r\n) }}\r\n\r\nSELECT \r\n    block_id, \r\n    block_timestamp, \r\n    chain_id, \r\n    tx_count, \r\n    proposer_address, \r\n    validator_hash\r\nFROM \r\n    {{ ref('silver__blocks') }}", "compiled": true, "resource_type": "model", "depends_on": {"macros": [], "nodes": ["model.axelar.silver__blocks"]}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {}, "materialized": "view", "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "sync_all_columns", "grants": {}, "copy_grants": true, "post-hook": [], "pre-hook": []}, "database": "AXELAR_DEV", "schema": "core", "fqn": ["axelar", "gold", "core__fact_blocks"], "unique_id": "model.axelar.core__fact_blocks", "package_name": "axelar", "root_path": "C:\\Users\\jessi\\git\\axelar-models", "path": "gold\\core__fact_blocks.sql", "original_file_path": "models\\gold\\core__fact_blocks.sql", "name": "core__fact_blocks", "alias": "fact_blocks", "checksum": {"name": "sha256", "checksum": "b9254db6025a1cf6a344c446db7ff0b91c6b8eb8d53e13f09d4b29e6bfa3031c"}, "tags": [], "refs": [["silver__blocks"]], "sources": [], "metrics": [], "description": "Records of all blocks that have occurred on Axelar, dating back to the genesis block.", "columns": {"BLOCK_ID": {"name": "BLOCK_ID", "description": "The block height the block was recorded at.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "BLOCK_TIMESTAMP": {"name": "BLOCK_TIMESTAMP", "description": "The date and time at which the block began.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "CHAIN_ID": {"name": "CHAIN_ID", "description": "The name and version of the blockchain.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "TX_COUNT": {"name": "TX_COUNT", "description": "The number of transactions that occurred during a block.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "PROPOSER_ADDRESS": {"name": "PROPOSER_ADDRESS", "description": "The address of the validator that proposed the block.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "VALIDATOR_HASH": {"name": "VALIDATOR_HASH", "description": "The root hash of the new validator set.", "meta": {}, "data_type": null, "quote": null, "tags": []}}, "meta": {}, "docs": {"show": true}, "patch_path": "axelar://models\\gold\\core__fact_blocks.yml", "compiled_path": "target\\compiled\\axelar\\models\\gold\\core__fact_blocks.sql", "build_path": null, "deferred": false, "unrendered_config": {"copy_grants": true, "on_schema_change": "sync_all_columns", "materialized": "view"}, "created_at": 1671050799.493846, "compiled_sql": "\n\nSELECT \n    block_id, \n    block_timestamp, \n    chain_id, \n    tx_count, \n    proposer_address, \n    validator_hash\nFROM \n    AXELAR_DEV.silver.blocks", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "AXELAR_DEV.core.fact_blocks"}, "model.axelar.core__fact_msgs": {"raw_sql": "{{ config(\r\n    materialized = 'view'\r\n) }}\r\n\r\nSELECT\r\n    block_id,\r\n    block_timestamp,\r\n    blockchain,\r\n    chain_id,\r\n    tx_id,\r\n    tx_succeeded,\r\n    CONCAT(\r\n        msg_group,\r\n        ':',\r\n        msg_sub_group\r\n    ) AS msg_group,\r\n    msg_index,\r\n    msg_type,\r\n    msg\r\nFROM\r\n    {{ ref('silver__msgs') }}", "compiled": true, "resource_type": "model", "depends_on": {"macros": [], "nodes": ["model.axelar.silver__msgs"]}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {}, "materialized": "view", "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "sync_all_columns", "grants": {}, "copy_grants": true, "post-hook": [], "pre-hook": []}, "database": "AXELAR_DEV", "schema": "core", "fqn": ["axelar", "gold", "core__fact_msgs"], "unique_id": "model.axelar.core__fact_msgs", "package_name": "axelar", "root_path": "C:\\Users\\jessi\\git\\axelar-models", "path": "gold\\core__fact_msgs.sql", "original_file_path": "models\\gold\\core__fact_msgs.sql", "name": "core__fact_msgs", "alias": "fact_msgs", "checksum": {"name": "sha256", "checksum": "a22e76c1383711da0480a0f07a63da630fa0a56faa265ba616c74aef3d1948dc"}, "tags": [], "refs": [["silver__msgs"]], "sources": [], "metrics": [], "description": "Records of all message attributes associated to messages that have occurred on Axelar, dating back to the genesis block.", "columns": {"BLOCK_ID": {"name": "BLOCK_ID", "description": "The block height the block was recorded at.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "BLOCK_TIMESTAMP": {"name": "BLOCK_TIMESTAMP", "description": "The date and time at which the block began.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "BLOCKCHAIN": {"name": "BLOCKCHAIN", "description": "In this table, always Axelar. Used to join to cross-chain tables.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "CHAIN_ID": {"name": "CHAIN_ID", "description": "The name and version of the blockchain.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "TX_ID": {"name": "TX_ID", "description": "A unique key that identifies a transaction. Called \"TxHash\" on block explorers.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "TX_SUCCEEDED": {"name": "TX_SUCCEEDED", "description": "Transaction status is \"TRUE\" if the transaction went through, \"FALSE\" if the transaction failed.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "MSG_GROUP": {"name": "MSG_GROUP", "description": "Value grouping different messages together to represent a single action. Format will include the numeric msg_group and msg_sub_group with a \":\" seperator. The subgroup will always be 0 except for \"Exec\" actions. NULL group means messages are related to the header (overall transaction)", "meta": {}, "data_type": null, "quote": null, "tags": []}, "MSG_INDEX": {"name": "MSG_INDEX", "description": "Short for \"message index,\" the position in which messages occur in a transaction.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "MSG_TYPE": {"name": "MSG_TYPE", "description": "A string containing information about the type of message occurring.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "MSG": {"name": "MSG", "description": "A block of json that contains the message attributes in base64 encoding.", "meta": {}, "data_type": null, "quote": null, "tags": []}}, "meta": {}, "docs": {"show": true}, "patch_path": "axelar://models\\gold\\core__fact_msgs.yml", "compiled_path": "target\\compiled\\axelar\\models\\gold\\core__fact_msgs.sql", "build_path": null, "deferred": false, "unrendered_config": {"copy_grants": true, "on_schema_change": "sync_all_columns", "materialized": "view"}, "created_at": 1671050799.5293932, "compiled_sql": "\n\nSELECT\n    block_id,\n    block_timestamp,\n    blockchain,\n    chain_id,\n    tx_id,\n    tx_succeeded,\n    CONCAT(\n        msg_group,\n        ':',\n        msg_sub_group\n    ) AS msg_group,\n    msg_index,\n    msg_type,\n    msg\nFROM\n    AXELAR_DEV.silver.msgs", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "AXELAR_DEV.core.fact_msgs"}, "model.axelar.core__fact_msg_attributes": {"raw_sql": "{{ config(\r\n    materialized = 'view'\r\n) }}\r\n\r\nSELECT\r\n    block_id,\r\n    block_timestamp,\r\n    blockchain,\r\n    chain_id,\r\n    tx_id,\r\n    tx_succeeded,\r\n    CONCAT(\r\n        msg_group,\r\n        ':',\r\n        msg_sub_group\r\n    ) AS msg_group,\r\n    msg_index,\r\n    msg_type,\r\n    attribute_index,\r\n    attribute_key,\r\n    attribute_value\r\nFROM\r\n    {{ ref('silver__msg_attributes') }}", "compiled": true, "resource_type": "model", "depends_on": {"macros": [], "nodes": ["model.axelar.silver__msg_attributes"]}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {}, "materialized": "view", "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "sync_all_columns", "grants": {}, "copy_grants": true, "post-hook": [], "pre-hook": []}, "database": "AXELAR_DEV", "schema": "core", "fqn": ["axelar", "gold", "core__fact_msg_attributes"], "unique_id": "model.axelar.core__fact_msg_attributes", "package_name": "axelar", "root_path": "C:\\Users\\jessi\\git\\axelar-models", "path": "gold\\core__fact_msg_attributes.sql", "original_file_path": "models\\gold\\core__fact_msg_attributes.sql", "name": "core__fact_msg_attributes", "alias": "fact_msg_attributes", "checksum": {"name": "sha256", "checksum": "3c095c81c956de480cc9b03378d2c396ce115dd8b37772299204854c022c4808"}, "tags": [], "refs": [["silver__msg_attributes"]], "sources": [], "metrics": [], "description": "Records of all message attributes associated to messages that have occurred on Axelar, dating back to the genesis block.", "columns": {"BLOCK_ID": {"name": "BLOCK_ID", "description": "The block height the block was recorded at.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "BLOCK_TIMESTAMP": {"name": "BLOCK_TIMESTAMP", "description": "The date and time at which the block began.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "BLOCKCHAIN": {"name": "BLOCKCHAIN", "description": "In this table, always Axelar. Used to join to cross-chain tables.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "CHAIN_ID": {"name": "CHAIN_ID", "description": "The name and version of the blockchain.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "TX_ID": {"name": "TX_ID", "description": "A unique key that identifies a transaction. Called \"TxHash\" on block explorers.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "TX_SUCCEEDED": {"name": "TX_SUCCEEDED", "description": "Transaction status is \"TRUE\" if the transaction went through, \"FALSE\" if the transaction failed.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "MSG_GROUP": {"name": "MSG_GROUP", "description": "Value grouping different messages together to represent a single action. Format will include the numeric msg_group and msg_sub_group with a \":\" seperator. The subgroup will always be 0 except for \"Exec\" actions. NULL group means messages are related to the header (overall transaction)", "meta": {}, "data_type": null, "quote": null, "tags": []}, "MSG_INDEX": {"name": "MSG_INDEX", "description": "Short for \"message index,\" the position in which messages occur in a transaction.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "MSG_TYPE": {"name": "MSG_TYPE", "description": "A string containing information about the type of message occurring.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "ATTRIBUTE_INDEX": {"name": "ATTRIBUTE_INDEX", "description": "The index from the key-value pair from the message attribute", "meta": {}, "data_type": null, "quote": null, "tags": []}, "ATTRIBUTE_KEY": {"name": "ATTRIBUTE_KEY", "description": "The key from the key-value pair from the message attribute", "meta": {}, "data_type": null, "quote": null, "tags": []}, "ATTRIBUTE_VALUE": {"name": "ATTRIBUTE_VALUE", "description": "The value from the key-value pair from the message attribute", "meta": {}, "data_type": null, "quote": null, "tags": []}}, "meta": {}, "docs": {"show": true}, "patch_path": "axelar://models\\gold\\core__fact_msg_attributes.yml", "compiled_path": "target\\compiled\\axelar\\models\\gold\\core__fact_msg_attributes.sql", "build_path": null, "deferred": false, "unrendered_config": {"copy_grants": true, "on_schema_change": "sync_all_columns", "materialized": "view"}, "created_at": 1671050799.5781262, "compiled_sql": "\n\nSELECT\n    block_id,\n    block_timestamp,\n    blockchain,\n    chain_id,\n    tx_id,\n    tx_succeeded,\n    CONCAT(\n        msg_group,\n        ':',\n        msg_sub_group\n    ) AS msg_group,\n    msg_index,\n    msg_type,\n    attribute_index,\n    attribute_key,\n    attribute_value\nFROM\n    AXELAR_DEV.silver.msg_attributes", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "AXELAR_DEV.core.fact_msg_attributes"}, "model.axelar.core__fact_transactions": {"raw_sql": "{{ config(\r\n  materialized = 'incremental',\r\n  unique_key = \"tx_id\",\r\n  incremental_strategy = 'delete+insert',\r\n  cluster_by = ['block_timestamp::DATE'],\r\n) }}\r\n\r\nWITH\r\n\r\n{% if is_incremental() %}\r\nmax_block_partition AS (\r\n\r\n  SELECT\r\n    MAX(\r\n      _partition_by_block_id\r\n    ) AS _partition_by_block_id_max\r\n  FROM\r\n    {{ ref('silver__transactions') }}\r\n),\r\n{% endif %}\r\n\r\nfee AS (\r\n  SELECT\r\n    tx_id,\r\n    attribute_value AS fee\r\n  FROM\r\n    {{ ref('silver__msg_attributes') }}\r\n  WHERE\r\n    attribute_key = 'fee'\r\n    AND fee like '%uaxl'\r\n\r\n{% if is_incremental() %}\r\nAND _partition_by_block_id >= (\r\n  SELECT\r\n    _partition_by_block_id_max \r\n  FROM\r\n    max_block_partition\r\n)\r\n{% endif %}\r\n),\r\n\r\nspender AS (\r\n  SELECT\r\n    tx_id,\r\n    SPLIT_PART(\r\n      attribute_value,\r\n      '/',\r\n      0\r\n    ) AS tx_from\r\n  FROM\r\n    {{ ref('silver__msg_attributes') }}\r\n  WHERE\r\n    attribute_key = 'acc_seq'\r\n\r\n{% if is_incremental() %}\r\nAND _partition_by_block_id >= (\r\n  SELECT\r\n    _partition_by_block_id_max\r\n  FROM\r\n    max_block_partition\r\n)\r\n{% endif %}\r\n\r\nqualify(ROW_NUMBER() over(PARTITION BY tx_id\r\nORDER BY\r\n  msg_index)) = 1\r\n),\r\n\r\nfinal_transactions AS (\r\nSELECT\r\n  t.block_id,\r\n  t.block_timestamp,\r\n  t.blockchain,\r\n  t.chain_id,\r\n  t.tx_id,\r\n  s.tx_from,\r\n  tx_succeeded,\r\n  codespace,\r\n  COALESCE(\r\n    fee,\r\n    '0uaxl'\r\n  ) AS fee_raw,\r\n  regexp_substr(fee_raw, '[0-9]+') as fee, \r\n  regexp_substr(fee_raw, '[a-z]+') as fee_denom, \r\n  gas_used,\r\n  gas_wanted,\r\n  tx_code,\r\n  tx_log,\r\n  msgs,\r\n  _partition_by_block_id\r\nFROM\r\n  {{ ref('silver__transactions') }}\r\n  t\r\n  LEFT OUTER JOIN fee f\r\n  ON t.tx_id = f.tx_id\r\n  INNER JOIN spender s\r\n  ON t.tx_id = s.tx_id\r\n\r\n{% if is_incremental() %}\r\nWHERE\r\n  _partition_by_block_id >= (\r\n    SELECT\r\n      _partition_by_block_id_max\r\n    FROM\r\n      max_block_partition\r\n  )\r\n{% endif %}\r\n)\r\n\r\nSELECT \r\n  block_id,\r\n  block_timestamp,\r\n  blockchain,\r\n  chain_id,\r\n  tx_id,\r\n  tx_from,\r\n  tx_succeeded,\r\n  codespace,\r\n  fee, \r\n  fee_denom, \r\n  gas_used,\r\n  gas_wanted,\r\n  tx_code,\r\n  tx_log,\r\n  msgs,\r\n  _partition_by_block_id\r\n\r\nFROM final_transactions", "compiled": true, "resource_type": "model", "depends_on": {"macros": ["macro.dbt.is_incremental"], "nodes": ["model.axelar.silver__msg_attributes", "model.axelar.silver__msg_attributes", "model.axelar.silver__transactions"]}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {}, "materialized": "incremental", "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": "tx_id", "on_schema_change": "sync_all_columns", "grants": {}, "copy_grants": true, "cluster_by": ["block_timestamp::DATE"], "incremental_strategy": "delete+insert", "post-hook": [], "pre-hook": []}, "database": "AXELAR_DEV", "schema": "core", "fqn": ["axelar", "gold", "core__fact_transactions"], "unique_id": "model.axelar.core__fact_transactions", "package_name": "axelar", "root_path": "C:\\Users\\jessi\\git\\axelar-models", "path": "gold\\core__fact_transactions.sql", "original_file_path": "models\\gold\\core__fact_transactions.sql", "name": "core__fact_transactions", "alias": "fact_transactions", "checksum": {"name": "sha256", "checksum": "dbe63314275515b3fdad10e948516d681b04f7b43f1cf98ae563649c20f9883e"}, "tags": [], "refs": [["silver__msg_attributes"], ["silver__msg_attributes"], ["silver__transactions"]], "sources": [], "metrics": [], "description": "Records of all transactions that have occurred on Axelar, dating back to the genesis block.", "columns": {"BLOCK_ID": {"name": "BLOCK_ID", "description": "The block height the block was recorded at.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "BLOCK_TIMESTAMP": {"name": "BLOCK_TIMESTAMP", "description": "The date and time at which the block began.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "BLOCKCHAIN": {"name": "BLOCKCHAIN", "description": "In this table, always Axelar. Used to join to cross-chain tables.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "CHAIN_ID": {"name": "CHAIN_ID", "description": "The name and version of the blockchain.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "TX_ID": {"name": "TX_ID", "description": "A unique key that identifies a transaction. Called \"TxHash\" on block explorers.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "TX_FROM": {"name": "TX_FROM", "description": "The wallet address of the individual who initiated the transaction", "meta": {}, "data_type": null, "quote": null, "tags": []}, "TX_SUCCEEDED": {"name": "TX_SUCCEEDED", "description": "Transaction status is \"TRUE\" if the transaction went through, \"FALSE\" if the transaction failed.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "CODESPACE": {"name": "CODESPACE", "description": "Namespace for the code.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "FEE": {"name": "FEE", "description": "The fee is paid by the initiator of the transaction. Fee = gas * gas price and is given in micro-AXL.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "FEE_DENOM": {"name": "FEE_DENOM", "description": "The denominator of the transaction fee.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "GAS_USED": {"name": "GAS_USED", "description": "The amount of gas consumed by the transaction.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "GAS_WANTED": {"name": "GAS_WANTED", "description": "Amount of gas requested for a transaction. It is provided by users when the transaction is generated.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "TX_CODE": {"name": "TX_CODE", "description": "A number that corresponds to various error codes. When \"0\", the transaction is successful. Non-zero numbers signify different types of transaction failures.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "TX_LOG": {"name": "TX_LOG", "description": "A string that contains the transaction logs, which are logs written by the program interacted with during the transaction.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "MSGS": {"name": "MSGS", "description": "The underlying json from the messages or events within the transactions", "meta": {}, "data_type": null, "quote": null, "tags": []}}, "meta": {}, "docs": {"show": true}, "patch_path": "axelar://models\\gold\\core__fact_transactions.yml", "compiled_path": "target\\compiled\\axelar\\models\\gold\\core__fact_transactions.sql", "build_path": null, "deferred": false, "unrendered_config": {"copy_grants": true, "on_schema_change": "sync_all_columns", "materialized": "incremental", "unique_key": "tx_id", "incremental_strategy": "delete+insert", "cluster_by": ["block_timestamp::DATE"]}, "created_at": 1671050799.6342638, "compiled_sql": "\n\nWITH\n\n\nmax_block_partition AS (\n\n  SELECT\n    MAX(\n      _partition_by_block_id\n    ) AS _partition_by_block_id_max\n  FROM\n    AXELAR_DEV.silver.transactions\n),\n\n\nfee AS (\n  SELECT\n    tx_id,\n    attribute_value AS fee\n  FROM\n    AXELAR_DEV.silver.msg_attributes\n  WHERE\n    attribute_key = 'fee'\n    AND fee like '%uaxl'\n\n\nAND _partition_by_block_id >= (\n  SELECT\n    _partition_by_block_id_max \n  FROM\n    max_block_partition\n)\n\n),\n\nspender AS (\n  SELECT\n    tx_id,\n    SPLIT_PART(\n      attribute_value,\n      '/',\n      0\n    ) AS tx_from\n  FROM\n    AXELAR_DEV.silver.msg_attributes\n  WHERE\n    attribute_key = 'acc_seq'\n\n\nAND _partition_by_block_id >= (\n  SELECT\n    _partition_by_block_id_max\n  FROM\n    max_block_partition\n)\n\n\nqualify(ROW_NUMBER() over(PARTITION BY tx_id\nORDER BY\n  msg_index)) = 1\n),\n\nfinal_transactions AS (\nSELECT\n  t.block_id,\n  t.block_timestamp,\n  t.blockchain,\n  t.chain_id,\n  t.tx_id,\n  s.tx_from,\n  tx_succeeded,\n  codespace,\n  COALESCE(\n    fee,\n    '0uaxl'\n  ) AS fee_raw,\n  regexp_substr(fee_raw, '[0-9]+') as fee, \n  regexp_substr(fee_raw, '[a-z]+') as fee_denom, \n  gas_used,\n  gas_wanted,\n  tx_code,\n  tx_log,\n  msgs,\n  _partition_by_block_id\nFROM\n  AXELAR_DEV.silver.transactions\n  t\n  LEFT OUTER JOIN fee f\n  ON t.tx_id = f.tx_id\n  INNER JOIN spender s\n  ON t.tx_id = s.tx_id\n\n\nWHERE\n  _partition_by_block_id >= (\n    SELECT\n      _partition_by_block_id_max\n    FROM\n      max_block_partition\n  )\n\n)\n\nSELECT \n  block_id,\n  block_timestamp,\n  blockchain,\n  chain_id,\n  tx_id,\n  tx_from,\n  tx_succeeded,\n  codespace,\n  fee, \n  fee_denom, \n  gas_used,\n  gas_wanted,\n  tx_code,\n  tx_log,\n  msgs,\n  _partition_by_block_id\n\nFROM final_transactions", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "AXELAR_DEV.core.fact_transactions"}, "model.axelar.core__fact_transfers": {"raw_sql": "{{ config(\r\n    materialized = 'view'\r\n) }}\r\n\r\nSELECT \r\n    block_id, \r\n    block_timestamp, \r\n    blockchain, \r\n    chain_id, \r\n    tx_id, \r\n    tx_succeeded, \r\n    transfer_type, \r\n    sender, \r\n    amount, \r\n    currency,\r\n    decimal,  \r\n    receiver\r\n\r\nFROM {{ ref('silver__transfers') }}", "compiled": true, "resource_type": "model", "depends_on": {"macros": [], "nodes": ["model.axelar.silver__transfers"]}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {}, "materialized": "view", "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "sync_all_columns", "grants": {}, "copy_grants": true, "post-hook": [], "pre-hook": []}, "database": "AXELAR_DEV", "schema": "core", "fqn": ["axelar", "gold", "core__fact_transfers"], "unique_id": "model.axelar.core__fact_transfers", "package_name": "axelar", "root_path": "C:\\Users\\jessi\\git\\axelar-models", "path": "gold\\core__fact_transfers.sql", "original_file_path": "models\\gold\\core__fact_transfers.sql", "name": "core__fact_transfers", "alias": "fact_transfers", "checksum": {"name": "sha256", "checksum": "88bd47d9e7bd411853dfca68bedc31742add1d1ce7ef31fab3603e462f54c30f"}, "tags": [], "refs": [["silver__transfers"]], "sources": [], "metrics": [], "description": "Records of all transfers on Axelar", "columns": {"BLOCK_ID": {"name": "BLOCK_ID", "description": "The block height the block was recorded at.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "BLOCK_TIMESTAMP": {"name": "BLOCK_TIMESTAMP", "description": "The date and time at which the block began.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "BLOCKCHAIN": {"name": "BLOCKCHAIN", "description": "In this table, always Axelar. Used to join to cross-chain tables.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "CHAIN_ID": {"name": "CHAIN_ID", "description": "The name and version of the blockchain.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "TX_ID": {"name": "TX_ID", "description": "A unique key that identifies a transaction. Called \"TxHash\" on block explorers.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "TX_SUCCEEDED": {"name": "TX_SUCCEEDED", "description": "Transaction status is \"TRUE\" if the transaction went through, \"FALSE\" if the transaction failed.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "TRANSFER_TYPE": {"name": "TRANSFER_TYPE", "description": "Details on the type of transfer occurring during the transaction. \"Transfer_In\" = depositing tokens onto Axelar. \"Transfer_out\" = withdrawing tokens from Axelar. \"Axelar\" = wallet to wallet transfer on Axelar.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "SENDER": {"name": "SENDER", "description": "The wallet address of the individual sent tokens in the transfer.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "AMOUNT": {"name": "AMOUNT", "description": "The amount that was used in the transaction message.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "CURRENCY": {"name": "CURRENCY", "description": "The currency that was used in the transaction message.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "DECIMAL": {"name": "DECIMAL", "description": "Divide the raw amount of currency as provided in the amount column by the decimal to get the actual amount in AXL or other currency.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "RECEIVER": {"name": "RECEIVER", "description": "The wallet address of the individual received tokens in the transfer.", "meta": {}, "data_type": null, "quote": null, "tags": []}}, "meta": {}, "docs": {"show": true}, "patch_path": "axelar://models\\gold\\core__fact_transfers.yml", "compiled_path": "target\\compiled\\axelar\\models\\gold\\core__fact_transfers.sql", "build_path": null, "deferred": false, "unrendered_config": {"copy_grants": true, "on_schema_change": "sync_all_columns", "materialized": "view"}, "created_at": 1671050799.7061772, "compiled_sql": "\n\nSELECT \n    block_id, \n    block_timestamp, \n    blockchain, \n    chain_id, \n    tx_id, \n    tx_succeeded, \n    transfer_type, \n    sender, \n    amount, \n    currency,\n    decimal,  \n    receiver\n\nFROM AXELAR_DEV.silver.transfers", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "AXELAR_DEV.core.fact_transfers"}, "model.axelar.silver__blocks": {"raw_sql": "{{ config(\r\n    materialized = 'incremental',\r\n    unique_key = \"_unique_key\",\r\n    incremental_strategy = 'delete+insert',\r\n    cluster_by = ['block_timestamp::DATE'],\r\n) }}\r\n\r\nSELECT\r\n    block_id,\r\n    COALESCE(\r\n        data :result :block :header :time :: TIMESTAMP,\r\n        data :block :header :time :: TIMESTAMP,\r\n        data :result :block :header :timestamp :: TIMESTAMP,\r\n        data :block :header :timestamp :: TIMESTAMP\r\n    ) AS block_timestamp,\r\n    COALESCE(\r\n        data :result :block :header :chain_id :: STRING,\r\n        data :block :header :chain_id :: STRING\r\n    ) AS chain_id,\r\n    COALESCE(\r\n        ARRAY_SIZE(\r\n            data :result :block :data :txs\r\n        ) :: NUMBER,\r\n        ARRAY_SIZE(\r\n            data :block :data :txs\r\n        ) :: NUMBER\r\n    ) AS tx_count,\r\n    COALESCE(\r\n        data :result :block :header :proposer_address :: STRING,\r\n        data :block :header :proposer_address :: STRING\r\n    ) AS proposer_address,\r\n    COALESCE(\r\n        data :result :block :header :validators_hash :: STRING,\r\n        data :block :header :validators_hash :: STRING\r\n    ) AS validator_hash,\r\n    COALESCE(\r\n        data :result :block :header,\r\n        data :block :header\r\n    ) AS header,\r\n    _partition_by_block_id,\r\n    concat_ws(\r\n        '-',\r\n        chain_id,\r\n        block_id\r\n    ) AS _unique_key\r\nFROM\r\n    {{ ref('bronze__blocks') }}\r\nWHERE\r\n    value :data :error IS NULL\r\n    AND data :error IS NULL\r\n\r\n{% if is_incremental() %}\r\nAND _partition_by_block_id >= (\r\n    SELECT\r\n        MAX(_partition_by_block_id)\r\n    FROM\r\n        {{ this }}\r\n)\r\n{% endif %}\r\n\r\nqualify(ROW_NUMBER() over(PARTITION BY chain_id, block_id\r\nORDER BY\r\n    _partition_by_block_id DESC)) = 1", "compiled": true, "resource_type": "model", "depends_on": {"macros": ["macro.dbt.is_incremental"], "nodes": ["model.axelar.bronze__blocks"]}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {}, "materialized": "incremental", "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": "_unique_key", "on_schema_change": "sync_all_columns", "grants": {}, "copy_grants": true, "cluster_by": ["block_timestamp::DATE"], "incremental_strategy": "delete+insert", "post-hook": [], "pre-hook": []}, "database": "AXELAR_DEV", "schema": "silver", "fqn": ["axelar", "silver", "silver__blocks"], "unique_id": "model.axelar.silver__blocks", "package_name": "axelar", "root_path": "C:\\Users\\jessi\\git\\axelar-models", "path": "silver\\silver__blocks.sql", "original_file_path": "models\\silver\\silver__blocks.sql", "name": "silver__blocks", "alias": "blocks", "checksum": {"name": "sha256", "checksum": "95bb3208c1b88cba18c0432564d4b4ac27ae245afeedc0f0dd99bf2a0d204241"}, "tags": [], "refs": [["bronze__blocks"]], "sources": [], "metrics": [], "description": "Records of all blocks that have occurred on Axelar, dating back to the genesis block.", "columns": {"BLOCK_ID": {"name": "BLOCK_ID", "description": "The block height the block was recorded at.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "BLOCK_TIMESTAMP": {"name": "BLOCK_TIMESTAMP", "description": "The date and time at which the block began.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "CHAIN_ID": {"name": "CHAIN_ID", "description": "The name and version of the blockchain.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "TX_COUNT": {"name": "TX_COUNT", "description": "The number of transactions that occurred during a block.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "PROPOSER_ADDRESS": {"name": "PROPOSER_ADDRESS", "description": "The address of the validator that proposed the block.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "VALIDATOR_HASH": {"name": "VALIDATOR_HASH", "description": "The root hash of the new validator set.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "_PARTITION_BY_BLOCK_ID": {"name": "_PARTITION_BY_BLOCK_ID", "description": "An internal column allowing incremental logic to be used in the code.", "meta": {}, "data_type": null, "quote": null, "tags": []}}, "meta": {}, "docs": {"show": true}, "patch_path": "axelar://models\\silver\\silver__blocks.yml", "compiled_path": "target\\compiled\\axelar\\models\\silver\\silver__blocks.sql", "build_path": null, "deferred": false, "unrendered_config": {"copy_grants": true, "on_schema_change": "sync_all_columns", "materialized": "incremental", "unique_key": "_unique_key", "incremental_strategy": "delete+insert", "cluster_by": ["block_timestamp::DATE"]}, "created_at": 1671050799.7531767, "compiled_sql": "\n\nSELECT\n    block_id,\n    COALESCE(\n        data :result :block :header :time :: TIMESTAMP,\n        data :block :header :time :: TIMESTAMP,\n        data :result :block :header :timestamp :: TIMESTAMP,\n        data :block :header :timestamp :: TIMESTAMP\n    ) AS block_timestamp,\n    COALESCE(\n        data :result :block :header :chain_id :: STRING,\n        data :block :header :chain_id :: STRING\n    ) AS chain_id,\n    COALESCE(\n        ARRAY_SIZE(\n            data :result :block :data :txs\n        ) :: NUMBER,\n        ARRAY_SIZE(\n            data :block :data :txs\n        ) :: NUMBER\n    ) AS tx_count,\n    COALESCE(\n        data :result :block :header :proposer_address :: STRING,\n        data :block :header :proposer_address :: STRING\n    ) AS proposer_address,\n    COALESCE(\n        data :result :block :header :validators_hash :: STRING,\n        data :block :header :validators_hash :: STRING\n    ) AS validator_hash,\n    COALESCE(\n        data :result :block :header,\n        data :block :header\n    ) AS header,\n    _partition_by_block_id,\n    concat_ws(\n        '-',\n        chain_id,\n        block_id\n    ) AS _unique_key\nFROM\n    AXELAR_DEV.bronze.blocks\nWHERE\n    value :data :error IS NULL\n    AND data :error IS NULL\n\n\nAND _partition_by_block_id >= (\n    SELECT\n        MAX(_partition_by_block_id)\n    FROM\n        AXELAR_DEV.silver.blocks\n)\n\n\nqualify(ROW_NUMBER() over(PARTITION BY chain_id, block_id\nORDER BY\n    _partition_by_block_id DESC)) = 1", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "AXELAR_DEV.silver.blocks"}, "model.axelar.silver__msgs": {"raw_sql": "{{ config(\r\n  materialized = 'incremental',\r\n  unique_key = \"_unique_key\",\r\n  incremental_strategy = 'delete+insert',\r\n  cluster_by = ['block_timestamp::DATE'],\r\n) }}\r\n\r\nWITH base AS (\r\n\r\n  SELECT\r\n    t.block_id,\r\n    t.block_timestamp,\r\n    t.tx_id,\r\n    t.blockchain,\r\n    t.chain_id,\r\n    t.gas_used,\r\n    t.gas_wanted,\r\n    t.tx_succeeded,\r\n    f.value AS msg,\r\n    f.index :: INT AS msg_index,\r\n    msg :type :: STRING AS msg_type,\r\n    IFF(\r\n      TRY_BASE64_DECODE_STRING(\r\n        msg :attributes [0] :key :: STRING\r\n      ) = 'action',\r\n      TRUE,\r\n      FALSE\r\n    ) AS is_action,\r\n    NULLIF(\r\n      (conditional_true_event(is_action) over (PARTITION BY tx_id\r\n      ORDER BY\r\n        msg_index ASC) -1),\r\n        -1\r\n    ) AS msg_group,\r\n    IFF(\r\n      TRY_BASE64_DECODE_STRING(\r\n        msg :attributes [0] :key :: STRING\r\n      ) = 'module',\r\n      TRUE,\r\n      FALSE\r\n    ) AS is_module,\r\n    TRY_BASE64_DECODE_STRING(\r\n      msg :attributes [0] :key :: STRING\r\n    ) AS attribute_key,\r\n    TRY_BASE64_DECODE_STRING(\r\n      msg :attributes [0] :value :: STRING\r\n    ) AS attribute_value,\r\n    t._partition_by_block_id\r\n  FROM\r\n    {{ ref('silver__transactions') }}\r\n    t,\r\n    LATERAL FLATTEN(input => msgs) f\r\n\r\n{% if is_incremental() %}\r\nWHERE\r\n  _partition_by_block_id >= (\r\n    SELECT\r\n      MAX(_partition_by_block_id)\r\n    FROM\r\n      {{ this }}\r\n  )\r\n{% endif %}\r\n),\r\nexec_actions AS (\r\n  SELECT\r\n    DISTINCT tx_id,\r\n    msg_group\r\n  FROM\r\n    base\r\n  WHERE\r\n    msg_type = 'message'\r\n    AND attribute_key = 'action'\r\n    AND LOWER(attribute_value) LIKE '%exec%' -- there are none currently\r\n),\r\nGROUPING AS (\r\n  SELECT\r\n    base.tx_id,\r\n    base.msg_index,\r\n    RANK() over(\r\n      PARTITION BY base.tx_id,\r\n      base.msg_group\r\n      ORDER BY\r\n        base.msg_index\r\n    ) -1 AS msg_sub_group\r\n  FROM\r\n    base\r\n    INNER JOIN exec_actions e\r\n    ON base.tx_id = e.tx_id\r\n    AND base.msg_group = e.msg_group\r\n  WHERE\r\n    base.is_module = 'TRUE'\r\n    AND base.msg_type = 'message'\r\n),\r\nFINAL AS (\r\n  SELECT\r\n    block_id,\r\n    block_timestamp,\r\n    blockchain,\r\n    chain_id,\r\n    A.tx_id,\r\n    tx_succeeded,\r\n    msg_group,\r\n    CASE\r\n      WHEN msg_group IS NULL THEN NULL\r\n      ELSE COALESCE(\r\n        LAST_VALUE(\r\n          b.msg_sub_group ignore nulls\r\n        ) over(\r\n          PARTITION BY A.tx_id,\r\n          msg_group\r\n          ORDER BY\r\n            A.msg_index DESC rows unbounded preceding\r\n        ),\r\n        0\r\n      )\r\n    END AS msg_sub_group,\r\n    A.msg_index,\r\n    msg_type,\r\n    msg,\r\n    concat_ws(\r\n      '-',\r\n      A.tx_id,\r\n      A.msg_index\r\n    ) AS _unique_key,\r\n    _partition_by_block_id\r\n  FROM\r\n    base A\r\n    LEFT JOIN GROUPING b\r\n    ON A.tx_id = b.tx_id\r\n    AND A.msg_index = b.msg_index\r\n)\r\nSELECT\r\n  block_id,\r\n  block_timestamp,\r\n  blockchain,\r\n  chain_id,\r\n  tx_id,\r\n  tx_succeeded,\r\n  msg_group,\r\n  msg_sub_group,\r\n  msg_index,\r\n  msg_type,\r\n  msg,\r\n  _unique_key,\r\n  _partition_by_block_id\r\nFROM\r\n  FINAL", "compiled": true, "resource_type": "model", "depends_on": {"macros": ["macro.dbt.is_incremental"], "nodes": ["model.axelar.silver__transactions"]}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {}, "materialized": "incremental", "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": "_unique_key", "on_schema_change": "sync_all_columns", "grants": {}, "copy_grants": true, "cluster_by": ["block_timestamp::DATE"], "incremental_strategy": "delete+insert", "post-hook": [], "pre-hook": []}, "database": "AXELAR_DEV", "schema": "silver", "fqn": ["axelar", "silver", "silver__msgs"], "unique_id": "model.axelar.silver__msgs", "package_name": "axelar", "root_path": "C:\\Users\\jessi\\git\\axelar-models", "path": "silver\\silver__msgs.sql", "original_file_path": "models\\silver\\silver__msgs.sql", "name": "silver__msgs", "alias": "msgs", "checksum": {"name": "sha256", "checksum": "f9c8b714a985f2e2443563693854c2d9f5cffefc3f72c9a05ce246a0976c3f56"}, "tags": [], "refs": [["silver__transactions"]], "sources": [], "metrics": [], "description": "Records of all messages associated to transactions that have occurred on Axelar, dating back to the genesis block.", "columns": {"BLOCK_ID": {"name": "BLOCK_ID", "description": "The block height the block was recorded at.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "BLOCK_TIMESTAMP": {"name": "BLOCK_TIMESTAMP", "description": "The date and time at which the block began.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "CHAIN_ID": {"name": "CHAIN_ID", "description": "The name and version of the blockchain.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "TX_ID": {"name": "TX_ID", "description": "A unique key that identifies a transaction. Called \"TxHash\" on block explorers.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "TX_SUCCEEDED": {"name": "TX_SUCCEEDED", "description": "Transaction status is \"TRUE\" if the transaction went through, \"FALSE\" if the transaction failed.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "MSG_GROUP": {"name": "MSG_GROUP", "description": "Value grouping different messages together to represent a single action. Format will include the numeric msg_group and msg_sub_group with a \":\" seperator. The subgroup will always be 0 except for \"Exec\" actions. NULL group means messages are related to the header (overall transaction)", "meta": {}, "data_type": null, "quote": null, "tags": []}, "MSG_SUB_GROUP": {"name": "MSG_SUB_GROUP", "description": "Silver only -- Numeric value grouping different messages together to represent a single action within a group. This is relevent for exec actions that contain mutiple underlying actions. NULL sub group means messages are related to the header (overall transaction)", "meta": {}, "data_type": null, "quote": null, "tags": []}, "MSG_INDEX": {"name": "MSG_INDEX", "description": "Short for \"message index,\" the position in which messages occur in a transaction.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "MSG_TYPE": {"name": "MSG_TYPE", "description": "A string containing information about the type of message occurring.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "MSG": {"name": "MSG", "description": "The underlying json from the message or event within the transactions", "meta": {}, "data_type": null, "quote": null, "tags": []}}, "meta": {}, "docs": {"show": true}, "patch_path": "axelar://models\\silver\\silver__msgs.yml", "compiled_path": "target\\compiled\\axelar\\models\\silver\\silver__msgs.sql", "build_path": null, "deferred": false, "unrendered_config": {"copy_grants": true, "on_schema_change": "sync_all_columns", "materialized": "incremental", "unique_key": "_unique_key", "incremental_strategy": "delete+insert", "cluster_by": ["block_timestamp::DATE"]}, "created_at": 1671050799.8340964, "compiled_sql": "\n\nWITH base AS (\n\n  SELECT\n    t.block_id,\n    t.block_timestamp,\n    t.tx_id,\n    t.blockchain,\n    t.chain_id,\n    t.gas_used,\n    t.gas_wanted,\n    t.tx_succeeded,\n    f.value AS msg,\n    f.index :: INT AS msg_index,\n    msg :type :: STRING AS msg_type,\n    IFF(\n      TRY_BASE64_DECODE_STRING(\n        msg :attributes [0] :key :: STRING\n      ) = 'action',\n      TRUE,\n      FALSE\n    ) AS is_action,\n    NULLIF(\n      (conditional_true_event(is_action) over (PARTITION BY tx_id\n      ORDER BY\n        msg_index ASC) -1),\n        -1\n    ) AS msg_group,\n    IFF(\n      TRY_BASE64_DECODE_STRING(\n        msg :attributes [0] :key :: STRING\n      ) = 'module',\n      TRUE,\n      FALSE\n    ) AS is_module,\n    TRY_BASE64_DECODE_STRING(\n      msg :attributes [0] :key :: STRING\n    ) AS attribute_key,\n    TRY_BASE64_DECODE_STRING(\n      msg :attributes [0] :value :: STRING\n    ) AS attribute_value,\n    t._partition_by_block_id\n  FROM\n    AXELAR_DEV.silver.transactions\n    t,\n    LATERAL FLATTEN(input => msgs) f\n\n\nWHERE\n  _partition_by_block_id >= (\n    SELECT\n      MAX(_partition_by_block_id)\n    FROM\n      AXELAR_DEV.silver.msgs\n  )\n\n),\nexec_actions AS (\n  SELECT\n    DISTINCT tx_id,\n    msg_group\n  FROM\n    base\n  WHERE\n    msg_type = 'message'\n    AND attribute_key = 'action'\n    AND LOWER(attribute_value) LIKE '%exec%' -- there are none currently\n),\nGROUPING AS (\n  SELECT\n    base.tx_id,\n    base.msg_index,\n    RANK() over(\n      PARTITION BY base.tx_id,\n      base.msg_group\n      ORDER BY\n        base.msg_index\n    ) -1 AS msg_sub_group\n  FROM\n    base\n    INNER JOIN exec_actions e\n    ON base.tx_id = e.tx_id\n    AND base.msg_group = e.msg_group\n  WHERE\n    base.is_module = 'TRUE'\n    AND base.msg_type = 'message'\n),\nFINAL AS (\n  SELECT\n    block_id,\n    block_timestamp,\n    blockchain,\n    chain_id,\n    A.tx_id,\n    tx_succeeded,\n    msg_group,\n    CASE\n      WHEN msg_group IS NULL THEN NULL\n      ELSE COALESCE(\n        LAST_VALUE(\n          b.msg_sub_group ignore nulls\n        ) over(\n          PARTITION BY A.tx_id,\n          msg_group\n          ORDER BY\n            A.msg_index DESC rows unbounded preceding\n        ),\n        0\n      )\n    END AS msg_sub_group,\n    A.msg_index,\n    msg_type,\n    msg,\n    concat_ws(\n      '-',\n      A.tx_id,\n      A.msg_index\n    ) AS _unique_key,\n    _partition_by_block_id\n  FROM\n    base A\n    LEFT JOIN GROUPING b\n    ON A.tx_id = b.tx_id\n    AND A.msg_index = b.msg_index\n)\nSELECT\n  block_id,\n  block_timestamp,\n  blockchain,\n  chain_id,\n  tx_id,\n  tx_succeeded,\n  msg_group,\n  msg_sub_group,\n  msg_index,\n  msg_type,\n  msg,\n  _unique_key,\n  _partition_by_block_id\nFROM\n  FINAL", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "AXELAR_DEV.silver.msgs"}, "model.axelar.silver__msg_attributes": {"raw_sql": "{{ config(\r\n  materialized = 'incremental',\r\n  unique_key = \"_unique_key\",\r\n  incremental_strategy = 'delete+insert',\r\n  cluster_by = ['block_timestamp::DATE'],\r\n) }}\r\n\r\nSELECT\r\n  block_id,\r\n  block_timestamp,\r\n  blockchain,\r\n  chain_id,\r\n  tx_id,\r\n  tx_succeeded,\r\n  msg_group,\r\n  msg_sub_group,\r\n  msg_index,\r\n  msg_type,\r\n  b.index AS attribute_index,\r\n  TRY_BASE64_DECODE_STRING(\r\n    b.value :key :: STRING\r\n  ) AS attribute_key,\r\n  TRY_BASE64_DECODE_STRING(\r\n    b.value :value :: STRING\r\n  ) AS attribute_value,\r\n  concat_ws(\r\n    '-',\r\n    tx_id,\r\n    msg_index,\r\n    attribute_index\r\n  ) AS _unique_key,\r\n  _partition_by_block_id\r\nFROM\r\n  {{ ref('silver__msgs') }} A,\r\n  LATERAL FLATTEN(\r\n    input => A.msg,\r\n    path => 'attributes'\r\n  ) b\r\n\r\n{% if is_incremental() %}\r\nWHERE\r\n  _partition_by_block_id >= (\r\n    SELECT\r\n      MAX(_partition_by_block_id) \r\n    FROM\r\n      {{ this }}\r\n  )\r\n{% endif %}", "compiled": true, "resource_type": "model", "depends_on": {"macros": ["macro.dbt.is_incremental"], "nodes": ["model.axelar.silver__msgs"]}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {}, "materialized": "incremental", "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": "_unique_key", "on_schema_change": "sync_all_columns", "grants": {}, "copy_grants": true, "cluster_by": ["block_timestamp::DATE"], "incremental_strategy": "delete+insert", "post-hook": [], "pre-hook": []}, "database": "AXELAR_DEV", "schema": "silver", "fqn": ["axelar", "silver", "silver__msg_attributes"], "unique_id": "model.axelar.silver__msg_attributes", "package_name": "axelar", "root_path": "C:\\Users\\jessi\\git\\axelar-models", "path": "silver\\silver__msg_attributes.sql", "original_file_path": "models\\silver\\silver__msg_attributes.sql", "name": "silver__msg_attributes", "alias": "msg_attributes", "checksum": {"name": "sha256", "checksum": "a951ae9f3cd4ee75c9fe21ff7111a000584f09f721616895fa1792beb1725b93"}, "tags": [], "refs": [["silver__msgs"]], "sources": [], "metrics": [], "description": "Records of all messages associated to transactions that have occurred on Axelar, dating back to the genesis block.", "columns": {"BLOCK_ID": {"name": "BLOCK_ID", "description": "The block height the block was recorded at.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "BLOCK_TIMESTAMP": {"name": "BLOCK_TIMESTAMP", "description": "The date and time at which the block began.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "CHAIN_ID": {"name": "CHAIN_ID", "description": "The name and version of the blockchain.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "TX_ID": {"name": "TX_ID", "description": "A unique key that identifies a transaction. Called \"TxHash\" on block explorers.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "MSG_GROUP": {"name": "MSG_GROUP", "description": "Value grouping different messages together to represent a single action. Format will include the numeric msg_group and msg_sub_group with a \":\" seperator. The subgroup will always be 0 except for \"Exec\" actions. NULL group means messages are related to the header (overall transaction)", "meta": {}, "data_type": null, "quote": null, "tags": []}, "MSG_SUB_GROUP": {"name": "MSG_SUB_GROUP", "description": "Silver only -- Numeric value grouping different messages together to represent a single action within a group. This is relevent for exec actions that contain mutiple underlying actions. NULL sub group means messages are related to the header (overall transaction)", "meta": {}, "data_type": null, "quote": null, "tags": []}, "MSG_INDEX": {"name": "MSG_INDEX", "description": "Short for \"message index,\" the position in which messages occur in a transaction.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "MSG_TYPE": {"name": "MSG_TYPE", "description": "A string containing information about the type of message occurring.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "MSG": {"name": "MSG", "description": "The underlying json from the message or event within the transactions", "meta": {}, "data_type": null, "quote": null, "tags": []}}, "meta": {}, "docs": {"show": true}, "patch_path": "axelar://models\\silver\\silver__msg_attributes.yml", "compiled_path": "target\\compiled\\axelar\\models\\silver\\silver__msg_attributes.sql", "build_path": null, "deferred": false, "unrendered_config": {"copy_grants": true, "on_schema_change": "sync_all_columns", "materialized": "incremental", "unique_key": "_unique_key", "incremental_strategy": "delete+insert", "cluster_by": ["block_timestamp::DATE"]}, "created_at": 1671050799.8943264, "compiled_sql": "\n\nSELECT\n  block_id,\n  block_timestamp,\n  blockchain,\n  chain_id,\n  tx_id,\n  tx_succeeded,\n  msg_group,\n  msg_sub_group,\n  msg_index,\n  msg_type,\n  b.index AS attribute_index,\n  TRY_BASE64_DECODE_STRING(\n    b.value :key :: STRING\n  ) AS attribute_key,\n  TRY_BASE64_DECODE_STRING(\n    b.value :value :: STRING\n  ) AS attribute_value,\n  concat_ws(\n    '-',\n    tx_id,\n    msg_index,\n    attribute_index\n  ) AS _unique_key,\n  _partition_by_block_id\nFROM\n  AXELAR_DEV.silver.msgs A,\n  LATERAL FLATTEN(\n    input => A.msg,\n    path => 'attributes'\n  ) b\n\n\nWHERE\n  _partition_by_block_id >= (\n    SELECT\n      MAX(_partition_by_block_id) \n    FROM\n      AXELAR_DEV.silver.msg_attributes\n  )\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "AXELAR_DEV.silver.msg_attributes"}, "model.axelar.silver__transactions": {"raw_sql": "{{ config(\r\n    materialized = 'incremental',\r\n    unique_key = \"tx_id\",\r\n    incremental_strategy = 'delete+insert',\r\n    cluster_by = 'block_timestamp::DATE',\r\n    post_hook = \"ALTER TABLE {{ this }} ADD SEARCH OPTIMIZATION\",\r\n) }}\r\n\r\nWITH base_table AS (\r\n\r\n    SELECT\r\n        block_id,\r\n        DATA :hash :: STRING AS tx_id,\r\n        'axelar' AS blockchain,\r\n        DATA :tx_result :codespace AS codespace,\r\n        DATA :tx_result :gas_used :: NUMBER AS gas_used,\r\n        DATA :tx_result :gas_wanted :: NUMBER AS gas_wanted,\r\n        CASE\r\n            WHEN DATA :tx_result :code :: NUMBER = 0 THEN TRUE\r\n            ELSE FALSE\r\n        END AS tx_succeeded,\r\n        DATA :tx_result :code :: NUMBER AS tx_code,\r\n        DATA :tx_result :events AS msgs,\r\n        DATA :tx_result :log AS tx_log,\r\n        _partition_by_block_id\r\n    FROM\r\n        {{ ref('bronze__transactions') }}\r\n    WHERE\r\n        DATA :error IS NULL\r\n\r\n{% if is_incremental() %}\r\nAND _partition_by_block_id >= (\r\n    SELECT\r\n        MAX(_partition_by_block_id)\r\n    FROM\r\n        {{ this }}\r\n)\r\n{% endif %}\r\n)\r\nSELECT\r\n    b.block_id,\r\n    block_timestamp,\r\n    tx_id,\r\n    blockchain,\r\n    chain_id,\r\n    codespace,\r\n    gas_used,\r\n    gas_wanted,\r\n    tx_succeeded,\r\n    tx_code,\r\n    msgs,\r\n    tx_log :: STRING AS tx_log,\r\n    b._partition_by_block_id\r\nFROM\r\n    base_table b\r\n    LEFT OUTER JOIN {{ ref('silver__blocks') }}\r\n    bb\r\n    ON b.block_id = bb.block_id\r\n\r\n{% if is_incremental() %}\r\nWHERE\r\n    b._partition_by_block_id >= (\r\n        SELECT\r\n            MAX(_partition_by_block_id)\r\n        FROM\r\n            {{ this }}\r\n    )\r\n{% endif %}\r\n\r\nqualify(ROW_NUMBER() over(PARTITION BY tx_id\r\nORDER BY\r\n    b._partition_by_block_id DESC)) = 1", "compiled": true, "resource_type": "model", "depends_on": {"macros": ["macro.dbt.is_incremental"], "nodes": ["model.axelar.bronze__transactions", "model.axelar.silver__blocks"]}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {}, "materialized": "incremental", "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": "tx_id", "on_schema_change": "sync_all_columns", "grants": {}, "copy_grants": true, "cluster_by": "block_timestamp::DATE", "incremental_strategy": "delete+insert", "post-hook": [{"sql": "ALTER TABLE {{ this }} ADD SEARCH OPTIMIZATION", "transaction": true, "index": null}], "pre-hook": []}, "database": "AXELAR_DEV", "schema": "silver", "fqn": ["axelar", "silver", "silver__transactions"], "unique_id": "model.axelar.silver__transactions", "package_name": "axelar", "root_path": "C:\\Users\\jessi\\git\\axelar-models", "path": "silver\\silver__transactions.sql", "original_file_path": "models\\silver\\silver__transactions.sql", "name": "silver__transactions", "alias": "transactions", "checksum": {"name": "sha256", "checksum": "30f1e6587630920b339e6ddc9d061a0bddb183f3b74112eda139b7b63b2006fc"}, "tags": [], "refs": [["bronze__transactions"], ["silver__blocks"]], "sources": [], "metrics": [], "description": "Records of all transactions that have occurred on Axelar, dating back to the genesis block.", "columns": {"BLOCK_ID": {"name": "BLOCK_ID", "description": "The block height the block was recorded at.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "BLOCK_TIMESTAMP": {"name": "BLOCK_TIMESTAMP", "description": "The date and time at which the block began.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "TX_ID": {"name": "TX_ID", "description": "A unique key that identifies a transaction. Called \"TxHash\" on block explorers.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "CHAIN_ID": {"name": "CHAIN_ID", "description": "The name and version of the blockchain.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "CODESPACE": {"name": "CODESPACE", "description": "Namespace for the code.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "GAS_USED": {"name": "GAS_USED", "description": "The amount of gas consumed by the transaction.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "GAS_WANTED": {"name": "GAS_WANTED", "description": "Amount of gas requested for a transaction. It is provided by users when the transaction is generated.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "TX_SUCCEEDED": {"name": "TX_SUCCEEDED", "description": "Transaction status is \"TRUE\" if the transaction went through, \"FALSE\" if the transaction failed.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "TX_CODE": {"name": "TX_CODE", "description": "A number that corresponds to various error codes. When \"0\", the transaction is successful. Non-zero numbers signify different types of transaction failures.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "MSGS": {"name": "MSGS", "description": "The underlying json from the messages or events within the transactions", "meta": {}, "data_type": null, "quote": null, "tags": []}, "TX_LOG": {"name": "TX_LOG", "description": "A string that contains the transaction logs, which are logs written by the program interacted with during the transaction.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "_PARTITION_BY_BLOCK_ID": {"name": "_PARTITION_BY_BLOCK_ID", "description": "An internal column allowing incremental logic to be used in the code.", "meta": {}, "data_type": null, "quote": null, "tags": []}}, "meta": {}, "docs": {"show": true}, "patch_path": "axelar://models\\silver\\silver__transactions.yml", "compiled_path": "target\\compiled\\axelar\\models\\silver\\silver__transactions.sql", "build_path": null, "deferred": false, "unrendered_config": {"copy_grants": true, "on_schema_change": "sync_all_columns", "materialized": "incremental", "unique_key": "tx_id", "incremental_strategy": "delete+insert", "cluster_by": "block_timestamp::DATE", "post-hook": ["ALTER TABLE {{ this }} ADD SEARCH OPTIMIZATION"]}, "created_at": 1671050799.9436796, "compiled_sql": "\n\nWITH base_table AS (\n\n    SELECT\n        block_id,\n        DATA :hash :: STRING AS tx_id,\n        'axelar' AS blockchain,\n        DATA :tx_result :codespace AS codespace,\n        DATA :tx_result :gas_used :: NUMBER AS gas_used,\n        DATA :tx_result :gas_wanted :: NUMBER AS gas_wanted,\n        CASE\n            WHEN DATA :tx_result :code :: NUMBER = 0 THEN TRUE\n            ELSE FALSE\n        END AS tx_succeeded,\n        DATA :tx_result :code :: NUMBER AS tx_code,\n        DATA :tx_result :events AS msgs,\n        DATA :tx_result :log AS tx_log,\n        _partition_by_block_id\n    FROM\n        AXELAR_DEV.bronze.transactions\n    WHERE\n        DATA :error IS NULL\n\n\nAND _partition_by_block_id >= (\n    SELECT\n        MAX(_partition_by_block_id)\n    FROM\n        AXELAR_DEV.silver.transactions\n)\n\n)\nSELECT\n    b.block_id,\n    block_timestamp,\n    tx_id,\n    blockchain,\n    chain_id,\n    codespace,\n    gas_used,\n    gas_wanted,\n    tx_succeeded,\n    tx_code,\n    msgs,\n    tx_log :: STRING AS tx_log,\n    b._partition_by_block_id\nFROM\n    base_table b\n    LEFT OUTER JOIN AXELAR_DEV.silver.blocks\n    bb\n    ON b.block_id = bb.block_id\n\n\nWHERE\n    b._partition_by_block_id >= (\n        SELECT\n            MAX(_partition_by_block_id)\n        FROM\n            AXELAR_DEV.silver.transactions\n    )\n\n\nqualify(ROW_NUMBER() over(PARTITION BY tx_id\nORDER BY\n    b._partition_by_block_id DESC)) = 1", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "AXELAR_DEV.silver.transactions"}, "model.axelar.silver__transfers": {"raw_sql": "{{ config(\r\n    materialized = 'incremental',\r\n    unique_key = \"_unique_key\",\r\n    incremental_strategy = 'delete+insert',\r\n    cluster_by = 'block_timestamp::DATE',\r\n) }}\r\n\r\nWITH axelar_txs AS (\r\n\r\n    SELECT\r\n        DISTINCT tx_id\r\n    FROM\r\n        {{ ref('silver__msg_attributes') }}\r\n    WHERE\r\n        attribute_value IN (\r\n            '/cosmos.bank.v1beta1.MsgSend',\r\n            '/cosmos.bank.v1beta1.MsgMultiSend'\r\n        )\r\n\r\n{% if is_incremental() %}\r\nAND _partition_by_block_id >= (\r\n    SELECT\r\n        MAX(_partition_by_block_id)\r\n    FROM\r\n        {{ this }}\r\n)\r\n{% endif %}\r\n),\r\nsender AS (\r\n    SELECT\r\n        tx_id,\r\n        msg_index,\r\n        SPLIT_PART(\r\n            attribute_value,\r\n            '/',\r\n            0\r\n        ) AS sender\r\n    FROM\r\n        {{ ref('silver__msg_attributes') }}\r\n    WHERE\r\n        msg_type = 'tx'\r\n        AND attribute_key = 'acc_seq'\r\n\r\n{% if is_incremental() %}\r\nAND _partition_by_block_id >= (\r\n    SELECT\r\n        MAX(_partition_by_block_id)\r\n    FROM\r\n        {{ this }}\r\n)\r\n{% endif %}\r\n),\r\nmsg_index AS (\r\n    SELECT\r\n        v.tx_id,\r\n        attribute_key,\r\n        m.msg_index\r\n    FROM\r\n        axelar_txs v\r\n        LEFT OUTER JOIN {{ ref('silver__msg_attributes') }}\r\n        m\r\n        ON v.tx_id = m.tx_id\r\n        INNER JOIN sender s\r\n        ON v.tx_id = s.tx_id\r\n    WHERE\r\n        msg_type = 'transfer'\r\n        AND attribute_key = 'amount'\r\n        AND m.msg_index > s.msg_index\r\n\r\n{% if is_incremental() %}\r\nAND _partition_by_block_id >= (\r\n    SELECT\r\n        MAX(_partition_by_block_id)\r\n    FROM\r\n        {{ this }}\r\n)\r\n{% endif %}\r\n),\r\nreceiver AS (\r\n    SELECT\r\n        v.tx_id,\r\n        m.msg_index,\r\n        attribute_value AS receiver\r\n    FROM\r\n        axelar_txs v\r\n        LEFT OUTER JOIN {{ ref('silver__msg_attributes') }}\r\n        m\r\n        ON v.tx_id = m.tx_id\r\n        INNER JOIN sender s\r\n        ON v.tx_id = s.tx_id\r\n    WHERE\r\n        msg_type = 'transfer'\r\n        AND attribute_key = 'recipient'\r\n        AND m.msg_index > s.msg_index\r\n\r\n{% if is_incremental() %}\r\nAND _partition_by_block_id >= (\r\n    SELECT\r\n        MAX(_partition_by_block_id) \r\n    FROM\r\n        {{ this }}\r\n)\r\n{% endif %}\r\n),\r\namount AS (\r\n    SELECT\r\n        v.tx_id,\r\n        m.msg_index,\r\n        COALESCE(\r\n            SPLIT_PART(\r\n                TRIM(\r\n                    REGEXP_REPLACE(\r\n                        attribute_value,\r\n                        '[^[:digit:]]',\r\n                        ' '\r\n                    )\r\n                ),\r\n                ' ',\r\n                0\r\n            ),\r\n            TRY_PARSE_JSON(attribute_value) :amount\r\n        ) AS amount,\r\n        COALESCE(\r\n            RIGHT(attribute_value, LENGTH(attribute_value) - LENGTH(SPLIT_PART(TRIM(REGEXP_REPLACE(attribute_value, '[^[:digit:]]', ' ')), ' ', 0))),\r\n            TRY_PARSE_JSON(attribute_value) [1] :denom\r\n        ) AS currency\r\n    FROM\r\n        axelar_txs v\r\n        LEFT OUTER JOIN {{ ref('silver__msg_attributes') }}\r\n        m\r\n        ON v.tx_id = m.tx_id\r\n        INNER JOIN sender s\r\n        ON v.tx_id = s.tx_id\r\n    WHERE\r\n        msg_type = 'transfer'\r\n        AND attribute_key = 'amount'\r\n        AND m.msg_index > s.msg_index\r\n\r\n{% if is_incremental() %}\r\nAND _partition_by_block_id >= (\r\n    SELECT\r\n        MAX(_partition_by_block_id) \r\n    FROM\r\n        {{ this }}\r\n)\r\n{% endif %}\r\n),\r\naxelar_txs_final AS (\r\n    SELECT\r\n        block_id,\r\n        block_timestamp,\r\n        t.blockchain,\r\n        chain_id,\r\n        r.tx_id,\r\n        tx_succeeded,\r\n        'AXELAR' AS transfer_type,\r\n        r.msg_index,\r\n        sender,\r\n        amount,\r\n        currency,\r\n        COALESCE(\r\n            l.raw_metadata [1] :exponent,\r\n            6\r\n        ) AS DECIMAL,\r\n        receiver,\r\n        _partition_by_block_id,\r\n        concat_ws(\r\n            '-',\r\n            r.tx_id,\r\n            r.msg_index,\r\n            currency\r\n        ) AS _unique_key\r\n    FROM\r\n        receiver r\r\n        LEFT OUTER JOIN amount C\r\n        ON r.tx_id = C.tx_id\r\n        AND r.msg_index = C.msg_index\r\n        LEFT OUTER JOIN sender s\r\n        ON r.tx_id = s.tx_id\r\n        LEFT OUTER JOIN {{ ref('silver__transactions') }}\r\n        t\r\n        ON r.tx_id = t.tx_id\r\n        LEFT OUTER JOIN {{ ref('core__dim_labels') }}\r\n        l\r\n        ON currency = l.address\r\n\r\n{% if is_incremental() %}\r\nAND _partition_by_block_id >= (\r\n    SELECT\r\n        MAX(_partition_by_block_id) \r\n    FROM\r\n        {{ this }}\r\n)\r\n{% endif %}\r\n),\r\nibc_in_tx AS (\r\n    SELECT\r\n        block_id,\r\n        block_timestamp,\r\n        blockchain,\r\n        chain_id,\r\n        tx_id,\r\n        tx_succeeded,\r\n        msg_index,\r\n        'IBC_TRANSFER_IN' AS transfer_type,\r\n        TRY_PARSE_JSON(attribute_value) :sender :: STRING AS sender,\r\n        TRY_PARSE_JSON(attribute_value) :amount :: INT AS amount,\r\n        CASE\r\n            WHEN TRY_PARSE_JSON(attribute_value) :denom :: STRING LIKE '%/%' THEN SPLIT(TRY_PARSE_JSON(attribute_value) :denom :: STRING, '/') [array_size(split(try_parse_json(attribute_value):denom::string, '/')) - 1]\r\n            ELSE TRY_PARSE_JSON(attribute_value) :denom :: STRING\r\n        END AS currency,\r\n        TRY_PARSE_JSON(attribute_value) :receiver :: STRING AS receiver,\r\n        _partition_by_block_id,\r\n        concat_ws(\r\n            '-',\r\n            tx_id,\r\n            msg_index,\r\n            currency\r\n        ) AS _unique_key\r\n    FROM\r\n        {{ ref('silver__msg_attributes') }}\r\n    WHERE\r\n        msg_type = 'write_acknowledgement'\r\n        AND attribute_key = 'packet_data'\r\n        AND TRY_PARSE_JSON(attribute_value): amount IS NOT NULL\r\n\r\n{% if is_incremental() %}\r\nAND _partition_by_block_id >= (\r\n    SELECT\r\n        MAX(_partition_by_block_id) \r\n    FROM\r\n        {{ this }}\r\n)\r\n{% endif %}\r\n),\r\nibc_out_txid AS (\r\n    SELECT\r\n        tx_id\r\n    FROM\r\n        {{ ref('silver__msg_attributes') }}\r\n    WHERE\r\n        msg_type = 'ibc_transfer'\r\n\r\n{% if is_incremental() %}\r\nAND _partition_by_block_id >= (\r\n    SELECT\r\n        MAX(_partition_by_block_id) \r\n    FROM\r\n        {{ this }}\r\n)\r\n{% endif %}\r\n),\r\nibc_out_tx AS (\r\n    SELECT\r\n        block_id,\r\n        block_timestamp,\r\n        blockchain,\r\n        chain_id,\r\n        tx_id,\r\n        tx_succeeded,\r\n        msg_index,\r\n        'IBC_TRANSFER_OUT' AS transfer_type,\r\n        TRY_PARSE_JSON(attribute_value) :sender :: STRING AS sender,\r\n        TRY_PARSE_JSON(attribute_value) :amount :: INT AS amount,\r\n        CASE\r\n            WHEN TRY_PARSE_JSON(attribute_value) :denom :: STRING LIKE '%/%' THEN SPLIT(TRY_PARSE_JSON(attribute_value) :denom :: STRING, '/') [array_size(split(try_parse_json(attribute_value):denom::string, '/')) - 1]\r\n            ELSE TRY_PARSE_JSON(attribute_value) :denom :: STRING\r\n        END AS currency,\r\n        TRY_PARSE_JSON(attribute_value) :receiver :: STRING AS receiver,\r\n        _partition_by_block_id,\r\n        concat_ws(\r\n            '-',\r\n            tx_id,\r\n            msg_index,\r\n            currency\r\n        ) AS _unique_key\r\n    FROM\r\n        {{ ref('silver__msg_attributes') }}\r\n    WHERE\r\n        tx_id IN (\r\n            SELECT\r\n                tx_id\r\n            FROM\r\n                ibc_out_txid\r\n        )\r\n        AND msg_type = 'send_packet'\r\n        AND attribute_key = 'packet_data'\r\n\r\n{% if is_incremental() %}\r\nAND _partition_by_block_id >= (\r\n    SELECT\r\n        MAX(_partition_by_block_id) \r\n    FROM\r\n        {{ this }}\r\n)\r\n{% endif %}\r\n),\r\ndecimals AS (\r\n    SELECT\r\n        *,\r\n        COALESCE (\r\n            raw_metadata [0] :aliases [0] :: STRING,\r\n            raw_metadata [1] :denom\r\n        ) AS denom_name,\r\n        CASE\r\n            WHEN raw_metadata [0] :account_address IS NOT NULL THEN NULL\r\n            ELSE COALESCE(\r\n                raw_metadata [1] :exponent :: INT,\r\n                6\r\n            )\r\n        END AS DECIMAL\r\n    FROM\r\n        {{ ref('core__dim_labels') }}\r\n),\r\nibc_transfers_agg AS (\r\n    SELECT\r\n        *\r\n    FROM\r\n        ibc_out_tx\r\n    UNION ALL\r\n    SELECT\r\n        *\r\n    FROM\r\n        ibc_in_tx\r\n),\r\nibc_tx_final AS (\r\n    SELECT\r\n        i.block_id,\r\n        i.block_timestamp,\r\n        i.blockchain,\r\n        i.chain_id,\r\n        i.tx_id,\r\n        i.tx_succeeded,\r\n        i.transfer_type,\r\n        i.sender,\r\n        i.amount,\r\n        i.currency,\r\n        CASE\r\n            WHEN i.currency IN (\r\n                'uusd',\r\n                'uosmo'\r\n            ) THEN 6\r\n            WHEN i.currency LIKE '%-wei' THEN 18\r\n            ELSE d.decimal\r\n        END AS DECIMAL,\r\n        i.receiver,\r\n        msg_index,\r\n        _partition_by_block_id,\r\n        _unique_key\r\n    FROM\r\n        ibc_transfers_agg i\r\n        LEFT JOIN decimals d\r\n        ON i.currency = d.denom_name\r\n)\r\nSELECT\r\n    block_id,\r\n    block_timestamp,\r\n    blockchain,\r\n    chain_id,\r\n    tx_id,\r\n    tx_succeeded,\r\n    transfer_type,\r\n    sender,\r\n    amount,\r\n    currency,\r\n    DECIMAL,\r\n    receiver,\r\n    msg_index,\r\n    _partition_by_block_id,\r\n    _unique_key\r\nFROM\r\n    ibc_tx_final\r\nUNION ALL\r\nSELECT\r\n    block_id,\r\n    block_timestamp,\r\n    blockchain,\r\n    chain_id,\r\n    tx_id,\r\n    tx_succeeded,\r\n    transfer_type,\r\n    sender,\r\n    amount,\r\n    currency,\r\n    DECIMAL,\r\n    receiver,\r\n    msg_index,\r\n    _partition_by_block_id,\r\n    _unique_key\r\nFROM\r\n    axelar_txs_final", "compiled": true, "resource_type": "model", "depends_on": {"macros": ["macro.dbt.is_incremental"], "nodes": ["model.axelar.silver__msg_attributes", "model.axelar.silver__msg_attributes", "model.axelar.silver__msg_attributes", "model.axelar.silver__msg_attributes", "model.axelar.silver__msg_attributes", "model.axelar.silver__transactions", "model.axelar.core__dim_labels", "model.axelar.silver__msg_attributes", "model.axelar.silver__msg_attributes", "model.axelar.silver__msg_attributes", "model.axelar.core__dim_labels"]}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {}, "materialized": "incremental", "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": "_unique_key", "on_schema_change": "sync_all_columns", "grants": {}, "copy_grants": true, "cluster_by": "block_timestamp::DATE", "incremental_strategy": "delete+insert", "post-hook": [], "pre-hook": []}, "database": "AXELAR_DEV", "schema": "silver", "fqn": ["axelar", "silver", "silver__transfers"], "unique_id": "model.axelar.silver__transfers", "package_name": "axelar", "root_path": "C:\\Users\\jessi\\git\\axelar-models", "path": "silver\\silver__transfers.sql", "original_file_path": "models\\silver\\silver__transfers.sql", "name": "silver__transfers", "alias": "transfers", "checksum": {"name": "sha256", "checksum": "5d1907d78d2648d1701d587fa8eee15b6e99582dfccdf3be2712d87ba6ce9d47"}, "tags": [], "refs": [["silver__msg_attributes"], ["silver__msg_attributes"], ["silver__msg_attributes"], ["silver__msg_attributes"], ["silver__msg_attributes"], ["silver__transactions"], ["core__dim_labels"], ["silver__msg_attributes"], ["silver__msg_attributes"], ["silver__msg_attributes"], ["core__dim_labels"]], "sources": [], "metrics": [], "description": "Records of all transfers on Axelar, including IBC transfers as on- and off-ramps to Axelar and wallet to wallet transfers", "columns": {"BLOCK_ID": {"name": "BLOCK_ID", "description": "The block height the block was recorded at.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "BLOCK_TIMESTAMP": {"name": "BLOCK_TIMESTAMP", "description": "The date and time at which the block began.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "BLOCKCHAIN": {"name": "BLOCKCHAIN", "description": "In this table, always Axelar. Used to join to cross-chain tables.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "CHAIN_ID": {"name": "CHAIN_ID", "description": "The name and version of the blockchain.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "TX_ID": {"name": "TX_ID", "description": "A unique key that identifies a transaction. Called \"TxHash\" on block explorers.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "TX_SUCCEEDED": {"name": "TX_SUCCEEDED", "description": "Transaction status is \"TRUE\" if the transaction went through, \"FALSE\" if the transaction failed.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "TRANSFER_TYPE": {"name": "TRANSFER_TYPE", "description": "Details on the type of transfer occurring during the transaction. \"Transfer_In\" = depositing tokens onto Axelar. \"Transfer_out\" = withdrawing tokens from Axelar. \"Axelar\" = wallet to wallet transfer on Axelar.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "SENDER": {"name": "SENDER", "description": "The wallet address of the individual sent tokens in the transfer.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "AMOUNT": {"name": "AMOUNT", "description": "The amount that was used in the transaction message.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "CURRENCY": {"name": "CURRENCY", "description": "The currency that was used in the transaction message.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "DECIMAL": {"name": "DECIMAL", "description": "Divide the raw amount of currency as provided in the amount column by the decimal to get the actual amount in AXL or other currency.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "RECEIVER": {"name": "RECEIVER", "description": "The wallet address of the individual received tokens in the transfer.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "_PARTITION_BY_BLOCK_ID": {"name": "_PARTITION_BY_BLOCK_ID", "description": "An internal column allowing incremental logic to be used in the code.", "meta": {}, "data_type": null, "quote": null, "tags": []}}, "meta": {}, "docs": {"show": true}, "patch_path": "axelar://models\\silver\\silver__transfers.yml", "compiled_path": "target\\compiled\\axelar\\models\\silver\\silver__transfers.sql", "build_path": null, "deferred": false, "unrendered_config": {"copy_grants": true, "on_schema_change": "sync_all_columns", "materialized": "incremental", "unique_key": "_unique_key", "incremental_strategy": "delete+insert", "cluster_by": "block_timestamp::DATE"}, "created_at": 1671050800.0677571, "compiled_sql": "\n\nWITH axelar_txs AS (\n\n    SELECT\n        DISTINCT tx_id\n    FROM\n        AXELAR_DEV.silver.msg_attributes\n    WHERE\n        attribute_value IN (\n            '/cosmos.bank.v1beta1.MsgSend',\n            '/cosmos.bank.v1beta1.MsgMultiSend'\n        )\n\n\nAND _partition_by_block_id >= (\n    SELECT\n        MAX(_partition_by_block_id)\n    FROM\n        AXELAR_DEV.silver.transfers\n)\n\n),\nsender AS (\n    SELECT\n        tx_id,\n        msg_index,\n        SPLIT_PART(\n            attribute_value,\n            '/',\n            0\n        ) AS sender\n    FROM\n        AXELAR_DEV.silver.msg_attributes\n    WHERE\n        msg_type = 'tx'\n        AND attribute_key = 'acc_seq'\n\n\nAND _partition_by_block_id >= (\n    SELECT\n        MAX(_partition_by_block_id)\n    FROM\n        AXELAR_DEV.silver.transfers\n)\n\n),\nmsg_index AS (\n    SELECT\n        v.tx_id,\n        attribute_key,\n        m.msg_index\n    FROM\n        axelar_txs v\n        LEFT OUTER JOIN AXELAR_DEV.silver.msg_attributes\n        m\n        ON v.tx_id = m.tx_id\n        INNER JOIN sender s\n        ON v.tx_id = s.tx_id\n    WHERE\n        msg_type = 'transfer'\n        AND attribute_key = 'amount'\n        AND m.msg_index > s.msg_index\n\n\nAND _partition_by_block_id >= (\n    SELECT\n        MAX(_partition_by_block_id)\n    FROM\n        AXELAR_DEV.silver.transfers\n)\n\n),\nreceiver AS (\n    SELECT\n        v.tx_id,\n        m.msg_index,\n        attribute_value AS receiver\n    FROM\n        axelar_txs v\n        LEFT OUTER JOIN AXELAR_DEV.silver.msg_attributes\n        m\n        ON v.tx_id = m.tx_id\n        INNER JOIN sender s\n        ON v.tx_id = s.tx_id\n    WHERE\n        msg_type = 'transfer'\n        AND attribute_key = 'recipient'\n        AND m.msg_index > s.msg_index\n\n\nAND _partition_by_block_id >= (\n    SELECT\n        MAX(_partition_by_block_id) \n    FROM\n        AXELAR_DEV.silver.transfers\n)\n\n),\namount AS (\n    SELECT\n        v.tx_id,\n        m.msg_index,\n        COALESCE(\n            SPLIT_PART(\n                TRIM(\n                    REGEXP_REPLACE(\n                        attribute_value,\n                        '[^[:digit:]]',\n                        ' '\n                    )\n                ),\n                ' ',\n                0\n            ),\n            TRY_PARSE_JSON(attribute_value) :amount\n        ) AS amount,\n        COALESCE(\n            RIGHT(attribute_value, LENGTH(attribute_value) - LENGTH(SPLIT_PART(TRIM(REGEXP_REPLACE(attribute_value, '[^[:digit:]]', ' ')), ' ', 0))),\n            TRY_PARSE_JSON(attribute_value) [1] :denom\n        ) AS currency\n    FROM\n        axelar_txs v\n        LEFT OUTER JOIN AXELAR_DEV.silver.msg_attributes\n        m\n        ON v.tx_id = m.tx_id\n        INNER JOIN sender s\n        ON v.tx_id = s.tx_id\n    WHERE\n        msg_type = 'transfer'\n        AND attribute_key = 'amount'\n        AND m.msg_index > s.msg_index\n\n\nAND _partition_by_block_id >= (\n    SELECT\n        MAX(_partition_by_block_id) \n    FROM\n        AXELAR_DEV.silver.transfers\n)\n\n),\naxelar_txs_final AS (\n    SELECT\n        block_id,\n        block_timestamp,\n        t.blockchain,\n        chain_id,\n        r.tx_id,\n        tx_succeeded,\n        'AXELAR' AS transfer_type,\n        r.msg_index,\n        sender,\n        amount,\n        currency,\n        COALESCE(\n            l.raw_metadata [1] :exponent,\n            6\n        ) AS DECIMAL,\n        receiver,\n        _partition_by_block_id,\n        concat_ws(\n            '-',\n            r.tx_id,\n            r.msg_index,\n            currency\n        ) AS _unique_key\n    FROM\n        receiver r\n        LEFT OUTER JOIN amount C\n        ON r.tx_id = C.tx_id\n        AND r.msg_index = C.msg_index\n        LEFT OUTER JOIN sender s\n        ON r.tx_id = s.tx_id\n        LEFT OUTER JOIN AXELAR_DEV.silver.transactions\n        t\n        ON r.tx_id = t.tx_id\n        LEFT OUTER JOIN AXELAR_DEV.core.dim_labels\n        l\n        ON currency = l.address\n\n\nAND _partition_by_block_id >= (\n    SELECT\n        MAX(_partition_by_block_id) \n    FROM\n        AXELAR_DEV.silver.transfers\n)\n\n),\nibc_in_tx AS (\n    SELECT\n        block_id,\n        block_timestamp,\n        blockchain,\n        chain_id,\n        tx_id,\n        tx_succeeded,\n        msg_index,\n        'IBC_TRANSFER_IN' AS transfer_type,\n        TRY_PARSE_JSON(attribute_value) :sender :: STRING AS sender,\n        TRY_PARSE_JSON(attribute_value) :amount :: INT AS amount,\n        CASE\n            WHEN TRY_PARSE_JSON(attribute_value) :denom :: STRING LIKE '%/%' THEN SPLIT(TRY_PARSE_JSON(attribute_value) :denom :: STRING, '/') [array_size(split(try_parse_json(attribute_value):denom::string, '/')) - 1]\n            ELSE TRY_PARSE_JSON(attribute_value) :denom :: STRING\n        END AS currency,\n        TRY_PARSE_JSON(attribute_value) :receiver :: STRING AS receiver,\n        _partition_by_block_id,\n        concat_ws(\n            '-',\n            tx_id,\n            msg_index,\n            currency\n        ) AS _unique_key\n    FROM\n        AXELAR_DEV.silver.msg_attributes\n    WHERE\n        msg_type = 'write_acknowledgement'\n        AND attribute_key = 'packet_data'\n        AND TRY_PARSE_JSON(attribute_value): amount IS NOT NULL\n\n\nAND _partition_by_block_id >= (\n    SELECT\n        MAX(_partition_by_block_id) \n    FROM\n        AXELAR_DEV.silver.transfers\n)\n\n),\nibc_out_txid AS (\n    SELECT\n        tx_id\n    FROM\n        AXELAR_DEV.silver.msg_attributes\n    WHERE\n        msg_type = 'ibc_transfer'\n\n\nAND _partition_by_block_id >= (\n    SELECT\n        MAX(_partition_by_block_id) \n    FROM\n        AXELAR_DEV.silver.transfers\n)\n\n),\nibc_out_tx AS (\n    SELECT\n        block_id,\n        block_timestamp,\n        blockchain,\n        chain_id,\n        tx_id,\n        tx_succeeded,\n        msg_index,\n        'IBC_TRANSFER_OUT' AS transfer_type,\n        TRY_PARSE_JSON(attribute_value) :sender :: STRING AS sender,\n        TRY_PARSE_JSON(attribute_value) :amount :: INT AS amount,\n        CASE\n            WHEN TRY_PARSE_JSON(attribute_value) :denom :: STRING LIKE '%/%' THEN SPLIT(TRY_PARSE_JSON(attribute_value) :denom :: STRING, '/') [array_size(split(try_parse_json(attribute_value):denom::string, '/')) - 1]\n            ELSE TRY_PARSE_JSON(attribute_value) :denom :: STRING\n        END AS currency,\n        TRY_PARSE_JSON(attribute_value) :receiver :: STRING AS receiver,\n        _partition_by_block_id,\n        concat_ws(\n            '-',\n            tx_id,\n            msg_index,\n            currency\n        ) AS _unique_key\n    FROM\n        AXELAR_DEV.silver.msg_attributes\n    WHERE\n        tx_id IN (\n            SELECT\n                tx_id\n            FROM\n                ibc_out_txid\n        )\n        AND msg_type = 'send_packet'\n        AND attribute_key = 'packet_data'\n\n\nAND _partition_by_block_id >= (\n    SELECT\n        MAX(_partition_by_block_id) \n    FROM\n        AXELAR_DEV.silver.transfers\n)\n\n),\ndecimals AS (\n    SELECT\n        *,\n        COALESCE (\n            raw_metadata [0] :aliases [0] :: STRING,\n            raw_metadata [1] :denom\n        ) AS denom_name,\n        CASE\n            WHEN raw_metadata [0] :account_address IS NOT NULL THEN NULL\n            ELSE COALESCE(\n                raw_metadata [1] :exponent :: INT,\n                6\n            )\n        END AS DECIMAL\n    FROM\n        AXELAR_DEV.core.dim_labels\n),\nibc_transfers_agg AS (\n    SELECT\n        *\n    FROM\n        ibc_out_tx\n    UNION ALL\n    SELECT\n        *\n    FROM\n        ibc_in_tx\n),\nibc_tx_final AS (\n    SELECT\n        i.block_id,\n        i.block_timestamp,\n        i.blockchain,\n        i.chain_id,\n        i.tx_id,\n        i.tx_succeeded,\n        i.transfer_type,\n        i.sender,\n        i.amount,\n        i.currency,\n        CASE\n            WHEN i.currency IN (\n                'uusd',\n                'uosmo'\n            ) THEN 6\n            WHEN i.currency LIKE '%-wei' THEN 18\n            ELSE d.decimal\n        END AS DECIMAL,\n        i.receiver,\n        msg_index,\n        _partition_by_block_id,\n        _unique_key\n    FROM\n        ibc_transfers_agg i\n        LEFT JOIN decimals d\n        ON i.currency = d.denom_name\n)\nSELECT\n    block_id,\n    block_timestamp,\n    blockchain,\n    chain_id,\n    tx_id,\n    tx_succeeded,\n    transfer_type,\n    sender,\n    amount,\n    currency,\n    DECIMAL,\n    receiver,\n    msg_index,\n    _partition_by_block_id,\n    _unique_key\nFROM\n    ibc_tx_final\nUNION ALL\nSELECT\n    block_id,\n    block_timestamp,\n    blockchain,\n    chain_id,\n    tx_id,\n    tx_succeeded,\n    transfer_type,\n    sender,\n    amount,\n    currency,\n    DECIMAL,\n    receiver,\n    msg_index,\n    _partition_by_block_id,\n    _unique_key\nFROM\n    axelar_txs_final", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "AXELAR_DEV.silver.transfers"}, "model.axelar.streamline__blocks_history": {"raw_sql": "{{ config(\r\n    materialized = 'view'\r\n) }}\r\n\r\nSELECT DISTINCT\r\n    block_number AS block_id\r\nFROM \r\n     {{ source(\r\n    'bronze_streamline',\r\n    'blocks'\r\n  ) }} \r\nWHERE value:data:error IS NULL", "compiled": true, "resource_type": "model", "depends_on": {"macros": [], "nodes": ["source.axelar.bronze_streamline.blocks"]}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {}, "materialized": "view", "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "sync_all_columns", "grants": {}, "copy_grants": true, "post-hook": [], "pre-hook": []}, "database": "AXELAR_DEV", "schema": "streamline", "fqn": ["axelar", "streamline", "streamline__blocks_history"], "unique_id": "model.axelar.streamline__blocks_history", "package_name": "axelar", "root_path": "C:\\Users\\jessi\\git\\axelar-models", "path": "streamline\\streamline__blocks_history.sql", "original_file_path": "models\\streamline\\streamline__blocks_history.sql", "name": "streamline__blocks_history", "alias": "blocks_history", "checksum": {"name": "sha256", "checksum": "b0e5fcdc71e2d02102635e719f6e83802389cd0a962eb806e529d048629964f5"}, "tags": [], "refs": [], "sources": [["bronze_streamline", "blocks"]], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target\\compiled\\axelar\\models\\streamline\\streamline__blocks_history.sql", "build_path": null, "deferred": false, "unrendered_config": {"copy_grants": true, "on_schema_change": "sync_all_columns", "materialized": "view"}, "created_at": 1671050799.2430184, "compiled_sql": "\n\nSELECT DISTINCT\n    block_number AS block_id\nFROM \n     streamline.AXELAR_DEV.blocks \nWHERE value:data:error IS NULL", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "AXELAR_DEV.streamline.blocks_history"}, "model.axelar.streamline__blocks_realtime": {"raw_sql": "{{ config (\r\n    materialized = \"view\",\r\n    post_hook = if_data_call_function(\r\n        func = \"{{this.schema}}.udf_bulk_get_blocks(object_construct('sql_source', '{{this.identifier}}'))\",\r\n        target = \"{{this.schema}}.{{this.identifier}}\"\r\n    )\r\n) }}\r\n\r\n{% if execute %}\r\n    {% set height = run_query('SELECT streamline.udf_get_chainhead()') %}\r\n    {% set block_height = height.columns [0].values() [0] %}\r\n{% else %}\r\n    {% set block_height = 0 %}\r\n{% endif %}\r\n\r\nSELECT\r\n    height AS block_number\r\nFROM\r\n    TABLE(streamline.udtf_get_base_table({{ block_height }}))\r\nEXCEPT\r\nSELECT\r\n    block_id\r\nFROM\r\n    {{ ref(\r\n        \"streamline__blocks_history\"\r\n    ) }}\r\nORDER BY\r\n    1 ASC", "compiled": true, "resource_type": "model", "depends_on": {"macros": ["macro.axelar.if_data_call_function", "macro.dbt.run_query"], "nodes": ["model.axelar.streamline__blocks_history"]}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {}, "materialized": "view", "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "sync_all_columns", "grants": {}, "copy_grants": true, "post-hook": [{"sql": "\n    \n        \n    SELECT\n        {{this.schema}}.udf_bulk_get_blocks(object_construct('sql_source', '{{this.identifier}}'))\n    WHERE\n        EXISTS(\n            SELECT\n                1\n            FROM\n                {{this.schema}}.{{this.identifier}}\n            LIMIT\n                1\n        )\n    \n", "transaction": true, "index": null}], "pre-hook": []}, "database": "AXELAR_DEV", "schema": "streamline", "fqn": ["axelar", "streamline", "streamline__blocks_realtime"], "unique_id": "model.axelar.streamline__blocks_realtime", "package_name": "axelar", "root_path": "C:\\Users\\jessi\\git\\axelar-models", "path": "streamline\\streamline__blocks_realtime.sql", "original_file_path": "models\\streamline\\streamline__blocks_realtime.sql", "name": "streamline__blocks_realtime", "alias": "blocks_realtime", "checksum": {"name": "sha256", "checksum": "e085a7dbf59808cc22a10d194fce35bae177f2de504d4159e40d6d32501e13af"}, "tags": [], "refs": [["streamline__blocks_history"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target\\compiled\\axelar\\models\\streamline\\streamline__blocks_realtime.sql", "build_path": null, "deferred": false, "unrendered_config": {"copy_grants": true, "on_schema_change": "sync_all_columns", "materialized": "view", "post-hook": ["\n    \n        \n    SELECT\n        {{this.schema}}.udf_bulk_get_blocks(object_construct('sql_source', '{{this.identifier}}'))\n    WHERE\n        EXISTS(\n            SELECT\n                1\n            FROM\n                {{this.schema}}.{{this.identifier}}\n            LIMIT\n                1\n        )\n    \n"]}, "created_at": 1671050799.246766, "compiled_sql": "\n\n\n    \n    \n\n\nSELECT\n    height AS block_number\nFROM\n    TABLE(streamline.udtf_get_base_table(5199032))\nEXCEPT\nSELECT\n    block_id\nFROM\n    AXELAR_DEV.streamline.blocks_history\nORDER BY\n    1 ASC", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "AXELAR_DEV.streamline.blocks_realtime"}, "model.axelar.streamline__txs_history": {"raw_sql": "{{ config(\r\n    materialized = 'view'\r\n) }}\r\n\r\nSELECT DISTINCT\r\n    block_number AS block_id\r\nFROM \r\n     {{ source(\r\n    'bronze_streamline',\r\n    'txs_details'\r\n  ) }}", "compiled": true, "resource_type": "model", "depends_on": {"macros": [], "nodes": ["source.axelar.bronze_streamline.txs_details"]}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {}, "materialized": "view", "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "sync_all_columns", "grants": {}, "copy_grants": true, "post-hook": [], "pre-hook": []}, "database": "AXELAR_DEV", "schema": "streamline", "fqn": ["axelar", "streamline", "streamline__txs_history"], "unique_id": "model.axelar.streamline__txs_history", "package_name": "axelar", "root_path": "C:\\Users\\jessi\\git\\axelar-models", "path": "streamline\\streamline__txs_history.sql", "original_file_path": "models\\streamline\\streamline__txs_history.sql", "name": "streamline__txs_history", "alias": "txs_history", "checksum": {"name": "sha256", "checksum": "833475c39a6a0b14ee999d316c13b2de9e4f245be9a318cbb0e24a33d58f5469"}, "tags": [], "refs": [], "sources": [["bronze_streamline", "txs_details"]], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target\\compiled\\axelar\\models\\streamline\\streamline__txs_history.sql", "build_path": null, "deferred": false, "unrendered_config": {"copy_grants": true, "on_schema_change": "sync_all_columns", "materialized": "view"}, "created_at": 1671050799.2598243, "compiled_sql": "\n\nSELECT DISTINCT\n    block_number AS block_id\nFROM \n     streamline.AXELAR_DEV.txs_details", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "AXELAR_DEV.streamline.txs_history"}, "model.axelar.streamline__txs_realtime": {"raw_sql": "{{ config (\r\n    materialized = \"view\",\r\n    post_hook = if_data_call_function(\r\n        func = \"{{this.schema}}.udf_bulk_get_txs(object_construct('sql_source', '{{this.identifier}}'))\",\r\n        target = \"{{this.schema}}.{{this.identifier}}\"\r\n    )\r\n) }}\r\n\r\nSELECT\r\n    block_number,\r\n    ARRAY_SIZE(\r\n        DATA :result :block :data :txs\r\n    ) AS tx_count\r\nFROM\r\n    {{ source(\r\n        'bronze',\r\n        'blocks'\r\n    ) }}\r\nWHERE\r\n    tx_count IS NOT NULL\r\n    AND tx_count > 0\r\n    AND block_number NOT IN (\r\n        SELECT\r\n            block_id\r\n        FROM\r\n            {{ ref(\r\n                \"streamline__txs_history\"\r\n            ) }}\r\n        GROUP BY\r\n            1\r\n    )\r\nORDER BY\r\n    1 ASC", "compiled": true, "resource_type": "model", "depends_on": {"macros": ["macro.axelar.if_data_call_function"], "nodes": ["source.axelar.bronze.blocks", "model.axelar.streamline__txs_history"]}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {}, "materialized": "view", "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "sync_all_columns", "grants": {}, "copy_grants": true, "post-hook": [{"sql": "\n    \n        \n    SELECT\n        {{this.schema}}.udf_bulk_get_txs(object_construct('sql_source', '{{this.identifier}}'))\n    WHERE\n        EXISTS(\n            SELECT\n                1\n            FROM\n                {{this.schema}}.{{this.identifier}}\n            LIMIT\n                1\n        )\n    \n", "transaction": true, "index": null}], "pre-hook": []}, "database": "AXELAR_DEV", "schema": "streamline", "fqn": ["axelar", "streamline", "streamline__txs_realtime"], "unique_id": "model.axelar.streamline__txs_realtime", "package_name": "axelar", "root_path": "C:\\Users\\jessi\\git\\axelar-models", "path": "streamline\\streamline__txs_realtime.sql", "original_file_path": "models\\streamline\\streamline__txs_realtime.sql", "name": "streamline__txs_realtime", "alias": "txs_realtime", "checksum": {"name": "sha256", "checksum": "afeef1f072b78862cd38b019f6a79ed6bcb1ff2b7cb41080d711ccd408445d02"}, "tags": [], "refs": [["streamline__txs_history"]], "sources": [["bronze", "blocks"]], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target\\compiled\\axelar\\models\\streamline\\streamline__txs_realtime.sql", "build_path": null, "deferred": false, "unrendered_config": {"copy_grants": true, "on_schema_change": "sync_all_columns", "materialized": "view", "post-hook": ["\n    \n        \n    SELECT\n        {{this.schema}}.udf_bulk_get_txs(object_construct('sql_source', '{{this.identifier}}'))\n    WHERE\n        EXISTS(\n            SELECT\n                1\n            FROM\n                {{this.schema}}.{{this.identifier}}\n            LIMIT\n                1\n        )\n    \n"]}, "created_at": 1671050799.2625694, "compiled_sql": "\n\nSELECT\n    block_number,\n    ARRAY_SIZE(\n        DATA :result :block :data :txs\n    ) AS tx_count\nFROM\n    streamline.axelar_dev.blocks\nWHERE\n    tx_count IS NOT NULL\n    AND tx_count > 0\n    AND block_number NOT IN (\n        SELECT\n            block_id\n        FROM\n            AXELAR_DEV.streamline.txs_history\n        GROUP BY\n            1\n    )\nORDER BY\n    1 ASC", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "AXELAR_DEV.streamline.txs_realtime"}, "operation.axelar.axelar-on-run-start-0": {"raw_sql": "{{ create_udfs() }}", "compiled": true, "resource_type": "operation", "depends_on": {"macros": ["macro.axelar.create_udfs"], "nodes": []}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {}, "materialized": "view", "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "sync_all_columns", "grants": {}, "copy_grants": true, "post-hook": [], "pre-hook": []}, "database": "AXELAR_DEV", "schema": "axelar-on-run-start-0", "fqn": ["axelar", "hooks", "axelar-on-run-start-0"], "unique_id": "operation.axelar.axelar-on-run-start-0", "package_name": "axelar", "root_path": "C:\\Users\\jessi\\git\\axelar-models", "path": "hooks\\axelar-on-run-start-0.sql", "original_file_path": ".\\dbt_project.yml", "name": "axelar-on-run-start-0", "alias": "", "checksum": {"name": "sha256", "checksum": "d35a8e1bbb8c8dae1e7e692d1df761ae9f120eb699568d6ee3f705df8f2c3ed1"}, "tags": ["on-run-start"], "refs": [], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target\\compiled\\axelar\\.\\dbt_project.yml\\hooks\\axelar-on-run-start-0.sql", "build_path": null, "deferred": false, "unrendered_config": {"copy_grants": true, "on_schema_change": "sync_all_columns"}, "created_at": 1671050799.2816243, "compiled_sql": "\n    \n    \n    \n    \n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "index": 0}, "test.axelar.dbt_expectations_expect_column_to_exist_core__dim_tokens_ADDRESS.adf98dac75": {"raw_sql": "{{ dbt_expectations.test_expect_column_to_exist(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_expectations_expect_column_a26b7d51b3275912e7c5eb9a35f500bc\") }}", "test_metadata": {"name": "expect_column_to_exist", "kwargs": {"column_name": "ADDRESS", "model": "{{ get_where_subquery(ref('core__dim_tokens')) }}"}, "namespace": "dbt_expectations"}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt_expectations.test_expect_column_to_exist", "macro.dbt.get_where_subquery"], "nodes": ["model.axelar.core__dim_tokens"]}, "config": {"enabled": true, "alias": "dbt_expectations_expect_column_a26b7d51b3275912e7c5eb9a35f500bc", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": true, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "AXELAR_DEV", "schema": "dbt_expectations_expect_column_to_exist_core", "fqn": ["axelar", "gold", "dbt_expectations_expect_column_to_exist_core__dim_tokens_ADDRESS"], "unique_id": "test.axelar.dbt_expectations_expect_column_to_exist_core__dim_tokens_ADDRESS.adf98dac75", "package_name": "axelar", "root_path": "C:\\Users\\jessi\\git\\axelar-models", "path": "dbt_expectations_expect_column_a26b7d51b3275912e7c5eb9a35f500bc.sql", "original_file_path": "models\\gold\\core__dim_tokens.yml", "name": "dbt_expectations_expect_column_to_exist_core__dim_tokens_ADDRESS", "alias": "dim_tokens_ADDRESS", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["core__dim_tokens"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target\\compiled\\axelar\\models\\gold\\core__dim_tokens.yml\\dbt_expectations_expect_column_a26b7d51b3275912e7c5eb9a35f500bc.sql", "build_path": null, "deferred": false, "unrendered_config": {"store_failures": true, "alias": "dbt_expectations_expect_column_a26b7d51b3275912e7c5eb9a35f500bc"}, "created_at": 1671050799.430542, "compiled_sql": "\n\n    with test_data as (\n\n        select\n            cast('ADDRESS' as TEXT) as column_name,\n            1 as matching_column_index,\n            True as column_index_matches\n\n    )\n    select *\n    from test_data\n    where\n        not(matching_column_index >= 0 and column_index_matches)", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "AXELAR_DEV.dbt_expectations_expect_column_to_exist_core.dim_tokens_ADDRESS", "column_name": "ADDRESS", "file_key_name": "models.core__dim_tokens"}, "test.axelar.dbt_expectations_expect_column_to_exist_core__dim_tokens_BLOCKCHAIN.5d98f45895": {"raw_sql": "{{ dbt_expectations.test_expect_column_to_exist(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_expectations_expect_column_122fe64c6f773ceab4bea0e28f09259d\") }}", "test_metadata": {"name": "expect_column_to_exist", "kwargs": {"column_name": "BLOCKCHAIN", "model": "{{ get_where_subquery(ref('core__dim_tokens')) }}"}, "namespace": "dbt_expectations"}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt_expectations.test_expect_column_to_exist", "macro.dbt.get_where_subquery"], "nodes": ["model.axelar.core__dim_tokens"]}, "config": {"enabled": true, "alias": "dbt_expectations_expect_column_122fe64c6f773ceab4bea0e28f09259d", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": true, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "AXELAR_DEV", "schema": "dbt_expectations_expect_column_to_exist_core", "fqn": ["axelar", "gold", "dbt_expectations_expect_column_to_exist_core__dim_tokens_BLOCKCHAIN"], "unique_id": "test.axelar.dbt_expectations_expect_column_to_exist_core__dim_tokens_BLOCKCHAIN.5d98f45895", "package_name": "axelar", "root_path": "C:\\Users\\jessi\\git\\axelar-models", "path": "dbt_expectations_expect_column_122fe64c6f773ceab4bea0e28f09259d.sql", "original_file_path": "models\\gold\\core__dim_tokens.yml", "name": "dbt_expectations_expect_column_to_exist_core__dim_tokens_BLOCKCHAIN", "alias": "dim_tokens_BLOCKCHAIN", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["core__dim_tokens"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target\\compiled\\axelar\\models\\gold\\core__dim_tokens.yml\\dbt_expectations_expect_column_122fe64c6f773ceab4bea0e28f09259d.sql", "build_path": null, "deferred": false, "unrendered_config": {"store_failures": true, "alias": "dbt_expectations_expect_column_122fe64c6f773ceab4bea0e28f09259d"}, "created_at": 1671050799.4428036, "compiled_sql": "\n\n    with test_data as (\n\n        select\n            cast('BLOCKCHAIN' as TEXT) as column_name,\n            0 as matching_column_index,\n            True as column_index_matches\n\n    )\n    select *\n    from test_data\n    where\n        not(matching_column_index >= 0 and column_index_matches)", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "AXELAR_DEV.dbt_expectations_expect_column_to_exist_core.dim_tokens_BLOCKCHAIN", "column_name": "BLOCKCHAIN", "file_key_name": "models.core__dim_tokens"}, "test.axelar.dbt_expectations_expect_column_to_exist_core__dim_tokens_CREATOR.8ee1250b60": {"raw_sql": "{{ dbt_expectations.test_expect_column_to_exist(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_expectations_expect_column_e2d54579b82b95968d0be4258fa7bc0a\") }}", "test_metadata": {"name": "expect_column_to_exist", "kwargs": {"column_name": "CREATOR", "model": "{{ get_where_subquery(ref('core__dim_tokens')) }}"}, "namespace": "dbt_expectations"}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt_expectations.test_expect_column_to_exist", "macro.dbt.get_where_subquery"], "nodes": ["model.axelar.core__dim_tokens"]}, "config": {"enabled": true, "alias": "dbt_expectations_expect_column_e2d54579b82b95968d0be4258fa7bc0a", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": true, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "AXELAR_DEV", "schema": "dbt_expectations_expect_column_to_exist_core", "fqn": ["axelar", "gold", "dbt_expectations_expect_column_to_exist_core__dim_tokens_CREATOR"], "unique_id": "test.axelar.dbt_expectations_expect_column_to_exist_core__dim_tokens_CREATOR.8ee1250b60", "package_name": "axelar", "root_path": "C:\\Users\\jessi\\git\\axelar-models", "path": "dbt_expectations_expect_column_e2d54579b82b95968d0be4258fa7bc0a.sql", "original_file_path": "models\\gold\\core__dim_tokens.yml", "name": "dbt_expectations_expect_column_to_exist_core__dim_tokens_CREATOR", "alias": "dim_tokens_CREATOR", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["core__dim_tokens"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target\\compiled\\axelar\\models\\gold\\core__dim_tokens.yml\\dbt_expectations_expect_column_e2d54579b82b95968d0be4258fa7bc0a.sql", "build_path": null, "deferred": false, "unrendered_config": {"store_failures": true, "alias": "dbt_expectations_expect_column_e2d54579b82b95968d0be4258fa7bc0a"}, "created_at": 1671050799.4509904, "compiled_sql": "\n\n    with test_data as (\n\n        select\n            cast('CREATOR' as TEXT) as column_name,\n            2 as matching_column_index,\n            True as column_index_matches\n\n    )\n    select *\n    from test_data\n    where\n        not(matching_column_index >= 0 and column_index_matches)", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "AXELAR_DEV.dbt_expectations_expect_column_to_exist_core.dim_tokens_CREATOR", "column_name": "CREATOR", "file_key_name": "models.core__dim_tokens"}, "test.axelar.dbt_expectations_expect_column_to_exist_core__dim_tokens_LABEL_TYPE.acd943c593": {"raw_sql": "{{ dbt_expectations.test_expect_column_to_exist(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_expectations_expect_column_54fc2d4c2ad0866d668732484a74e755\") }}", "test_metadata": {"name": "expect_column_to_exist", "kwargs": {"column_name": "LABEL_TYPE", "model": "{{ get_where_subquery(ref('core__dim_tokens')) }}"}, "namespace": "dbt_expectations"}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt_expectations.test_expect_column_to_exist", "macro.dbt.get_where_subquery"], "nodes": ["model.axelar.core__dim_tokens"]}, "config": {"enabled": true, "alias": "dbt_expectations_expect_column_54fc2d4c2ad0866d668732484a74e755", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": true, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "AXELAR_DEV", "schema": "dbt_expectations_expect_column_to_exist_core", "fqn": ["axelar", "gold", "dbt_expectations_expect_column_to_exist_core__dim_tokens_LABEL_TYPE"], "unique_id": "test.axelar.dbt_expectations_expect_column_to_exist_core__dim_tokens_LABEL_TYPE.acd943c593", "package_name": "axelar", "root_path": "C:\\Users\\jessi\\git\\axelar-models", "path": "dbt_expectations_expect_column_54fc2d4c2ad0866d668732484a74e755.sql", "original_file_path": "models\\gold\\core__dim_tokens.yml", "name": "dbt_expectations_expect_column_to_exist_core__dim_tokens_LABEL_TYPE", "alias": "dim_tokens_LABEL_TYPE", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["core__dim_tokens"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target\\compiled\\axelar\\models\\gold\\core__dim_tokens.yml\\dbt_expectations_expect_column_54fc2d4c2ad0866d668732484a74e755.sql", "build_path": null, "deferred": false, "unrendered_config": {"store_failures": true, "alias": "dbt_expectations_expect_column_54fc2d4c2ad0866d668732484a74e755"}, "created_at": 1671050799.4550145, "compiled_sql": "\n\n    with test_data as (\n\n        select\n            cast('LABEL_TYPE' as TEXT) as column_name,\n            3 as matching_column_index,\n            True as column_index_matches\n\n    )\n    select *\n    from test_data\n    where\n        not(matching_column_index >= 0 and column_index_matches)", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "AXELAR_DEV.dbt_expectations_expect_column_to_exist_core.dim_tokens_LABEL_TYPE", "column_name": "LABEL_TYPE", "file_key_name": "models.core__dim_tokens"}, "test.axelar.dbt_expectations_expect_column_to_exist_core__dim_tokens_LABEL_SUBTYPE.5c4b83673d": {"raw_sql": "{{ dbt_expectations.test_expect_column_to_exist(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_expectations_expect_column_897f3186ec3a24c14d5e7766b4c7c668\") }}", "test_metadata": {"name": "expect_column_to_exist", "kwargs": {"column_name": "LABEL_SUBTYPE", "model": "{{ get_where_subquery(ref('core__dim_tokens')) }}"}, "namespace": "dbt_expectations"}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt_expectations.test_expect_column_to_exist", "macro.dbt.get_where_subquery"], "nodes": ["model.axelar.core__dim_tokens"]}, "config": {"enabled": true, "alias": "dbt_expectations_expect_column_897f3186ec3a24c14d5e7766b4c7c668", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": true, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "AXELAR_DEV", "schema": "dbt_expectations_expect_column_to_exist_core", "fqn": ["axelar", "gold", "dbt_expectations_expect_column_to_exist_core__dim_tokens_LABEL_SUBTYPE"], "unique_id": "test.axelar.dbt_expectations_expect_column_to_exist_core__dim_tokens_LABEL_SUBTYPE.5c4b83673d", "package_name": "axelar", "root_path": "C:\\Users\\jessi\\git\\axelar-models", "path": "dbt_expectations_expect_column_897f3186ec3a24c14d5e7766b4c7c668.sql", "original_file_path": "models\\gold\\core__dim_tokens.yml", "name": "dbt_expectations_expect_column_to_exist_core__dim_tokens_LABEL_SUBTYPE", "alias": "dim_tokens_LABEL_SUBTYPE", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["core__dim_tokens"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target\\compiled\\axelar\\models\\gold\\core__dim_tokens.yml\\dbt_expectations_expect_column_897f3186ec3a24c14d5e7766b4c7c668.sql", "build_path": null, "deferred": false, "unrendered_config": {"store_failures": true, "alias": "dbt_expectations_expect_column_897f3186ec3a24c14d5e7766b4c7c668"}, "created_at": 1671050799.4580123, "compiled_sql": "\n\n    with test_data as (\n\n        select\n            cast('LABEL_SUBTYPE' as TEXT) as column_name,\n            4 as matching_column_index,\n            True as column_index_matches\n\n    )\n    select *\n    from test_data\n    where\n        not(matching_column_index >= 0 and column_index_matches)", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "AXELAR_DEV.dbt_expectations_expect_column_to_exist_core.dim_tokens_LABEL_SUBTYPE", "column_name": "LABEL_SUBTYPE", "file_key_name": "models.core__dim_tokens"}, "test.axelar.dbt_expectations_expect_column_to_exist_core__dim_tokens_LABEL.63e745c91d": {"raw_sql": "{{ dbt_expectations.test_expect_column_to_exist(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "expect_column_to_exist", "kwargs": {"column_name": "LABEL", "model": "{{ get_where_subquery(ref('core__dim_tokens')) }}"}, "namespace": "dbt_expectations"}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt_expectations.test_expect_column_to_exist", "macro.dbt.get_where_subquery"], "nodes": ["model.axelar.core__dim_tokens"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": true, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "AXELAR_DEV", "schema": "dbt_expectations_expect_column_to_exist_core", "fqn": ["axelar", "gold", "dbt_expectations_expect_column_to_exist_core__dim_tokens_LABEL"], "unique_id": "test.axelar.dbt_expectations_expect_column_to_exist_core__dim_tokens_LABEL.63e745c91d", "package_name": "axelar", "root_path": "C:\\Users\\jessi\\git\\axelar-models", "path": "dbt_expectations_expect_column_to_exist_core__dim_tokens_LABEL.sql", "original_file_path": "models\\gold\\core__dim_tokens.yml", "name": "dbt_expectations_expect_column_to_exist_core__dim_tokens_LABEL", "alias": "dim_tokens_LABEL", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["core__dim_tokens"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target\\compiled\\axelar\\models\\gold\\core__dim_tokens.yml\\dbt_expectations_expect_column_to_exist_core__dim_tokens_LABEL.sql", "build_path": null, "deferred": false, "unrendered_config": {"store_failures": true}, "created_at": 1671050799.4610136, "compiled_sql": "\n\n    with test_data as (\n\n        select\n            cast('LABEL' as TEXT) as column_name,\n            5 as matching_column_index,\n            True as column_index_matches\n\n    )\n    select *\n    from test_data\n    where\n        not(matching_column_index >= 0 and column_index_matches)", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "AXELAR_DEV.dbt_expectations_expect_column_to_exist_core.dim_tokens_LABEL", "column_name": "LABEL", "file_key_name": "models.core__dim_tokens"}, "test.axelar.dbt_expectations_expect_column_to_exist_core__dim_tokens_PROJECT_NAME.2275550428": {"raw_sql": "{{ dbt_expectations.test_expect_column_to_exist(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_expectations_expect_column_4d803781ac401d3e7efd0079e203b071\") }}", "test_metadata": {"name": "expect_column_to_exist", "kwargs": {"column_name": "PROJECT_NAME", "model": "{{ get_where_subquery(ref('core__dim_tokens')) }}"}, "namespace": "dbt_expectations"}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt_expectations.test_expect_column_to_exist", "macro.dbt.get_where_subquery"], "nodes": ["model.axelar.core__dim_tokens"]}, "config": {"enabled": true, "alias": "dbt_expectations_expect_column_4d803781ac401d3e7efd0079e203b071", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": true, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "AXELAR_DEV", "schema": "dbt_expectations_expect_column_to_exist_core", "fqn": ["axelar", "gold", "dbt_expectations_expect_column_to_exist_core__dim_tokens_PROJECT_NAME"], "unique_id": "test.axelar.dbt_expectations_expect_column_to_exist_core__dim_tokens_PROJECT_NAME.2275550428", "package_name": "axelar", "root_path": "C:\\Users\\jessi\\git\\axelar-models", "path": "dbt_expectations_expect_column_4d803781ac401d3e7efd0079e203b071.sql", "original_file_path": "models\\gold\\core__dim_tokens.yml", "name": "dbt_expectations_expect_column_to_exist_core__dim_tokens_PROJECT_NAME", "alias": "dim_tokens_PROJECT_NAME", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["core__dim_tokens"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target\\compiled\\axelar\\models\\gold\\core__dim_tokens.yml\\dbt_expectations_expect_column_4d803781ac401d3e7efd0079e203b071.sql", "build_path": null, "deferred": false, "unrendered_config": {"store_failures": true, "alias": "dbt_expectations_expect_column_4d803781ac401d3e7efd0079e203b071"}, "created_at": 1671050799.4687216, "compiled_sql": "\n\n    with test_data as (\n\n        select\n            cast('PROJECT_NAME' as TEXT) as column_name,\n            6 as matching_column_index,\n            True as column_index_matches\n\n    )\n    select *\n    from test_data\n    where\n        not(matching_column_index >= 0 and column_index_matches)", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "AXELAR_DEV.dbt_expectations_expect_column_to_exist_core.dim_tokens_PROJECT_NAME", "column_name": "PROJECT_NAME", "file_key_name": "models.core__dim_tokens"}, "test.axelar.dbt_expectations_expect_column_to_exist_core__dim_tokens_ALIAS.46f836a959": {"raw_sql": "{{ dbt_expectations.test_expect_column_to_exist(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "expect_column_to_exist", "kwargs": {"column_name": "ALIAS", "model": "{{ get_where_subquery(ref('core__dim_tokens')) }}"}, "namespace": "dbt_expectations"}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt_expectations.test_expect_column_to_exist", "macro.dbt.get_where_subquery"], "nodes": ["model.axelar.core__dim_tokens"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": true, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "AXELAR_DEV", "schema": "dbt_expectations_expect_column_to_exist_core", "fqn": ["axelar", "gold", "dbt_expectations_expect_column_to_exist_core__dim_tokens_ALIAS"], "unique_id": "test.axelar.dbt_expectations_expect_column_to_exist_core__dim_tokens_ALIAS.46f836a959", "package_name": "axelar", "root_path": "C:\\Users\\jessi\\git\\axelar-models", "path": "dbt_expectations_expect_column_to_exist_core__dim_tokens_ALIAS.sql", "original_file_path": "models\\gold\\core__dim_tokens.yml", "name": "dbt_expectations_expect_column_to_exist_core__dim_tokens_ALIAS", "alias": "dim_tokens_ALIAS", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["core__dim_tokens"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target\\compiled\\axelar\\models\\gold\\core__dim_tokens.yml\\dbt_expectations_expect_column_to_exist_core__dim_tokens_ALIAS.sql", "build_path": null, "deferred": false, "unrendered_config": {"store_failures": true}, "created_at": 1671050799.4726934, "compiled_sql": "\n\n    with test_data as (\n\n        select\n            cast('ALIAS' as TEXT) as column_name,\n            7 as matching_column_index,\n            True as column_index_matches\n\n    )\n    select *\n    from test_data\n    where\n        not(matching_column_index >= 0 and column_index_matches)", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "AXELAR_DEV.dbt_expectations_expect_column_to_exist_core.dim_tokens_ALIAS", "column_name": "ALIAS", "file_key_name": "models.core__dim_tokens"}, "test.axelar.dbt_expectations_expect_column_to_exist_core__dim_tokens_DECIMAL.9ed902b8c6": {"raw_sql": "{{ dbt_expectations.test_expect_column_to_exist(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_expectations_expect_column_f1ad0ae924451777c950dde52fca3207\") }}", "test_metadata": {"name": "expect_column_to_exist", "kwargs": {"column_name": "DECIMAL", "model": "{{ get_where_subquery(ref('core__dim_tokens')) }}"}, "namespace": "dbt_expectations"}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt_expectations.test_expect_column_to_exist", "macro.dbt.get_where_subquery"], "nodes": ["model.axelar.core__dim_tokens"]}, "config": {"enabled": true, "alias": "dbt_expectations_expect_column_f1ad0ae924451777c950dde52fca3207", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": true, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "AXELAR_DEV", "schema": "dbt_expectations_expect_column_to_exist_core", "fqn": ["axelar", "gold", "dbt_expectations_expect_column_to_exist_core__dim_tokens_DECIMAL"], "unique_id": "test.axelar.dbt_expectations_expect_column_to_exist_core__dim_tokens_DECIMAL.9ed902b8c6", "package_name": "axelar", "root_path": "C:\\Users\\jessi\\git\\axelar-models", "path": "dbt_expectations_expect_column_f1ad0ae924451777c950dde52fca3207.sql", "original_file_path": "models\\gold\\core__dim_tokens.yml", "name": "dbt_expectations_expect_column_to_exist_core__dim_tokens_DECIMAL", "alias": "dim_tokens_DECIMAL", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["core__dim_tokens"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target\\compiled\\axelar\\models\\gold\\core__dim_tokens.yml\\dbt_expectations_expect_column_f1ad0ae924451777c950dde52fca3207.sql", "build_path": null, "deferred": false, "unrendered_config": {"store_failures": true, "alias": "dbt_expectations_expect_column_f1ad0ae924451777c950dde52fca3207"}, "created_at": 1671050799.4768605, "compiled_sql": "\n\n    with test_data as (\n\n        select\n            cast('DECIMAL' as TEXT) as column_name,\n            8 as matching_column_index,\n            True as column_index_matches\n\n    )\n    select *\n    from test_data\n    where\n        not(matching_column_index >= 0 and column_index_matches)", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "AXELAR_DEV.dbt_expectations_expect_column_to_exist_core.dim_tokens_DECIMAL", "column_name": "DECIMAL", "file_key_name": "models.core__dim_tokens"}, "test.axelar.dbt_expectations_expect_column_to_exist_core__dim_tokens_RAW_METADATA.35e66014b2": {"raw_sql": "{{ dbt_expectations.test_expect_column_to_exist(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_expectations_expect_column_eccb289eb1669e444fc8234ddbd4c2e5\") }}", "test_metadata": {"name": "expect_column_to_exist", "kwargs": {"column_name": "RAW_METADATA", "model": "{{ get_where_subquery(ref('core__dim_tokens')) }}"}, "namespace": "dbt_expectations"}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt_expectations.test_expect_column_to_exist", "macro.dbt.get_where_subquery"], "nodes": ["model.axelar.core__dim_tokens"]}, "config": {"enabled": true, "alias": "dbt_expectations_expect_column_eccb289eb1669e444fc8234ddbd4c2e5", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": true, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "AXELAR_DEV", "schema": "dbt_expectations_expect_column_to_exist_core", "fqn": ["axelar", "gold", "dbt_expectations_expect_column_to_exist_core__dim_tokens_RAW_METADATA"], "unique_id": "test.axelar.dbt_expectations_expect_column_to_exist_core__dim_tokens_RAW_METADATA.35e66014b2", "package_name": "axelar", "root_path": "C:\\Users\\jessi\\git\\axelar-models", "path": "dbt_expectations_expect_column_eccb289eb1669e444fc8234ddbd4c2e5.sql", "original_file_path": "models\\gold\\core__dim_tokens.yml", "name": "dbt_expectations_expect_column_to_exist_core__dim_tokens_RAW_METADATA", "alias": "dim_tokens_RAW_METADATA", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["core__dim_tokens"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target\\compiled\\axelar\\models\\gold\\core__dim_tokens.yml\\dbt_expectations_expect_column_eccb289eb1669e444fc8234ddbd4c2e5.sql", "build_path": null, "deferred": false, "unrendered_config": {"store_failures": true, "alias": "dbt_expectations_expect_column_eccb289eb1669e444fc8234ddbd4c2e5"}, "created_at": 1671050799.4838462, "compiled_sql": "\n\n    with test_data as (\n\n        select\n            cast('RAW_METADATA' as TEXT) as column_name,\n            9 as matching_column_index,\n            True as column_index_matches\n\n    )\n    select *\n    from test_data\n    where\n        not(matching_column_index >= 0 and column_index_matches)", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "AXELAR_DEV.dbt_expectations_expect_column_to_exist_core.dim_tokens_RAW_METADATA", "column_name": "RAW_METADATA", "file_key_name": "models.core__dim_tokens"}, "test.axelar.dbt_expectations_expect_column_to_exist_core__dim_tokens_UNIQUE_KEY.2c98bfa4bd": {"raw_sql": "{{ dbt_expectations.test_expect_column_to_exist(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_expectations_expect_column_c8011e5ce147741afe21a2dc46d16ab8\") }}", "test_metadata": {"name": "expect_column_to_exist", "kwargs": {"column_name": "UNIQUE_KEY", "model": "{{ get_where_subquery(ref('core__dim_tokens')) }}"}, "namespace": "dbt_expectations"}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt_expectations.test_expect_column_to_exist", "macro.dbt.get_where_subquery"], "nodes": ["model.axelar.core__dim_tokens"]}, "config": {"enabled": true, "alias": "dbt_expectations_expect_column_c8011e5ce147741afe21a2dc46d16ab8", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": true, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "AXELAR_DEV", "schema": "dbt_expectations_expect_column_to_exist_core", "fqn": ["axelar", "gold", "dbt_expectations_expect_column_to_exist_core__dim_tokens_UNIQUE_KEY"], "unique_id": "test.axelar.dbt_expectations_expect_column_to_exist_core__dim_tokens_UNIQUE_KEY.2c98bfa4bd", "package_name": "axelar", "root_path": "C:\\Users\\jessi\\git\\axelar-models", "path": "dbt_expectations_expect_column_c8011e5ce147741afe21a2dc46d16ab8.sql", "original_file_path": "models\\gold\\core__dim_tokens.yml", "name": "dbt_expectations_expect_column_to_exist_core__dim_tokens_UNIQUE_KEY", "alias": "dim_tokens_UNIQUE_KEY", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["core__dim_tokens"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target\\compiled\\axelar\\models\\gold\\core__dim_tokens.yml\\dbt_expectations_expect_column_c8011e5ce147741afe21a2dc46d16ab8.sql", "build_path": null, "deferred": false, "unrendered_config": {"store_failures": true, "alias": "dbt_expectations_expect_column_c8011e5ce147741afe21a2dc46d16ab8"}, "created_at": 1671050799.4878411, "compiled_sql": "\n\n    with test_data as (\n\n        select\n            cast('UNIQUE_KEY' as TEXT) as column_name,\n            10 as matching_column_index,\n            True as column_index_matches\n\n    )\n    select *\n    from test_data\n    where\n        not(matching_column_index >= 0 and column_index_matches)", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "AXELAR_DEV.dbt_expectations_expect_column_to_exist_core.dim_tokens_UNIQUE_KEY", "column_name": "UNIQUE_KEY", "file_key_name": "models.core__dim_tokens"}, "test.axelar.dbt_expectations_expect_column_to_exist_core__fact_blocks_BLOCK_ID.1758defefc": {"raw_sql": "{{ dbt_expectations.test_expect_column_to_exist(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_expectations_expect_column_9a99d9b020811e4a63fd7fba065f6295\") }}", "test_metadata": {"name": "expect_column_to_exist", "kwargs": {"column_name": "BLOCK_ID", "model": "{{ get_where_subquery(ref('core__fact_blocks')) }}"}, "namespace": "dbt_expectations"}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt_expectations.test_expect_column_to_exist", "macro.dbt.get_where_subquery"], "nodes": ["model.axelar.core__fact_blocks"]}, "config": {"enabled": true, "alias": "dbt_expectations_expect_column_9a99d9b020811e4a63fd7fba065f6295", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": true, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "AXELAR_DEV", "schema": "dbt_expectations_expect_column_to_exist_core", "fqn": ["axelar", "gold", "dbt_expectations_expect_column_to_exist_core__fact_blocks_BLOCK_ID"], "unique_id": "test.axelar.dbt_expectations_expect_column_to_exist_core__fact_blocks_BLOCK_ID.1758defefc", "package_name": "axelar", "root_path": "C:\\Users\\jessi\\git\\axelar-models", "path": "dbt_expectations_expect_column_9a99d9b020811e4a63fd7fba065f6295.sql", "original_file_path": "models\\gold\\core__fact_blocks.yml", "name": "dbt_expectations_expect_column_to_exist_core__fact_blocks_BLOCK_ID", "alias": "fact_blocks_BLOCK_ID", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["core__fact_blocks"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target\\compiled\\axelar\\models\\gold\\core__fact_blocks.yml\\dbt_expectations_expect_column_9a99d9b020811e4a63fd7fba065f6295.sql", "build_path": null, "deferred": false, "unrendered_config": {"store_failures": true, "alias": "dbt_expectations_expect_column_9a99d9b020811e4a63fd7fba065f6295"}, "created_at": 1671050799.4948199, "compiled_sql": "\n\n    with test_data as (\n\n        select\n            cast('BLOCK_ID' as TEXT) as column_name,\n            0 as matching_column_index,\n            True as column_index_matches\n\n    )\n    select *\n    from test_data\n    where\n        not(matching_column_index >= 0 and column_index_matches)", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "AXELAR_DEV.dbt_expectations_expect_column_to_exist_core.fact_blocks_BLOCK_ID", "column_name": "BLOCK_ID", "file_key_name": "models.core__fact_blocks"}, "test.axelar.dbt_expectations_expect_column_to_exist_core__fact_blocks_BLOCK_TIMESTAMP.c36a4acd9b": {"raw_sql": "{{ dbt_expectations.test_expect_column_to_exist(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_expectations_expect_column_7887ba59ce032c24fce53e733e68c2e6\") }}", "test_metadata": {"name": "expect_column_to_exist", "kwargs": {"column_name": "BLOCK_TIMESTAMP", "model": "{{ get_where_subquery(ref('core__fact_blocks')) }}"}, "namespace": "dbt_expectations"}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt_expectations.test_expect_column_to_exist", "macro.dbt.get_where_subquery"], "nodes": ["model.axelar.core__fact_blocks"]}, "config": {"enabled": true, "alias": "dbt_expectations_expect_column_7887ba59ce032c24fce53e733e68c2e6", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": true, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "AXELAR_DEV", "schema": "dbt_expectations_expect_column_to_exist_core", "fqn": ["axelar", "gold", "dbt_expectations_expect_column_to_exist_core__fact_blocks_BLOCK_TIMESTAMP"], "unique_id": "test.axelar.dbt_expectations_expect_column_to_exist_core__fact_blocks_BLOCK_TIMESTAMP.c36a4acd9b", "package_name": "axelar", "root_path": "C:\\Users\\jessi\\git\\axelar-models", "path": "dbt_expectations_expect_column_7887ba59ce032c24fce53e733e68c2e6.sql", "original_file_path": "models\\gold\\core__fact_blocks.yml", "name": "dbt_expectations_expect_column_to_exist_core__fact_blocks_BLOCK_TIMESTAMP", "alias": "fact_blocks_BLOCK_TIMESTAMP", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["core__fact_blocks"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target\\compiled\\axelar\\models\\gold\\core__fact_blocks.yml\\dbt_expectations_expect_column_7887ba59ce032c24fce53e733e68c2e6.sql", "build_path": null, "deferred": false, "unrendered_config": {"store_failures": true, "alias": "dbt_expectations_expect_column_7887ba59ce032c24fce53e733e68c2e6"}, "created_at": 1671050799.50151, "compiled_sql": "\n\n    with test_data as (\n\n        select\n            cast('BLOCK_TIMESTAMP' as TEXT) as column_name,\n            1 as matching_column_index,\n            True as column_index_matches\n\n    )\n    select *\n    from test_data\n    where\n        not(matching_column_index >= 0 and column_index_matches)", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "AXELAR_DEV.dbt_expectations_expect_column_to_exist_core.fact_blocks_BLOCK_TIMESTAMP", "column_name": "BLOCK_TIMESTAMP", "file_key_name": "models.core__fact_blocks"}, "test.axelar.dbt_expectations_expect_column_to_exist_core__fact_blocks_CHAIN_ID.d97c339232": {"raw_sql": "{{ dbt_expectations.test_expect_column_to_exist(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_expectations_expect_column_baca9f9ce2584263de832e3494b15bf6\") }}", "test_metadata": {"name": "expect_column_to_exist", "kwargs": {"column_name": "CHAIN_ID", "model": "{{ get_where_subquery(ref('core__fact_blocks')) }}"}, "namespace": "dbt_expectations"}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt_expectations.test_expect_column_to_exist", "macro.dbt.get_where_subquery"], "nodes": ["model.axelar.core__fact_blocks"]}, "config": {"enabled": true, "alias": "dbt_expectations_expect_column_baca9f9ce2584263de832e3494b15bf6", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": true, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "AXELAR_DEV", "schema": "dbt_expectations_expect_column_to_exist_core", "fqn": ["axelar", "gold", "dbt_expectations_expect_column_to_exist_core__fact_blocks_CHAIN_ID"], "unique_id": "test.axelar.dbt_expectations_expect_column_to_exist_core__fact_blocks_CHAIN_ID.d97c339232", "package_name": "axelar", "root_path": "C:\\Users\\jessi\\git\\axelar-models", "path": "dbt_expectations_expect_column_baca9f9ce2584263de832e3494b15bf6.sql", "original_file_path": "models\\gold\\core__fact_blocks.yml", "name": "dbt_expectations_expect_column_to_exist_core__fact_blocks_CHAIN_ID", "alias": "fact_blocks_CHAIN_ID", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["core__fact_blocks"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target\\compiled\\axelar\\models\\gold\\core__fact_blocks.yml\\dbt_expectations_expect_column_baca9f9ce2584263de832e3494b15bf6.sql", "build_path": null, "deferred": false, "unrendered_config": {"store_failures": true, "alias": "dbt_expectations_expect_column_baca9f9ce2584263de832e3494b15bf6"}, "created_at": 1671050799.505508, "compiled_sql": "\n\n    with test_data as (\n\n        select\n            cast('CHAIN_ID' as TEXT) as column_name,\n            2 as matching_column_index,\n            True as column_index_matches\n\n    )\n    select *\n    from test_data\n    where\n        not(matching_column_index >= 0 and column_index_matches)", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "AXELAR_DEV.dbt_expectations_expect_column_to_exist_core.fact_blocks_CHAIN_ID", "column_name": "CHAIN_ID", "file_key_name": "models.core__fact_blocks"}, "test.axelar.dbt_expectations_expect_column_to_exist_core__fact_blocks_TX_COUNT.cba858f6da": {"raw_sql": "{{ dbt_expectations.test_expect_column_to_exist(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_expectations_expect_column_a423985c9e70b52fbdcf89d2de49b09a\") }}", "test_metadata": {"name": "expect_column_to_exist", "kwargs": {"column_name": "TX_COUNT", "model": "{{ get_where_subquery(ref('core__fact_blocks')) }}"}, "namespace": "dbt_expectations"}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt_expectations.test_expect_column_to_exist", "macro.dbt.get_where_subquery"], "nodes": ["model.axelar.core__fact_blocks"]}, "config": {"enabled": true, "alias": "dbt_expectations_expect_column_a423985c9e70b52fbdcf89d2de49b09a", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": true, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "AXELAR_DEV", "schema": "dbt_expectations_expect_column_to_exist_core", "fqn": ["axelar", "gold", "dbt_expectations_expect_column_to_exist_core__fact_blocks_TX_COUNT"], "unique_id": "test.axelar.dbt_expectations_expect_column_to_exist_core__fact_blocks_TX_COUNT.cba858f6da", "package_name": "axelar", "root_path": "C:\\Users\\jessi\\git\\axelar-models", "path": "dbt_expectations_expect_column_a423985c9e70b52fbdcf89d2de49b09a.sql", "original_file_path": "models\\gold\\core__fact_blocks.yml", "name": "dbt_expectations_expect_column_to_exist_core__fact_blocks_TX_COUNT", "alias": "fact_blocks_TX_COUNT", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["core__fact_blocks"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target\\compiled\\axelar\\models\\gold\\core__fact_blocks.yml\\dbt_expectations_expect_column_a423985c9e70b52fbdcf89d2de49b09a.sql", "build_path": null, "deferred": false, "unrendered_config": {"store_failures": true, "alias": "dbt_expectations_expect_column_a423985c9e70b52fbdcf89d2de49b09a"}, "created_at": 1671050799.5105097, "compiled_sql": "\n\n    with test_data as (\n\n        select\n            cast('TX_COUNT' as TEXT) as column_name,\n            3 as matching_column_index,\n            True as column_index_matches\n\n    )\n    select *\n    from test_data\n    where\n        not(matching_column_index >= 0 and column_index_matches)", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "AXELAR_DEV.dbt_expectations_expect_column_to_exist_core.fact_blocks_TX_COUNT", "column_name": "TX_COUNT", "file_key_name": "models.core__fact_blocks"}, "test.axelar.dbt_expectations_expect_column_to_exist_core__fact_blocks_PROPOSER_ADDRESS.33eacc997a": {"raw_sql": "{{ dbt_expectations.test_expect_column_to_exist(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_expectations_expect_column_cf9186faf8ccda84be732731dbc66e80\") }}", "test_metadata": {"name": "expect_column_to_exist", "kwargs": {"column_name": "PROPOSER_ADDRESS", "model": "{{ get_where_subquery(ref('core__fact_blocks')) }}"}, "namespace": "dbt_expectations"}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt_expectations.test_expect_column_to_exist", "macro.dbt.get_where_subquery"], "nodes": ["model.axelar.core__fact_blocks"]}, "config": {"enabled": true, "alias": "dbt_expectations_expect_column_cf9186faf8ccda84be732731dbc66e80", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": true, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "AXELAR_DEV", "schema": "dbt_expectations_expect_column_to_exist_core", "fqn": ["axelar", "gold", "dbt_expectations_expect_column_to_exist_core__fact_blocks_PROPOSER_ADDRESS"], "unique_id": "test.axelar.dbt_expectations_expect_column_to_exist_core__fact_blocks_PROPOSER_ADDRESS.33eacc997a", "package_name": "axelar", "root_path": "C:\\Users\\jessi\\git\\axelar-models", "path": "dbt_expectations_expect_column_cf9186faf8ccda84be732731dbc66e80.sql", "original_file_path": "models\\gold\\core__fact_blocks.yml", "name": "dbt_expectations_expect_column_to_exist_core__fact_blocks_PROPOSER_ADDRESS", "alias": "fact_blocks_PROPOSER_ADDRESS", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["core__fact_blocks"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target\\compiled\\axelar\\models\\gold\\core__fact_blocks.yml\\dbt_expectations_expect_column_cf9186faf8ccda84be732731dbc66e80.sql", "build_path": null, "deferred": false, "unrendered_config": {"store_failures": true, "alias": "dbt_expectations_expect_column_cf9186faf8ccda84be732731dbc66e80"}, "created_at": 1671050799.517664, "compiled_sql": "\n\n    with test_data as (\n\n        select\n            cast('PROPOSER_ADDRESS' as TEXT) as column_name,\n            4 as matching_column_index,\n            True as column_index_matches\n\n    )\n    select *\n    from test_data\n    where\n        not(matching_column_index >= 0 and column_index_matches)", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "AXELAR_DEV.dbt_expectations_expect_column_to_exist_core.fact_blocks_PROPOSER_ADDRESS", "column_name": "PROPOSER_ADDRESS", "file_key_name": "models.core__fact_blocks"}, "test.axelar.dbt_expectations_expect_column_to_exist_core__fact_blocks_VALIDATOR_HASH.74e26a3ed2": {"raw_sql": "{{ dbt_expectations.test_expect_column_to_exist(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_expectations_expect_column_aaeff2d92f1a13577c55ffa1cd859a6f\") }}", "test_metadata": {"name": "expect_column_to_exist", "kwargs": {"column_name": "VALIDATOR_HASH", "model": "{{ get_where_subquery(ref('core__fact_blocks')) }}"}, "namespace": "dbt_expectations"}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt_expectations.test_expect_column_to_exist", "macro.dbt.get_where_subquery"], "nodes": ["model.axelar.core__fact_blocks"]}, "config": {"enabled": true, "alias": "dbt_expectations_expect_column_aaeff2d92f1a13577c55ffa1cd859a6f", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": true, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "AXELAR_DEV", "schema": "dbt_expectations_expect_column_to_exist_core", "fqn": ["axelar", "gold", "dbt_expectations_expect_column_to_exist_core__fact_blocks_VALIDATOR_HASH"], "unique_id": "test.axelar.dbt_expectations_expect_column_to_exist_core__fact_blocks_VALIDATOR_HASH.74e26a3ed2", "package_name": "axelar", "root_path": "C:\\Users\\jessi\\git\\axelar-models", "path": "dbt_expectations_expect_column_aaeff2d92f1a13577c55ffa1cd859a6f.sql", "original_file_path": "models\\gold\\core__fact_blocks.yml", "name": "dbt_expectations_expect_column_to_exist_core__fact_blocks_VALIDATOR_HASH", "alias": "fact_blocks_VALIDATOR_HASH", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["core__fact_blocks"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target\\compiled\\axelar\\models\\gold\\core__fact_blocks.yml\\dbt_expectations_expect_column_aaeff2d92f1a13577c55ffa1cd859a6f.sql", "build_path": null, "deferred": false, "unrendered_config": {"store_failures": true, "alias": "dbt_expectations_expect_column_aaeff2d92f1a13577c55ffa1cd859a6f"}, "created_at": 1671050799.522702, "compiled_sql": "\n\n    with test_data as (\n\n        select\n            cast('VALIDATOR_HASH' as TEXT) as column_name,\n            5 as matching_column_index,\n            True as column_index_matches\n\n    )\n    select *\n    from test_data\n    where\n        not(matching_column_index >= 0 and column_index_matches)", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "AXELAR_DEV.dbt_expectations_expect_column_to_exist_core.fact_blocks_VALIDATOR_HASH", "column_name": "VALIDATOR_HASH", "file_key_name": "models.core__fact_blocks"}, "test.axelar.dbt_expectations_expect_column_to_exist_core__fact_msgs_BLOCK_ID.faa38255c9": {"raw_sql": "{{ dbt_expectations.test_expect_column_to_exist(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_expectations_expect_column_a570a4ead3291c1ad8d5468a3c834c19\") }}", "test_metadata": {"name": "expect_column_to_exist", "kwargs": {"column_name": "BLOCK_ID", "model": "{{ get_where_subquery(ref('core__fact_msgs')) }}"}, "namespace": "dbt_expectations"}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt_expectations.test_expect_column_to_exist", "macro.dbt.get_where_subquery"], "nodes": ["model.axelar.core__fact_msgs"]}, "config": {"enabled": true, "alias": "dbt_expectations_expect_column_a570a4ead3291c1ad8d5468a3c834c19", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": true, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "AXELAR_DEV", "schema": "dbt_expectations_expect_column_to_exist_core", "fqn": ["axelar", "gold", "dbt_expectations_expect_column_to_exist_core__fact_msgs_BLOCK_ID"], "unique_id": "test.axelar.dbt_expectations_expect_column_to_exist_core__fact_msgs_BLOCK_ID.faa38255c9", "package_name": "axelar", "root_path": "C:\\Users\\jessi\\git\\axelar-models", "path": "dbt_expectations_expect_column_a570a4ead3291c1ad8d5468a3c834c19.sql", "original_file_path": "models\\gold\\core__fact_msgs.yml", "name": "dbt_expectations_expect_column_to_exist_core__fact_msgs_BLOCK_ID", "alias": "fact_msgs_BLOCK_ID", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["core__fact_msgs"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target\\compiled\\axelar\\models\\gold\\core__fact_msgs.yml\\dbt_expectations_expect_column_a570a4ead3291c1ad8d5468a3c834c19.sql", "build_path": null, "deferred": false, "unrendered_config": {"store_failures": true, "alias": "dbt_expectations_expect_column_a570a4ead3291c1ad8d5468a3c834c19"}, "created_at": 1671050799.5293932, "compiled_sql": "\n\n    with test_data as (\n\n        select\n            cast('BLOCK_ID' as TEXT) as column_name,\n            0 as matching_column_index,\n            True as column_index_matches\n\n    )\n    select *\n    from test_data\n    where\n        not(matching_column_index >= 0 and column_index_matches)", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "AXELAR_DEV.dbt_expectations_expect_column_to_exist_core.fact_msgs_BLOCK_ID", "column_name": "BLOCK_ID", "file_key_name": "models.core__fact_msgs"}, "test.axelar.dbt_expectations_expect_column_to_exist_core__fact_msgs_BLOCK_TIMESTAMP.cb0d0e3790": {"raw_sql": "{{ dbt_expectations.test_expect_column_to_exist(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_expectations_expect_column_27b86ac45811bf95779ad1996e472190\") }}", "test_metadata": {"name": "expect_column_to_exist", "kwargs": {"column_name": "BLOCK_TIMESTAMP", "model": "{{ get_where_subquery(ref('core__fact_msgs')) }}"}, "namespace": "dbt_expectations"}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt_expectations.test_expect_column_to_exist", "macro.dbt.get_where_subquery"], "nodes": ["model.axelar.core__fact_msgs"]}, "config": {"enabled": true, "alias": "dbt_expectations_expect_column_27b86ac45811bf95779ad1996e472190", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": true, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "AXELAR_DEV", "schema": "dbt_expectations_expect_column_to_exist_core", "fqn": ["axelar", "gold", "dbt_expectations_expect_column_to_exist_core__fact_msgs_BLOCK_TIMESTAMP"], "unique_id": "test.axelar.dbt_expectations_expect_column_to_exist_core__fact_msgs_BLOCK_TIMESTAMP.cb0d0e3790", "package_name": "axelar", "root_path": "C:\\Users\\jessi\\git\\axelar-models", "path": "dbt_expectations_expect_column_27b86ac45811bf95779ad1996e472190.sql", "original_file_path": "models\\gold\\core__fact_msgs.yml", "name": "dbt_expectations_expect_column_to_exist_core__fact_msgs_BLOCK_TIMESTAMP", "alias": "fact_msgs_BLOCK_TIMESTAMP", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["core__fact_msgs"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target\\compiled\\axelar\\models\\gold\\core__fact_msgs.yml\\dbt_expectations_expect_column_27b86ac45811bf95779ad1996e472190.sql", "build_path": null, "deferred": false, "unrendered_config": {"store_failures": true, "alias": "dbt_expectations_expect_column_27b86ac45811bf95779ad1996e472190"}, "created_at": 1671050799.5378647, "compiled_sql": "\n\n    with test_data as (\n\n        select\n            cast('BLOCK_TIMESTAMP' as TEXT) as column_name,\n            1 as matching_column_index,\n            True as column_index_matches\n\n    )\n    select *\n    from test_data\n    where\n        not(matching_column_index >= 0 and column_index_matches)", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "AXELAR_DEV.dbt_expectations_expect_column_to_exist_core.fact_msgs_BLOCK_TIMESTAMP", "column_name": "BLOCK_TIMESTAMP", "file_key_name": "models.core__fact_msgs"}, "test.axelar.dbt_expectations_expect_column_to_exist_core__fact_msgs_BLOCKCHAIN.ae346ad8fd": {"raw_sql": "{{ dbt_expectations.test_expect_column_to_exist(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_expectations_expect_column_c1c74c3df62ed02ea658255e3d9ae39e\") }}", "test_metadata": {"name": "expect_column_to_exist", "kwargs": {"column_name": "BLOCKCHAIN", "model": "{{ get_where_subquery(ref('core__fact_msgs')) }}"}, "namespace": "dbt_expectations"}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt_expectations.test_expect_column_to_exist", "macro.dbt.get_where_subquery"], "nodes": ["model.axelar.core__fact_msgs"]}, "config": {"enabled": true, "alias": "dbt_expectations_expect_column_c1c74c3df62ed02ea658255e3d9ae39e", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": true, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "AXELAR_DEV", "schema": "dbt_expectations_expect_column_to_exist_core", "fqn": ["axelar", "gold", "dbt_expectations_expect_column_to_exist_core__fact_msgs_BLOCKCHAIN"], "unique_id": "test.axelar.dbt_expectations_expect_column_to_exist_core__fact_msgs_BLOCKCHAIN.ae346ad8fd", "package_name": "axelar", "root_path": "C:\\Users\\jessi\\git\\axelar-models", "path": "dbt_expectations_expect_column_c1c74c3df62ed02ea658255e3d9ae39e.sql", "original_file_path": "models\\gold\\core__fact_msgs.yml", "name": "dbt_expectations_expect_column_to_exist_core__fact_msgs_BLOCKCHAIN", "alias": "fact_msgs_BLOCKCHAIN", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["core__fact_msgs"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target\\compiled\\axelar\\models\\gold\\core__fact_msgs.yml\\dbt_expectations_expect_column_c1c74c3df62ed02ea658255e3d9ae39e.sql", "build_path": null, "deferred": false, "unrendered_config": {"store_failures": true, "alias": "dbt_expectations_expect_column_c1c74c3df62ed02ea658255e3d9ae39e"}, "created_at": 1671050799.5378647, "compiled_sql": "\n\n    with test_data as (\n\n        select\n            cast('BLOCKCHAIN' as TEXT) as column_name,\n            2 as matching_column_index,\n            True as column_index_matches\n\n    )\n    select *\n    from test_data\n    where\n        not(matching_column_index >= 0 and column_index_matches)", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "AXELAR_DEV.dbt_expectations_expect_column_to_exist_core.fact_msgs_BLOCKCHAIN", "column_name": "BLOCKCHAIN", "file_key_name": "models.core__fact_msgs"}, "test.axelar.dbt_expectations_expect_column_to_exist_core__fact_msgs_CHAIN_ID.de462fe441": {"raw_sql": "{{ dbt_expectations.test_expect_column_to_exist(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_expectations_expect_column_db03cfec57c35d65317f03e6826c6006\") }}", "test_metadata": {"name": "expect_column_to_exist", "kwargs": {"column_name": "CHAIN_ID", "model": "{{ get_where_subquery(ref('core__fact_msgs')) }}"}, "namespace": "dbt_expectations"}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt_expectations.test_expect_column_to_exist", "macro.dbt.get_where_subquery"], "nodes": ["model.axelar.core__fact_msgs"]}, "config": {"enabled": true, "alias": "dbt_expectations_expect_column_db03cfec57c35d65317f03e6826c6006", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": true, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "AXELAR_DEV", "schema": "dbt_expectations_expect_column_to_exist_core", "fqn": ["axelar", "gold", "dbt_expectations_expect_column_to_exist_core__fact_msgs_CHAIN_ID"], "unique_id": "test.axelar.dbt_expectations_expect_column_to_exist_core__fact_msgs_CHAIN_ID.de462fe441", "package_name": "axelar", "root_path": "C:\\Users\\jessi\\git\\axelar-models", "path": "dbt_expectations_expect_column_db03cfec57c35d65317f03e6826c6006.sql", "original_file_path": "models\\gold\\core__fact_msgs.yml", "name": "dbt_expectations_expect_column_to_exist_core__fact_msgs_CHAIN_ID", "alias": "fact_msgs_CHAIN_ID", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["core__fact_msgs"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target\\compiled\\axelar\\models\\gold\\core__fact_msgs.yml\\dbt_expectations_expect_column_db03cfec57c35d65317f03e6826c6006.sql", "build_path": null, "deferred": false, "unrendered_config": {"store_failures": true, "alias": "dbt_expectations_expect_column_db03cfec57c35d65317f03e6826c6006"}, "created_at": 1671050799.545919, "compiled_sql": "\n\n    with test_data as (\n\n        select\n            cast('CHAIN_ID' as TEXT) as column_name,\n            3 as matching_column_index,\n            True as column_index_matches\n\n    )\n    select *\n    from test_data\n    where\n        not(matching_column_index >= 0 and column_index_matches)", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "AXELAR_DEV.dbt_expectations_expect_column_to_exist_core.fact_msgs_CHAIN_ID", "column_name": "CHAIN_ID", "file_key_name": "models.core__fact_msgs"}, "test.axelar.dbt_expectations_expect_column_to_exist_core__fact_msgs_TX_ID.c4b71cafbe": {"raw_sql": "{{ dbt_expectations.test_expect_column_to_exist(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "expect_column_to_exist", "kwargs": {"column_name": "TX_ID", "model": "{{ get_where_subquery(ref('core__fact_msgs')) }}"}, "namespace": "dbt_expectations"}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt_expectations.test_expect_column_to_exist", "macro.dbt.get_where_subquery"], "nodes": ["model.axelar.core__fact_msgs"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": true, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "AXELAR_DEV", "schema": "dbt_expectations_expect_column_to_exist_core", "fqn": ["axelar", "gold", "dbt_expectations_expect_column_to_exist_core__fact_msgs_TX_ID"], "unique_id": "test.axelar.dbt_expectations_expect_column_to_exist_core__fact_msgs_TX_ID.c4b71cafbe", "package_name": "axelar", "root_path": "C:\\Users\\jessi\\git\\axelar-models", "path": "dbt_expectations_expect_column_to_exist_core__fact_msgs_TX_ID.sql", "original_file_path": "models\\gold\\core__fact_msgs.yml", "name": "dbt_expectations_expect_column_to_exist_core__fact_msgs_TX_ID", "alias": "fact_msgs_TX_ID", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["core__fact_msgs"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target\\compiled\\axelar\\models\\gold\\core__fact_msgs.yml\\dbt_expectations_expect_column_to_exist_core__fact_msgs_TX_ID.sql", "build_path": null, "deferred": false, "unrendered_config": {"store_failures": true}, "created_at": 1671050799.5515175, "compiled_sql": "\n\n    with test_data as (\n\n        select\n            cast('TX_ID' as TEXT) as column_name,\n            4 as matching_column_index,\n            True as column_index_matches\n\n    )\n    select *\n    from test_data\n    where\n        not(matching_column_index >= 0 and column_index_matches)", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "AXELAR_DEV.dbt_expectations_expect_column_to_exist_core.fact_msgs_TX_ID", "column_name": "TX_ID", "file_key_name": "models.core__fact_msgs"}, "test.axelar.dbt_expectations_expect_column_to_exist_core__fact_msgs_TX_SUCCEEDED.8b88dec946": {"raw_sql": "{{ dbt_expectations.test_expect_column_to_exist(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_expectations_expect_column_a130c5ecf3d41454547ec53910aaa25e\") }}", "test_metadata": {"name": "expect_column_to_exist", "kwargs": {"column_name": "TX_SUCCEEDED", "model": "{{ get_where_subquery(ref('core__fact_msgs')) }}"}, "namespace": "dbt_expectations"}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt_expectations.test_expect_column_to_exist", "macro.dbt.get_where_subquery"], "nodes": ["model.axelar.core__fact_msgs"]}, "config": {"enabled": true, "alias": "dbt_expectations_expect_column_a130c5ecf3d41454547ec53910aaa25e", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": true, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "AXELAR_DEV", "schema": "dbt_expectations_expect_column_to_exist_core", "fqn": ["axelar", "gold", "dbt_expectations_expect_column_to_exist_core__fact_msgs_TX_SUCCEEDED"], "unique_id": "test.axelar.dbt_expectations_expect_column_to_exist_core__fact_msgs_TX_SUCCEEDED.8b88dec946", "package_name": "axelar", "root_path": "C:\\Users\\jessi\\git\\axelar-models", "path": "dbt_expectations_expect_column_a130c5ecf3d41454547ec53910aaa25e.sql", "original_file_path": "models\\gold\\core__fact_msgs.yml", "name": "dbt_expectations_expect_column_to_exist_core__fact_msgs_TX_SUCCEEDED", "alias": "fact_msgs_TX_SUCCEEDED", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["core__fact_msgs"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target\\compiled\\axelar\\models\\gold\\core__fact_msgs.yml\\dbt_expectations_expect_column_a130c5ecf3d41454547ec53910aaa25e.sql", "build_path": null, "deferred": false, "unrendered_config": {"store_failures": true, "alias": "dbt_expectations_expect_column_a130c5ecf3d41454547ec53910aaa25e"}, "created_at": 1671050799.555517, "compiled_sql": "\n\n    with test_data as (\n\n        select\n            cast('TX_SUCCEEDED' as TEXT) as column_name,\n            5 as matching_column_index,\n            True as column_index_matches\n\n    )\n    select *\n    from test_data\n    where\n        not(matching_column_index >= 0 and column_index_matches)", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "AXELAR_DEV.dbt_expectations_expect_column_to_exist_core.fact_msgs_TX_SUCCEEDED", "column_name": "TX_SUCCEEDED", "file_key_name": "models.core__fact_msgs"}, "test.axelar.dbt_expectations_expect_column_to_exist_core__fact_msgs_MSG_GROUP.32d74436d2": {"raw_sql": "{{ dbt_expectations.test_expect_column_to_exist(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_expectations_expect_column_5ff94a97fceee10389168039b58af910\") }}", "test_metadata": {"name": "expect_column_to_exist", "kwargs": {"column_name": "MSG_GROUP", "model": "{{ get_where_subquery(ref('core__fact_msgs')) }}"}, "namespace": "dbt_expectations"}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt_expectations.test_expect_column_to_exist", "macro.dbt.get_where_subquery"], "nodes": ["model.axelar.core__fact_msgs"]}, "config": {"enabled": true, "alias": "dbt_expectations_expect_column_5ff94a97fceee10389168039b58af910", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": true, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "AXELAR_DEV", "schema": "dbt_expectations_expect_column_to_exist_core", "fqn": ["axelar", "gold", "dbt_expectations_expect_column_to_exist_core__fact_msgs_MSG_GROUP"], "unique_id": "test.axelar.dbt_expectations_expect_column_to_exist_core__fact_msgs_MSG_GROUP.32d74436d2", "package_name": "axelar", "root_path": "C:\\Users\\jessi\\git\\axelar-models", "path": "dbt_expectations_expect_column_5ff94a97fceee10389168039b58af910.sql", "original_file_path": "models\\gold\\core__fact_msgs.yml", "name": "dbt_expectations_expect_column_to_exist_core__fact_msgs_MSG_GROUP", "alias": "fact_msgs_MSG_GROUP", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["core__fact_msgs"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target\\compiled\\axelar\\models\\gold\\core__fact_msgs.yml\\dbt_expectations_expect_column_5ff94a97fceee10389168039b58af910.sql", "build_path": null, "deferred": false, "unrendered_config": {"store_failures": true, "alias": "dbt_expectations_expect_column_5ff94a97fceee10389168039b58af910"}, "created_at": 1671050799.5585163, "compiled_sql": "\n\n    with test_data as (\n\n        select\n            cast('MSG_GROUP' as TEXT) as column_name,\n            6 as matching_column_index,\n            True as column_index_matches\n\n    )\n    select *\n    from test_data\n    where\n        not(matching_column_index >= 0 and column_index_matches)", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "AXELAR_DEV.dbt_expectations_expect_column_to_exist_core.fact_msgs_MSG_GROUP", "column_name": "MSG_GROUP", "file_key_name": "models.core__fact_msgs"}, "test.axelar.dbt_expectations_expect_column_to_exist_core__fact_msgs_MSG_INDEX.32d6a4e7cb": {"raw_sql": "{{ dbt_expectations.test_expect_column_to_exist(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_expectations_expect_column_78ae1f1ff97203b6084d21131c2ff37c\") }}", "test_metadata": {"name": "expect_column_to_exist", "kwargs": {"column_name": "MSG_INDEX", "model": "{{ get_where_subquery(ref('core__fact_msgs')) }}"}, "namespace": "dbt_expectations"}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt_expectations.test_expect_column_to_exist", "macro.dbt.get_where_subquery"], "nodes": ["model.axelar.core__fact_msgs"]}, "config": {"enabled": true, "alias": "dbt_expectations_expect_column_78ae1f1ff97203b6084d21131c2ff37c", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": true, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "AXELAR_DEV", "schema": "dbt_expectations_expect_column_to_exist_core", "fqn": ["axelar", "gold", "dbt_expectations_expect_column_to_exist_core__fact_msgs_MSG_INDEX"], "unique_id": "test.axelar.dbt_expectations_expect_column_to_exist_core__fact_msgs_MSG_INDEX.32d6a4e7cb", "package_name": "axelar", "root_path": "C:\\Users\\jessi\\git\\axelar-models", "path": "dbt_expectations_expect_column_78ae1f1ff97203b6084d21131c2ff37c.sql", "original_file_path": "models\\gold\\core__fact_msgs.yml", "name": "dbt_expectations_expect_column_to_exist_core__fact_msgs_MSG_INDEX", "alias": "fact_msgs_MSG_INDEX", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["core__fact_msgs"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target\\compiled\\axelar\\models\\gold\\core__fact_msgs.yml\\dbt_expectations_expect_column_78ae1f1ff97203b6084d21131c2ff37c.sql", "build_path": null, "deferred": false, "unrendered_config": {"store_failures": true, "alias": "dbt_expectations_expect_column_78ae1f1ff97203b6084d21131c2ff37c"}, "created_at": 1671050799.563019, "compiled_sql": "\n\n    with test_data as (\n\n        select\n            cast('MSG_INDEX' as TEXT) as column_name,\n            7 as matching_column_index,\n            True as column_index_matches\n\n    )\n    select *\n    from test_data\n    where\n        not(matching_column_index >= 0 and column_index_matches)", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "AXELAR_DEV.dbt_expectations_expect_column_to_exist_core.fact_msgs_MSG_INDEX", "column_name": "MSG_INDEX", "file_key_name": "models.core__fact_msgs"}, "test.axelar.dbt_expectations_expect_column_to_exist_core__fact_msgs_MSG_TYPE.e48648d983": {"raw_sql": "{{ dbt_expectations.test_expect_column_to_exist(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_expectations_expect_column_0f6fb49d1389295c5657710f8afb86a6\") }}", "test_metadata": {"name": "expect_column_to_exist", "kwargs": {"column_name": "MSG_TYPE", "model": "{{ get_where_subquery(ref('core__fact_msgs')) }}"}, "namespace": "dbt_expectations"}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt_expectations.test_expect_column_to_exist", "macro.dbt.get_where_subquery"], "nodes": ["model.axelar.core__fact_msgs"]}, "config": {"enabled": true, "alias": "dbt_expectations_expect_column_0f6fb49d1389295c5657710f8afb86a6", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": true, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "AXELAR_DEV", "schema": "dbt_expectations_expect_column_to_exist_core", "fqn": ["axelar", "gold", "dbt_expectations_expect_column_to_exist_core__fact_msgs_MSG_TYPE"], "unique_id": "test.axelar.dbt_expectations_expect_column_to_exist_core__fact_msgs_MSG_TYPE.e48648d983", "package_name": "axelar", "root_path": "C:\\Users\\jessi\\git\\axelar-models", "path": "dbt_expectations_expect_column_0f6fb49d1389295c5657710f8afb86a6.sql", "original_file_path": "models\\gold\\core__fact_msgs.yml", "name": "dbt_expectations_expect_column_to_exist_core__fact_msgs_MSG_TYPE", "alias": "fact_msgs_MSG_TYPE", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["core__fact_msgs"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target\\compiled\\axelar\\models\\gold\\core__fact_msgs.yml\\dbt_expectations_expect_column_0f6fb49d1389295c5657710f8afb86a6.sql", "build_path": null, "deferred": false, "unrendered_config": {"store_failures": true, "alias": "dbt_expectations_expect_column_0f6fb49d1389295c5657710f8afb86a6"}, "created_at": 1671050799.568125, "compiled_sql": "\n\n    with test_data as (\n\n        select\n            cast('MSG_TYPE' as TEXT) as column_name,\n            8 as matching_column_index,\n            True as column_index_matches\n\n    )\n    select *\n    from test_data\n    where\n        not(matching_column_index >= 0 and column_index_matches)", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "AXELAR_DEV.dbt_expectations_expect_column_to_exist_core.fact_msgs_MSG_TYPE", "column_name": "MSG_TYPE", "file_key_name": "models.core__fact_msgs"}, "test.axelar.dbt_expectations_expect_column_to_exist_core__fact_msgs_MSG.f1f3ebfcd4": {"raw_sql": "{{ dbt_expectations.test_expect_column_to_exist(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "expect_column_to_exist", "kwargs": {"column_name": "MSG", "model": "{{ get_where_subquery(ref('core__fact_msgs')) }}"}, "namespace": "dbt_expectations"}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt_expectations.test_expect_column_to_exist", "macro.dbt.get_where_subquery"], "nodes": ["model.axelar.core__fact_msgs"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": true, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "AXELAR_DEV", "schema": "dbt_expectations_expect_column_to_exist_core", "fqn": ["axelar", "gold", "dbt_expectations_expect_column_to_exist_core__fact_msgs_MSG"], "unique_id": "test.axelar.dbt_expectations_expect_column_to_exist_core__fact_msgs_MSG.f1f3ebfcd4", "package_name": "axelar", "root_path": "C:\\Users\\jessi\\git\\axelar-models", "path": "dbt_expectations_expect_column_to_exist_core__fact_msgs_MSG.sql", "original_file_path": "models\\gold\\core__fact_msgs.yml", "name": "dbt_expectations_expect_column_to_exist_core__fact_msgs_MSG", "alias": "fact_msgs_MSG", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["core__fact_msgs"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target\\compiled\\axelar\\models\\gold\\core__fact_msgs.yml\\dbt_expectations_expect_column_to_exist_core__fact_msgs_MSG.sql", "build_path": null, "deferred": false, "unrendered_config": {"store_failures": true}, "created_at": 1671050799.572136, "compiled_sql": "\n\n    with test_data as (\n\n        select\n            cast('MSG' as TEXT) as column_name,\n            9 as matching_column_index,\n            True as column_index_matches\n\n    )\n    select *\n    from test_data\n    where\n        not(matching_column_index >= 0 and column_index_matches)", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "AXELAR_DEV.dbt_expectations_expect_column_to_exist_core.fact_msgs_MSG", "column_name": "MSG", "file_key_name": "models.core__fact_msgs"}, "test.axelar.dbt_expectations_expect_column_to_exist_core__fact_msg_attributes_BLOCK_ID.7b9a016433": {"raw_sql": "{{ dbt_expectations.test_expect_column_to_exist(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_expectations_expect_column_94441ddb88077bf48c5af2329ae23037\") }}", "test_metadata": {"name": "expect_column_to_exist", "kwargs": {"column_name": "BLOCK_ID", "model": "{{ get_where_subquery(ref('core__fact_msg_attributes')) }}"}, "namespace": "dbt_expectations"}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt_expectations.test_expect_column_to_exist", "macro.dbt.get_where_subquery"], "nodes": ["model.axelar.core__fact_msg_attributes"]}, "config": {"enabled": true, "alias": "dbt_expectations_expect_column_94441ddb88077bf48c5af2329ae23037", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": true, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "AXELAR_DEV", "schema": "dbt_expectations_expect_column_to_exist_core", "fqn": ["axelar", "gold", "dbt_expectations_expect_column_to_exist_core__fact_msg_attributes_BLOCK_ID"], "unique_id": "test.axelar.dbt_expectations_expect_column_to_exist_core__fact_msg_attributes_BLOCK_ID.7b9a016433", "package_name": "axelar", "root_path": "C:\\Users\\jessi\\git\\axelar-models", "path": "dbt_expectations_expect_column_94441ddb88077bf48c5af2329ae23037.sql", "original_file_path": "models\\gold\\core__fact_msg_attributes.yml", "name": "dbt_expectations_expect_column_to_exist_core__fact_msg_attributes_BLOCK_ID", "alias": "fact_msg_attributes_BLOCK_ID", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["core__fact_msg_attributes"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target\\compiled\\axelar\\models\\gold\\core__fact_msg_attributes.yml\\dbt_expectations_expect_column_94441ddb88077bf48c5af2329ae23037.sql", "build_path": null, "deferred": false, "unrendered_config": {"store_failures": true, "alias": "dbt_expectations_expect_column_94441ddb88077bf48c5af2329ae23037"}, "created_at": 1671050799.5794594, "compiled_sql": "\n\n    with test_data as (\n\n        select\n            cast('BLOCK_ID' as TEXT) as column_name,\n            0 as matching_column_index,\n            True as column_index_matches\n\n    )\n    select *\n    from test_data\n    where\n        not(matching_column_index >= 0 and column_index_matches)", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "AXELAR_DEV.dbt_expectations_expect_column_to_exist_core.fact_msg_attributes_BLOCK_ID", "column_name": "BLOCK_ID", "file_key_name": "models.core__fact_msg_attributes"}, "test.axelar.dbt_expectations_expect_column_to_exist_core__fact_msg_attributes_BLOCK_TIMESTAMP.11e5f5562c": {"raw_sql": "{{ dbt_expectations.test_expect_column_to_exist(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_expectations_expect_column_4aa07486a0666336c0d3e1952f8247d4\") }}", "test_metadata": {"name": "expect_column_to_exist", "kwargs": {"column_name": "BLOCK_TIMESTAMP", "model": "{{ get_where_subquery(ref('core__fact_msg_attributes')) }}"}, "namespace": "dbt_expectations"}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt_expectations.test_expect_column_to_exist", "macro.dbt.get_where_subquery"], "nodes": ["model.axelar.core__fact_msg_attributes"]}, "config": {"enabled": true, "alias": "dbt_expectations_expect_column_4aa07486a0666336c0d3e1952f8247d4", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": true, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "AXELAR_DEV", "schema": "dbt_expectations_expect_column_to_exist_core", "fqn": ["axelar", "gold", "dbt_expectations_expect_column_to_exist_core__fact_msg_attributes_BLOCK_TIMESTAMP"], "unique_id": "test.axelar.dbt_expectations_expect_column_to_exist_core__fact_msg_attributes_BLOCK_TIMESTAMP.11e5f5562c", "package_name": "axelar", "root_path": "C:\\Users\\jessi\\git\\axelar-models", "path": "dbt_expectations_expect_column_4aa07486a0666336c0d3e1952f8247d4.sql", "original_file_path": "models\\gold\\core__fact_msg_attributes.yml", "name": "dbt_expectations_expect_column_to_exist_core__fact_msg_attributes_BLOCK_TIMESTAMP", "alias": "fact_msg_attributes_BLOCK_TIMESTAMP", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["core__fact_msg_attributes"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target\\compiled\\axelar\\models\\gold\\core__fact_msg_attributes.yml\\dbt_expectations_expect_column_4aa07486a0666336c0d3e1952f8247d4.sql", "build_path": null, "deferred": false, "unrendered_config": {"store_failures": true, "alias": "dbt_expectations_expect_column_4aa07486a0666336c0d3e1952f8247d4"}, "created_at": 1671050799.5843635, "compiled_sql": "\n\n    with test_data as (\n\n        select\n            cast('BLOCK_TIMESTAMP' as TEXT) as column_name,\n            1 as matching_column_index,\n            True as column_index_matches\n\n    )\n    select *\n    from test_data\n    where\n        not(matching_column_index >= 0 and column_index_matches)", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "AXELAR_DEV.dbt_expectations_expect_column_to_exist_core.fact_msg_attributes_BLOCK_TIMESTAMP", "column_name": "BLOCK_TIMESTAMP", "file_key_name": "models.core__fact_msg_attributes"}, "test.axelar.dbt_expectations_expect_column_to_exist_core__fact_msg_attributes_BLOCKCHAIN.356c2dfa46": {"raw_sql": "{{ dbt_expectations.test_expect_column_to_exist(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_expectations_expect_column_12447957e7b693117106d66c9a029d73\") }}", "test_metadata": {"name": "expect_column_to_exist", "kwargs": {"column_name": "BLOCKCHAIN", "model": "{{ get_where_subquery(ref('core__fact_msg_attributes')) }}"}, "namespace": "dbt_expectations"}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt_expectations.test_expect_column_to_exist", "macro.dbt.get_where_subquery"], "nodes": ["model.axelar.core__fact_msg_attributes"]}, "config": {"enabled": true, "alias": "dbt_expectations_expect_column_12447957e7b693117106d66c9a029d73", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": true, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "AXELAR_DEV", "schema": "dbt_expectations_expect_column_to_exist_core", "fqn": ["axelar", "gold", "dbt_expectations_expect_column_to_exist_core__fact_msg_attributes_BLOCKCHAIN"], "unique_id": "test.axelar.dbt_expectations_expect_column_to_exist_core__fact_msg_attributes_BLOCKCHAIN.356c2dfa46", "package_name": "axelar", "root_path": "C:\\Users\\jessi\\git\\axelar-models", "path": "dbt_expectations_expect_column_12447957e7b693117106d66c9a029d73.sql", "original_file_path": "models\\gold\\core__fact_msg_attributes.yml", "name": "dbt_expectations_expect_column_to_exist_core__fact_msg_attributes_BLOCKCHAIN", "alias": "fact_msg_attributes_BLOCKCHAIN", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["core__fact_msg_attributes"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target\\compiled\\axelar\\models\\gold\\core__fact_msg_attributes.yml\\dbt_expectations_expect_column_12447957e7b693117106d66c9a029d73.sql", "build_path": null, "deferred": false, "unrendered_config": {"store_failures": true, "alias": "dbt_expectations_expect_column_12447957e7b693117106d66c9a029d73"}, "created_at": 1671050799.5884387, "compiled_sql": "\n\n    with test_data as (\n\n        select\n            cast('BLOCKCHAIN' as TEXT) as column_name,\n            2 as matching_column_index,\n            True as column_index_matches\n\n    )\n    select *\n    from test_data\n    where\n        not(matching_column_index >= 0 and column_index_matches)", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "AXELAR_DEV.dbt_expectations_expect_column_to_exist_core.fact_msg_attributes_BLOCKCHAIN", "column_name": "BLOCKCHAIN", "file_key_name": "models.core__fact_msg_attributes"}, "test.axelar.dbt_expectations_expect_column_to_exist_core__fact_msg_attributes_CHAIN_ID.2983b83289": {"raw_sql": "{{ dbt_expectations.test_expect_column_to_exist(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_expectations_expect_column_1f4d85530181df62d000f42a8188858d\") }}", "test_metadata": {"name": "expect_column_to_exist", "kwargs": {"column_name": "CHAIN_ID", "model": "{{ get_where_subquery(ref('core__fact_msg_attributes')) }}"}, "namespace": "dbt_expectations"}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt_expectations.test_expect_column_to_exist", "macro.dbt.get_where_subquery"], "nodes": ["model.axelar.core__fact_msg_attributes"]}, "config": {"enabled": true, "alias": "dbt_expectations_expect_column_1f4d85530181df62d000f42a8188858d", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": true, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "AXELAR_DEV", "schema": "dbt_expectations_expect_column_to_exist_core", "fqn": ["axelar", "gold", "dbt_expectations_expect_column_to_exist_core__fact_msg_attributes_CHAIN_ID"], "unique_id": "test.axelar.dbt_expectations_expect_column_to_exist_core__fact_msg_attributes_CHAIN_ID.2983b83289", "package_name": "axelar", "root_path": "C:\\Users\\jessi\\git\\axelar-models", "path": "dbt_expectations_expect_column_1f4d85530181df62d000f42a8188858d.sql", "original_file_path": "models\\gold\\core__fact_msg_attributes.yml", "name": "dbt_expectations_expect_column_to_exist_core__fact_msg_attributes_CHAIN_ID", "alias": "fact_msg_attributes_CHAIN_ID", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["core__fact_msg_attributes"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target\\compiled\\axelar\\models\\gold\\core__fact_msg_attributes.yml\\dbt_expectations_expect_column_1f4d85530181df62d000f42a8188858d.sql", "build_path": null, "deferred": false, "unrendered_config": {"store_failures": true, "alias": "dbt_expectations_expect_column_1f4d85530181df62d000f42a8188858d"}, "created_at": 1671050799.5914457, "compiled_sql": "\n\n    with test_data as (\n\n        select\n            cast('CHAIN_ID' as TEXT) as column_name,\n            3 as matching_column_index,\n            True as column_index_matches\n\n    )\n    select *\n    from test_data\n    where\n        not(matching_column_index >= 0 and column_index_matches)", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "AXELAR_DEV.dbt_expectations_expect_column_to_exist_core.fact_msg_attributes_CHAIN_ID", "column_name": "CHAIN_ID", "file_key_name": "models.core__fact_msg_attributes"}, "test.axelar.dbt_expectations_expect_column_to_exist_core__fact_msg_attributes_TX_ID.cab7fab11b": {"raw_sql": "{{ dbt_expectations.test_expect_column_to_exist(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_expectations_expect_column_22ca003994e1c60c4c224c9408ca1a04\") }}", "test_metadata": {"name": "expect_column_to_exist", "kwargs": {"column_name": "TX_ID", "model": "{{ get_where_subquery(ref('core__fact_msg_attributes')) }}"}, "namespace": "dbt_expectations"}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt_expectations.test_expect_column_to_exist", "macro.dbt.get_where_subquery"], "nodes": ["model.axelar.core__fact_msg_attributes"]}, "config": {"enabled": true, "alias": "dbt_expectations_expect_column_22ca003994e1c60c4c224c9408ca1a04", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": true, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "AXELAR_DEV", "schema": "dbt_expectations_expect_column_to_exist_core", "fqn": ["axelar", "gold", "dbt_expectations_expect_column_to_exist_core__fact_msg_attributes_TX_ID"], "unique_id": "test.axelar.dbt_expectations_expect_column_to_exist_core__fact_msg_attributes_TX_ID.cab7fab11b", "package_name": "axelar", "root_path": "C:\\Users\\jessi\\git\\axelar-models", "path": "dbt_expectations_expect_column_22ca003994e1c60c4c224c9408ca1a04.sql", "original_file_path": "models\\gold\\core__fact_msg_attributes.yml", "name": "dbt_expectations_expect_column_to_exist_core__fact_msg_attributes_TX_ID", "alias": "fact_msg_attributes_TX_ID", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["core__fact_msg_attributes"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target\\compiled\\axelar\\models\\gold\\core__fact_msg_attributes.yml\\dbt_expectations_expect_column_22ca003994e1c60c4c224c9408ca1a04.sql", "build_path": null, "deferred": false, "unrendered_config": {"store_failures": true, "alias": "dbt_expectations_expect_column_22ca003994e1c60c4c224c9408ca1a04"}, "created_at": 1671050799.596106, "compiled_sql": "\n\n    with test_data as (\n\n        select\n            cast('TX_ID' as TEXT) as column_name,\n            4 as matching_column_index,\n            True as column_index_matches\n\n    )\n    select *\n    from test_data\n    where\n        not(matching_column_index >= 0 and column_index_matches)", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "AXELAR_DEV.dbt_expectations_expect_column_to_exist_core.fact_msg_attributes_TX_ID", "column_name": "TX_ID", "file_key_name": "models.core__fact_msg_attributes"}, "test.axelar.dbt_expectations_expect_column_to_exist_core__fact_msg_attributes_TX_SUCCEEDED.d0b118ebcb": {"raw_sql": "{{ dbt_expectations.test_expect_column_to_exist(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_expectations_expect_column_5c30ff3d9e78e189c358c6e599782b21\") }}", "test_metadata": {"name": "expect_column_to_exist", "kwargs": {"column_name": "TX_SUCCEEDED", "model": "{{ get_where_subquery(ref('core__fact_msg_attributes')) }}"}, "namespace": "dbt_expectations"}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt_expectations.test_expect_column_to_exist", "macro.dbt.get_where_subquery"], "nodes": ["model.axelar.core__fact_msg_attributes"]}, "config": {"enabled": true, "alias": "dbt_expectations_expect_column_5c30ff3d9e78e189c358c6e599782b21", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": true, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "AXELAR_DEV", "schema": "dbt_expectations_expect_column_to_exist_core", "fqn": ["axelar", "gold", "dbt_expectations_expect_column_to_exist_core__fact_msg_attributes_TX_SUCCEEDED"], "unique_id": "test.axelar.dbt_expectations_expect_column_to_exist_core__fact_msg_attributes_TX_SUCCEEDED.d0b118ebcb", "package_name": "axelar", "root_path": "C:\\Users\\jessi\\git\\axelar-models", "path": "dbt_expectations_expect_column_5c30ff3d9e78e189c358c6e599782b21.sql", "original_file_path": "models\\gold\\core__fact_msg_attributes.yml", "name": "dbt_expectations_expect_column_to_exist_core__fact_msg_attributes_TX_SUCCEEDED", "alias": "fact_msg_attributes_TX_SUCCEEDED", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["core__fact_msg_attributes"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target\\compiled\\axelar\\models\\gold\\core__fact_msg_attributes.yml\\dbt_expectations_expect_column_5c30ff3d9e78e189c358c6e599782b21.sql", "build_path": null, "deferred": false, "unrendered_config": {"store_failures": true, "alias": "dbt_expectations_expect_column_5c30ff3d9e78e189c358c6e599782b21"}, "created_at": 1671050799.6021974, "compiled_sql": "\n\n    with test_data as (\n\n        select\n            cast('TX_SUCCEEDED' as TEXT) as column_name,\n            5 as matching_column_index,\n            True as column_index_matches\n\n    )\n    select *\n    from test_data\n    where\n        not(matching_column_index >= 0 and column_index_matches)", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "AXELAR_DEV.dbt_expectations_expect_column_to_exist_core.fact_msg_attributes_TX_SUCCEEDED", "column_name": "TX_SUCCEEDED", "file_key_name": "models.core__fact_msg_attributes"}, "test.axelar.dbt_expectations_expect_column_to_exist_core__fact_msg_attributes_MSG_GROUP.f1ed86ed4e": {"raw_sql": "{{ dbt_expectations.test_expect_column_to_exist(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_expectations_expect_column_060a37d586c43ca861c7fb64d7764920\") }}", "test_metadata": {"name": "expect_column_to_exist", "kwargs": {"column_name": "MSG_GROUP", "model": "{{ get_where_subquery(ref('core__fact_msg_attributes')) }}"}, "namespace": "dbt_expectations"}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt_expectations.test_expect_column_to_exist", "macro.dbt.get_where_subquery"], "nodes": ["model.axelar.core__fact_msg_attributes"]}, "config": {"enabled": true, "alias": "dbt_expectations_expect_column_060a37d586c43ca861c7fb64d7764920", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": true, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "AXELAR_DEV", "schema": "dbt_expectations_expect_column_to_exist_core", "fqn": ["axelar", "gold", "dbt_expectations_expect_column_to_exist_core__fact_msg_attributes_MSG_GROUP"], "unique_id": "test.axelar.dbt_expectations_expect_column_to_exist_core__fact_msg_attributes_MSG_GROUP.f1ed86ed4e", "package_name": "axelar", "root_path": "C:\\Users\\jessi\\git\\axelar-models", "path": "dbt_expectations_expect_column_060a37d586c43ca861c7fb64d7764920.sql", "original_file_path": "models\\gold\\core__fact_msg_attributes.yml", "name": "dbt_expectations_expect_column_to_exist_core__fact_msg_attributes_MSG_GROUP", "alias": "fact_msg_attributes_MSG_GROUP", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["core__fact_msg_attributes"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target\\compiled\\axelar\\models\\gold\\core__fact_msg_attributes.yml\\dbt_expectations_expect_column_060a37d586c43ca861c7fb64d7764920.sql", "build_path": null, "deferred": false, "unrendered_config": {"store_failures": true, "alias": "dbt_expectations_expect_column_060a37d586c43ca861c7fb64d7764920"}, "created_at": 1671050799.6061897, "compiled_sql": "\n\n    with test_data as (\n\n        select\n            cast('MSG_GROUP' as TEXT) as column_name,\n            6 as matching_column_index,\n            True as column_index_matches\n\n    )\n    select *\n    from test_data\n    where\n        not(matching_column_index >= 0 and column_index_matches)", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "AXELAR_DEV.dbt_expectations_expect_column_to_exist_core.fact_msg_attributes_MSG_GROUP", "column_name": "MSG_GROUP", "file_key_name": "models.core__fact_msg_attributes"}, "test.axelar.dbt_expectations_expect_column_to_exist_core__fact_msg_attributes_MSG_INDEX.d0e91438b3": {"raw_sql": "{{ dbt_expectations.test_expect_column_to_exist(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_expectations_expect_column_8240c937ee6166a16aa573466aac2e97\") }}", "test_metadata": {"name": "expect_column_to_exist", "kwargs": {"column_name": "MSG_INDEX", "model": "{{ get_where_subquery(ref('core__fact_msg_attributes')) }}"}, "namespace": "dbt_expectations"}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt_expectations.test_expect_column_to_exist", "macro.dbt.get_where_subquery"], "nodes": ["model.axelar.core__fact_msg_attributes"]}, "config": {"enabled": true, "alias": "dbt_expectations_expect_column_8240c937ee6166a16aa573466aac2e97", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": true, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "AXELAR_DEV", "schema": "dbt_expectations_expect_column_to_exist_core", "fqn": ["axelar", "gold", "dbt_expectations_expect_column_to_exist_core__fact_msg_attributes_MSG_INDEX"], "unique_id": "test.axelar.dbt_expectations_expect_column_to_exist_core__fact_msg_attributes_MSG_INDEX.d0e91438b3", "package_name": "axelar", "root_path": "C:\\Users\\jessi\\git\\axelar-models", "path": "dbt_expectations_expect_column_8240c937ee6166a16aa573466aac2e97.sql", "original_file_path": "models\\gold\\core__fact_msg_attributes.yml", "name": "dbt_expectations_expect_column_to_exist_core__fact_msg_attributes_MSG_INDEX", "alias": "fact_msg_attributes_MSG_INDEX", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["core__fact_msg_attributes"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target\\compiled\\axelar\\models\\gold\\core__fact_msg_attributes.yml\\dbt_expectations_expect_column_8240c937ee6166a16aa573466aac2e97.sql", "build_path": null, "deferred": false, "unrendered_config": {"store_failures": true, "alias": "dbt_expectations_expect_column_8240c937ee6166a16aa573466aac2e97"}, "created_at": 1671050799.6101947, "compiled_sql": "\n\n    with test_data as (\n\n        select\n            cast('MSG_INDEX' as TEXT) as column_name,\n            7 as matching_column_index,\n            True as column_index_matches\n\n    )\n    select *\n    from test_data\n    where\n        not(matching_column_index >= 0 and column_index_matches)", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "AXELAR_DEV.dbt_expectations_expect_column_to_exist_core.fact_msg_attributes_MSG_INDEX", "column_name": "MSG_INDEX", "file_key_name": "models.core__fact_msg_attributes"}, "test.axelar.dbt_expectations_expect_column_to_exist_core__fact_msg_attributes_MSG_TYPE.b2b48e2e7f": {"raw_sql": "{{ dbt_expectations.test_expect_column_to_exist(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_expectations_expect_column_49bcdc35189875980e0989916a6f0011\") }}", "test_metadata": {"name": "expect_column_to_exist", "kwargs": {"column_name": "MSG_TYPE", "model": "{{ get_where_subquery(ref('core__fact_msg_attributes')) }}"}, "namespace": "dbt_expectations"}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt_expectations.test_expect_column_to_exist", "macro.dbt.get_where_subquery"], "nodes": ["model.axelar.core__fact_msg_attributes"]}, "config": {"enabled": true, "alias": "dbt_expectations_expect_column_49bcdc35189875980e0989916a6f0011", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": true, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "AXELAR_DEV", "schema": "dbt_expectations_expect_column_to_exist_core", "fqn": ["axelar", "gold", "dbt_expectations_expect_column_to_exist_core__fact_msg_attributes_MSG_TYPE"], "unique_id": "test.axelar.dbt_expectations_expect_column_to_exist_core__fact_msg_attributes_MSG_TYPE.b2b48e2e7f", "package_name": "axelar", "root_path": "C:\\Users\\jessi\\git\\axelar-models", "path": "dbt_expectations_expect_column_49bcdc35189875980e0989916a6f0011.sql", "original_file_path": "models\\gold\\core__fact_msg_attributes.yml", "name": "dbt_expectations_expect_column_to_exist_core__fact_msg_attributes_MSG_TYPE", "alias": "fact_msg_attributes_MSG_TYPE", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["core__fact_msg_attributes"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target\\compiled\\axelar\\models\\gold\\core__fact_msg_attributes.yml\\dbt_expectations_expect_column_49bcdc35189875980e0989916a6f0011.sql", "build_path": null, "deferred": false, "unrendered_config": {"store_failures": true, "alias": "dbt_expectations_expect_column_49bcdc35189875980e0989916a6f0011"}, "created_at": 1671050799.61428, "compiled_sql": "\n\n    with test_data as (\n\n        select\n            cast('MSG_TYPE' as TEXT) as column_name,\n            8 as matching_column_index,\n            True as column_index_matches\n\n    )\n    select *\n    from test_data\n    where\n        not(matching_column_index >= 0 and column_index_matches)", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "AXELAR_DEV.dbt_expectations_expect_column_to_exist_core.fact_msg_attributes_MSG_TYPE", "column_name": "MSG_TYPE", "file_key_name": "models.core__fact_msg_attributes"}, "test.axelar.dbt_expectations_expect_column_to_exist_core__fact_msg_attributes_ATTRIBUTE_INDEX.c041ee26dd": {"raw_sql": "{{ dbt_expectations.test_expect_column_to_exist(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_expectations_expect_column_ff1ad5ae0ae39f719670800e20da91fe\") }}", "test_metadata": {"name": "expect_column_to_exist", "kwargs": {"column_name": "ATTRIBUTE_INDEX", "model": "{{ get_where_subquery(ref('core__fact_msg_attributes')) }}"}, "namespace": "dbt_expectations"}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt_expectations.test_expect_column_to_exist", "macro.dbt.get_where_subquery"], "nodes": ["model.axelar.core__fact_msg_attributes"]}, "config": {"enabled": true, "alias": "dbt_expectations_expect_column_ff1ad5ae0ae39f719670800e20da91fe", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": true, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "AXELAR_DEV", "schema": "dbt_expectations_expect_column_to_exist_core", "fqn": ["axelar", "gold", "dbt_expectations_expect_column_to_exist_core__fact_msg_attributes_ATTRIBUTE_INDEX"], "unique_id": "test.axelar.dbt_expectations_expect_column_to_exist_core__fact_msg_attributes_ATTRIBUTE_INDEX.c041ee26dd", "package_name": "axelar", "root_path": "C:\\Users\\jessi\\git\\axelar-models", "path": "dbt_expectations_expect_column_ff1ad5ae0ae39f719670800e20da91fe.sql", "original_file_path": "models\\gold\\core__fact_msg_attributes.yml", "name": "dbt_expectations_expect_column_to_exist_core__fact_msg_attributes_ATTRIBUTE_INDEX", "alias": "fact_msg_attributes_ATTRIBUTE_INDEX", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["core__fact_msg_attributes"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target\\compiled\\axelar\\models\\gold\\core__fact_msg_attributes.yml\\dbt_expectations_expect_column_ff1ad5ae0ae39f719670800e20da91fe.sql", "build_path": null, "deferred": false, "unrendered_config": {"store_failures": true, "alias": "dbt_expectations_expect_column_ff1ad5ae0ae39f719670800e20da91fe"}, "created_at": 1671050799.6182687, "compiled_sql": "\n\n    with test_data as (\n\n        select\n            cast('ATTRIBUTE_INDEX' as TEXT) as column_name,\n            9 as matching_column_index,\n            True as column_index_matches\n\n    )\n    select *\n    from test_data\n    where\n        not(matching_column_index >= 0 and column_index_matches)", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "AXELAR_DEV.dbt_expectations_expect_column_to_exist_core.fact_msg_attributes_ATTRIBUTE_INDEX", "column_name": "ATTRIBUTE_INDEX", "file_key_name": "models.core__fact_msg_attributes"}, "test.axelar.dbt_expectations_expect_column_to_exist_core__fact_msg_attributes_ATTRIBUTE_KEY.978c26f41e": {"raw_sql": "{{ dbt_expectations.test_expect_column_to_exist(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_expectations_expect_column_8d392900ed4aaaeb5f58f5952068a972\") }}", "test_metadata": {"name": "expect_column_to_exist", "kwargs": {"column_name": "ATTRIBUTE_KEY", "model": "{{ get_where_subquery(ref('core__fact_msg_attributes')) }}"}, "namespace": "dbt_expectations"}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt_expectations.test_expect_column_to_exist", "macro.dbt.get_where_subquery"], "nodes": ["model.axelar.core__fact_msg_attributes"]}, "config": {"enabled": true, "alias": "dbt_expectations_expect_column_8d392900ed4aaaeb5f58f5952068a972", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": true, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "AXELAR_DEV", "schema": "dbt_expectations_expect_column_to_exist_core", "fqn": ["axelar", "gold", "dbt_expectations_expect_column_to_exist_core__fact_msg_attributes_ATTRIBUTE_KEY"], "unique_id": "test.axelar.dbt_expectations_expect_column_to_exist_core__fact_msg_attributes_ATTRIBUTE_KEY.978c26f41e", "package_name": "axelar", "root_path": "C:\\Users\\jessi\\git\\axelar-models", "path": "dbt_expectations_expect_column_8d392900ed4aaaeb5f58f5952068a972.sql", "original_file_path": "models\\gold\\core__fact_msg_attributes.yml", "name": "dbt_expectations_expect_column_to_exist_core__fact_msg_attributes_ATTRIBUTE_KEY", "alias": "fact_msg_attributes_ATTRIBUTE_KEY", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["core__fact_msg_attributes"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target\\compiled\\axelar\\models\\gold\\core__fact_msg_attributes.yml\\dbt_expectations_expect_column_8d392900ed4aaaeb5f58f5952068a972.sql", "build_path": null, "deferred": false, "unrendered_config": {"store_failures": true, "alias": "dbt_expectations_expect_column_8d392900ed4aaaeb5f58f5952068a972"}, "created_at": 1671050799.6222692, "compiled_sql": "\n\n    with test_data as (\n\n        select\n            cast('ATTRIBUTE_KEY' as TEXT) as column_name,\n            10 as matching_column_index,\n            True as column_index_matches\n\n    )\n    select *\n    from test_data\n    where\n        not(matching_column_index >= 0 and column_index_matches)", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "AXELAR_DEV.dbt_expectations_expect_column_to_exist_core.fact_msg_attributes_ATTRIBUTE_KEY", "column_name": "ATTRIBUTE_KEY", "file_key_name": "models.core__fact_msg_attributes"}, "test.axelar.dbt_expectations_expect_column_to_exist_core__fact_msg_attributes_ATTRIBUTE_VALUE.f316cfca60": {"raw_sql": "{{ dbt_expectations.test_expect_column_to_exist(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_expectations_expect_column_838ecceda25c1da517356638286f87f1\") }}", "test_metadata": {"name": "expect_column_to_exist", "kwargs": {"column_name": "ATTRIBUTE_VALUE", "model": "{{ get_where_subquery(ref('core__fact_msg_attributes')) }}"}, "namespace": "dbt_expectations"}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt_expectations.test_expect_column_to_exist", "macro.dbt.get_where_subquery"], "nodes": ["model.axelar.core__fact_msg_attributes"]}, "config": {"enabled": true, "alias": "dbt_expectations_expect_column_838ecceda25c1da517356638286f87f1", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": true, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "AXELAR_DEV", "schema": "dbt_expectations_expect_column_to_exist_core", "fqn": ["axelar", "gold", "dbt_expectations_expect_column_to_exist_core__fact_msg_attributes_ATTRIBUTE_VALUE"], "unique_id": "test.axelar.dbt_expectations_expect_column_to_exist_core__fact_msg_attributes_ATTRIBUTE_VALUE.f316cfca60", "package_name": "axelar", "root_path": "C:\\Users\\jessi\\git\\axelar-models", "path": "dbt_expectations_expect_column_838ecceda25c1da517356638286f87f1.sql", "original_file_path": "models\\gold\\core__fact_msg_attributes.yml", "name": "dbt_expectations_expect_column_to_exist_core__fact_msg_attributes_ATTRIBUTE_VALUE", "alias": "fact_msg_attributes_ATTRIBUTE_VALUE", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["core__fact_msg_attributes"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target\\compiled\\axelar\\models\\gold\\core__fact_msg_attributes.yml\\dbt_expectations_expect_column_838ecceda25c1da517356638286f87f1.sql", "build_path": null, "deferred": false, "unrendered_config": {"store_failures": true, "alias": "dbt_expectations_expect_column_838ecceda25c1da517356638286f87f1"}, "created_at": 1671050799.6252644, "compiled_sql": "\n\n    with test_data as (\n\n        select\n            cast('ATTRIBUTE_VALUE' as TEXT) as column_name,\n            11 as matching_column_index,\n            True as column_index_matches\n\n    )\n    select *\n    from test_data\n    where\n        not(matching_column_index >= 0 and column_index_matches)", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "AXELAR_DEV.dbt_expectations_expect_column_to_exist_core.fact_msg_attributes_ATTRIBUTE_VALUE", "column_name": "ATTRIBUTE_VALUE", "file_key_name": "models.core__fact_msg_attributes"}, "test.axelar.dbt_expectations_expect_column_to_exist_core__fact_transactions_BLOCK_ID.37c1b7e860": {"raw_sql": "{{ dbt_expectations.test_expect_column_to_exist(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_expectations_expect_column_dedbf765f8b11285f96bca6fdcd6918e\") }}", "test_metadata": {"name": "expect_column_to_exist", "kwargs": {"column_name": "BLOCK_ID", "model": "{{ get_where_subquery(ref('core__fact_transactions')) }}"}, "namespace": "dbt_expectations"}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt_expectations.test_expect_column_to_exist", "macro.dbt.get_where_subquery"], "nodes": ["model.axelar.core__fact_transactions"]}, "config": {"enabled": true, "alias": "dbt_expectations_expect_column_dedbf765f8b11285f96bca6fdcd6918e", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": true, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "AXELAR_DEV", "schema": "dbt_expectations_expect_column_to_exist_core", "fqn": ["axelar", "gold", "dbt_expectations_expect_column_to_exist_core__fact_transactions_BLOCK_ID"], "unique_id": "test.axelar.dbt_expectations_expect_column_to_exist_core__fact_transactions_BLOCK_ID.37c1b7e860", "package_name": "axelar", "root_path": "C:\\Users\\jessi\\git\\axelar-models", "path": "dbt_expectations_expect_column_dedbf765f8b11285f96bca6fdcd6918e.sql", "original_file_path": "models\\gold\\core__fact_transactions.yml", "name": "dbt_expectations_expect_column_to_exist_core__fact_transactions_BLOCK_ID", "alias": "fact_transactions_BLOCK_ID", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["core__fact_transactions"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target\\compiled\\axelar\\models\\gold\\core__fact_transactions.yml\\dbt_expectations_expect_column_dedbf765f8b11285f96bca6fdcd6918e.sql", "build_path": null, "deferred": false, "unrendered_config": {"store_failures": true, "alias": "dbt_expectations_expect_column_dedbf765f8b11285f96bca6fdcd6918e"}, "created_at": 1671050799.635355, "compiled_sql": "\n\n    with test_data as (\n\n        select\n            cast('BLOCK_ID' as TEXT) as column_name,\n            0 as matching_column_index,\n            True as column_index_matches\n\n    )\n    select *\n    from test_data\n    where\n        not(matching_column_index >= 0 and column_index_matches)", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "AXELAR_DEV.dbt_expectations_expect_column_to_exist_core.fact_transactions_BLOCK_ID", "column_name": "BLOCK_ID", "file_key_name": "models.core__fact_transactions"}, "test.axelar.dbt_expectations_expect_column_to_exist_core__fact_transactions_BLOCK_TIMESTAMP.84e94e706b": {"raw_sql": "{{ dbt_expectations.test_expect_column_to_exist(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_expectations_expect_column_96434b526554dcd7bb5e3f00dab0f8a8\") }}", "test_metadata": {"name": "expect_column_to_exist", "kwargs": {"column_name": "BLOCK_TIMESTAMP", "model": "{{ get_where_subquery(ref('core__fact_transactions')) }}"}, "namespace": "dbt_expectations"}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt_expectations.test_expect_column_to_exist", "macro.dbt.get_where_subquery"], "nodes": ["model.axelar.core__fact_transactions"]}, "config": {"enabled": true, "alias": "dbt_expectations_expect_column_96434b526554dcd7bb5e3f00dab0f8a8", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": true, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "AXELAR_DEV", "schema": "dbt_expectations_expect_column_to_exist_core", "fqn": ["axelar", "gold", "dbt_expectations_expect_column_to_exist_core__fact_transactions_BLOCK_TIMESTAMP"], "unique_id": "test.axelar.dbt_expectations_expect_column_to_exist_core__fact_transactions_BLOCK_TIMESTAMP.84e94e706b", "package_name": "axelar", "root_path": "C:\\Users\\jessi\\git\\axelar-models", "path": "dbt_expectations_expect_column_96434b526554dcd7bb5e3f00dab0f8a8.sql", "original_file_path": "models\\gold\\core__fact_transactions.yml", "name": "dbt_expectations_expect_column_to_exist_core__fact_transactions_BLOCK_TIMESTAMP", "alias": "fact_transactions_BLOCK_TIMESTAMP", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["core__fact_transactions"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target\\compiled\\axelar\\models\\gold\\core__fact_transactions.yml\\dbt_expectations_expect_column_96434b526554dcd7bb5e3f00dab0f8a8.sql", "build_path": null, "deferred": false, "unrendered_config": {"store_failures": true, "alias": "dbt_expectations_expect_column_96434b526554dcd7bb5e3f00dab0f8a8"}, "created_at": 1671050799.6383514, "compiled_sql": "\n\n    with test_data as (\n\n        select\n            cast('BLOCK_TIMESTAMP' as TEXT) as column_name,\n            1 as matching_column_index,\n            True as column_index_matches\n\n    )\n    select *\n    from test_data\n    where\n        not(matching_column_index >= 0 and column_index_matches)", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "AXELAR_DEV.dbt_expectations_expect_column_to_exist_core.fact_transactions_BLOCK_TIMESTAMP", "column_name": "BLOCK_TIMESTAMP", "file_key_name": "models.core__fact_transactions"}, "test.axelar.dbt_expectations_expect_column_to_exist_core__fact_transactions_BLOCKCHAIN.8f714681bd": {"raw_sql": "{{ dbt_expectations.test_expect_column_to_exist(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_expectations_expect_column_01163f822e66fec316feeb69743c5911\") }}", "test_metadata": {"name": "expect_column_to_exist", "kwargs": {"column_name": "BLOCKCHAIN", "model": "{{ get_where_subquery(ref('core__fact_transactions')) }}"}, "namespace": "dbt_expectations"}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt_expectations.test_expect_column_to_exist", "macro.dbt.get_where_subquery"], "nodes": ["model.axelar.core__fact_transactions"]}, "config": {"enabled": true, "alias": "dbt_expectations_expect_column_01163f822e66fec316feeb69743c5911", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": true, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "AXELAR_DEV", "schema": "dbt_expectations_expect_column_to_exist_core", "fqn": ["axelar", "gold", "dbt_expectations_expect_column_to_exist_core__fact_transactions_BLOCKCHAIN"], "unique_id": "test.axelar.dbt_expectations_expect_column_to_exist_core__fact_transactions_BLOCKCHAIN.8f714681bd", "package_name": "axelar", "root_path": "C:\\Users\\jessi\\git\\axelar-models", "path": "dbt_expectations_expect_column_01163f822e66fec316feeb69743c5911.sql", "original_file_path": "models\\gold\\core__fact_transactions.yml", "name": "dbt_expectations_expect_column_to_exist_core__fact_transactions_BLOCKCHAIN", "alias": "fact_transactions_BLOCKCHAIN", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["core__fact_transactions"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target\\compiled\\axelar\\models\\gold\\core__fact_transactions.yml\\dbt_expectations_expect_column_01163f822e66fec316feeb69743c5911.sql", "build_path": null, "deferred": false, "unrendered_config": {"store_failures": true, "alias": "dbt_expectations_expect_column_01163f822e66fec316feeb69743c5911"}, "created_at": 1671050799.645665, "compiled_sql": "\n\n    with test_data as (\n\n        select\n            cast('BLOCKCHAIN' as TEXT) as column_name,\n            2 as matching_column_index,\n            True as column_index_matches\n\n    )\n    select *\n    from test_data\n    where\n        not(matching_column_index >= 0 and column_index_matches)", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "AXELAR_DEV.dbt_expectations_expect_column_to_exist_core.fact_transactions_BLOCKCHAIN", "column_name": "BLOCKCHAIN", "file_key_name": "models.core__fact_transactions"}, "test.axelar.dbt_expectations_expect_column_to_exist_core__fact_transactions_CHAIN_ID.a3a8b966b5": {"raw_sql": "{{ dbt_expectations.test_expect_column_to_exist(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_expectations_expect_column_ceaefc4b49fac8264b53b5554c34b314\") }}", "test_metadata": {"name": "expect_column_to_exist", "kwargs": {"column_name": "CHAIN_ID", "model": "{{ get_where_subquery(ref('core__fact_transactions')) }}"}, "namespace": "dbt_expectations"}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt_expectations.test_expect_column_to_exist", "macro.dbt.get_where_subquery"], "nodes": ["model.axelar.core__fact_transactions"]}, "config": {"enabled": true, "alias": "dbt_expectations_expect_column_ceaefc4b49fac8264b53b5554c34b314", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": true, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "AXELAR_DEV", "schema": "dbt_expectations_expect_column_to_exist_core", "fqn": ["axelar", "gold", "dbt_expectations_expect_column_to_exist_core__fact_transactions_CHAIN_ID"], "unique_id": "test.axelar.dbt_expectations_expect_column_to_exist_core__fact_transactions_CHAIN_ID.a3a8b966b5", "package_name": "axelar", "root_path": "C:\\Users\\jessi\\git\\axelar-models", "path": "dbt_expectations_expect_column_ceaefc4b49fac8264b53b5554c34b314.sql", "original_file_path": "models\\gold\\core__fact_transactions.yml", "name": "dbt_expectations_expect_column_to_exist_core__fact_transactions_CHAIN_ID", "alias": "fact_transactions_CHAIN_ID", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["core__fact_transactions"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target\\compiled\\axelar\\models\\gold\\core__fact_transactions.yml\\dbt_expectations_expect_column_ceaefc4b49fac8264b53b5554c34b314.sql", "build_path": null, "deferred": false, "unrendered_config": {"store_failures": true, "alias": "dbt_expectations_expect_column_ceaefc4b49fac8264b53b5554c34b314"}, "created_at": 1671050799.6507432, "compiled_sql": "\n\n    with test_data as (\n\n        select\n            cast('CHAIN_ID' as TEXT) as column_name,\n            3 as matching_column_index,\n            True as column_index_matches\n\n    )\n    select *\n    from test_data\n    where\n        not(matching_column_index >= 0 and column_index_matches)", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "AXELAR_DEV.dbt_expectations_expect_column_to_exist_core.fact_transactions_CHAIN_ID", "column_name": "CHAIN_ID", "file_key_name": "models.core__fact_transactions"}, "test.axelar.dbt_expectations_expect_column_to_exist_core__fact_transactions_TX_ID.f616a284b6": {"raw_sql": "{{ dbt_expectations.test_expect_column_to_exist(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_expectations_expect_column_a20e4181a30c39ecc0d63e0a8983d6ce\") }}", "test_metadata": {"name": "expect_column_to_exist", "kwargs": {"column_name": "TX_ID", "model": "{{ get_where_subquery(ref('core__fact_transactions')) }}"}, "namespace": "dbt_expectations"}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt_expectations.test_expect_column_to_exist", "macro.dbt.get_where_subquery"], "nodes": ["model.axelar.core__fact_transactions"]}, "config": {"enabled": true, "alias": "dbt_expectations_expect_column_a20e4181a30c39ecc0d63e0a8983d6ce", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": true, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "AXELAR_DEV", "schema": "dbt_expectations_expect_column_to_exist_core", "fqn": ["axelar", "gold", "dbt_expectations_expect_column_to_exist_core__fact_transactions_TX_ID"], "unique_id": "test.axelar.dbt_expectations_expect_column_to_exist_core__fact_transactions_TX_ID.f616a284b6", "package_name": "axelar", "root_path": "C:\\Users\\jessi\\git\\axelar-models", "path": "dbt_expectations_expect_column_a20e4181a30c39ecc0d63e0a8983d6ce.sql", "original_file_path": "models\\gold\\core__fact_transactions.yml", "name": "dbt_expectations_expect_column_to_exist_core__fact_transactions_TX_ID", "alias": "fact_transactions_TX_ID", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["core__fact_transactions"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target\\compiled\\axelar\\models\\gold\\core__fact_transactions.yml\\dbt_expectations_expect_column_a20e4181a30c39ecc0d63e0a8983d6ce.sql", "build_path": null, "deferred": false, "unrendered_config": {"store_failures": true, "alias": "dbt_expectations_expect_column_a20e4181a30c39ecc0d63e0a8983d6ce"}, "created_at": 1671050799.654757, "compiled_sql": "\n\n    with test_data as (\n\n        select\n            cast('TX_ID' as TEXT) as column_name,\n            4 as matching_column_index,\n            True as column_index_matches\n\n    )\n    select *\n    from test_data\n    where\n        not(matching_column_index >= 0 and column_index_matches)", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "AXELAR_DEV.dbt_expectations_expect_column_to_exist_core.fact_transactions_TX_ID", "column_name": "TX_ID", "file_key_name": "models.core__fact_transactions"}, "test.axelar.not_null_core__fact_transactions_TX_FROM.7ddc5dd2a3": {"raw_sql": "{{ test_not_null(**_dbt_generic_test_kwargs) }}{{ config(where=\"TX_SUCCEEDED = 'TRUE'\") }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "TX_FROM", "model": "{{ get_where_subquery(ref('core__fact_transactions')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.axelar.core__fact_transactions"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": true, "where": "TX_SUCCEEDED = 'TRUE'", "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "AXELAR_DEV", "schema": "not_null_core", "fqn": ["axelar", "gold", "not_null_core__fact_transactions_TX_FROM"], "unique_id": "test.axelar.not_null_core__fact_transactions_TX_FROM.7ddc5dd2a3", "package_name": "axelar", "root_path": "C:\\Users\\jessi\\git\\axelar-models", "path": "not_null_core__fact_transactions_TX_FROM.sql", "original_file_path": "models\\gold\\core__fact_transactions.yml", "name": "not_null_core__fact_transactions_TX_FROM", "alias": "fact_transactions_TX_FROM", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["core__fact_transactions"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target\\compiled\\axelar\\models\\gold\\core__fact_transactions.yml\\not_null_core__fact_transactions_TX_FROM.sql", "build_path": null, "deferred": false, "unrendered_config": {"store_failures": true, "where": "TX_SUCCEEDED = 'TRUE'"}, "created_at": 1671050799.658745, "compiled_sql": "\n    \n    \n\n\n\nselect *\nfrom (select * from AXELAR_DEV.core.fact_transactions where TX_SUCCEEDED = 'TRUE') dbt_subquery\nwhere TX_FROM is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "AXELAR_DEV.not_null_core.fact_transactions_TX_FROM", "column_name": "TX_FROM", "file_key_name": "models.core__fact_transactions"}, "test.axelar.dbt_expectations_expect_column_to_exist_core__fact_transactions_TX_SUCCEEDED.35dccdcf3e": {"raw_sql": "{{ dbt_expectations.test_expect_column_to_exist(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_expectations_expect_column_58f691f30508d0d149fa7493951d524e\") }}", "test_metadata": {"name": "expect_column_to_exist", "kwargs": {"column_name": "TX_SUCCEEDED", "model": "{{ get_where_subquery(ref('core__fact_transactions')) }}"}, "namespace": "dbt_expectations"}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt_expectations.test_expect_column_to_exist", "macro.dbt.get_where_subquery"], "nodes": ["model.axelar.core__fact_transactions"]}, "config": {"enabled": true, "alias": "dbt_expectations_expect_column_58f691f30508d0d149fa7493951d524e", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": true, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "AXELAR_DEV", "schema": "dbt_expectations_expect_column_to_exist_core", "fqn": ["axelar", "gold", "dbt_expectations_expect_column_to_exist_core__fact_transactions_TX_SUCCEEDED"], "unique_id": "test.axelar.dbt_expectations_expect_column_to_exist_core__fact_transactions_TX_SUCCEEDED.35dccdcf3e", "package_name": "axelar", "root_path": "C:\\Users\\jessi\\git\\axelar-models", "path": "dbt_expectations_expect_column_58f691f30508d0d149fa7493951d524e.sql", "original_file_path": "models\\gold\\core__fact_transactions.yml", "name": "dbt_expectations_expect_column_to_exist_core__fact_transactions_TX_SUCCEEDED", "alias": "fact_transactions_TX_SUCCEEDED", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["core__fact_transactions"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target\\compiled\\axelar\\models\\gold\\core__fact_transactions.yml\\dbt_expectations_expect_column_58f691f30508d0d149fa7493951d524e.sql", "build_path": null, "deferred": false, "unrendered_config": {"store_failures": true, "alias": "dbt_expectations_expect_column_58f691f30508d0d149fa7493951d524e"}, "created_at": 1671050799.6607466, "compiled_sql": "\n\n    with test_data as (\n\n        select\n            cast('TX_SUCCEEDED' as TEXT) as column_name,\n            6 as matching_column_index,\n            True as column_index_matches\n\n    )\n    select *\n    from test_data\n    where\n        not(matching_column_index >= 0 and column_index_matches)", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "AXELAR_DEV.dbt_expectations_expect_column_to_exist_core.fact_transactions_TX_SUCCEEDED", "column_name": "TX_SUCCEEDED", "file_key_name": "models.core__fact_transactions"}, "test.axelar.dbt_expectations_expect_column_to_exist_core__fact_transactions_CODESPACE.31e919d605": {"raw_sql": "{{ dbt_expectations.test_expect_column_to_exist(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_expectations_expect_column_714bdc355cdbee3622da17bdad57e8d1\") }}", "test_metadata": {"name": "expect_column_to_exist", "kwargs": {"column_name": "CODESPACE", "model": "{{ get_where_subquery(ref('core__fact_transactions')) }}"}, "namespace": "dbt_expectations"}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt_expectations.test_expect_column_to_exist", "macro.dbt.get_where_subquery"], "nodes": ["model.axelar.core__fact_transactions"]}, "config": {"enabled": true, "alias": "dbt_expectations_expect_column_714bdc355cdbee3622da17bdad57e8d1", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": true, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "AXELAR_DEV", "schema": "dbt_expectations_expect_column_to_exist_core", "fqn": ["axelar", "gold", "dbt_expectations_expect_column_to_exist_core__fact_transactions_CODESPACE"], "unique_id": "test.axelar.dbt_expectations_expect_column_to_exist_core__fact_transactions_CODESPACE.31e919d605", "package_name": "axelar", "root_path": "C:\\Users\\jessi\\git\\axelar-models", "path": "dbt_expectations_expect_column_714bdc355cdbee3622da17bdad57e8d1.sql", "original_file_path": "models\\gold\\core__fact_transactions.yml", "name": "dbt_expectations_expect_column_to_exist_core__fact_transactions_CODESPACE", "alias": "fact_transactions_CODESPACE", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["core__fact_transactions"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target\\compiled\\axelar\\models\\gold\\core__fact_transactions.yml\\dbt_expectations_expect_column_714bdc355cdbee3622da17bdad57e8d1.sql", "build_path": null, "deferred": false, "unrendered_config": {"store_failures": true, "alias": "dbt_expectations_expect_column_714bdc355cdbee3622da17bdad57e8d1"}, "created_at": 1671050799.6671367, "compiled_sql": "\n\n    with test_data as (\n\n        select\n            cast('CODESPACE' as TEXT) as column_name,\n            7 as matching_column_index,\n            True as column_index_matches\n\n    )\n    select *\n    from test_data\n    where\n        not(matching_column_index >= 0 and column_index_matches)", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "AXELAR_DEV.dbt_expectations_expect_column_to_exist_core.fact_transactions_CODESPACE", "column_name": "CODESPACE", "file_key_name": "models.core__fact_transactions"}, "test.axelar.not_null_core__fact_transactions_FEE.f477aa43d7": {"raw_sql": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "FEE", "model": "{{ get_where_subquery(ref('core__fact_transactions')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.axelar.core__fact_transactions"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": true, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "AXELAR_DEV", "schema": "not_null_core", "fqn": ["axelar", "gold", "not_null_core__fact_transactions_FEE"], "unique_id": "test.axelar.not_null_core__fact_transactions_FEE.f477aa43d7", "package_name": "axelar", "root_path": "C:\\Users\\jessi\\git\\axelar-models", "path": "not_null_core__fact_transactions_FEE.sql", "original_file_path": "models\\gold\\core__fact_transactions.yml", "name": "not_null_core__fact_transactions_FEE", "alias": "fact_transactions_FEE", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["core__fact_transactions"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target\\compiled\\axelar\\models\\gold\\core__fact_transactions.yml\\not_null_core__fact_transactions_FEE.sql", "build_path": null, "deferred": false, "unrendered_config": {"store_failures": true}, "created_at": 1671050799.6716523, "compiled_sql": "\n    \n    \n\n\n\nselect *\nfrom AXELAR_DEV.core.fact_transactions\nwhere FEE is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "AXELAR_DEV.not_null_core.fact_transactions_FEE", "column_name": "FEE", "file_key_name": "models.core__fact_transactions"}, "test.axelar.not_null_core__fact_transactions_FEE_DENOM.2f1e97f1ae": {"raw_sql": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "FEE_DENOM", "model": "{{ get_where_subquery(ref('core__fact_transactions')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.axelar.core__fact_transactions"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": true, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "AXELAR_DEV", "schema": "not_null_core", "fqn": ["axelar", "gold", "not_null_core__fact_transactions_FEE_DENOM"], "unique_id": "test.axelar.not_null_core__fact_transactions_FEE_DENOM.2f1e97f1ae", "package_name": "axelar", "root_path": "C:\\Users\\jessi\\git\\axelar-models", "path": "not_null_core__fact_transactions_FEE_DENOM.sql", "original_file_path": "models\\gold\\core__fact_transactions.yml", "name": "not_null_core__fact_transactions_FEE_DENOM", "alias": "fact_transactions_FEE_DENOM", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["core__fact_transactions"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target\\compiled\\axelar\\models\\gold\\core__fact_transactions.yml\\not_null_core__fact_transactions_FEE_DENOM.sql", "build_path": null, "deferred": false, "unrendered_config": {"store_failures": true}, "created_at": 1671050799.6726446, "compiled_sql": "\n    \n    \n\n\n\nselect *\nfrom AXELAR_DEV.core.fact_transactions\nwhere FEE_DENOM is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "AXELAR_DEV.not_null_core.fact_transactions_FEE_DENOM", "column_name": "FEE_DENOM", "file_key_name": "models.core__fact_transactions"}, "test.axelar.dbt_expectations_expect_column_to_exist_core__fact_transactions_GAS_USED.330cc6bb7e": {"raw_sql": "{{ dbt_expectations.test_expect_column_to_exist(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_expectations_expect_column_5b2f26b0848152079eee87e23c562e2a\") }}", "test_metadata": {"name": "expect_column_to_exist", "kwargs": {"column_name": "GAS_USED", "model": "{{ get_where_subquery(ref('core__fact_transactions')) }}"}, "namespace": "dbt_expectations"}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt_expectations.test_expect_column_to_exist", "macro.dbt.get_where_subquery"], "nodes": ["model.axelar.core__fact_transactions"]}, "config": {"enabled": true, "alias": "dbt_expectations_expect_column_5b2f26b0848152079eee87e23c562e2a", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": true, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "AXELAR_DEV", "schema": "dbt_expectations_expect_column_to_exist_core", "fqn": ["axelar", "gold", "dbt_expectations_expect_column_to_exist_core__fact_transactions_GAS_USED"], "unique_id": "test.axelar.dbt_expectations_expect_column_to_exist_core__fact_transactions_GAS_USED.330cc6bb7e", "package_name": "axelar", "root_path": "C:\\Users\\jessi\\git\\axelar-models", "path": "dbt_expectations_expect_column_5b2f26b0848152079eee87e23c562e2a.sql", "original_file_path": "models\\gold\\core__fact_transactions.yml", "name": "dbt_expectations_expect_column_to_exist_core__fact_transactions_GAS_USED", "alias": "fact_transactions_GAS_USED", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["core__fact_transactions"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target\\compiled\\axelar\\models\\gold\\core__fact_transactions.yml\\dbt_expectations_expect_column_5b2f26b0848152079eee87e23c562e2a.sql", "build_path": null, "deferred": false, "unrendered_config": {"store_failures": true, "alias": "dbt_expectations_expect_column_5b2f26b0848152079eee87e23c562e2a"}, "created_at": 1671050799.6746504, "compiled_sql": "\n\n    with test_data as (\n\n        select\n            cast('GAS_USED' as TEXT) as column_name,\n            10 as matching_column_index,\n            True as column_index_matches\n\n    )\n    select *\n    from test_data\n    where\n        not(matching_column_index >= 0 and column_index_matches)", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "AXELAR_DEV.dbt_expectations_expect_column_to_exist_core.fact_transactions_GAS_USED", "column_name": "GAS_USED", "file_key_name": "models.core__fact_transactions"}, "test.axelar.dbt_expectations_expect_column_to_exist_core__fact_transactions_GAS_WANTED.8717751539": {"raw_sql": "{{ dbt_expectations.test_expect_column_to_exist(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_expectations_expect_column_4844b97d4256b9730313887f9c6dec3a\") }}", "test_metadata": {"name": "expect_column_to_exist", "kwargs": {"column_name": "GAS_WANTED", "model": "{{ get_where_subquery(ref('core__fact_transactions')) }}"}, "namespace": "dbt_expectations"}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt_expectations.test_expect_column_to_exist", "macro.dbt.get_where_subquery"], "nodes": ["model.axelar.core__fact_transactions"]}, "config": {"enabled": true, "alias": "dbt_expectations_expect_column_4844b97d4256b9730313887f9c6dec3a", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": true, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "AXELAR_DEV", "schema": "dbt_expectations_expect_column_to_exist_core", "fqn": ["axelar", "gold", "dbt_expectations_expect_column_to_exist_core__fact_transactions_GAS_WANTED"], "unique_id": "test.axelar.dbt_expectations_expect_column_to_exist_core__fact_transactions_GAS_WANTED.8717751539", "package_name": "axelar", "root_path": "C:\\Users\\jessi\\git\\axelar-models", "path": "dbt_expectations_expect_column_4844b97d4256b9730313887f9c6dec3a.sql", "original_file_path": "models\\gold\\core__fact_transactions.yml", "name": "dbt_expectations_expect_column_to_exist_core__fact_transactions_GAS_WANTED", "alias": "fact_transactions_GAS_WANTED", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["core__fact_transactions"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target\\compiled\\axelar\\models\\gold\\core__fact_transactions.yml\\dbt_expectations_expect_column_4844b97d4256b9730313887f9c6dec3a.sql", "build_path": null, "deferred": false, "unrendered_config": {"store_failures": true, "alias": "dbt_expectations_expect_column_4844b97d4256b9730313887f9c6dec3a"}, "created_at": 1671050799.677782, "compiled_sql": "\n\n    with test_data as (\n\n        select\n            cast('GAS_WANTED' as TEXT) as column_name,\n            11 as matching_column_index,\n            True as column_index_matches\n\n    )\n    select *\n    from test_data\n    where\n        not(matching_column_index >= 0 and column_index_matches)", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "AXELAR_DEV.dbt_expectations_expect_column_to_exist_core.fact_transactions_GAS_WANTED", "column_name": "GAS_WANTED", "file_key_name": "models.core__fact_transactions"}, "test.axelar.dbt_expectations_expect_column_to_exist_core__fact_transactions_TX_CODE.8a8b1c8b5d": {"raw_sql": "{{ dbt_expectations.test_expect_column_to_exist(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_expectations_expect_column_e5bba550d3112ad33ed0d922b02eab15\") }}", "test_metadata": {"name": "expect_column_to_exist", "kwargs": {"column_name": "TX_CODE", "model": "{{ get_where_subquery(ref('core__fact_transactions')) }}"}, "namespace": "dbt_expectations"}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt_expectations.test_expect_column_to_exist", "macro.dbt.get_where_subquery"], "nodes": ["model.axelar.core__fact_transactions"]}, "config": {"enabled": true, "alias": "dbt_expectations_expect_column_e5bba550d3112ad33ed0d922b02eab15", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": true, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "AXELAR_DEV", "schema": "dbt_expectations_expect_column_to_exist_core", "fqn": ["axelar", "gold", "dbt_expectations_expect_column_to_exist_core__fact_transactions_TX_CODE"], "unique_id": "test.axelar.dbt_expectations_expect_column_to_exist_core__fact_transactions_TX_CODE.8a8b1c8b5d", "package_name": "axelar", "root_path": "C:\\Users\\jessi\\git\\axelar-models", "path": "dbt_expectations_expect_column_e5bba550d3112ad33ed0d922b02eab15.sql", "original_file_path": "models\\gold\\core__fact_transactions.yml", "name": "dbt_expectations_expect_column_to_exist_core__fact_transactions_TX_CODE", "alias": "fact_transactions_TX_CODE", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["core__fact_transactions"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target\\compiled\\axelar\\models\\gold\\core__fact_transactions.yml\\dbt_expectations_expect_column_e5bba550d3112ad33ed0d922b02eab15.sql", "build_path": null, "deferred": false, "unrendered_config": {"store_failures": true, "alias": "dbt_expectations_expect_column_e5bba550d3112ad33ed0d922b02eab15"}, "created_at": 1671050799.6841724, "compiled_sql": "\n\n    with test_data as (\n\n        select\n            cast('TX_CODE' as TEXT) as column_name,\n            12 as matching_column_index,\n            True as column_index_matches\n\n    )\n    select *\n    from test_data\n    where\n        not(matching_column_index >= 0 and column_index_matches)", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "AXELAR_DEV.dbt_expectations_expect_column_to_exist_core.fact_transactions_TX_CODE", "column_name": "TX_CODE", "file_key_name": "models.core__fact_transactions"}, "test.axelar.dbt_expectations_expect_column_to_exist_core__fact_transactions_TX_LOG.9983486fda": {"raw_sql": "{{ dbt_expectations.test_expect_column_to_exist(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_expectations_expect_column_f0d0909c410ae4f8b1959d3f8ecc3d4b\") }}", "test_metadata": {"name": "expect_column_to_exist", "kwargs": {"column_name": "TX_LOG", "model": "{{ get_where_subquery(ref('core__fact_transactions')) }}"}, "namespace": "dbt_expectations"}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt_expectations.test_expect_column_to_exist", "macro.dbt.get_where_subquery"], "nodes": ["model.axelar.core__fact_transactions"]}, "config": {"enabled": true, "alias": "dbt_expectations_expect_column_f0d0909c410ae4f8b1959d3f8ecc3d4b", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": true, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "AXELAR_DEV", "schema": "dbt_expectations_expect_column_to_exist_core", "fqn": ["axelar", "gold", "dbt_expectations_expect_column_to_exist_core__fact_transactions_TX_LOG"], "unique_id": "test.axelar.dbt_expectations_expect_column_to_exist_core__fact_transactions_TX_LOG.9983486fda", "package_name": "axelar", "root_path": "C:\\Users\\jessi\\git\\axelar-models", "path": "dbt_expectations_expect_column_f0d0909c410ae4f8b1959d3f8ecc3d4b.sql", "original_file_path": "models\\gold\\core__fact_transactions.yml", "name": "dbt_expectations_expect_column_to_exist_core__fact_transactions_TX_LOG", "alias": "fact_transactions_TX_LOG", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["core__fact_transactions"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target\\compiled\\axelar\\models\\gold\\core__fact_transactions.yml\\dbt_expectations_expect_column_f0d0909c410ae4f8b1959d3f8ecc3d4b.sql", "build_path": null, "deferred": false, "unrendered_config": {"store_failures": true, "alias": "dbt_expectations_expect_column_f0d0909c410ae4f8b1959d3f8ecc3d4b"}, "created_at": 1671050799.6871874, "compiled_sql": "\n\n    with test_data as (\n\n        select\n            cast('TX_LOG' as TEXT) as column_name,\n            13 as matching_column_index,\n            True as column_index_matches\n\n    )\n    select *\n    from test_data\n    where\n        not(matching_column_index >= 0 and column_index_matches)", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "AXELAR_DEV.dbt_expectations_expect_column_to_exist_core.fact_transactions_TX_LOG", "column_name": "TX_LOG", "file_key_name": "models.core__fact_transactions"}, "test.axelar.dbt_expectations_expect_column_to_exist_core__fact_transactions_MSGS.aee52badd9": {"raw_sql": "{{ dbt_expectations.test_expect_column_to_exist(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_expectations_expect_column_178ef9c7e42dd688dc32c2ee6a3794ed\") }}", "test_metadata": {"name": "expect_column_to_exist", "kwargs": {"column_name": "MSGS", "model": "{{ get_where_subquery(ref('core__fact_transactions')) }}"}, "namespace": "dbt_expectations"}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt_expectations.test_expect_column_to_exist", "macro.dbt.get_where_subquery"], "nodes": ["model.axelar.core__fact_transactions"]}, "config": {"enabled": true, "alias": "dbt_expectations_expect_column_178ef9c7e42dd688dc32c2ee6a3794ed", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": true, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "AXELAR_DEV", "schema": "dbt_expectations_expect_column_to_exist_core", "fqn": ["axelar", "gold", "dbt_expectations_expect_column_to_exist_core__fact_transactions_MSGS"], "unique_id": "test.axelar.dbt_expectations_expect_column_to_exist_core__fact_transactions_MSGS.aee52badd9", "package_name": "axelar", "root_path": "C:\\Users\\jessi\\git\\axelar-models", "path": "dbt_expectations_expect_column_178ef9c7e42dd688dc32c2ee6a3794ed.sql", "original_file_path": "models\\gold\\core__fact_transactions.yml", "name": "dbt_expectations_expect_column_to_exist_core__fact_transactions_MSGS", "alias": "fact_transactions_MSGS", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["core__fact_transactions"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target\\compiled\\axelar\\models\\gold\\core__fact_transactions.yml\\dbt_expectations_expect_column_178ef9c7e42dd688dc32c2ee6a3794ed.sql", "build_path": null, "deferred": false, "unrendered_config": {"store_failures": true, "alias": "dbt_expectations_expect_column_178ef9c7e42dd688dc32c2ee6a3794ed"}, "created_at": 1671050799.6901731, "compiled_sql": "\n\n    with test_data as (\n\n        select\n            cast('MSGS' as TEXT) as column_name,\n            14 as matching_column_index,\n            True as column_index_matches\n\n    )\n    select *\n    from test_data\n    where\n        not(matching_column_index >= 0 and column_index_matches)", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "AXELAR_DEV.dbt_expectations_expect_column_to_exist_core.fact_transactions_MSGS", "column_name": "MSGS", "file_key_name": "models.core__fact_transactions"}, "test.axelar.dbt_utils_unique_combination_of_columns_core__fact_transactions_TX_ID.57efb72c3f": {"raw_sql": "{{ dbt_utils.test_unique_combination_of_columns(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_utils_unique_combination_o_78d88bb76d565b8bc9c4dd51de3f37a0\") }}", "test_metadata": {"name": "unique_combination_of_columns", "kwargs": {"combination_of_columns": ["TX_ID"], "model": "{{ get_where_subquery(ref('core__fact_transactions')) }}"}, "namespace": "dbt_utils"}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt_utils.test_unique_combination_of_columns", "macro.dbt.get_where_subquery"], "nodes": ["model.axelar.core__fact_transactions"]}, "config": {"enabled": true, "alias": "dbt_utils_unique_combination_o_78d88bb76d565b8bc9c4dd51de3f37a0", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": true, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "AXELAR_DEV", "schema": "dbt_utils_unique_combination_of_columns_core", "fqn": ["axelar", "gold", "dbt_utils_unique_combination_of_columns_core__fact_transactions_TX_ID"], "unique_id": "test.axelar.dbt_utils_unique_combination_of_columns_core__fact_transactions_TX_ID.57efb72c3f", "package_name": "axelar", "root_path": "C:\\Users\\jessi\\git\\axelar-models", "path": "dbt_utils_unique_combination_o_78d88bb76d565b8bc9c4dd51de3f37a0.sql", "original_file_path": "models\\gold\\core__fact_transactions.yml", "name": "dbt_utils_unique_combination_of_columns_core__fact_transactions_TX_ID", "alias": "fact_transactions_TX_ID", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["core__fact_transactions"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target\\compiled\\axelar\\models\\gold\\core__fact_transactions.yml\\dbt_utils_unique_combination_o_78d88bb76d565b8bc9c4dd51de3f37a0.sql", "build_path": null, "deferred": false, "unrendered_config": {"store_failures": true, "alias": "dbt_utils_unique_combination_o_78d88bb76d565b8bc9c4dd51de3f37a0"}, "created_at": 1671050799.6941817, "compiled_sql": "\n\n\n\n\n\nwith validation_errors as (\n\n    select\n        TX_ID\n    from AXELAR_DEV.core.fact_transactions\n    group by TX_ID\n    having count(*) > 1\n\n)\n\nselect *\nfrom validation_errors\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "AXELAR_DEV.dbt_utils_unique_combination_of_columns_core.fact_transactions_TX_ID", "column_name": null, "file_key_name": "models.core__fact_transactions"}, "test.axelar.dbt_expectations_expect_column_to_exist_core__fact_transfers_BLOCK_ID.2c6f7e05cc": {"raw_sql": "{{ dbt_expectations.test_expect_column_to_exist(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_expectations_expect_column_06ec7a899413bab6063716744517f718\") }}", "test_metadata": {"name": "expect_column_to_exist", "kwargs": {"column_name": "BLOCK_ID", "model": "{{ get_where_subquery(ref('core__fact_transfers')) }}"}, "namespace": "dbt_expectations"}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt_expectations.test_expect_column_to_exist", "macro.dbt.get_where_subquery"], "nodes": ["model.axelar.core__fact_transfers"]}, "config": {"enabled": true, "alias": "dbt_expectations_expect_column_06ec7a899413bab6063716744517f718", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": true, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "AXELAR_DEV", "schema": "dbt_expectations_expect_column_to_exist_core", "fqn": ["axelar", "gold", "dbt_expectations_expect_column_to_exist_core__fact_transfers_BLOCK_ID"], "unique_id": "test.axelar.dbt_expectations_expect_column_to_exist_core__fact_transfers_BLOCK_ID.2c6f7e05cc", "package_name": "axelar", "root_path": "C:\\Users\\jessi\\git\\axelar-models", "path": "dbt_expectations_expect_column_06ec7a899413bab6063716744517f718.sql", "original_file_path": "models\\gold\\core__fact_transfers.yml", "name": "dbt_expectations_expect_column_to_exist_core__fact_transfers_BLOCK_ID", "alias": "fact_transfers_BLOCK_ID", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["core__fact_transfers"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target\\compiled\\axelar\\models\\gold\\core__fact_transfers.yml\\dbt_expectations_expect_column_06ec7a899413bab6063716744517f718.sql", "build_path": null, "deferred": false, "unrendered_config": {"store_failures": true, "alias": "dbt_expectations_expect_column_06ec7a899413bab6063716744517f718"}, "created_at": 1671050799.707175, "compiled_sql": "\n\n    with test_data as (\n\n        select\n            cast('BLOCK_ID' as TEXT) as column_name,\n            0 as matching_column_index,\n            True as column_index_matches\n\n    )\n    select *\n    from test_data\n    where\n        not(matching_column_index >= 0 and column_index_matches)", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "AXELAR_DEV.dbt_expectations_expect_column_to_exist_core.fact_transfers_BLOCK_ID", "column_name": "BLOCK_ID", "file_key_name": "models.core__fact_transfers"}, "test.axelar.dbt_expectations_expect_column_to_exist_core__fact_transfers_BLOCK_TIMESTAMP.0f58d69ae8": {"raw_sql": "{{ dbt_expectations.test_expect_column_to_exist(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_expectations_expect_column_826892449a5c717b6c5e94d938e1cd56\") }}", "test_metadata": {"name": "expect_column_to_exist", "kwargs": {"column_name": "BLOCK_TIMESTAMP", "model": "{{ get_where_subquery(ref('core__fact_transfers')) }}"}, "namespace": "dbt_expectations"}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt_expectations.test_expect_column_to_exist", "macro.dbt.get_where_subquery"], "nodes": ["model.axelar.core__fact_transfers"]}, "config": {"enabled": true, "alias": "dbt_expectations_expect_column_826892449a5c717b6c5e94d938e1cd56", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": true, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "AXELAR_DEV", "schema": "dbt_expectations_expect_column_to_exist_core", "fqn": ["axelar", "gold", "dbt_expectations_expect_column_to_exist_core__fact_transfers_BLOCK_TIMESTAMP"], "unique_id": "test.axelar.dbt_expectations_expect_column_to_exist_core__fact_transfers_BLOCK_TIMESTAMP.0f58d69ae8", "package_name": "axelar", "root_path": "C:\\Users\\jessi\\git\\axelar-models", "path": "dbt_expectations_expect_column_826892449a5c717b6c5e94d938e1cd56.sql", "original_file_path": "models\\gold\\core__fact_transfers.yml", "name": "dbt_expectations_expect_column_to_exist_core__fact_transfers_BLOCK_TIMESTAMP", "alias": "fact_transfers_BLOCK_TIMESTAMP", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["core__fact_transfers"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target\\compiled\\axelar\\models\\gold\\core__fact_transfers.yml\\dbt_expectations_expect_column_826892449a5c717b6c5e94d938e1cd56.sql", "build_path": null, "deferred": false, "unrendered_config": {"store_failures": true, "alias": "dbt_expectations_expect_column_826892449a5c717b6c5e94d938e1cd56"}, "created_at": 1671050799.710171, "compiled_sql": "\n\n    with test_data as (\n\n        select\n            cast('BLOCK_TIMESTAMP' as TEXT) as column_name,\n            1 as matching_column_index,\n            True as column_index_matches\n\n    )\n    select *\n    from test_data\n    where\n        not(matching_column_index >= 0 and column_index_matches)", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "AXELAR_DEV.dbt_expectations_expect_column_to_exist_core.fact_transfers_BLOCK_TIMESTAMP", "column_name": "BLOCK_TIMESTAMP", "file_key_name": "models.core__fact_transfers"}, "test.axelar.dbt_expectations_expect_column_to_exist_core__fact_transfers_BLOCKCHAIN.9239785984": {"raw_sql": "{{ dbt_expectations.test_expect_column_to_exist(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_expectations_expect_column_add254b299d0a31785b0e35628859bf6\") }}", "test_metadata": {"name": "expect_column_to_exist", "kwargs": {"column_name": "BLOCKCHAIN", "model": "{{ get_where_subquery(ref('core__fact_transfers')) }}"}, "namespace": "dbt_expectations"}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt_expectations.test_expect_column_to_exist", "macro.dbt.get_where_subquery"], "nodes": ["model.axelar.core__fact_transfers"]}, "config": {"enabled": true, "alias": "dbt_expectations_expect_column_add254b299d0a31785b0e35628859bf6", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": true, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "AXELAR_DEV", "schema": "dbt_expectations_expect_column_to_exist_core", "fqn": ["axelar", "gold", "dbt_expectations_expect_column_to_exist_core__fact_transfers_BLOCKCHAIN"], "unique_id": "test.axelar.dbt_expectations_expect_column_to_exist_core__fact_transfers_BLOCKCHAIN.9239785984", "package_name": "axelar", "root_path": "C:\\Users\\jessi\\git\\axelar-models", "path": "dbt_expectations_expect_column_add254b299d0a31785b0e35628859bf6.sql", "original_file_path": "models\\gold\\core__fact_transfers.yml", "name": "dbt_expectations_expect_column_to_exist_core__fact_transfers_BLOCKCHAIN", "alias": "fact_transfers_BLOCKCHAIN", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["core__fact_transfers"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target\\compiled\\axelar\\models\\gold\\core__fact_transfers.yml\\dbt_expectations_expect_column_add254b299d0a31785b0e35628859bf6.sql", "build_path": null, "deferred": false, "unrendered_config": {"store_failures": true, "alias": "dbt_expectations_expect_column_add254b299d0a31785b0e35628859bf6"}, "created_at": 1671050799.7131786, "compiled_sql": "\n\n    with test_data as (\n\n        select\n            cast('BLOCKCHAIN' as TEXT) as column_name,\n            2 as matching_column_index,\n            True as column_index_matches\n\n    )\n    select *\n    from test_data\n    where\n        not(matching_column_index >= 0 and column_index_matches)", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "AXELAR_DEV.dbt_expectations_expect_column_to_exist_core.fact_transfers_BLOCKCHAIN", "column_name": "BLOCKCHAIN", "file_key_name": "models.core__fact_transfers"}, "test.axelar.dbt_expectations_expect_column_to_exist_core__fact_transfers_CHAIN_ID.5fc5a9ebd8": {"raw_sql": "{{ dbt_expectations.test_expect_column_to_exist(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_expectations_expect_column_3f95845d4001b2da5c9fd63ae4239a7e\") }}", "test_metadata": {"name": "expect_column_to_exist", "kwargs": {"column_name": "CHAIN_ID", "model": "{{ get_where_subquery(ref('core__fact_transfers')) }}"}, "namespace": "dbt_expectations"}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt_expectations.test_expect_column_to_exist", "macro.dbt.get_where_subquery"], "nodes": ["model.axelar.core__fact_transfers"]}, "config": {"enabled": true, "alias": "dbt_expectations_expect_column_3f95845d4001b2da5c9fd63ae4239a7e", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": true, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "AXELAR_DEV", "schema": "dbt_expectations_expect_column_to_exist_core", "fqn": ["axelar", "gold", "dbt_expectations_expect_column_to_exist_core__fact_transfers_CHAIN_ID"], "unique_id": "test.axelar.dbt_expectations_expect_column_to_exist_core__fact_transfers_CHAIN_ID.5fc5a9ebd8", "package_name": "axelar", "root_path": "C:\\Users\\jessi\\git\\axelar-models", "path": "dbt_expectations_expect_column_3f95845d4001b2da5c9fd63ae4239a7e.sql", "original_file_path": "models\\gold\\core__fact_transfers.yml", "name": "dbt_expectations_expect_column_to_exist_core__fact_transfers_CHAIN_ID", "alias": "fact_transfers_CHAIN_ID", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["core__fact_transfers"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target\\compiled\\axelar\\models\\gold\\core__fact_transfers.yml\\dbt_expectations_expect_column_3f95845d4001b2da5c9fd63ae4239a7e.sql", "build_path": null, "deferred": false, "unrendered_config": {"store_failures": true, "alias": "dbt_expectations_expect_column_3f95845d4001b2da5c9fd63ae4239a7e"}, "created_at": 1671050799.7171893, "compiled_sql": "\n\n    with test_data as (\n\n        select\n            cast('CHAIN_ID' as TEXT) as column_name,\n            3 as matching_column_index,\n            True as column_index_matches\n\n    )\n    select *\n    from test_data\n    where\n        not(matching_column_index >= 0 and column_index_matches)", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "AXELAR_DEV.dbt_expectations_expect_column_to_exist_core.fact_transfers_CHAIN_ID", "column_name": "CHAIN_ID", "file_key_name": "models.core__fact_transfers"}, "test.axelar.dbt_expectations_expect_column_to_exist_core__fact_transfers_TX_ID.9cf9dd8a23": {"raw_sql": "{{ dbt_expectations.test_expect_column_to_exist(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_expectations_expect_column_96762ac61adfc72f3d7206bd3c98c8d0\") }}", "test_metadata": {"name": "expect_column_to_exist", "kwargs": {"column_name": "TX_ID", "model": "{{ get_where_subquery(ref('core__fact_transfers')) }}"}, "namespace": "dbt_expectations"}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt_expectations.test_expect_column_to_exist", "macro.dbt.get_where_subquery"], "nodes": ["model.axelar.core__fact_transfers"]}, "config": {"enabled": true, "alias": "dbt_expectations_expect_column_96762ac61adfc72f3d7206bd3c98c8d0", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": true, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "AXELAR_DEV", "schema": "dbt_expectations_expect_column_to_exist_core", "fqn": ["axelar", "gold", "dbt_expectations_expect_column_to_exist_core__fact_transfers_TX_ID"], "unique_id": "test.axelar.dbt_expectations_expect_column_to_exist_core__fact_transfers_TX_ID.9cf9dd8a23", "package_name": "axelar", "root_path": "C:\\Users\\jessi\\git\\axelar-models", "path": "dbt_expectations_expect_column_96762ac61adfc72f3d7206bd3c98c8d0.sql", "original_file_path": "models\\gold\\core__fact_transfers.yml", "name": "dbt_expectations_expect_column_to_exist_core__fact_transfers_TX_ID", "alias": "fact_transfers_TX_ID", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["core__fact_transfers"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target\\compiled\\axelar\\models\\gold\\core__fact_transfers.yml\\dbt_expectations_expect_column_96762ac61adfc72f3d7206bd3c98c8d0.sql", "build_path": null, "deferred": false, "unrendered_config": {"store_failures": true, "alias": "dbt_expectations_expect_column_96762ac61adfc72f3d7206bd3c98c8d0"}, "created_at": 1671050799.720188, "compiled_sql": "\n\n    with test_data as (\n\n        select\n            cast('TX_ID' as TEXT) as column_name,\n            4 as matching_column_index,\n            True as column_index_matches\n\n    )\n    select *\n    from test_data\n    where\n        not(matching_column_index >= 0 and column_index_matches)", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "AXELAR_DEV.dbt_expectations_expect_column_to_exist_core.fact_transfers_TX_ID", "column_name": "TX_ID", "file_key_name": "models.core__fact_transfers"}, "test.axelar.dbt_expectations_expect_column_to_exist_core__fact_transfers_TX_SUCCEEDED.bf6be5c382": {"raw_sql": "{{ dbt_expectations.test_expect_column_to_exist(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_expectations_expect_column_3e10ac1977df40479b23748ad8b35711\") }}", "test_metadata": {"name": "expect_column_to_exist", "kwargs": {"column_name": "TX_SUCCEEDED", "model": "{{ get_where_subquery(ref('core__fact_transfers')) }}"}, "namespace": "dbt_expectations"}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt_expectations.test_expect_column_to_exist", "macro.dbt.get_where_subquery"], "nodes": ["model.axelar.core__fact_transfers"]}, "config": {"enabled": true, "alias": "dbt_expectations_expect_column_3e10ac1977df40479b23748ad8b35711", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": true, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "AXELAR_DEV", "schema": "dbt_expectations_expect_column_to_exist_core", "fqn": ["axelar", "gold", "dbt_expectations_expect_column_to_exist_core__fact_transfers_TX_SUCCEEDED"], "unique_id": "test.axelar.dbt_expectations_expect_column_to_exist_core__fact_transfers_TX_SUCCEEDED.bf6be5c382", "package_name": "axelar", "root_path": "C:\\Users\\jessi\\git\\axelar-models", "path": "dbt_expectations_expect_column_3e10ac1977df40479b23748ad8b35711.sql", "original_file_path": "models\\gold\\core__fact_transfers.yml", "name": "dbt_expectations_expect_column_to_exist_core__fact_transfers_TX_SUCCEEDED", "alias": "fact_transfers_TX_SUCCEEDED", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["core__fact_transfers"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target\\compiled\\axelar\\models\\gold\\core__fact_transfers.yml\\dbt_expectations_expect_column_3e10ac1977df40479b23748ad8b35711.sql", "build_path": null, "deferred": false, "unrendered_config": {"store_failures": true, "alias": "dbt_expectations_expect_column_3e10ac1977df40479b23748ad8b35711"}, "created_at": 1671050799.7231853, "compiled_sql": "\n\n    with test_data as (\n\n        select\n            cast('TX_SUCCEEDED' as TEXT) as column_name,\n            5 as matching_column_index,\n            True as column_index_matches\n\n    )\n    select *\n    from test_data\n    where\n        not(matching_column_index >= 0 and column_index_matches)", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "AXELAR_DEV.dbt_expectations_expect_column_to_exist_core.fact_transfers_TX_SUCCEEDED", "column_name": "TX_SUCCEEDED", "file_key_name": "models.core__fact_transfers"}, "test.axelar.dbt_expectations_expect_column_to_exist_core__fact_transfers_TRANSFER_TYPE.ee95d8d48f": {"raw_sql": "{{ dbt_expectations.test_expect_column_to_exist(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_expectations_expect_column_afb865f102809da022c73cfc881b9e6f\") }}", "test_metadata": {"name": "expect_column_to_exist", "kwargs": {"column_name": "TRANSFER_TYPE", "model": "{{ get_where_subquery(ref('core__fact_transfers')) }}"}, "namespace": "dbt_expectations"}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt_expectations.test_expect_column_to_exist", "macro.dbt.get_where_subquery"], "nodes": ["model.axelar.core__fact_transfers"]}, "config": {"enabled": true, "alias": "dbt_expectations_expect_column_afb865f102809da022c73cfc881b9e6f", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": true, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "AXELAR_DEV", "schema": "dbt_expectations_expect_column_to_exist_core", "fqn": ["axelar", "gold", "dbt_expectations_expect_column_to_exist_core__fact_transfers_TRANSFER_TYPE"], "unique_id": "test.axelar.dbt_expectations_expect_column_to_exist_core__fact_transfers_TRANSFER_TYPE.ee95d8d48f", "package_name": "axelar", "root_path": "C:\\Users\\jessi\\git\\axelar-models", "path": "dbt_expectations_expect_column_afb865f102809da022c73cfc881b9e6f.sql", "original_file_path": "models\\gold\\core__fact_transfers.yml", "name": "dbt_expectations_expect_column_to_exist_core__fact_transfers_TRANSFER_TYPE", "alias": "fact_transfers_TRANSFER_TYPE", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["core__fact_transfers"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target\\compiled\\axelar\\models\\gold\\core__fact_transfers.yml\\dbt_expectations_expect_column_afb865f102809da022c73cfc881b9e6f.sql", "build_path": null, "deferred": false, "unrendered_config": {"store_failures": true, "alias": "dbt_expectations_expect_column_afb865f102809da022c73cfc881b9e6f"}, "created_at": 1671050799.7271767, "compiled_sql": "\n\n    with test_data as (\n\n        select\n            cast('TRANSFER_TYPE' as TEXT) as column_name,\n            6 as matching_column_index,\n            True as column_index_matches\n\n    )\n    select *\n    from test_data\n    where\n        not(matching_column_index >= 0 and column_index_matches)", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "AXELAR_DEV.dbt_expectations_expect_column_to_exist_core.fact_transfers_TRANSFER_TYPE", "column_name": "TRANSFER_TYPE", "file_key_name": "models.core__fact_transfers"}, "test.axelar.dbt_expectations_expect_column_to_exist_core__fact_transfers_SENDER.5acfdb6d48": {"raw_sql": "{{ dbt_expectations.test_expect_column_to_exist(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_expectations_expect_column_d75b3be78438a2c7db13edd81e5d985c\") }}", "test_metadata": {"name": "expect_column_to_exist", "kwargs": {"column_name": "SENDER", "model": "{{ get_where_subquery(ref('core__fact_transfers')) }}"}, "namespace": "dbt_expectations"}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt_expectations.test_expect_column_to_exist", "macro.dbt.get_where_subquery"], "nodes": ["model.axelar.core__fact_transfers"]}, "config": {"enabled": true, "alias": "dbt_expectations_expect_column_d75b3be78438a2c7db13edd81e5d985c", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": true, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "AXELAR_DEV", "schema": "dbt_expectations_expect_column_to_exist_core", "fqn": ["axelar", "gold", "dbt_expectations_expect_column_to_exist_core__fact_transfers_SENDER"], "unique_id": "test.axelar.dbt_expectations_expect_column_to_exist_core__fact_transfers_SENDER.5acfdb6d48", "package_name": "axelar", "root_path": "C:\\Users\\jessi\\git\\axelar-models", "path": "dbt_expectations_expect_column_d75b3be78438a2c7db13edd81e5d985c.sql", "original_file_path": "models\\gold\\core__fact_transfers.yml", "name": "dbt_expectations_expect_column_to_exist_core__fact_transfers_SENDER", "alias": "fact_transfers_SENDER", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["core__fact_transfers"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target\\compiled\\axelar\\models\\gold\\core__fact_transfers.yml\\dbt_expectations_expect_column_d75b3be78438a2c7db13edd81e5d985c.sql", "build_path": null, "deferred": false, "unrendered_config": {"store_failures": true, "alias": "dbt_expectations_expect_column_d75b3be78438a2c7db13edd81e5d985c"}, "created_at": 1671050799.730178, "compiled_sql": "\n\n    with test_data as (\n\n        select\n            cast('SENDER' as TEXT) as column_name,\n            7 as matching_column_index,\n            True as column_index_matches\n\n    )\n    select *\n    from test_data\n    where\n        not(matching_column_index >= 0 and column_index_matches)", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "AXELAR_DEV.dbt_expectations_expect_column_to_exist_core.fact_transfers_SENDER", "column_name": "SENDER", "file_key_name": "models.core__fact_transfers"}, "test.axelar.dbt_expectations_expect_column_to_exist_core__fact_transfers_AMOUNT.dfd5f028ff": {"raw_sql": "{{ dbt_expectations.test_expect_column_to_exist(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_expectations_expect_column_e61b6e3a305fab3136e7689da1148cc5\") }}", "test_metadata": {"name": "expect_column_to_exist", "kwargs": {"column_name": "AMOUNT", "model": "{{ get_where_subquery(ref('core__fact_transfers')) }}"}, "namespace": "dbt_expectations"}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt_expectations.test_expect_column_to_exist", "macro.dbt.get_where_subquery"], "nodes": ["model.axelar.core__fact_transfers"]}, "config": {"enabled": true, "alias": "dbt_expectations_expect_column_e61b6e3a305fab3136e7689da1148cc5", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": true, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "AXELAR_DEV", "schema": "dbt_expectations_expect_column_to_exist_core", "fqn": ["axelar", "gold", "dbt_expectations_expect_column_to_exist_core__fact_transfers_AMOUNT"], "unique_id": "test.axelar.dbt_expectations_expect_column_to_exist_core__fact_transfers_AMOUNT.dfd5f028ff", "package_name": "axelar", "root_path": "C:\\Users\\jessi\\git\\axelar-models", "path": "dbt_expectations_expect_column_e61b6e3a305fab3136e7689da1148cc5.sql", "original_file_path": "models\\gold\\core__fact_transfers.yml", "name": "dbt_expectations_expect_column_to_exist_core__fact_transfers_AMOUNT", "alias": "fact_transfers_AMOUNT", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["core__fact_transfers"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target\\compiled\\axelar\\models\\gold\\core__fact_transfers.yml\\dbt_expectations_expect_column_e61b6e3a305fab3136e7689da1148cc5.sql", "build_path": null, "deferred": false, "unrendered_config": {"store_failures": true, "alias": "dbt_expectations_expect_column_e61b6e3a305fab3136e7689da1148cc5"}, "created_at": 1671050799.7340963, "compiled_sql": "\n\n    with test_data as (\n\n        select\n            cast('AMOUNT' as TEXT) as column_name,\n            8 as matching_column_index,\n            True as column_index_matches\n\n    )\n    select *\n    from test_data\n    where\n        not(matching_column_index >= 0 and column_index_matches)", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "AXELAR_DEV.dbt_expectations_expect_column_to_exist_core.fact_transfers_AMOUNT", "column_name": "AMOUNT", "file_key_name": "models.core__fact_transfers"}, "test.axelar.dbt_expectations_expect_column_to_exist_core__fact_transfers_CURRENCY.cea97ef73f": {"raw_sql": "{{ dbt_expectations.test_expect_column_to_exist(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_expectations_expect_column_9e829724710829a4cf77c86596b0b398\") }}", "test_metadata": {"name": "expect_column_to_exist", "kwargs": {"column_name": "CURRENCY", "model": "{{ get_where_subquery(ref('core__fact_transfers')) }}"}, "namespace": "dbt_expectations"}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt_expectations.test_expect_column_to_exist", "macro.dbt.get_where_subquery"], "nodes": ["model.axelar.core__fact_transfers"]}, "config": {"enabled": true, "alias": "dbt_expectations_expect_column_9e829724710829a4cf77c86596b0b398", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": true, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "AXELAR_DEV", "schema": "dbt_expectations_expect_column_to_exist_core", "fqn": ["axelar", "gold", "dbt_expectations_expect_column_to_exist_core__fact_transfers_CURRENCY"], "unique_id": "test.axelar.dbt_expectations_expect_column_to_exist_core__fact_transfers_CURRENCY.cea97ef73f", "package_name": "axelar", "root_path": "C:\\Users\\jessi\\git\\axelar-models", "path": "dbt_expectations_expect_column_9e829724710829a4cf77c86596b0b398.sql", "original_file_path": "models\\gold\\core__fact_transfers.yml", "name": "dbt_expectations_expect_column_to_exist_core__fact_transfers_CURRENCY", "alias": "fact_transfers_CURRENCY", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["core__fact_transfers"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target\\compiled\\axelar\\models\\gold\\core__fact_transfers.yml\\dbt_expectations_expect_column_9e829724710829a4cf77c86596b0b398.sql", "build_path": null, "deferred": false, "unrendered_config": {"store_failures": true, "alias": "dbt_expectations_expect_column_9e829724710829a4cf77c86596b0b398"}, "created_at": 1671050799.738176, "compiled_sql": "\n\n    with test_data as (\n\n        select\n            cast('CURRENCY' as TEXT) as column_name,\n            9 as matching_column_index,\n            True as column_index_matches\n\n    )\n    select *\n    from test_data\n    where\n        not(matching_column_index >= 0 and column_index_matches)", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "AXELAR_DEV.dbt_expectations_expect_column_to_exist_core.fact_transfers_CURRENCY", "column_name": "CURRENCY", "file_key_name": "models.core__fact_transfers"}, "test.axelar.dbt_expectations_expect_column_to_exist_core__fact_transfers_DECIMAL.20f673d71f": {"raw_sql": "{{ dbt_expectations.test_expect_column_to_exist(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_expectations_expect_column_1af529dfc36284e1ac07c3977dedbc00\") }}", "test_metadata": {"name": "expect_column_to_exist", "kwargs": {"column_name": "DECIMAL", "model": "{{ get_where_subquery(ref('core__fact_transfers')) }}"}, "namespace": "dbt_expectations"}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt_expectations.test_expect_column_to_exist", "macro.dbt.get_where_subquery"], "nodes": ["model.axelar.core__fact_transfers"]}, "config": {"enabled": true, "alias": "dbt_expectations_expect_column_1af529dfc36284e1ac07c3977dedbc00", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": true, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "AXELAR_DEV", "schema": "dbt_expectations_expect_column_to_exist_core", "fqn": ["axelar", "gold", "dbt_expectations_expect_column_to_exist_core__fact_transfers_DECIMAL"], "unique_id": "test.axelar.dbt_expectations_expect_column_to_exist_core__fact_transfers_DECIMAL.20f673d71f", "package_name": "axelar", "root_path": "C:\\Users\\jessi\\git\\axelar-models", "path": "dbt_expectations_expect_column_1af529dfc36284e1ac07c3977dedbc00.sql", "original_file_path": "models\\gold\\core__fact_transfers.yml", "name": "dbt_expectations_expect_column_to_exist_core__fact_transfers_DECIMAL", "alias": "fact_transfers_DECIMAL", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["core__fact_transfers"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target\\compiled\\axelar\\models\\gold\\core__fact_transfers.yml\\dbt_expectations_expect_column_1af529dfc36284e1ac07c3977dedbc00.sql", "build_path": null, "deferred": false, "unrendered_config": {"store_failures": true, "alias": "dbt_expectations_expect_column_1af529dfc36284e1ac07c3977dedbc00"}, "created_at": 1671050799.7411802, "compiled_sql": "\n\n    with test_data as (\n\n        select\n            cast('DECIMAL' as TEXT) as column_name,\n            10 as matching_column_index,\n            True as column_index_matches\n\n    )\n    select *\n    from test_data\n    where\n        not(matching_column_index >= 0 and column_index_matches)", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "AXELAR_DEV.dbt_expectations_expect_column_to_exist_core.fact_transfers_DECIMAL", "column_name": "DECIMAL", "file_key_name": "models.core__fact_transfers"}, "test.axelar.dbt_expectations_expect_column_to_exist_core__fact_transfers_RECEIVER.442acc3f94": {"raw_sql": "{{ dbt_expectations.test_expect_column_to_exist(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_expectations_expect_column_7ad7c20bd546c1cda67a234d31728cef\") }}", "test_metadata": {"name": "expect_column_to_exist", "kwargs": {"column_name": "RECEIVER", "model": "{{ get_where_subquery(ref('core__fact_transfers')) }}"}, "namespace": "dbt_expectations"}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt_expectations.test_expect_column_to_exist", "macro.dbt.get_where_subquery"], "nodes": ["model.axelar.core__fact_transfers"]}, "config": {"enabled": true, "alias": "dbt_expectations_expect_column_7ad7c20bd546c1cda67a234d31728cef", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": true, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "AXELAR_DEV", "schema": "dbt_expectations_expect_column_to_exist_core", "fqn": ["axelar", "gold", "dbt_expectations_expect_column_to_exist_core__fact_transfers_RECEIVER"], "unique_id": "test.axelar.dbt_expectations_expect_column_to_exist_core__fact_transfers_RECEIVER.442acc3f94", "package_name": "axelar", "root_path": "C:\\Users\\jessi\\git\\axelar-models", "path": "dbt_expectations_expect_column_7ad7c20bd546c1cda67a234d31728cef.sql", "original_file_path": "models\\gold\\core__fact_transfers.yml", "name": "dbt_expectations_expect_column_to_exist_core__fact_transfers_RECEIVER", "alias": "fact_transfers_RECEIVER", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["core__fact_transfers"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target\\compiled\\axelar\\models\\gold\\core__fact_transfers.yml\\dbt_expectations_expect_column_7ad7c20bd546c1cda67a234d31728cef.sql", "build_path": null, "deferred": false, "unrendered_config": {"store_failures": true, "alias": "dbt_expectations_expect_column_7ad7c20bd546c1cda67a234d31728cef"}, "created_at": 1671050799.745184, "compiled_sql": "\n\n    with test_data as (\n\n        select\n            cast('RECEIVER' as TEXT) as column_name,\n            11 as matching_column_index,\n            True as column_index_matches\n\n    )\n    select *\n    from test_data\n    where\n        not(matching_column_index >= 0 and column_index_matches)", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "AXELAR_DEV.dbt_expectations_expect_column_to_exist_core.fact_transfers_RECEIVER", "column_name": "RECEIVER", "file_key_name": "models.core__fact_transfers"}, "test.axelar.not_null_silver__blocks_BLOCK_ID.2e78c008c9": {"raw_sql": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "BLOCK_ID", "model": "{{ get_where_subquery(ref('silver__blocks')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.axelar.silver__blocks"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": true, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "AXELAR_DEV", "schema": "not_null_silver", "fqn": ["axelar", "silver", "not_null_silver__blocks_BLOCK_ID"], "unique_id": "test.axelar.not_null_silver__blocks_BLOCK_ID.2e78c008c9", "package_name": "axelar", "root_path": "C:\\Users\\jessi\\git\\axelar-models", "path": "not_null_silver__blocks_BLOCK_ID.sql", "original_file_path": "models\\silver\\silver__blocks.yml", "name": "not_null_silver__blocks_BLOCK_ID", "alias": "blocks_BLOCK_ID", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["silver__blocks"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target\\compiled\\axelar\\models\\silver\\silver__blocks.yml\\not_null_silver__blocks_BLOCK_ID.sql", "build_path": null, "deferred": false, "unrendered_config": {"store_failures": true}, "created_at": 1671050799.7541788, "compiled_sql": "\n    \n    \n\n\n\nselect *\nfrom AXELAR_DEV.silver.blocks\nwhere BLOCK_ID is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "AXELAR_DEV.not_null_silver.blocks_BLOCK_ID", "column_name": "BLOCK_ID", "file_key_name": "models.silver__blocks"}, "test.axelar.not_null_silver__blocks_BLOCK_TIMESTAMP.b65a1fcead": {"raw_sql": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "BLOCK_TIMESTAMP", "model": "{{ get_where_subquery(ref('silver__blocks')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.axelar.silver__blocks"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": true, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "AXELAR_DEV", "schema": "not_null_silver", "fqn": ["axelar", "silver", "not_null_silver__blocks_BLOCK_TIMESTAMP"], "unique_id": "test.axelar.not_null_silver__blocks_BLOCK_TIMESTAMP.b65a1fcead", "package_name": "axelar", "root_path": "C:\\Users\\jessi\\git\\axelar-models", "path": "not_null_silver__blocks_BLOCK_TIMESTAMP.sql", "original_file_path": "models\\silver\\silver__blocks.yml", "name": "not_null_silver__blocks_BLOCK_TIMESTAMP", "alias": "blocks_BLOCK_TIMESTAMP", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["silver__blocks"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target\\compiled\\axelar\\models\\silver\\silver__blocks.yml\\not_null_silver__blocks_BLOCK_TIMESTAMP.sql", "build_path": null, "deferred": false, "unrendered_config": {"store_failures": true}, "created_at": 1671050799.7561805, "compiled_sql": "\n    \n    \n\n\n\nselect *\nfrom AXELAR_DEV.silver.blocks\nwhere BLOCK_TIMESTAMP is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "AXELAR_DEV.not_null_silver.blocks_BLOCK_TIMESTAMP", "column_name": "BLOCK_TIMESTAMP", "file_key_name": "models.silver__blocks"}, "test.axelar.dbt_expectations_expect_row_values_to_have_recent_data_silver__blocks_BLOCK_TIMESTAMP__day__1.3844f6e7d3": {"raw_sql": "{{ dbt_expectations.test_expect_row_values_to_have_recent_data(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_expectations_expect_row_va_59f17192e0f2a3ba8e68b2c9a7ff0692\") }}", "test_metadata": {"name": "expect_row_values_to_have_recent_data", "kwargs": {"datepart": "day", "interval": 1, "column_name": "BLOCK_TIMESTAMP", "model": "{{ get_where_subquery(ref('silver__blocks')) }}"}, "namespace": "dbt_expectations"}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt_expectations.test_expect_row_values_to_have_recent_data", "macro.dbt.get_where_subquery"], "nodes": ["model.axelar.silver__blocks"]}, "config": {"enabled": true, "alias": "dbt_expectations_expect_row_va_59f17192e0f2a3ba8e68b2c9a7ff0692", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": true, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "AXELAR_DEV", "schema": "dbt_expectations_expect_row_values_to_have_recent_data_silver", "fqn": ["axelar", "silver", "dbt_expectations_expect_row_values_to_have_recent_data_silver__blocks_BLOCK_TIMESTAMP__day__1"], "unique_id": "test.axelar.dbt_expectations_expect_row_values_to_have_recent_data_silver__blocks_BLOCK_TIMESTAMP__day__1.3844f6e7d3", "package_name": "axelar", "root_path": "C:\\Users\\jessi\\git\\axelar-models", "path": "dbt_expectations_expect_row_va_59f17192e0f2a3ba8e68b2c9a7ff0692.sql", "original_file_path": "models\\silver\\silver__blocks.yml", "name": "dbt_expectations_expect_row_values_to_have_recent_data_silver__blocks_BLOCK_TIMESTAMP__day__1", "alias": "blocks_BLOCK_TIMESTAMP", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["silver__blocks"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target\\compiled\\axelar\\models\\silver\\silver__blocks.yml\\dbt_expectations_expect_row_va_59f17192e0f2a3ba8e68b2c9a7ff0692.sql", "build_path": null, "deferred": false, "unrendered_config": {"store_failures": true, "alias": "dbt_expectations_expect_row_va_59f17192e0f2a3ba8e68b2c9a7ff0692"}, "created_at": 1671050799.7571735, "compiled_sql": "\n\n with max_recency as (\n\n    select max(cast(BLOCK_TIMESTAMP as TIMESTAMP)) as max_timestamp\n    from\n        AXELAR_DEV.silver.blocks\n    where\n        -- to exclude erroneous future dates\n        cast(BLOCK_TIMESTAMP as TIMESTAMP) <= convert_timezone('UTC', 'GMT',\n    cast(convert_timezone('UTC', current_timestamp()) as TIMESTAMP)\n)\n        \n)\nselect\n    *\nfrom\n    max_recency\nwhere\n    -- if the row_condition excludes all rows, we need to compare against a default date\n    -- to avoid false negatives\n    coalesce(max_timestamp, cast('1970-01-01' as TIMESTAMP))\n        <\n        cast(\n\n    dateadd(\n        day,\n        -1,\n        convert_timezone('UTC', 'GMT',\n    cast(convert_timezone('UTC', current_timestamp()) as TIMESTAMP)\n)\n        )\n\n as TIMESTAMP)\n\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "AXELAR_DEV.dbt_expectations_expect_row_values_to_have_recent_data_silver.blocks_BLOCK_TIMESTAMP", "column_name": "BLOCK_TIMESTAMP", "file_key_name": "models.silver__blocks"}, "test.axelar.not_null_silver__blocks_CHAIN_ID.a10569ee35": {"raw_sql": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "CHAIN_ID", "model": "{{ get_where_subquery(ref('silver__blocks')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.axelar.silver__blocks"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": true, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "AXELAR_DEV", "schema": "not_null_silver", "fqn": ["axelar", "silver", "not_null_silver__blocks_CHAIN_ID"], "unique_id": "test.axelar.not_null_silver__blocks_CHAIN_ID.a10569ee35", "package_name": "axelar", "root_path": "C:\\Users\\jessi\\git\\axelar-models", "path": "not_null_silver__blocks_CHAIN_ID.sql", "original_file_path": "models\\silver\\silver__blocks.yml", "name": "not_null_silver__blocks_CHAIN_ID", "alias": "blocks_CHAIN_ID", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["silver__blocks"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target\\compiled\\axelar\\models\\silver\\silver__blocks.yml\\not_null_silver__blocks_CHAIN_ID.sql", "build_path": null, "deferred": false, "unrendered_config": {"store_failures": true}, "created_at": 1671050799.8060088, "compiled_sql": "\n    \n    \n\n\n\nselect *\nfrom AXELAR_DEV.silver.blocks\nwhere CHAIN_ID is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "AXELAR_DEV.not_null_silver.blocks_CHAIN_ID", "column_name": "CHAIN_ID", "file_key_name": "models.silver__blocks"}, "test.axelar.not_null_silver__blocks_TX_COUNT.34525b51e6": {"raw_sql": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "TX_COUNT", "model": "{{ get_where_subquery(ref('silver__blocks')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.axelar.silver__blocks"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": true, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "AXELAR_DEV", "schema": "not_null_silver", "fqn": ["axelar", "silver", "not_null_silver__blocks_TX_COUNT"], "unique_id": "test.axelar.not_null_silver__blocks_TX_COUNT.34525b51e6", "package_name": "axelar", "root_path": "C:\\Users\\jessi\\git\\axelar-models", "path": "not_null_silver__blocks_TX_COUNT.sql", "original_file_path": "models\\silver\\silver__blocks.yml", "name": "not_null_silver__blocks_TX_COUNT", "alias": "blocks_TX_COUNT", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["silver__blocks"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target\\compiled\\axelar\\models\\silver\\silver__blocks.yml\\not_null_silver__blocks_TX_COUNT.sql", "build_path": null, "deferred": false, "unrendered_config": {"store_failures": true}, "created_at": 1671050799.8080106, "compiled_sql": "\n    \n    \n\n\n\nselect *\nfrom AXELAR_DEV.silver.blocks\nwhere TX_COUNT is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "AXELAR_DEV.not_null_silver.blocks_TX_COUNT", "column_name": "TX_COUNT", "file_key_name": "models.silver__blocks"}, "test.axelar.not_null_silver__blocks_PROPOSER_ADDRESS.00f683ae74": {"raw_sql": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "PROPOSER_ADDRESS", "model": "{{ get_where_subquery(ref('silver__blocks')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.axelar.silver__blocks"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": true, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "AXELAR_DEV", "schema": "not_null_silver", "fqn": ["axelar", "silver", "not_null_silver__blocks_PROPOSER_ADDRESS"], "unique_id": "test.axelar.not_null_silver__blocks_PROPOSER_ADDRESS.00f683ae74", "package_name": "axelar", "root_path": "C:\\Users\\jessi\\git\\axelar-models", "path": "not_null_silver__blocks_PROPOSER_ADDRESS.sql", "original_file_path": "models\\silver\\silver__blocks.yml", "name": "not_null_silver__blocks_PROPOSER_ADDRESS", "alias": "blocks_PROPOSER_ADDRESS", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["silver__blocks"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target\\compiled\\axelar\\models\\silver\\silver__blocks.yml\\not_null_silver__blocks_PROPOSER_ADDRESS.sql", "build_path": null, "deferred": false, "unrendered_config": {"store_failures": true}, "created_at": 1671050799.8089972, "compiled_sql": "\n    \n    \n\n\n\nselect *\nfrom AXELAR_DEV.silver.blocks\nwhere PROPOSER_ADDRESS is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "AXELAR_DEV.not_null_silver.blocks_PROPOSER_ADDRESS", "column_name": "PROPOSER_ADDRESS", "file_key_name": "models.silver__blocks"}, "test.axelar.not_null_silver__blocks_VALIDATOR_HASH.27e6c22877": {"raw_sql": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "VALIDATOR_HASH", "model": "{{ get_where_subquery(ref('silver__blocks')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.axelar.silver__blocks"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": true, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "AXELAR_DEV", "schema": "not_null_silver", "fqn": ["axelar", "silver", "not_null_silver__blocks_VALIDATOR_HASH"], "unique_id": "test.axelar.not_null_silver__blocks_VALIDATOR_HASH.27e6c22877", "package_name": "axelar", "root_path": "C:\\Users\\jessi\\git\\axelar-models", "path": "not_null_silver__blocks_VALIDATOR_HASH.sql", "original_file_path": "models\\silver\\silver__blocks.yml", "name": "not_null_silver__blocks_VALIDATOR_HASH", "alias": "blocks_VALIDATOR_HASH", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["silver__blocks"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target\\compiled\\axelar\\models\\silver\\silver__blocks.yml\\not_null_silver__blocks_VALIDATOR_HASH.sql", "build_path": null, "deferred": false, "unrendered_config": {"store_failures": true}, "created_at": 1671050799.8100028, "compiled_sql": "\n    \n    \n\n\n\nselect *\nfrom AXELAR_DEV.silver.blocks\nwhere VALIDATOR_HASH is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "AXELAR_DEV.not_null_silver.blocks_VALIDATOR_HASH", "column_name": "VALIDATOR_HASH", "file_key_name": "models.silver__blocks"}, "test.axelar.not_null_silver__blocks__PARTITION_BY_BLOCK_ID.6110aa251a": {"raw_sql": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "_PARTITION_BY_BLOCK_ID", "model": "{{ get_where_subquery(ref('silver__blocks')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.axelar.silver__blocks"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": true, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "AXELAR_DEV", "schema": "not_null_silver", "fqn": ["axelar", "silver", "not_null_silver__blocks__PARTITION_BY_BLOCK_ID"], "unique_id": "test.axelar.not_null_silver__blocks__PARTITION_BY_BLOCK_ID.6110aa251a", "package_name": "axelar", "root_path": "C:\\Users\\jessi\\git\\axelar-models", "path": "not_null_silver__blocks__PARTITION_BY_BLOCK_ID.sql", "original_file_path": "models\\silver\\silver__blocks.yml", "name": "not_null_silver__blocks__PARTITION_BY_BLOCK_ID", "alias": "blocks", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["silver__blocks"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target\\compiled\\axelar\\models\\silver\\silver__blocks.yml\\not_null_silver__blocks__PARTITION_BY_BLOCK_ID.sql", "build_path": null, "deferred": false, "unrendered_config": {"store_failures": true}, "created_at": 1671050799.8129203, "compiled_sql": "\n    \n    \n\n\n\nselect *\nfrom AXELAR_DEV.silver.blocks\nwhere _PARTITION_BY_BLOCK_ID is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "AXELAR_DEV.not_null_silver.blocks", "column_name": "_PARTITION_BY_BLOCK_ID", "file_key_name": "models.silver__blocks"}, "test.axelar.dbt_utils_unique_combination_of_columns_silver__blocks__UNIQUE_KEY.eee2c4d204": {"raw_sql": "{{ dbt_utils.test_unique_combination_of_columns(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_utils_unique_combination_o_37d4e2bd4d05fb35548425aabdc2cf67\") }}", "test_metadata": {"name": "unique_combination_of_columns", "kwargs": {"combination_of_columns": ["_UNIQUE_KEY"], "model": "{{ get_where_subquery(ref('silver__blocks')) }}"}, "namespace": "dbt_utils"}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt_utils.test_unique_combination_of_columns", "macro.dbt.get_where_subquery"], "nodes": ["model.axelar.silver__blocks"]}, "config": {"enabled": true, "alias": "dbt_utils_unique_combination_o_37d4e2bd4d05fb35548425aabdc2cf67", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": true, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "AXELAR_DEV", "schema": "dbt_utils_unique_combination_of_columns_silver", "fqn": ["axelar", "silver", "dbt_utils_unique_combination_of_columns_silver__blocks__UNIQUE_KEY"], "unique_id": "test.axelar.dbt_utils_unique_combination_of_columns_silver__blocks__UNIQUE_KEY.eee2c4d204", "package_name": "axelar", "root_path": "C:\\Users\\jessi\\git\\axelar-models", "path": "dbt_utils_unique_combination_o_37d4e2bd4d05fb35548425aabdc2cf67.sql", "original_file_path": "models\\silver\\silver__blocks.yml", "name": "dbt_utils_unique_combination_of_columns_silver__blocks__UNIQUE_KEY", "alias": "blocks", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["silver__blocks"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target\\compiled\\axelar\\models\\silver\\silver__blocks.yml\\dbt_utils_unique_combination_o_37d4e2bd4d05fb35548425aabdc2cf67.sql", "build_path": null, "deferred": false, "unrendered_config": {"store_failures": true, "alias": "dbt_utils_unique_combination_o_37d4e2bd4d05fb35548425aabdc2cf67"}, "created_at": 1671050799.8151498, "compiled_sql": "\n\n\n\n\n\nwith validation_errors as (\n\n    select\n        _UNIQUE_KEY\n    from AXELAR_DEV.silver.blocks\n    group by _UNIQUE_KEY\n    having count(*) > 1\n\n)\n\nselect *\nfrom validation_errors\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "AXELAR_DEV.dbt_utils_unique_combination_of_columns_silver.blocks", "column_name": null, "file_key_name": "models.silver__blocks"}, "test.axelar.sequence_gaps_silver__blocks_block_ID.ccd7e47b6e": {"raw_sql": "{{ test_sequence_gaps(**_dbt_generic_test_kwargs) }}{{ config(where=\"BLOCK_TIMESTAMP <= CURRENT_DATE - 1\") }}", "test_metadata": {"name": "sequence_gaps", "kwargs": {"column_name": "block_ID", "model": "{{ get_where_subquery(ref('silver__blocks')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.axelar.test_sequence_gaps", "macro.dbt.get_where_subquery"], "nodes": ["model.axelar.silver__blocks"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": true, "where": "BLOCK_TIMESTAMP <= CURRENT_DATE - 1", "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "AXELAR_DEV", "schema": "sequence_gaps_silver", "fqn": ["axelar", "silver", "sequence_gaps_silver__blocks_block_ID"], "unique_id": "test.axelar.sequence_gaps_silver__blocks_block_ID.ccd7e47b6e", "package_name": "axelar", "root_path": "C:\\Users\\jessi\\git\\axelar-models", "path": "sequence_gaps_silver__blocks_block_ID.sql", "original_file_path": "models\\silver\\silver__blocks.yml", "name": "sequence_gaps_silver__blocks_block_ID", "alias": "blocks_block_ID", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["silver__blocks"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target\\compiled\\axelar\\models\\silver\\silver__blocks.yml\\sequence_gaps_silver__blocks_block_ID.sql", "build_path": null, "deferred": false, "unrendered_config": {"store_failures": true, "where": "BLOCK_TIMESTAMP <= CURRENT_DATE - 1"}, "created_at": 1671050799.8231041, "compiled_sql": "WITH source AS (\n    SELECT\n        \n        block_ID,\n        LAG(\n            block_ID,\n            1\n        ) over (\n            \n            ORDER BY\n                block_ID ASC\n        ) AS prev_block_ID\n    FROM\n        (select * from AXELAR_DEV.silver.blocks where BLOCK_TIMESTAMP <= CURRENT_DATE - 1) dbt_subquery\n)\nSELECT\n    \n    prev_block_ID,\n    block_ID,\n    block_ID - prev_block_ID\n    - 1 AS gap\nFROM\n    source\nWHERE\n    block_ID - prev_block_ID <> 1\nORDER BY\n    gap DESC ", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "AXELAR_DEV.sequence_gaps_silver.blocks_block_ID", "column_name": null, "file_key_name": "models.silver__blocks"}, "test.axelar.not_null_silver__msgs_BLOCK_ID.1de1a37994": {"raw_sql": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "BLOCK_ID", "model": "{{ get_where_subquery(ref('silver__msgs')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.axelar.silver__msgs"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": true, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "AXELAR_DEV", "schema": "not_null_silver", "fqn": ["axelar", "silver", "not_null_silver__msgs_BLOCK_ID"], "unique_id": "test.axelar.not_null_silver__msgs_BLOCK_ID.1de1a37994", "package_name": "axelar", "root_path": "C:\\Users\\jessi\\git\\axelar-models", "path": "not_null_silver__msgs_BLOCK_ID.sql", "original_file_path": "models\\silver\\silver__msgs.yml", "name": "not_null_silver__msgs_BLOCK_ID", "alias": "msgs_BLOCK_ID", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["silver__msgs"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target\\compiled\\axelar\\models\\silver\\silver__msgs.yml\\not_null_silver__msgs_BLOCK_ID.sql", "build_path": null, "deferred": false, "unrendered_config": {"store_failures": true}, "created_at": 1671050799.8360476, "compiled_sql": "\n    \n    \n\n\n\nselect *\nfrom AXELAR_DEV.silver.msgs\nwhere BLOCK_ID is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "AXELAR_DEV.not_null_silver.msgs_BLOCK_ID", "column_name": "BLOCK_ID", "file_key_name": "models.silver__msgs"}, "test.axelar.not_null_silver__msgs_BLOCK_TIMESTAMP.5896b5fc79": {"raw_sql": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "BLOCK_TIMESTAMP", "model": "{{ get_where_subquery(ref('silver__msgs')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.axelar.silver__msgs"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": true, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "AXELAR_DEV", "schema": "not_null_silver", "fqn": ["axelar", "silver", "not_null_silver__msgs_BLOCK_TIMESTAMP"], "unique_id": "test.axelar.not_null_silver__msgs_BLOCK_TIMESTAMP.5896b5fc79", "package_name": "axelar", "root_path": "C:\\Users\\jessi\\git\\axelar-models", "path": "not_null_silver__msgs_BLOCK_TIMESTAMP.sql", "original_file_path": "models\\silver\\silver__msgs.yml", "name": "not_null_silver__msgs_BLOCK_TIMESTAMP", "alias": "msgs_BLOCK_TIMESTAMP", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["silver__msgs"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target\\compiled\\axelar\\models\\silver\\silver__msgs.yml\\not_null_silver__msgs_BLOCK_TIMESTAMP.sql", "build_path": null, "deferred": false, "unrendered_config": {"store_failures": true}, "created_at": 1671050799.8380973, "compiled_sql": "\n    \n    \n\n\n\nselect *\nfrom AXELAR_DEV.silver.msgs\nwhere BLOCK_TIMESTAMP is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "AXELAR_DEV.not_null_silver.msgs_BLOCK_TIMESTAMP", "column_name": "BLOCK_TIMESTAMP", "file_key_name": "models.silver__msgs"}, "test.axelar.dbt_expectations_expect_row_values_to_have_recent_data_silver__msgs_BLOCK_TIMESTAMP__day__1.7d26c028d2": {"raw_sql": "{{ dbt_expectations.test_expect_row_values_to_have_recent_data(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_expectations_expect_row_va_8b7606cda4ae1f5db49476738b169ca8\") }}", "test_metadata": {"name": "expect_row_values_to_have_recent_data", "kwargs": {"datepart": "day", "interval": 1, "column_name": "BLOCK_TIMESTAMP", "model": "{{ get_where_subquery(ref('silver__msgs')) }}"}, "namespace": "dbt_expectations"}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt_expectations.test_expect_row_values_to_have_recent_data", "macro.dbt.get_where_subquery"], "nodes": ["model.axelar.silver__msgs"]}, "config": {"enabled": true, "alias": "dbt_expectations_expect_row_va_8b7606cda4ae1f5db49476738b169ca8", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": true, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "AXELAR_DEV", "schema": "dbt_expectations_expect_row_values_to_have_recent_data_silver", "fqn": ["axelar", "silver", "dbt_expectations_expect_row_values_to_have_recent_data_silver__msgs_BLOCK_TIMESTAMP__day__1"], "unique_id": "test.axelar.dbt_expectations_expect_row_values_to_have_recent_data_silver__msgs_BLOCK_TIMESTAMP__day__1.7d26c028d2", "package_name": "axelar", "root_path": "C:\\Users\\jessi\\git\\axelar-models", "path": "dbt_expectations_expect_row_va_8b7606cda4ae1f5db49476738b169ca8.sql", "original_file_path": "models\\silver\\silver__msgs.yml", "name": "dbt_expectations_expect_row_values_to_have_recent_data_silver__msgs_BLOCK_TIMESTAMP__day__1", "alias": "msgs_BLOCK_TIMESTAMP", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["silver__msgs"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target\\compiled\\axelar\\models\\silver\\silver__msgs.yml\\dbt_expectations_expect_row_va_8b7606cda4ae1f5db49476738b169ca8.sql", "build_path": null, "deferred": false, "unrendered_config": {"store_failures": true, "alias": "dbt_expectations_expect_row_va_8b7606cda4ae1f5db49476738b169ca8"}, "created_at": 1671050799.8391056, "compiled_sql": "\n\n with max_recency as (\n\n    select max(cast(BLOCK_TIMESTAMP as TIMESTAMP)) as max_timestamp\n    from\n        AXELAR_DEV.silver.msgs\n    where\n        -- to exclude erroneous future dates\n        cast(BLOCK_TIMESTAMP as TIMESTAMP) <= convert_timezone('UTC', 'GMT',\n    cast(convert_timezone('UTC', current_timestamp()) as TIMESTAMP)\n)\n        \n)\nselect\n    *\nfrom\n    max_recency\nwhere\n    -- if the row_condition excludes all rows, we need to compare against a default date\n    -- to avoid false negatives\n    coalesce(max_timestamp, cast('1970-01-01' as TIMESTAMP))\n        <\n        cast(\n\n    dateadd(\n        day,\n        -1,\n        convert_timezone('UTC', 'GMT',\n    cast(convert_timezone('UTC', current_timestamp()) as TIMESTAMP)\n)\n        )\n\n as TIMESTAMP)\n\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "AXELAR_DEV.dbt_expectations_expect_row_values_to_have_recent_data_silver.msgs_BLOCK_TIMESTAMP", "column_name": "BLOCK_TIMESTAMP", "file_key_name": "models.silver__msgs"}, "test.axelar.dbt_expectations_expect_column_values_to_be_in_type_list_silver__msgs_BLOCK_TIMESTAMP__TIMESTAMP_NTZ.dfd05a3d5b": {"raw_sql": "{{ dbt_expectations.test_expect_column_values_to_be_in_type_list(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_expectations_expect_column_4ad220d8015481264c5bc5b08ea38bc0\") }}", "test_metadata": {"name": "expect_column_values_to_be_in_type_list", "kwargs": {"column_type_list": ["TIMESTAMP_NTZ"], "column_name": "BLOCK_TIMESTAMP", "model": "{{ get_where_subquery(ref('silver__msgs')) }}"}, "namespace": "dbt_expectations"}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt_expectations.test_expect_column_values_to_be_in_type_list", "macro.dbt.get_where_subquery"], "nodes": ["model.axelar.silver__msgs"]}, "config": {"enabled": true, "alias": "dbt_expectations_expect_column_4ad220d8015481264c5bc5b08ea38bc0", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": true, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "AXELAR_DEV", "schema": "dbt_expectations_expect_column_values_to_be_in_type_list_silver", "fqn": ["axelar", "silver", "dbt_expectations_expect_column_values_to_be_in_type_list_silver__msgs_BLOCK_TIMESTAMP__TIMESTAMP_NTZ"], "unique_id": "test.axelar.dbt_expectations_expect_column_values_to_be_in_type_list_silver__msgs_BLOCK_TIMESTAMP__TIMESTAMP_NTZ.dfd05a3d5b", "package_name": "axelar", "root_path": "C:\\Users\\jessi\\git\\axelar-models", "path": "dbt_expectations_expect_column_4ad220d8015481264c5bc5b08ea38bc0.sql", "original_file_path": "models\\silver\\silver__msgs.yml", "name": "dbt_expectations_expect_column_values_to_be_in_type_list_silver__msgs_BLOCK_TIMESTAMP__TIMESTAMP_NTZ", "alias": "msgs_BLOCK_TIMESTAMP", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["silver__msgs"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target\\compiled\\axelar\\models\\silver\\silver__msgs.yml\\dbt_expectations_expect_column_4ad220d8015481264c5bc5b08ea38bc0.sql", "build_path": null, "deferred": false, "unrendered_config": {"store_failures": true, "alias": "dbt_expectations_expect_column_4ad220d8015481264c5bc5b08ea38bc0"}, "created_at": 1671050799.8611078, "compiled_sql": "with relation_columns as (\n\n        \n        select\n            cast('BLOCK_ID' as TEXT) as relation_column,\n            cast('NUMBER' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('BLOCK_TIMESTAMP' as TEXT) as relation_column,\n            cast('TIMESTAMP_NTZ' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('BLOCKCHAIN' as TEXT) as relation_column,\n            cast('VARCHAR' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('CHAIN_ID' as TEXT) as relation_column,\n            cast('VARCHAR' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('TX_ID' as TEXT) as relation_column,\n            cast('VARCHAR' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('TX_SUCCEEDED' as TEXT) as relation_column,\n            cast('BOOLEAN' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('MSG_GROUP' as TEXT) as relation_column,\n            cast('NUMBER' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('MSG_SUB_GROUP' as TEXT) as relation_column,\n            cast('NUMBER' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('MSG_INDEX' as TEXT) as relation_column,\n            cast('NUMBER' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('MSG_TYPE' as TEXT) as relation_column,\n            cast('VARCHAR' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('MSG' as TEXT) as relation_column,\n            cast('VARIANT' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('_UNIQUE_KEY' as TEXT) as relation_column,\n            cast('VARCHAR' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('_PARTITION_BY_BLOCK_ID' as TEXT) as relation_column,\n            cast('NUMBER' as TEXT) as relation_column_type\n        \n        \n    ),\n    test_data as (\n\n        select\n            *\n        from\n            relation_columns\n        where\n            relation_column = 'BLOCK_TIMESTAMP'\n            and\n            relation_column_type not in ('TIMESTAMP_NTZ')\n\n    )\n    select *\n    from test_data", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "AXELAR_DEV.dbt_expectations_expect_column_values_to_be_in_type_list_silver.msgs_BLOCK_TIMESTAMP", "column_name": "BLOCK_TIMESTAMP", "file_key_name": "models.silver__msgs"}, "test.axelar.not_null_silver__msgs_CHAIN_ID.41ac59beba": {"raw_sql": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "CHAIN_ID", "model": "{{ get_where_subquery(ref('silver__msgs')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.axelar.silver__msgs"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": true, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "AXELAR_DEV", "schema": "not_null_silver", "fqn": ["axelar", "silver", "not_null_silver__msgs_CHAIN_ID"], "unique_id": "test.axelar.not_null_silver__msgs_CHAIN_ID.41ac59beba", "package_name": "axelar", "root_path": "C:\\Users\\jessi\\git\\axelar-models", "path": "not_null_silver__msgs_CHAIN_ID.sql", "original_file_path": "models\\silver\\silver__msgs.yml", "name": "not_null_silver__msgs_CHAIN_ID", "alias": "msgs_CHAIN_ID", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["silver__msgs"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target\\compiled\\axelar\\models\\silver\\silver__msgs.yml\\not_null_silver__msgs_CHAIN_ID.sql", "build_path": null, "deferred": false, "unrendered_config": {"store_failures": true}, "created_at": 1671050799.8717694, "compiled_sql": "\n    \n    \n\n\n\nselect *\nfrom AXELAR_DEV.silver.msgs\nwhere CHAIN_ID is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "AXELAR_DEV.not_null_silver.msgs_CHAIN_ID", "column_name": "CHAIN_ID", "file_key_name": "models.silver__msgs"}, "test.axelar.not_null_silver__msgs_TX_ID.59a107fa1e": {"raw_sql": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "TX_ID", "model": "{{ get_where_subquery(ref('silver__msgs')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.axelar.silver__msgs"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": true, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "AXELAR_DEV", "schema": "not_null_silver", "fqn": ["axelar", "silver", "not_null_silver__msgs_TX_ID"], "unique_id": "test.axelar.not_null_silver__msgs_TX_ID.59a107fa1e", "package_name": "axelar", "root_path": "C:\\Users\\jessi\\git\\axelar-models", "path": "not_null_silver__msgs_TX_ID.sql", "original_file_path": "models\\silver\\silver__msgs.yml", "name": "not_null_silver__msgs_TX_ID", "alias": "msgs_TX_ID", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["silver__msgs"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target\\compiled\\axelar\\models\\silver\\silver__msgs.yml\\not_null_silver__msgs_TX_ID.sql", "build_path": null, "deferred": false, "unrendered_config": {"store_failures": true}, "created_at": 1671050799.872783, "compiled_sql": "\n    \n    \n\n\n\nselect *\nfrom AXELAR_DEV.silver.msgs\nwhere TX_ID is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "AXELAR_DEV.not_null_silver.msgs_TX_ID", "column_name": "TX_ID", "file_key_name": "models.silver__msgs"}, "test.axelar.not_null_silver__msgs_TX_SUCCEEDED.e7c82779e2": {"raw_sql": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "TX_SUCCEEDED", "model": "{{ get_where_subquery(ref('silver__msgs')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.axelar.silver__msgs"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": true, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "AXELAR_DEV", "schema": "not_null_silver", "fqn": ["axelar", "silver", "not_null_silver__msgs_TX_SUCCEEDED"], "unique_id": "test.axelar.not_null_silver__msgs_TX_SUCCEEDED.e7c82779e2", "package_name": "axelar", "root_path": "C:\\Users\\jessi\\git\\axelar-models", "path": "not_null_silver__msgs_TX_SUCCEEDED.sql", "original_file_path": "models\\silver\\silver__msgs.yml", "name": "not_null_silver__msgs_TX_SUCCEEDED", "alias": "msgs_TX_SUCCEEDED", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["silver__msgs"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target\\compiled\\axelar\\models\\silver\\silver__msgs.yml\\not_null_silver__msgs_TX_SUCCEEDED.sql", "build_path": null, "deferred": false, "unrendered_config": {"store_failures": true}, "created_at": 1671050799.873777, "compiled_sql": "\n    \n    \n\n\n\nselect *\nfrom AXELAR_DEV.silver.msgs\nwhere TX_SUCCEEDED is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "AXELAR_DEV.not_null_silver.msgs_TX_SUCCEEDED", "column_name": "TX_SUCCEEDED", "file_key_name": "models.silver__msgs"}, "test.axelar.not_null_silver__msgs_MSG_INDEX.227765e0bf": {"raw_sql": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "MSG_INDEX", "model": "{{ get_where_subquery(ref('silver__msgs')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.axelar.silver__msgs"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": true, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "AXELAR_DEV", "schema": "not_null_silver", "fqn": ["axelar", "silver", "not_null_silver__msgs_MSG_INDEX"], "unique_id": "test.axelar.not_null_silver__msgs_MSG_INDEX.227765e0bf", "package_name": "axelar", "root_path": "C:\\Users\\jessi\\git\\axelar-models", "path": "not_null_silver__msgs_MSG_INDEX.sql", "original_file_path": "models\\silver\\silver__msgs.yml", "name": "not_null_silver__msgs_MSG_INDEX", "alias": "msgs_MSG_INDEX", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["silver__msgs"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target\\compiled\\axelar\\models\\silver\\silver__msgs.yml\\not_null_silver__msgs_MSG_INDEX.sql", "build_path": null, "deferred": false, "unrendered_config": {"store_failures": true}, "created_at": 1671050799.876225, "compiled_sql": "\n    \n    \n\n\n\nselect *\nfrom AXELAR_DEV.silver.msgs\nwhere MSG_INDEX is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "AXELAR_DEV.not_null_silver.msgs_MSG_INDEX", "column_name": "MSG_INDEX", "file_key_name": "models.silver__msgs"}, "test.axelar.dbt_expectations_expect_column_values_to_be_in_type_list_silver__msgs_MSG_INDEX__NUMBER__FLOAT.fd6bcc57f5": {"raw_sql": "{{ dbt_expectations.test_expect_column_values_to_be_in_type_list(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_expectations_expect_column_49b195a36b135b701165de9077016793\") }}", "test_metadata": {"name": "expect_column_values_to_be_in_type_list", "kwargs": {"column_type_list": ["NUMBER", "FLOAT"], "column_name": "MSG_INDEX", "model": "{{ get_where_subquery(ref('silver__msgs')) }}"}, "namespace": "dbt_expectations"}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt_expectations.test_expect_column_values_to_be_in_type_list", "macro.dbt.get_where_subquery"], "nodes": ["model.axelar.silver__msgs"]}, "config": {"enabled": true, "alias": "dbt_expectations_expect_column_49b195a36b135b701165de9077016793", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": true, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "AXELAR_DEV", "schema": "dbt_expectations_expect_column_values_to_be_in_type_list_silver", "fqn": ["axelar", "silver", "dbt_expectations_expect_column_values_to_be_in_type_list_silver__msgs_MSG_INDEX__NUMBER__FLOAT"], "unique_id": "test.axelar.dbt_expectations_expect_column_values_to_be_in_type_list_silver__msgs_MSG_INDEX__NUMBER__FLOAT.fd6bcc57f5", "package_name": "axelar", "root_path": "C:\\Users\\jessi\\git\\axelar-models", "path": "dbt_expectations_expect_column_49b195a36b135b701165de9077016793.sql", "original_file_path": "models\\silver\\silver__msgs.yml", "name": "dbt_expectations_expect_column_values_to_be_in_type_list_silver__msgs_MSG_INDEX__NUMBER__FLOAT", "alias": "msgs_MSG_INDEX", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["silver__msgs"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target\\compiled\\axelar\\models\\silver\\silver__msgs.yml\\dbt_expectations_expect_column_49b195a36b135b701165de9077016793.sql", "build_path": null, "deferred": false, "unrendered_config": {"store_failures": true, "alias": "dbt_expectations_expect_column_49b195a36b135b701165de9077016793"}, "created_at": 1671050799.8788025, "compiled_sql": "with relation_columns as (\n\n        \n        select\n            cast('BLOCK_ID' as TEXT) as relation_column,\n            cast('NUMBER' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('BLOCK_TIMESTAMP' as TEXT) as relation_column,\n            cast('TIMESTAMP_NTZ' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('BLOCKCHAIN' as TEXT) as relation_column,\n            cast('VARCHAR' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('CHAIN_ID' as TEXT) as relation_column,\n            cast('VARCHAR' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('TX_ID' as TEXT) as relation_column,\n            cast('VARCHAR' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('TX_SUCCEEDED' as TEXT) as relation_column,\n            cast('BOOLEAN' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('MSG_GROUP' as TEXT) as relation_column,\n            cast('NUMBER' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('MSG_SUB_GROUP' as TEXT) as relation_column,\n            cast('NUMBER' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('MSG_INDEX' as TEXT) as relation_column,\n            cast('NUMBER' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('MSG_TYPE' as TEXT) as relation_column,\n            cast('VARCHAR' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('MSG' as TEXT) as relation_column,\n            cast('VARIANT' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('_UNIQUE_KEY' as TEXT) as relation_column,\n            cast('VARCHAR' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('_PARTITION_BY_BLOCK_ID' as TEXT) as relation_column,\n            cast('NUMBER' as TEXT) as relation_column_type\n        \n        \n    ),\n    test_data as (\n\n        select\n            *\n        from\n            relation_columns\n        where\n            relation_column = 'MSG_INDEX'\n            and\n            relation_column_type not in ('NUMBER', 'FLOAT')\n\n    )\n    select *\n    from test_data", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "AXELAR_DEV.dbt_expectations_expect_column_values_to_be_in_type_list_silver.msgs_MSG_INDEX", "column_name": "MSG_INDEX", "file_key_name": "models.silver__msgs"}, "test.axelar.not_null_silver__msgs_MSG_TYPE.312b195565": {"raw_sql": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "MSG_TYPE", "model": "{{ get_where_subquery(ref('silver__msgs')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.axelar.silver__msgs"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": true, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "AXELAR_DEV", "schema": "not_null_silver", "fqn": ["axelar", "silver", "not_null_silver__msgs_MSG_TYPE"], "unique_id": "test.axelar.not_null_silver__msgs_MSG_TYPE.312b195565", "package_name": "axelar", "root_path": "C:\\Users\\jessi\\git\\axelar-models", "path": "not_null_silver__msgs_MSG_TYPE.sql", "original_file_path": "models\\silver\\silver__msgs.yml", "name": "not_null_silver__msgs_MSG_TYPE", "alias": "msgs_MSG_TYPE", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["silver__msgs"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target\\compiled\\axelar\\models\\silver\\silver__msgs.yml\\not_null_silver__msgs_MSG_TYPE.sql", "build_path": null, "deferred": false, "unrendered_config": {"store_failures": true}, "created_at": 1671050799.887327, "compiled_sql": "\n    \n    \n\n\n\nselect *\nfrom AXELAR_DEV.silver.msgs\nwhere MSG_TYPE is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "AXELAR_DEV.not_null_silver.msgs_MSG_TYPE", "column_name": "MSG_TYPE", "file_key_name": "models.silver__msgs"}, "test.axelar.dbt_utils_unique_combination_of_columns_silver__msgs__UNIQUE_KEY.979f01aaa2": {"raw_sql": "{{ dbt_utils.test_unique_combination_of_columns(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_utils_unique_combination_o_716551dc21270b00401c284c3162da94\") }}", "test_metadata": {"name": "unique_combination_of_columns", "kwargs": {"combination_of_columns": ["_UNIQUE_KEY"], "model": "{{ get_where_subquery(ref('silver__msgs')) }}"}, "namespace": "dbt_utils"}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt_utils.test_unique_combination_of_columns", "macro.dbt.get_where_subquery"], "nodes": ["model.axelar.silver__msgs"]}, "config": {"enabled": true, "alias": "dbt_utils_unique_combination_o_716551dc21270b00401c284c3162da94", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": true, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "AXELAR_DEV", "schema": "dbt_utils_unique_combination_of_columns_silver", "fqn": ["axelar", "silver", "dbt_utils_unique_combination_of_columns_silver__msgs__UNIQUE_KEY"], "unique_id": "test.axelar.dbt_utils_unique_combination_of_columns_silver__msgs__UNIQUE_KEY.979f01aaa2", "package_name": "axelar", "root_path": "C:\\Users\\jessi\\git\\axelar-models", "path": "dbt_utils_unique_combination_o_716551dc21270b00401c284c3162da94.sql", "original_file_path": "models\\silver\\silver__msgs.yml", "name": "dbt_utils_unique_combination_of_columns_silver__msgs__UNIQUE_KEY", "alias": "msgs", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["silver__msgs"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target\\compiled\\axelar\\models\\silver\\silver__msgs.yml\\dbt_utils_unique_combination_o_716551dc21270b00401c284c3162da94.sql", "build_path": null, "deferred": false, "unrendered_config": {"store_failures": true, "alias": "dbt_utils_unique_combination_o_716551dc21270b00401c284c3162da94"}, "created_at": 1671050799.888327, "compiled_sql": "\n\n\n\n\n\nwith validation_errors as (\n\n    select\n        _UNIQUE_KEY\n    from AXELAR_DEV.silver.msgs\n    group by _UNIQUE_KEY\n    having count(*) > 1\n\n)\n\nselect *\nfrom validation_errors\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "AXELAR_DEV.dbt_utils_unique_combination_of_columns_silver.msgs", "column_name": null, "file_key_name": "models.silver__msgs"}, "test.axelar.not_null_silver__msg_attributes_BLOCK_ID.73b2e37ccf": {"raw_sql": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "BLOCK_ID", "model": "{{ get_where_subquery(ref('silver__msg_attributes')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.axelar.silver__msg_attributes"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": true, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "AXELAR_DEV", "schema": "not_null_silver", "fqn": ["axelar", "silver", "not_null_silver__msg_attributes_BLOCK_ID"], "unique_id": "test.axelar.not_null_silver__msg_attributes_BLOCK_ID.73b2e37ccf", "package_name": "axelar", "root_path": "C:\\Users\\jessi\\git\\axelar-models", "path": "not_null_silver__msg_attributes_BLOCK_ID.sql", "original_file_path": "models\\silver\\silver__msg_attributes.yml", "name": "not_null_silver__msg_attributes_BLOCK_ID", "alias": "msg_attributes_BLOCK_ID", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["silver__msg_attributes"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target\\compiled\\axelar\\models\\silver\\silver__msg_attributes.yml\\not_null_silver__msg_attributes_BLOCK_ID.sql", "build_path": null, "deferred": false, "unrendered_config": {"store_failures": true}, "created_at": 1671050799.8943264, "compiled_sql": "\n    \n    \n\n\n\nselect *\nfrom AXELAR_DEV.silver.msg_attributes\nwhere BLOCK_ID is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "AXELAR_DEV.not_null_silver.msg_attributes_BLOCK_ID", "column_name": "BLOCK_ID", "file_key_name": "models.silver__msg_attributes"}, "test.axelar.not_null_silver__msg_attributes_BLOCK_TIMESTAMP.ef8fb181e9": {"raw_sql": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "BLOCK_TIMESTAMP", "model": "{{ get_where_subquery(ref('silver__msg_attributes')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.axelar.silver__msg_attributes"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": true, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "AXELAR_DEV", "schema": "not_null_silver", "fqn": ["axelar", "silver", "not_null_silver__msg_attributes_BLOCK_TIMESTAMP"], "unique_id": "test.axelar.not_null_silver__msg_attributes_BLOCK_TIMESTAMP.ef8fb181e9", "package_name": "axelar", "root_path": "C:\\Users\\jessi\\git\\axelar-models", "path": "not_null_silver__msg_attributes_BLOCK_TIMESTAMP.sql", "original_file_path": "models\\silver\\silver__msg_attributes.yml", "name": "not_null_silver__msg_attributes_BLOCK_TIMESTAMP", "alias": "msg_attributes_BLOCK_TIMESTAMP", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["silver__msg_attributes"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target\\compiled\\axelar\\models\\silver\\silver__msg_attributes.yml\\not_null_silver__msg_attributes_BLOCK_TIMESTAMP.sql", "build_path": null, "deferred": false, "unrendered_config": {"store_failures": true}, "created_at": 1671050799.896327, "compiled_sql": "\n    \n    \n\n\n\nselect *\nfrom AXELAR_DEV.silver.msg_attributes\nwhere BLOCK_TIMESTAMP is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "AXELAR_DEV.not_null_silver.msg_attributes_BLOCK_TIMESTAMP", "column_name": "BLOCK_TIMESTAMP", "file_key_name": "models.silver__msg_attributes"}, "test.axelar.dbt_expectations_expect_row_values_to_have_recent_data_silver__msg_attributes_BLOCK_TIMESTAMP__day__1.e267a0033b": {"raw_sql": "{{ dbt_expectations.test_expect_row_values_to_have_recent_data(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_expectations_expect_row_va_a808db0b93a04feecab6760cc9838acf\") }}", "test_metadata": {"name": "expect_row_values_to_have_recent_data", "kwargs": {"datepart": "day", "interval": 1, "column_name": "BLOCK_TIMESTAMP", "model": "{{ get_where_subquery(ref('silver__msg_attributes')) }}"}, "namespace": "dbt_expectations"}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt_expectations.test_expect_row_values_to_have_recent_data", "macro.dbt.get_where_subquery"], "nodes": ["model.axelar.silver__msg_attributes"]}, "config": {"enabled": true, "alias": "dbt_expectations_expect_row_va_a808db0b93a04feecab6760cc9838acf", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": true, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "AXELAR_DEV", "schema": "dbt_expectations_expect_row_values_to_have_recent_data_silver", "fqn": ["axelar", "silver", "dbt_expectations_expect_row_values_to_have_recent_data_silver__msg_attributes_BLOCK_TIMESTAMP__day__1"], "unique_id": "test.axelar.dbt_expectations_expect_row_values_to_have_recent_data_silver__msg_attributes_BLOCK_TIMESTAMP__day__1.e267a0033b", "package_name": "axelar", "root_path": "C:\\Users\\jessi\\git\\axelar-models", "path": "dbt_expectations_expect_row_va_a808db0b93a04feecab6760cc9838acf.sql", "original_file_path": "models\\silver\\silver__msg_attributes.yml", "name": "dbt_expectations_expect_row_values_to_have_recent_data_silver__msg_attributes_BLOCK_TIMESTAMP__day__1", "alias": "msg_attributes_BLOCK_TIMESTAMP", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["silver__msg_attributes"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target\\compiled\\axelar\\models\\silver\\silver__msg_attributes.yml\\dbt_expectations_expect_row_va_a808db0b93a04feecab6760cc9838acf.sql", "build_path": null, "deferred": false, "unrendered_config": {"store_failures": true, "alias": "dbt_expectations_expect_row_va_a808db0b93a04feecab6760cc9838acf"}, "created_at": 1671050799.8994012, "compiled_sql": "\n\n with max_recency as (\n\n    select max(cast(BLOCK_TIMESTAMP as TIMESTAMP)) as max_timestamp\n    from\n        AXELAR_DEV.silver.msg_attributes\n    where\n        -- to exclude erroneous future dates\n        cast(BLOCK_TIMESTAMP as TIMESTAMP) <= convert_timezone('UTC', 'GMT',\n    cast(convert_timezone('UTC', current_timestamp()) as TIMESTAMP)\n)\n        \n)\nselect\n    *\nfrom\n    max_recency\nwhere\n    -- if the row_condition excludes all rows, we need to compare against a default date\n    -- to avoid false negatives\n    coalesce(max_timestamp, cast('1970-01-01' as TIMESTAMP))\n        <\n        cast(\n\n    dateadd(\n        day,\n        -1,\n        convert_timezone('UTC', 'GMT',\n    cast(convert_timezone('UTC', current_timestamp()) as TIMESTAMP)\n)\n        )\n\n as TIMESTAMP)\n\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "AXELAR_DEV.dbt_expectations_expect_row_values_to_have_recent_data_silver.msg_attributes_BLOCK_TIMESTAMP", "column_name": "BLOCK_TIMESTAMP", "file_key_name": "models.silver__msg_attributes"}, "test.axelar.dbt_expectations_expect_column_values_to_be_in_type_list_silver__msg_attributes_BLOCK_TIMESTAMP__TIMESTAMP_NTZ.683e76fd93": {"raw_sql": "{{ dbt_expectations.test_expect_column_values_to_be_in_type_list(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_expectations_expect_column_55e6bbe28faf0c3e3d095ad6d9901cc8\") }}", "test_metadata": {"name": "expect_column_values_to_be_in_type_list", "kwargs": {"column_type_list": ["TIMESTAMP_NTZ"], "column_name": "BLOCK_TIMESTAMP", "model": "{{ get_where_subquery(ref('silver__msg_attributes')) }}"}, "namespace": "dbt_expectations"}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt_expectations.test_expect_column_values_to_be_in_type_list", "macro.dbt.get_where_subquery"], "nodes": ["model.axelar.silver__msg_attributes"]}, "config": {"enabled": true, "alias": "dbt_expectations_expect_column_55e6bbe28faf0c3e3d095ad6d9901cc8", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": true, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "AXELAR_DEV", "schema": "dbt_expectations_expect_column_values_to_be_in_type_list_silver", "fqn": ["axelar", "silver", "dbt_expectations_expect_column_values_to_be_in_type_list_silver__msg_attributes_BLOCK_TIMESTAMP__TIMESTAMP_NTZ"], "unique_id": "test.axelar.dbt_expectations_expect_column_values_to_be_in_type_list_silver__msg_attributes_BLOCK_TIMESTAMP__TIMESTAMP_NTZ.683e76fd93", "package_name": "axelar", "root_path": "C:\\Users\\jessi\\git\\axelar-models", "path": "dbt_expectations_expect_column_55e6bbe28faf0c3e3d095ad6d9901cc8.sql", "original_file_path": "models\\silver\\silver__msg_attributes.yml", "name": "dbt_expectations_expect_column_values_to_be_in_type_list_silver__msg_attributes_BLOCK_TIMESTAMP__TIMESTAMP_NTZ", "alias": "msg_attributes_BLOCK_TIMESTAMP", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["silver__msg_attributes"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target\\compiled\\axelar\\models\\silver\\silver__msg_attributes.yml\\dbt_expectations_expect_column_55e6bbe28faf0c3e3d095ad6d9901cc8.sql", "build_path": null, "deferred": false, "unrendered_config": {"store_failures": true, "alias": "dbt_expectations_expect_column_55e6bbe28faf0c3e3d095ad6d9901cc8"}, "created_at": 1671050799.9206016, "compiled_sql": "with relation_columns as (\n\n        \n        select\n            cast('BLOCK_ID' as TEXT) as relation_column,\n            cast('NUMBER' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('BLOCK_TIMESTAMP' as TEXT) as relation_column,\n            cast('TIMESTAMP_NTZ' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('BLOCKCHAIN' as TEXT) as relation_column,\n            cast('VARCHAR' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('CHAIN_ID' as TEXT) as relation_column,\n            cast('VARCHAR' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('TX_ID' as TEXT) as relation_column,\n            cast('VARCHAR' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('TX_SUCCEEDED' as TEXT) as relation_column,\n            cast('BOOLEAN' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('MSG_GROUP' as TEXT) as relation_column,\n            cast('NUMBER' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('MSG_SUB_GROUP' as TEXT) as relation_column,\n            cast('NUMBER' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('MSG_INDEX' as TEXT) as relation_column,\n            cast('NUMBER' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('MSG_TYPE' as TEXT) as relation_column,\n            cast('VARCHAR' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('ATTRIBUTE_INDEX' as TEXT) as relation_column,\n            cast('NUMBER' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('ATTRIBUTE_KEY' as TEXT) as relation_column,\n            cast('VARCHAR' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('ATTRIBUTE_VALUE' as TEXT) as relation_column,\n            cast('VARCHAR' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('_UNIQUE_KEY' as TEXT) as relation_column,\n            cast('VARCHAR' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('_PARTITION_BY_BLOCK_ID' as TEXT) as relation_column,\n            cast('NUMBER' as TEXT) as relation_column_type\n        \n        \n    ),\n    test_data as (\n\n        select\n            *\n        from\n            relation_columns\n        where\n            relation_column = 'BLOCK_TIMESTAMP'\n            and\n            relation_column_type not in ('TIMESTAMP_NTZ')\n\n    )\n    select *\n    from test_data", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "AXELAR_DEV.dbt_expectations_expect_column_values_to_be_in_type_list_silver.msg_attributes_BLOCK_TIMESTAMP", "column_name": "BLOCK_TIMESTAMP", "file_key_name": "models.silver__msg_attributes"}, "test.axelar.not_null_silver__msg_attributes_CHAIN_ID.000bd705a4": {"raw_sql": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "CHAIN_ID", "model": "{{ get_where_subquery(ref('silver__msg_attributes')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.axelar.silver__msg_attributes"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": true, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "AXELAR_DEV", "schema": "not_null_silver", "fqn": ["axelar", "silver", "not_null_silver__msg_attributes_CHAIN_ID"], "unique_id": "test.axelar.not_null_silver__msg_attributes_CHAIN_ID.000bd705a4", "package_name": "axelar", "root_path": "C:\\Users\\jessi\\git\\axelar-models", "path": "not_null_silver__msg_attributes_CHAIN_ID.sql", "original_file_path": "models\\silver\\silver__msg_attributes.yml", "name": "not_null_silver__msg_attributes_CHAIN_ID", "alias": "msg_attributes_CHAIN_ID", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["silver__msg_attributes"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target\\compiled\\axelar\\models\\silver\\silver__msg_attributes.yml\\not_null_silver__msg_attributes_CHAIN_ID.sql", "build_path": null, "deferred": false, "unrendered_config": {"store_failures": true}, "created_at": 1671050799.9246013, "compiled_sql": "\n    \n    \n\n\n\nselect *\nfrom AXELAR_DEV.silver.msg_attributes\nwhere CHAIN_ID is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "AXELAR_DEV.not_null_silver.msg_attributes_CHAIN_ID", "column_name": "CHAIN_ID", "file_key_name": "models.silver__msg_attributes"}, "test.axelar.not_null_silver__msg_attributes_TX_ID.34f30240c0": {"raw_sql": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "TX_ID", "model": "{{ get_where_subquery(ref('silver__msg_attributes')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.axelar.silver__msg_attributes"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": true, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "AXELAR_DEV", "schema": "not_null_silver", "fqn": ["axelar", "silver", "not_null_silver__msg_attributes_TX_ID"], "unique_id": "test.axelar.not_null_silver__msg_attributes_TX_ID.34f30240c0", "package_name": "axelar", "root_path": "C:\\Users\\jessi\\git\\axelar-models", "path": "not_null_silver__msg_attributes_TX_ID.sql", "original_file_path": "models\\silver\\silver__msg_attributes.yml", "name": "not_null_silver__msg_attributes_TX_ID", "alias": "msg_attributes_TX_ID", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["silver__msg_attributes"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target\\compiled\\axelar\\models\\silver\\silver__msg_attributes.yml\\not_null_silver__msg_attributes_TX_ID.sql", "build_path": null, "deferred": false, "unrendered_config": {"store_failures": true}, "created_at": 1671050799.9256012, "compiled_sql": "\n    \n    \n\n\n\nselect *\nfrom AXELAR_DEV.silver.msg_attributes\nwhere TX_ID is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "AXELAR_DEV.not_null_silver.msg_attributes_TX_ID", "column_name": "TX_ID", "file_key_name": "models.silver__msg_attributes"}, "test.axelar.not_null_silver__msg_attributes_MSG_INDEX.38b80c3717": {"raw_sql": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "MSG_INDEX", "model": "{{ get_where_subquery(ref('silver__msg_attributes')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.axelar.silver__msg_attributes"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": true, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "AXELAR_DEV", "schema": "not_null_silver", "fqn": ["axelar", "silver", "not_null_silver__msg_attributes_MSG_INDEX"], "unique_id": "test.axelar.not_null_silver__msg_attributes_MSG_INDEX.38b80c3717", "package_name": "axelar", "root_path": "C:\\Users\\jessi\\git\\axelar-models", "path": "not_null_silver__msg_attributes_MSG_INDEX.sql", "original_file_path": "models\\silver\\silver__msg_attributes.yml", "name": "not_null_silver__msg_attributes_MSG_INDEX", "alias": "msg_attributes_MSG_INDEX", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["silver__msg_attributes"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target\\compiled\\axelar\\models\\silver\\silver__msg_attributes.yml\\not_null_silver__msg_attributes_MSG_INDEX.sql", "build_path": null, "deferred": false, "unrendered_config": {"store_failures": true}, "created_at": 1671050799.9266026, "compiled_sql": "\n    \n    \n\n\n\nselect *\nfrom AXELAR_DEV.silver.msg_attributes\nwhere MSG_INDEX is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "AXELAR_DEV.not_null_silver.msg_attributes_MSG_INDEX", "column_name": "MSG_INDEX", "file_key_name": "models.silver__msg_attributes"}, "test.axelar.dbt_expectations_expect_column_values_to_be_in_type_list_silver__msg_attributes_MSG_INDEX__NUMBER__FLOAT.970dc74b0d": {"raw_sql": "{{ dbt_expectations.test_expect_column_values_to_be_in_type_list(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_expectations_expect_column_0cae326d42a7e9b4569264d0f717d7cc\") }}", "test_metadata": {"name": "expect_column_values_to_be_in_type_list", "kwargs": {"column_type_list": ["NUMBER", "FLOAT"], "column_name": "MSG_INDEX", "model": "{{ get_where_subquery(ref('silver__msg_attributes')) }}"}, "namespace": "dbt_expectations"}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt_expectations.test_expect_column_values_to_be_in_type_list", "macro.dbt.get_where_subquery"], "nodes": ["model.axelar.silver__msg_attributes"]}, "config": {"enabled": true, "alias": "dbt_expectations_expect_column_0cae326d42a7e9b4569264d0f717d7cc", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": true, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "AXELAR_DEV", "schema": "dbt_expectations_expect_column_values_to_be_in_type_list_silver", "fqn": ["axelar", "silver", "dbt_expectations_expect_column_values_to_be_in_type_list_silver__msg_attributes_MSG_INDEX__NUMBER__FLOAT"], "unique_id": "test.axelar.dbt_expectations_expect_column_values_to_be_in_type_list_silver__msg_attributes_MSG_INDEX__NUMBER__FLOAT.970dc74b0d", "package_name": "axelar", "root_path": "C:\\Users\\jessi\\git\\axelar-models", "path": "dbt_expectations_expect_column_0cae326d42a7e9b4569264d0f717d7cc.sql", "original_file_path": "models\\silver\\silver__msg_attributes.yml", "name": "dbt_expectations_expect_column_values_to_be_in_type_list_silver__msg_attributes_MSG_INDEX__NUMBER__FLOAT", "alias": "msg_attributes_MSG_INDEX", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["silver__msg_attributes"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target\\compiled\\axelar\\models\\silver\\silver__msg_attributes.yml\\dbt_expectations_expect_column_0cae326d42a7e9b4569264d0f717d7cc.sql", "build_path": null, "deferred": false, "unrendered_config": {"store_failures": true, "alias": "dbt_expectations_expect_column_0cae326d42a7e9b4569264d0f717d7cc"}, "created_at": 1671050799.9285836, "compiled_sql": "with relation_columns as (\n\n        \n        select\n            cast('BLOCK_ID' as TEXT) as relation_column,\n            cast('NUMBER' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('BLOCK_TIMESTAMP' as TEXT) as relation_column,\n            cast('TIMESTAMP_NTZ' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('BLOCKCHAIN' as TEXT) as relation_column,\n            cast('VARCHAR' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('CHAIN_ID' as TEXT) as relation_column,\n            cast('VARCHAR' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('TX_ID' as TEXT) as relation_column,\n            cast('VARCHAR' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('TX_SUCCEEDED' as TEXT) as relation_column,\n            cast('BOOLEAN' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('MSG_GROUP' as TEXT) as relation_column,\n            cast('NUMBER' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('MSG_SUB_GROUP' as TEXT) as relation_column,\n            cast('NUMBER' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('MSG_INDEX' as TEXT) as relation_column,\n            cast('NUMBER' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('MSG_TYPE' as TEXT) as relation_column,\n            cast('VARCHAR' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('ATTRIBUTE_INDEX' as TEXT) as relation_column,\n            cast('NUMBER' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('ATTRIBUTE_KEY' as TEXT) as relation_column,\n            cast('VARCHAR' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('ATTRIBUTE_VALUE' as TEXT) as relation_column,\n            cast('VARCHAR' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('_UNIQUE_KEY' as TEXT) as relation_column,\n            cast('VARCHAR' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('_PARTITION_BY_BLOCK_ID' as TEXT) as relation_column,\n            cast('NUMBER' as TEXT) as relation_column_type\n        \n        \n    ),\n    test_data as (\n\n        select\n            *\n        from\n            relation_columns\n        where\n            relation_column = 'MSG_INDEX'\n            and\n            relation_column_type not in ('NUMBER', 'FLOAT')\n\n    )\n    select *\n    from test_data", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "AXELAR_DEV.dbt_expectations_expect_column_values_to_be_in_type_list_silver.msg_attributes_MSG_INDEX", "column_name": "MSG_INDEX", "file_key_name": "models.silver__msg_attributes"}, "test.axelar.not_null_silver__msg_attributes_MSG_TYPE.6fb2c6c361": {"raw_sql": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "MSG_TYPE", "model": "{{ get_where_subquery(ref('silver__msg_attributes')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.axelar.silver__msg_attributes"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": true, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "AXELAR_DEV", "schema": "not_null_silver", "fqn": ["axelar", "silver", "not_null_silver__msg_attributes_MSG_TYPE"], "unique_id": "test.axelar.not_null_silver__msg_attributes_MSG_TYPE.6fb2c6c361", "package_name": "axelar", "root_path": "C:\\Users\\jessi\\git\\axelar-models", "path": "not_null_silver__msg_attributes_MSG_TYPE.sql", "original_file_path": "models\\silver\\silver__msg_attributes.yml", "name": "not_null_silver__msg_attributes_MSG_TYPE", "alias": "msg_attributes_MSG_TYPE", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["silver__msg_attributes"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target\\compiled\\axelar\\models\\silver\\silver__msg_attributes.yml\\not_null_silver__msg_attributes_MSG_TYPE.sql", "build_path": null, "deferred": false, "unrendered_config": {"store_failures": true}, "created_at": 1671050799.9346712, "compiled_sql": "\n    \n    \n\n\n\nselect *\nfrom AXELAR_DEV.silver.msg_attributes\nwhere MSG_TYPE is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "AXELAR_DEV.not_null_silver.msg_attributes_MSG_TYPE", "column_name": "MSG_TYPE", "file_key_name": "models.silver__msg_attributes"}, "test.axelar.dbt_utils_unique_combination_of_columns_silver__msg_attributes__UNIQUE_KEY.8c412560f5": {"raw_sql": "{{ dbt_utils.test_unique_combination_of_columns(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_utils_unique_combination_o_48f03623daf6fb2be6d0d7159adcbacd\") }}", "test_metadata": {"name": "unique_combination_of_columns", "kwargs": {"combination_of_columns": ["_UNIQUE_KEY"], "model": "{{ get_where_subquery(ref('silver__msg_attributes')) }}"}, "namespace": "dbt_utils"}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt_utils.test_unique_combination_of_columns", "macro.dbt.get_where_subquery"], "nodes": ["model.axelar.silver__msg_attributes"]}, "config": {"enabled": true, "alias": "dbt_utils_unique_combination_o_48f03623daf6fb2be6d0d7159adcbacd", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": true, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "AXELAR_DEV", "schema": "dbt_utils_unique_combination_of_columns_silver", "fqn": ["axelar", "silver", "dbt_utils_unique_combination_of_columns_silver__msg_attributes__UNIQUE_KEY"], "unique_id": "test.axelar.dbt_utils_unique_combination_of_columns_silver__msg_attributes__UNIQUE_KEY.8c412560f5", "package_name": "axelar", "root_path": "C:\\Users\\jessi\\git\\axelar-models", "path": "dbt_utils_unique_combination_o_48f03623daf6fb2be6d0d7159adcbacd.sql", "original_file_path": "models\\silver\\silver__msg_attributes.yml", "name": "dbt_utils_unique_combination_of_columns_silver__msg_attributes__UNIQUE_KEY", "alias": "msg_attributes", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["silver__msg_attributes"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target\\compiled\\axelar\\models\\silver\\silver__msg_attributes.yml\\dbt_utils_unique_combination_o_48f03623daf6fb2be6d0d7159adcbacd.sql", "build_path": null, "deferred": false, "unrendered_config": {"store_failures": true, "alias": "dbt_utils_unique_combination_o_48f03623daf6fb2be6d0d7159adcbacd"}, "created_at": 1671050799.9366772, "compiled_sql": "\n\n\n\n\n\nwith validation_errors as (\n\n    select\n        _UNIQUE_KEY\n    from AXELAR_DEV.silver.msg_attributes\n    group by _UNIQUE_KEY\n    having count(*) > 1\n\n)\n\nselect *\nfrom validation_errors\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "AXELAR_DEV.dbt_utils_unique_combination_of_columns_silver.msg_attributes", "column_name": null, "file_key_name": "models.silver__msg_attributes"}, "test.axelar.not_null_silver__transactions_BLOCK_ID.ba1565770d": {"raw_sql": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "BLOCK_ID", "model": "{{ get_where_subquery(ref('silver__transactions')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.axelar.silver__transactions"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": true, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "AXELAR_DEV", "schema": "not_null_silver", "fqn": ["axelar", "silver", "not_null_silver__transactions_BLOCK_ID"], "unique_id": "test.axelar.not_null_silver__transactions_BLOCK_ID.ba1565770d", "package_name": "axelar", "root_path": "C:\\Users\\jessi\\git\\axelar-models", "path": "not_null_silver__transactions_BLOCK_ID.sql", "original_file_path": "models\\silver\\silver__transactions.yml", "name": "not_null_silver__transactions_BLOCK_ID", "alias": "transactions_BLOCK_ID", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["silver__transactions"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target\\compiled\\axelar\\models\\silver\\silver__transactions.yml\\not_null_silver__transactions_BLOCK_ID.sql", "build_path": null, "deferred": false, "unrendered_config": {"store_failures": true}, "created_at": 1671050799.9436796, "compiled_sql": "\n    \n    \n\n\n\nselect *\nfrom AXELAR_DEV.silver.transactions\nwhere BLOCK_ID is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "AXELAR_DEV.not_null_silver.transactions_BLOCK_ID", "column_name": "BLOCK_ID", "file_key_name": "models.silver__transactions"}, "test.axelar.dbt_expectations_expect_column_values_to_be_in_type_list_silver__transactions_BLOCK_ID__NUMBER__FLOAT.f4d0275a3e": {"raw_sql": "{{ dbt_expectations.test_expect_column_values_to_be_in_type_list(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_expectations_expect_column_c9eb1ace502326f57acb4c63f6f721ea\") }}", "test_metadata": {"name": "expect_column_values_to_be_in_type_list", "kwargs": {"column_type_list": ["NUMBER", "FLOAT"], "column_name": "BLOCK_ID", "model": "{{ get_where_subquery(ref('silver__transactions')) }}"}, "namespace": "dbt_expectations"}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt_expectations.test_expect_column_values_to_be_in_type_list", "macro.dbt.get_where_subquery"], "nodes": ["model.axelar.silver__transactions"]}, "config": {"enabled": true, "alias": "dbt_expectations_expect_column_c9eb1ace502326f57acb4c63f6f721ea", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": true, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "AXELAR_DEV", "schema": "dbt_expectations_expect_column_values_to_be_in_type_list_silver", "fqn": ["axelar", "silver", "dbt_expectations_expect_column_values_to_be_in_type_list_silver__transactions_BLOCK_ID__NUMBER__FLOAT"], "unique_id": "test.axelar.dbt_expectations_expect_column_values_to_be_in_type_list_silver__transactions_BLOCK_ID__NUMBER__FLOAT.f4d0275a3e", "package_name": "axelar", "root_path": "C:\\Users\\jessi\\git\\axelar-models", "path": "dbt_expectations_expect_column_c9eb1ace502326f57acb4c63f6f721ea.sql", "original_file_path": "models\\silver\\silver__transactions.yml", "name": "dbt_expectations_expect_column_values_to_be_in_type_list_silver__transactions_BLOCK_ID__NUMBER__FLOAT", "alias": "transactions_BLOCK_ID", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["silver__transactions"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target\\compiled\\axelar\\models\\silver\\silver__transactions.yml\\dbt_expectations_expect_column_c9eb1ace502326f57acb4c63f6f721ea.sql", "build_path": null, "deferred": false, "unrendered_config": {"store_failures": true, "alias": "dbt_expectations_expect_column_c9eb1ace502326f57acb4c63f6f721ea"}, "created_at": 1671050799.9465842, "compiled_sql": "with relation_columns as (\n\n        \n        select\n            cast('BLOCK_ID' as TEXT) as relation_column,\n            cast('NUMBER' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('BLOCK_TIMESTAMP' as TEXT) as relation_column,\n            cast('TIMESTAMP_NTZ' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('TX_ID' as TEXT) as relation_column,\n            cast('VARCHAR' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('BLOCKCHAIN' as TEXT) as relation_column,\n            cast('VARCHAR' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('CHAIN_ID' as TEXT) as relation_column,\n            cast('VARCHAR' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('CODESPACE' as TEXT) as relation_column,\n            cast('VARIANT' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('GAS_USED' as TEXT) as relation_column,\n            cast('NUMBER' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('GAS_WANTED' as TEXT) as relation_column,\n            cast('NUMBER' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('TX_SUCCEEDED' as TEXT) as relation_column,\n            cast('BOOLEAN' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('TX_CODE' as TEXT) as relation_column,\n            cast('NUMBER' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('MSGS' as TEXT) as relation_column,\n            cast('VARIANT' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('TX_LOG' as TEXT) as relation_column,\n            cast('VARCHAR' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('_PARTITION_BY_BLOCK_ID' as TEXT) as relation_column,\n            cast('NUMBER' as TEXT) as relation_column_type\n        \n        \n    ),\n    test_data as (\n\n        select\n            *\n        from\n            relation_columns\n        where\n            relation_column = 'BLOCK_ID'\n            and\n            relation_column_type not in ('NUMBER', 'FLOAT')\n\n    )\n    select *\n    from test_data", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "AXELAR_DEV.dbt_expectations_expect_column_values_to_be_in_type_list_silver.transactions_BLOCK_ID", "column_name": "BLOCK_ID", "file_key_name": "models.silver__transactions"}, "test.axelar.not_null_silver__transactions_BLOCK_TIMESTAMP.3ffe21fe8d": {"raw_sql": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "BLOCK_TIMESTAMP", "model": "{{ get_where_subquery(ref('silver__transactions')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.axelar.silver__transactions"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": true, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "AXELAR_DEV", "schema": "not_null_silver", "fqn": ["axelar", "silver", "not_null_silver__transactions_BLOCK_TIMESTAMP"], "unique_id": "test.axelar.not_null_silver__transactions_BLOCK_TIMESTAMP.3ffe21fe8d", "package_name": "axelar", "root_path": "C:\\Users\\jessi\\git\\axelar-models", "path": "not_null_silver__transactions_BLOCK_TIMESTAMP.sql", "original_file_path": "models\\silver\\silver__transactions.yml", "name": "not_null_silver__transactions_BLOCK_TIMESTAMP", "alias": "transactions_BLOCK_TIMESTAMP", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["silver__transactions"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target\\compiled\\axelar\\models\\silver\\silver__transactions.yml\\not_null_silver__transactions_BLOCK_TIMESTAMP.sql", "build_path": null, "deferred": false, "unrendered_config": {"store_failures": true}, "created_at": 1671050799.9536715, "compiled_sql": "\n    \n    \n\n\n\nselect *\nfrom AXELAR_DEV.silver.transactions\nwhere BLOCK_TIMESTAMP is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "AXELAR_DEV.not_null_silver.transactions_BLOCK_TIMESTAMP", "column_name": "BLOCK_TIMESTAMP", "file_key_name": "models.silver__transactions"}, "test.axelar.dbt_expectations_expect_row_values_to_have_recent_data_silver__transactions_BLOCK_TIMESTAMP__day__1.cf074498fc": {"raw_sql": "{{ dbt_expectations.test_expect_row_values_to_have_recent_data(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_expectations_expect_row_va_7e7ddbc9b4a7dbd76c2af79a27effcdb\") }}", "test_metadata": {"name": "expect_row_values_to_have_recent_data", "kwargs": {"datepart": "day", "interval": 1, "column_name": "BLOCK_TIMESTAMP", "model": "{{ get_where_subquery(ref('silver__transactions')) }}"}, "namespace": "dbt_expectations"}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt_expectations.test_expect_row_values_to_have_recent_data", "macro.dbt.get_where_subquery"], "nodes": ["model.axelar.silver__transactions"]}, "config": {"enabled": true, "alias": "dbt_expectations_expect_row_va_7e7ddbc9b4a7dbd76c2af79a27effcdb", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": true, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "AXELAR_DEV", "schema": "dbt_expectations_expect_row_values_to_have_recent_data_silver", "fqn": ["axelar", "silver", "dbt_expectations_expect_row_values_to_have_recent_data_silver__transactions_BLOCK_TIMESTAMP__day__1"], "unique_id": "test.axelar.dbt_expectations_expect_row_values_to_have_recent_data_silver__transactions_BLOCK_TIMESTAMP__day__1.cf074498fc", "package_name": "axelar", "root_path": "C:\\Users\\jessi\\git\\axelar-models", "path": "dbt_expectations_expect_row_va_7e7ddbc9b4a7dbd76c2af79a27effcdb.sql", "original_file_path": "models\\silver\\silver__transactions.yml", "name": "dbt_expectations_expect_row_values_to_have_recent_data_silver__transactions_BLOCK_TIMESTAMP__day__1", "alias": "transactions_BLOCK_TIMESTAMP", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["silver__transactions"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target\\compiled\\axelar\\models\\silver\\silver__transactions.yml\\dbt_expectations_expect_row_va_7e7ddbc9b4a7dbd76c2af79a27effcdb.sql", "build_path": null, "deferred": false, "unrendered_config": {"store_failures": true, "alias": "dbt_expectations_expect_row_va_7e7ddbc9b4a7dbd76c2af79a27effcdb"}, "created_at": 1671050799.9556236, "compiled_sql": "\n\n with max_recency as (\n\n    select max(cast(BLOCK_TIMESTAMP as TIMESTAMP)) as max_timestamp\n    from\n        AXELAR_DEV.silver.transactions\n    where\n        -- to exclude erroneous future dates\n        cast(BLOCK_TIMESTAMP as TIMESTAMP) <= convert_timezone('UTC', 'GMT',\n    cast(convert_timezone('UTC', current_timestamp()) as TIMESTAMP)\n)\n        \n)\nselect\n    *\nfrom\n    max_recency\nwhere\n    -- if the row_condition excludes all rows, we need to compare against a default date\n    -- to avoid false negatives\n    coalesce(max_timestamp, cast('1970-01-01' as TIMESTAMP))\n        <\n        cast(\n\n    dateadd(\n        day,\n        -1,\n        convert_timezone('UTC', 'GMT',\n    cast(convert_timezone('UTC', current_timestamp()) as TIMESTAMP)\n)\n        )\n\n as TIMESTAMP)\n\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "AXELAR_DEV.dbt_expectations_expect_row_values_to_have_recent_data_silver.transactions_BLOCK_TIMESTAMP", "column_name": "BLOCK_TIMESTAMP", "file_key_name": "models.silver__transactions"}, "test.axelar.dbt_expectations_expect_column_values_to_be_in_type_list_silver__transactions_BLOCK_TIMESTAMP__TIMESTAMP_NTZ.bc42693f6e": {"raw_sql": "{{ dbt_expectations.test_expect_column_values_to_be_in_type_list(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_expectations_expect_column_867039df339fcae87e7a780c6020a0eb\") }}", "test_metadata": {"name": "expect_column_values_to_be_in_type_list", "kwargs": {"column_type_list": ["TIMESTAMP_NTZ"], "column_name": "BLOCK_TIMESTAMP", "model": "{{ get_where_subquery(ref('silver__transactions')) }}"}, "namespace": "dbt_expectations"}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt_expectations.test_expect_column_values_to_be_in_type_list", "macro.dbt.get_where_subquery"], "nodes": ["model.axelar.silver__transactions"]}, "config": {"enabled": true, "alias": "dbt_expectations_expect_column_867039df339fcae87e7a780c6020a0eb", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": true, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "AXELAR_DEV", "schema": "dbt_expectations_expect_column_values_to_be_in_type_list_silver", "fqn": ["axelar", "silver", "dbt_expectations_expect_column_values_to_be_in_type_list_silver__transactions_BLOCK_TIMESTAMP__TIMESTAMP_NTZ"], "unique_id": "test.axelar.dbt_expectations_expect_column_values_to_be_in_type_list_silver__transactions_BLOCK_TIMESTAMP__TIMESTAMP_NTZ.bc42693f6e", "package_name": "axelar", "root_path": "C:\\Users\\jessi\\git\\axelar-models", "path": "dbt_expectations_expect_column_867039df339fcae87e7a780c6020a0eb.sql", "original_file_path": "models\\silver\\silver__transactions.yml", "name": "dbt_expectations_expect_column_values_to_be_in_type_list_silver__transactions_BLOCK_TIMESTAMP__TIMESTAMP_NTZ", "alias": "transactions_BLOCK_TIMESTAMP", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["silver__transactions"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target\\compiled\\axelar\\models\\silver\\silver__transactions.yml\\dbt_expectations_expect_column_867039df339fcae87e7a780c6020a0eb.sql", "build_path": null, "deferred": false, "unrendered_config": {"store_failures": true, "alias": "dbt_expectations_expect_column_867039df339fcae87e7a780c6020a0eb"}, "created_at": 1671050800.0325518, "compiled_sql": "with relation_columns as (\n\n        \n        select\n            cast('BLOCK_ID' as TEXT) as relation_column,\n            cast('NUMBER' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('BLOCK_TIMESTAMP' as TEXT) as relation_column,\n            cast('TIMESTAMP_NTZ' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('TX_ID' as TEXT) as relation_column,\n            cast('VARCHAR' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('BLOCKCHAIN' as TEXT) as relation_column,\n            cast('VARCHAR' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('CHAIN_ID' as TEXT) as relation_column,\n            cast('VARCHAR' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('CODESPACE' as TEXT) as relation_column,\n            cast('VARIANT' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('GAS_USED' as TEXT) as relation_column,\n            cast('NUMBER' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('GAS_WANTED' as TEXT) as relation_column,\n            cast('NUMBER' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('TX_SUCCEEDED' as TEXT) as relation_column,\n            cast('BOOLEAN' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('TX_CODE' as TEXT) as relation_column,\n            cast('NUMBER' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('MSGS' as TEXT) as relation_column,\n            cast('VARIANT' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('TX_LOG' as TEXT) as relation_column,\n            cast('VARCHAR' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('_PARTITION_BY_BLOCK_ID' as TEXT) as relation_column,\n            cast('NUMBER' as TEXT) as relation_column_type\n        \n        \n    ),\n    test_data as (\n\n        select\n            *\n        from\n            relation_columns\n        where\n            relation_column = 'BLOCK_TIMESTAMP'\n            and\n            relation_column_type not in ('TIMESTAMP_NTZ')\n\n    )\n    select *\n    from test_data", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "AXELAR_DEV.dbt_expectations_expect_column_values_to_be_in_type_list_silver.transactions_BLOCK_TIMESTAMP", "column_name": "BLOCK_TIMESTAMP", "file_key_name": "models.silver__transactions"}, "test.axelar.not_null_silver__transactions_TX_ID.5bc0e20339": {"raw_sql": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "TX_ID", "model": "{{ get_where_subquery(ref('silver__transactions')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.axelar.silver__transactions"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": true, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "AXELAR_DEV", "schema": "not_null_silver", "fqn": ["axelar", "silver", "not_null_silver__transactions_TX_ID"], "unique_id": "test.axelar.not_null_silver__transactions_TX_ID.5bc0e20339", "package_name": "axelar", "root_path": "C:\\Users\\jessi\\git\\axelar-models", "path": "not_null_silver__transactions_TX_ID.sql", "original_file_path": "models\\silver\\silver__transactions.yml", "name": "not_null_silver__transactions_TX_ID", "alias": "transactions_TX_ID", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["silver__transactions"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target\\compiled\\axelar\\models\\silver\\silver__transactions.yml\\not_null_silver__transactions_TX_ID.sql", "build_path": null, "deferred": false, "unrendered_config": {"store_failures": true}, "created_at": 1671050800.0375447, "compiled_sql": "\n    \n    \n\n\n\nselect *\nfrom AXELAR_DEV.silver.transactions\nwhere TX_ID is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "AXELAR_DEV.not_null_silver.transactions_TX_ID", "column_name": "TX_ID", "file_key_name": "models.silver__transactions"}, "test.axelar.not_null_silver__transactions_CHAIN_ID.d90596c439": {"raw_sql": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "CHAIN_ID", "model": "{{ get_where_subquery(ref('silver__transactions')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.axelar.silver__transactions"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": true, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "AXELAR_DEV", "schema": "not_null_silver", "fqn": ["axelar", "silver", "not_null_silver__transactions_CHAIN_ID"], "unique_id": "test.axelar.not_null_silver__transactions_CHAIN_ID.d90596c439", "package_name": "axelar", "root_path": "C:\\Users\\jessi\\git\\axelar-models", "path": "not_null_silver__transactions_CHAIN_ID.sql", "original_file_path": "models\\silver\\silver__transactions.yml", "name": "not_null_silver__transactions_CHAIN_ID", "alias": "transactions_CHAIN_ID", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["silver__transactions"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target\\compiled\\axelar\\models\\silver\\silver__transactions.yml\\not_null_silver__transactions_CHAIN_ID.sql", "build_path": null, "deferred": false, "unrendered_config": {"store_failures": true}, "created_at": 1671050800.0385568, "compiled_sql": "\n    \n    \n\n\n\nselect *\nfrom AXELAR_DEV.silver.transactions\nwhere CHAIN_ID is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "AXELAR_DEV.not_null_silver.transactions_CHAIN_ID", "column_name": "CHAIN_ID", "file_key_name": "models.silver__transactions"}, "test.axelar.not_null_silver__transactions_GAS_USED.1c943486c0": {"raw_sql": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "GAS_USED", "model": "{{ get_where_subquery(ref('silver__transactions')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.axelar.silver__transactions"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": true, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "AXELAR_DEV", "schema": "not_null_silver", "fqn": ["axelar", "silver", "not_null_silver__transactions_GAS_USED"], "unique_id": "test.axelar.not_null_silver__transactions_GAS_USED.1c943486c0", "package_name": "axelar", "root_path": "C:\\Users\\jessi\\git\\axelar-models", "path": "not_null_silver__transactions_GAS_USED.sql", "original_file_path": "models\\silver\\silver__transactions.yml", "name": "not_null_silver__transactions_GAS_USED", "alias": "transactions_GAS_USED", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["silver__transactions"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target\\compiled\\axelar\\models\\silver\\silver__transactions.yml\\not_null_silver__transactions_GAS_USED.sql", "build_path": null, "deferred": false, "unrendered_config": {"store_failures": true}, "created_at": 1671050800.0405526, "compiled_sql": "\n    \n    \n\n\n\nselect *\nfrom AXELAR_DEV.silver.transactions\nwhere GAS_USED is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "AXELAR_DEV.not_null_silver.transactions_GAS_USED", "column_name": "GAS_USED", "file_key_name": "models.silver__transactions"}, "test.axelar.dbt_expectations_expect_column_values_to_be_in_type_list_silver__transactions_GAS_USED__NUMBER__FLOAT.5308f986d3": {"raw_sql": "{{ dbt_expectations.test_expect_column_values_to_be_in_type_list(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_expectations_expect_column_0e2b2dda75a879bf3be8005c2ae5de07\") }}", "test_metadata": {"name": "expect_column_values_to_be_in_type_list", "kwargs": {"column_type_list": ["NUMBER", "FLOAT"], "column_name": "GAS_USED", "model": "{{ get_where_subquery(ref('silver__transactions')) }}"}, "namespace": "dbt_expectations"}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt_expectations.test_expect_column_values_to_be_in_type_list", "macro.dbt.get_where_subquery"], "nodes": ["model.axelar.silver__transactions"]}, "config": {"enabled": true, "alias": "dbt_expectations_expect_column_0e2b2dda75a879bf3be8005c2ae5de07", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": true, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "AXELAR_DEV", "schema": "dbt_expectations_expect_column_values_to_be_in_type_list_silver", "fqn": ["axelar", "silver", "dbt_expectations_expect_column_values_to_be_in_type_list_silver__transactions_GAS_USED__NUMBER__FLOAT"], "unique_id": "test.axelar.dbt_expectations_expect_column_values_to_be_in_type_list_silver__transactions_GAS_USED__NUMBER__FLOAT.5308f986d3", "package_name": "axelar", "root_path": "C:\\Users\\jessi\\git\\axelar-models", "path": "dbt_expectations_expect_column_0e2b2dda75a879bf3be8005c2ae5de07.sql", "original_file_path": "models\\silver\\silver__transactions.yml", "name": "dbt_expectations_expect_column_values_to_be_in_type_list_silver__transactions_GAS_USED__NUMBER__FLOAT", "alias": "transactions_GAS_USED", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["silver__transactions"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target\\compiled\\axelar\\models\\silver\\silver__transactions.yml\\dbt_expectations_expect_column_0e2b2dda75a879bf3be8005c2ae5de07.sql", "build_path": null, "deferred": false, "unrendered_config": {"store_failures": true, "alias": "dbt_expectations_expect_column_0e2b2dda75a879bf3be8005c2ae5de07"}, "created_at": 1671050800.0415611, "compiled_sql": "with relation_columns as (\n\n        \n        select\n            cast('BLOCK_ID' as TEXT) as relation_column,\n            cast('NUMBER' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('BLOCK_TIMESTAMP' as TEXT) as relation_column,\n            cast('TIMESTAMP_NTZ' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('TX_ID' as TEXT) as relation_column,\n            cast('VARCHAR' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('BLOCKCHAIN' as TEXT) as relation_column,\n            cast('VARCHAR' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('CHAIN_ID' as TEXT) as relation_column,\n            cast('VARCHAR' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('CODESPACE' as TEXT) as relation_column,\n            cast('VARIANT' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('GAS_USED' as TEXT) as relation_column,\n            cast('NUMBER' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('GAS_WANTED' as TEXT) as relation_column,\n            cast('NUMBER' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('TX_SUCCEEDED' as TEXT) as relation_column,\n            cast('BOOLEAN' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('TX_CODE' as TEXT) as relation_column,\n            cast('NUMBER' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('MSGS' as TEXT) as relation_column,\n            cast('VARIANT' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('TX_LOG' as TEXT) as relation_column,\n            cast('VARCHAR' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('_PARTITION_BY_BLOCK_ID' as TEXT) as relation_column,\n            cast('NUMBER' as TEXT) as relation_column_type\n        \n        \n    ),\n    test_data as (\n\n        select\n            *\n        from\n            relation_columns\n        where\n            relation_column = 'GAS_USED'\n            and\n            relation_column_type not in ('NUMBER', 'FLOAT')\n\n    )\n    select *\n    from test_data", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "AXELAR_DEV.dbt_expectations_expect_column_values_to_be_in_type_list_silver.transactions_GAS_USED", "column_name": "GAS_USED", "file_key_name": "models.silver__transactions"}, "test.axelar.not_null_silver__transactions_GAS_WANTED.440469f6c5": {"raw_sql": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "GAS_WANTED", "model": "{{ get_where_subquery(ref('silver__transactions')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.axelar.silver__transactions"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": true, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "AXELAR_DEV", "schema": "not_null_silver", "fqn": ["axelar", "silver", "not_null_silver__transactions_GAS_WANTED"], "unique_id": "test.axelar.not_null_silver__transactions_GAS_WANTED.440469f6c5", "package_name": "axelar", "root_path": "C:\\Users\\jessi\\git\\axelar-models", "path": "not_null_silver__transactions_GAS_WANTED.sql", "original_file_path": "models\\silver\\silver__transactions.yml", "name": "not_null_silver__transactions_GAS_WANTED", "alias": "transactions_GAS_WANTED", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["silver__transactions"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target\\compiled\\axelar\\models\\silver\\silver__transactions.yml\\not_null_silver__transactions_GAS_WANTED.sql", "build_path": null, "deferred": false, "unrendered_config": {"store_failures": true}, "created_at": 1671050800.0454645, "compiled_sql": "\n    \n    \n\n\n\nselect *\nfrom AXELAR_DEV.silver.transactions\nwhere GAS_WANTED is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "AXELAR_DEV.not_null_silver.transactions_GAS_WANTED", "column_name": "GAS_WANTED", "file_key_name": "models.silver__transactions"}, "test.axelar.dbt_expectations_expect_column_values_to_be_in_type_list_silver__transactions_GAS_WANTED__NUMBER__FLOAT.b15ebe8eff": {"raw_sql": "{{ dbt_expectations.test_expect_column_values_to_be_in_type_list(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_expectations_expect_column_dc90aefd011b313913b2f97fe2b841d0\") }}", "test_metadata": {"name": "expect_column_values_to_be_in_type_list", "kwargs": {"column_type_list": ["NUMBER", "FLOAT"], "column_name": "GAS_WANTED", "model": "{{ get_where_subquery(ref('silver__transactions')) }}"}, "namespace": "dbt_expectations"}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt_expectations.test_expect_column_values_to_be_in_type_list", "macro.dbt.get_where_subquery"], "nodes": ["model.axelar.silver__transactions"]}, "config": {"enabled": true, "alias": "dbt_expectations_expect_column_dc90aefd011b313913b2f97fe2b841d0", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": true, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "AXELAR_DEV", "schema": "dbt_expectations_expect_column_values_to_be_in_type_list_silver", "fqn": ["axelar", "silver", "dbt_expectations_expect_column_values_to_be_in_type_list_silver__transactions_GAS_WANTED__NUMBER__FLOAT"], "unique_id": "test.axelar.dbt_expectations_expect_column_values_to_be_in_type_list_silver__transactions_GAS_WANTED__NUMBER__FLOAT.b15ebe8eff", "package_name": "axelar", "root_path": "C:\\Users\\jessi\\git\\axelar-models", "path": "dbt_expectations_expect_column_dc90aefd011b313913b2f97fe2b841d0.sql", "original_file_path": "models\\silver\\silver__transactions.yml", "name": "dbt_expectations_expect_column_values_to_be_in_type_list_silver__transactions_GAS_WANTED__NUMBER__FLOAT", "alias": "transactions_GAS_WANTED", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["silver__transactions"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target\\compiled\\axelar\\models\\silver\\silver__transactions.yml\\dbt_expectations_expect_column_dc90aefd011b313913b2f97fe2b841d0.sql", "build_path": null, "deferred": false, "unrendered_config": {"store_failures": true, "alias": "dbt_expectations_expect_column_dc90aefd011b313913b2f97fe2b841d0"}, "created_at": 1671050800.0475438, "compiled_sql": "with relation_columns as (\n\n        \n        select\n            cast('BLOCK_ID' as TEXT) as relation_column,\n            cast('NUMBER' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('BLOCK_TIMESTAMP' as TEXT) as relation_column,\n            cast('TIMESTAMP_NTZ' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('TX_ID' as TEXT) as relation_column,\n            cast('VARCHAR' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('BLOCKCHAIN' as TEXT) as relation_column,\n            cast('VARCHAR' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('CHAIN_ID' as TEXT) as relation_column,\n            cast('VARCHAR' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('CODESPACE' as TEXT) as relation_column,\n            cast('VARIANT' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('GAS_USED' as TEXT) as relation_column,\n            cast('NUMBER' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('GAS_WANTED' as TEXT) as relation_column,\n            cast('NUMBER' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('TX_SUCCEEDED' as TEXT) as relation_column,\n            cast('BOOLEAN' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('TX_CODE' as TEXT) as relation_column,\n            cast('NUMBER' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('MSGS' as TEXT) as relation_column,\n            cast('VARIANT' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('TX_LOG' as TEXT) as relation_column,\n            cast('VARCHAR' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('_PARTITION_BY_BLOCK_ID' as TEXT) as relation_column,\n            cast('NUMBER' as TEXT) as relation_column_type\n        \n        \n    ),\n    test_data as (\n\n        select\n            *\n        from\n            relation_columns\n        where\n            relation_column = 'GAS_WANTED'\n            and\n            relation_column_type not in ('NUMBER', 'FLOAT')\n\n    )\n    select *\n    from test_data", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "AXELAR_DEV.dbt_expectations_expect_column_values_to_be_in_type_list_silver.transactions_GAS_WANTED", "column_name": "GAS_WANTED", "file_key_name": "models.silver__transactions"}, "test.axelar.not_null_silver__transactions_TX_SUCCEEDED.7fbadde885": {"raw_sql": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "TX_SUCCEEDED", "model": "{{ get_where_subquery(ref('silver__transactions')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.axelar.silver__transactions"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": true, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "AXELAR_DEV", "schema": "not_null_silver", "fqn": ["axelar", "silver", "not_null_silver__transactions_TX_SUCCEEDED"], "unique_id": "test.axelar.not_null_silver__transactions_TX_SUCCEEDED.7fbadde885", "package_name": "axelar", "root_path": "C:\\Users\\jessi\\git\\axelar-models", "path": "not_null_silver__transactions_TX_SUCCEEDED.sql", "original_file_path": "models\\silver\\silver__transactions.yml", "name": "not_null_silver__transactions_TX_SUCCEEDED", "alias": "transactions_TX_SUCCEEDED", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["silver__transactions"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target\\compiled\\axelar\\models\\silver\\silver__transactions.yml\\not_null_silver__transactions_TX_SUCCEEDED.sql", "build_path": null, "deferred": false, "unrendered_config": {"store_failures": true}, "created_at": 1671050800.0515497, "compiled_sql": "\n    \n    \n\n\n\nselect *\nfrom AXELAR_DEV.silver.transactions\nwhere TX_SUCCEEDED is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "AXELAR_DEV.not_null_silver.transactions_TX_SUCCEEDED", "column_name": "TX_SUCCEEDED", "file_key_name": "models.silver__transactions"}, "test.axelar.not_null_silver__transactions_TX_CODE.080a71cc61": {"raw_sql": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "TX_CODE", "model": "{{ get_where_subquery(ref('silver__transactions')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.axelar.silver__transactions"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": true, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "AXELAR_DEV", "schema": "not_null_silver", "fqn": ["axelar", "silver", "not_null_silver__transactions_TX_CODE"], "unique_id": "test.axelar.not_null_silver__transactions_TX_CODE.080a71cc61", "package_name": "axelar", "root_path": "C:\\Users\\jessi\\git\\axelar-models", "path": "not_null_silver__transactions_TX_CODE.sql", "original_file_path": "models\\silver\\silver__transactions.yml", "name": "not_null_silver__transactions_TX_CODE", "alias": "transactions_TX_CODE", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["silver__transactions"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target\\compiled\\axelar\\models\\silver\\silver__transactions.yml\\not_null_silver__transactions_TX_CODE.sql", "build_path": null, "deferred": false, "unrendered_config": {"store_failures": true}, "created_at": 1671050800.0535512, "compiled_sql": "\n    \n    \n\n\n\nselect *\nfrom AXELAR_DEV.silver.transactions\nwhere TX_CODE is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "AXELAR_DEV.not_null_silver.transactions_TX_CODE", "column_name": "TX_CODE", "file_key_name": "models.silver__transactions"}, "test.axelar.dbt_expectations_expect_column_values_to_be_in_type_list_silver__transactions_TX_CODE__NUMBER__FLOAT.7a08ebe064": {"raw_sql": "{{ dbt_expectations.test_expect_column_values_to_be_in_type_list(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_expectations_expect_column_9157d02351e50792795d30454298d1a0\") }}", "test_metadata": {"name": "expect_column_values_to_be_in_type_list", "kwargs": {"column_type_list": ["NUMBER", "FLOAT"], "column_name": "TX_CODE", "model": "{{ get_where_subquery(ref('silver__transactions')) }}"}, "namespace": "dbt_expectations"}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt_expectations.test_expect_column_values_to_be_in_type_list", "macro.dbt.get_where_subquery"], "nodes": ["model.axelar.silver__transactions"]}, "config": {"enabled": true, "alias": "dbt_expectations_expect_column_9157d02351e50792795d30454298d1a0", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": true, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "AXELAR_DEV", "schema": "dbt_expectations_expect_column_values_to_be_in_type_list_silver", "fqn": ["axelar", "silver", "dbt_expectations_expect_column_values_to_be_in_type_list_silver__transactions_TX_CODE__NUMBER__FLOAT"], "unique_id": "test.axelar.dbt_expectations_expect_column_values_to_be_in_type_list_silver__transactions_TX_CODE__NUMBER__FLOAT.7a08ebe064", "package_name": "axelar", "root_path": "C:\\Users\\jessi\\git\\axelar-models", "path": "dbt_expectations_expect_column_9157d02351e50792795d30454298d1a0.sql", "original_file_path": "models\\silver\\silver__transactions.yml", "name": "dbt_expectations_expect_column_values_to_be_in_type_list_silver__transactions_TX_CODE__NUMBER__FLOAT", "alias": "transactions_TX_CODE", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["silver__transactions"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target\\compiled\\axelar\\models\\silver\\silver__transactions.yml\\dbt_expectations_expect_column_9157d02351e50792795d30454298d1a0.sql", "build_path": null, "deferred": false, "unrendered_config": {"store_failures": true, "alias": "dbt_expectations_expect_column_9157d02351e50792795d30454298d1a0"}, "created_at": 1671050800.054555, "compiled_sql": "with relation_columns as (\n\n        \n        select\n            cast('BLOCK_ID' as TEXT) as relation_column,\n            cast('NUMBER' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('BLOCK_TIMESTAMP' as TEXT) as relation_column,\n            cast('TIMESTAMP_NTZ' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('TX_ID' as TEXT) as relation_column,\n            cast('VARCHAR' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('BLOCKCHAIN' as TEXT) as relation_column,\n            cast('VARCHAR' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('CHAIN_ID' as TEXT) as relation_column,\n            cast('VARCHAR' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('CODESPACE' as TEXT) as relation_column,\n            cast('VARIANT' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('GAS_USED' as TEXT) as relation_column,\n            cast('NUMBER' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('GAS_WANTED' as TEXT) as relation_column,\n            cast('NUMBER' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('TX_SUCCEEDED' as TEXT) as relation_column,\n            cast('BOOLEAN' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('TX_CODE' as TEXT) as relation_column,\n            cast('NUMBER' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('MSGS' as TEXT) as relation_column,\n            cast('VARIANT' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('TX_LOG' as TEXT) as relation_column,\n            cast('VARCHAR' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('_PARTITION_BY_BLOCK_ID' as TEXT) as relation_column,\n            cast('NUMBER' as TEXT) as relation_column_type\n        \n        \n    ),\n    test_data as (\n\n        select\n            *\n        from\n            relation_columns\n        where\n            relation_column = 'TX_CODE'\n            and\n            relation_column_type not in ('NUMBER', 'FLOAT')\n\n    )\n    select *\n    from test_data", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "AXELAR_DEV.dbt_expectations_expect_column_values_to_be_in_type_list_silver.transactions_TX_CODE", "column_name": "TX_CODE", "file_key_name": "models.silver__transactions"}, "test.axelar.not_null_silver__transactions_MSGS.e30a3fea27": {"raw_sql": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "MSGS", "model": "{{ get_where_subquery(ref('silver__transactions')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.axelar.silver__transactions"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": true, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "AXELAR_DEV", "schema": "not_null_silver", "fqn": ["axelar", "silver", "not_null_silver__transactions_MSGS"], "unique_id": "test.axelar.not_null_silver__transactions_MSGS.e30a3fea27", "package_name": "axelar", "root_path": "C:\\Users\\jessi\\git\\axelar-models", "path": "not_null_silver__transactions_MSGS.sql", "original_file_path": "models\\silver\\silver__transactions.yml", "name": "not_null_silver__transactions_MSGS", "alias": "transactions_MSGS", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["silver__transactions"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target\\compiled\\axelar\\models\\silver\\silver__transactions.yml\\not_null_silver__transactions_MSGS.sql", "build_path": null, "deferred": false, "unrendered_config": {"store_failures": true}, "created_at": 1671050800.0585613, "compiled_sql": "\n    \n    \n\n\n\nselect *\nfrom AXELAR_DEV.silver.transactions\nwhere MSGS is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "AXELAR_DEV.not_null_silver.transactions_MSGS", "column_name": "MSGS", "file_key_name": "models.silver__transactions"}, "test.axelar.not_null_silver__transactions_TX_LOG.1ceefab63d": {"raw_sql": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "TX_LOG", "model": "{{ get_where_subquery(ref('silver__transactions')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.axelar.silver__transactions"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": true, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "AXELAR_DEV", "schema": "not_null_silver", "fqn": ["axelar", "silver", "not_null_silver__transactions_TX_LOG"], "unique_id": "test.axelar.not_null_silver__transactions_TX_LOG.1ceefab63d", "package_name": "axelar", "root_path": "C:\\Users\\jessi\\git\\axelar-models", "path": "not_null_silver__transactions_TX_LOG.sql", "original_file_path": "models\\silver\\silver__transactions.yml", "name": "not_null_silver__transactions_TX_LOG", "alias": "transactions_TX_LOG", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["silver__transactions"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target\\compiled\\axelar\\models\\silver\\silver__transactions.yml\\not_null_silver__transactions_TX_LOG.sql", "build_path": null, "deferred": false, "unrendered_config": {"store_failures": true}, "created_at": 1671050800.059544, "compiled_sql": "\n    \n    \n\n\n\nselect *\nfrom AXELAR_DEV.silver.transactions\nwhere TX_LOG is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "AXELAR_DEV.not_null_silver.transactions_TX_LOG", "column_name": "TX_LOG", "file_key_name": "models.silver__transactions"}, "test.axelar.not_null_silver__transactions__PARTITION_BY_BLOCK_ID.75adbd93e1": {"raw_sql": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "_PARTITION_BY_BLOCK_ID", "model": "{{ get_where_subquery(ref('silver__transactions')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.axelar.silver__transactions"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": true, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "AXELAR_DEV", "schema": "not_null_silver", "fqn": ["axelar", "silver", "not_null_silver__transactions__PARTITION_BY_BLOCK_ID"], "unique_id": "test.axelar.not_null_silver__transactions__PARTITION_BY_BLOCK_ID.75adbd93e1", "package_name": "axelar", "root_path": "C:\\Users\\jessi\\git\\axelar-models", "path": "not_null_silver__transactions__PARTITION_BY_BLOCK_ID.sql", "original_file_path": "models\\silver\\silver__transactions.yml", "name": "not_null_silver__transactions__PARTITION_BY_BLOCK_ID", "alias": "transactions", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["silver__transactions"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target\\compiled\\axelar\\models\\silver\\silver__transactions.yml\\not_null_silver__transactions__PARTITION_BY_BLOCK_ID.sql", "build_path": null, "deferred": false, "unrendered_config": {"store_failures": true}, "created_at": 1671050800.0615573, "compiled_sql": "\n    \n    \n\n\n\nselect *\nfrom AXELAR_DEV.silver.transactions\nwhere _PARTITION_BY_BLOCK_ID is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "AXELAR_DEV.not_null_silver.transactions", "column_name": "_PARTITION_BY_BLOCK_ID", "file_key_name": "models.silver__transactions"}, "test.axelar.dbt_utils_unique_combination_of_columns_silver__transactions_TX_ID.215714589b": {"raw_sql": "{{ dbt_utils.test_unique_combination_of_columns(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_utils_unique_combination_o_a3ea2f3cce9bdfec5d79843fc8e01020\") }}", "test_metadata": {"name": "unique_combination_of_columns", "kwargs": {"combination_of_columns": ["TX_ID"], "model": "{{ get_where_subquery(ref('silver__transactions')) }}"}, "namespace": "dbt_utils"}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt_utils.test_unique_combination_of_columns", "macro.dbt.get_where_subquery"], "nodes": ["model.axelar.silver__transactions"]}, "config": {"enabled": true, "alias": "dbt_utils_unique_combination_o_a3ea2f3cce9bdfec5d79843fc8e01020", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": true, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "AXELAR_DEV", "schema": "dbt_utils_unique_combination_of_columns_silver", "fqn": ["axelar", "silver", "dbt_utils_unique_combination_of_columns_silver__transactions_TX_ID"], "unique_id": "test.axelar.dbt_utils_unique_combination_of_columns_silver__transactions_TX_ID.215714589b", "package_name": "axelar", "root_path": "C:\\Users\\jessi\\git\\axelar-models", "path": "dbt_utils_unique_combination_o_a3ea2f3cce9bdfec5d79843fc8e01020.sql", "original_file_path": "models\\silver\\silver__transactions.yml", "name": "dbt_utils_unique_combination_of_columns_silver__transactions_TX_ID", "alias": "transactions_TX_ID", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["silver__transactions"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target\\compiled\\axelar\\models\\silver\\silver__transactions.yml\\dbt_utils_unique_combination_o_a3ea2f3cce9bdfec5d79843fc8e01020.sql", "build_path": null, "deferred": false, "unrendered_config": {"store_failures": true, "alias": "dbt_utils_unique_combination_o_a3ea2f3cce9bdfec5d79843fc8e01020"}, "created_at": 1671050800.0625427, "compiled_sql": "\n\n\n\n\n\nwith validation_errors as (\n\n    select\n        TX_ID\n    from AXELAR_DEV.silver.transactions\n    group by TX_ID\n    having count(*) > 1\n\n)\n\nselect *\nfrom validation_errors\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "AXELAR_DEV.dbt_utils_unique_combination_of_columns_silver.transactions_TX_ID", "column_name": null, "file_key_name": "models.silver__transactions"}, "test.axelar.not_null_silver__transfers_BLOCK_ID.81767d6c3c": {"raw_sql": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "BLOCK_ID", "model": "{{ get_where_subquery(ref('silver__transfers')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.axelar.silver__transfers"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": true, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "AXELAR_DEV", "schema": "not_null_silver", "fqn": ["axelar", "silver", "not_null_silver__transfers_BLOCK_ID"], "unique_id": "test.axelar.not_null_silver__transfers_BLOCK_ID.81767d6c3c", "package_name": "axelar", "root_path": "C:\\Users\\jessi\\git\\axelar-models", "path": "not_null_silver__transfers_BLOCK_ID.sql", "original_file_path": "models\\silver\\silver__transfers.yml", "name": "not_null_silver__transfers_BLOCK_ID", "alias": "transfers_BLOCK_ID", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["silver__transfers"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target\\compiled\\axelar\\models\\silver\\silver__transfers.yml\\not_null_silver__transfers_BLOCK_ID.sql", "build_path": null, "deferred": false, "unrendered_config": {"store_failures": true}, "created_at": 1671050800.0677571, "compiled_sql": "\n    \n    \n\n\n\nselect *\nfrom AXELAR_DEV.silver.transfers\nwhere BLOCK_ID is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "AXELAR_DEV.not_null_silver.transfers_BLOCK_ID", "column_name": "BLOCK_ID", "file_key_name": "models.silver__transfers"}, "test.axelar.dbt_expectations_expect_column_values_to_be_in_type_list_silver__transfers_BLOCK_ID__NUMBER__FLOAT.e08ee6d46c": {"raw_sql": "{{ dbt_expectations.test_expect_column_values_to_be_in_type_list(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_expectations_expect_column_d14f8e06b211ab74650e6ffd3f87952f\") }}", "test_metadata": {"name": "expect_column_values_to_be_in_type_list", "kwargs": {"column_type_list": ["NUMBER", "FLOAT"], "column_name": "BLOCK_ID", "model": "{{ get_where_subquery(ref('silver__transfers')) }}"}, "namespace": "dbt_expectations"}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt_expectations.test_expect_column_values_to_be_in_type_list", "macro.dbt.get_where_subquery"], "nodes": ["model.axelar.silver__transfers"]}, "config": {"enabled": true, "alias": "dbt_expectations_expect_column_d14f8e06b211ab74650e6ffd3f87952f", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": true, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "AXELAR_DEV", "schema": "dbt_expectations_expect_column_values_to_be_in_type_list_silver", "fqn": ["axelar", "silver", "dbt_expectations_expect_column_values_to_be_in_type_list_silver__transfers_BLOCK_ID__NUMBER__FLOAT"], "unique_id": "test.axelar.dbt_expectations_expect_column_values_to_be_in_type_list_silver__transfers_BLOCK_ID__NUMBER__FLOAT.e08ee6d46c", "package_name": "axelar", "root_path": "C:\\Users\\jessi\\git\\axelar-models", "path": "dbt_expectations_expect_column_d14f8e06b211ab74650e6ffd3f87952f.sql", "original_file_path": "models\\silver\\silver__transfers.yml", "name": "dbt_expectations_expect_column_values_to_be_in_type_list_silver__transfers_BLOCK_ID__NUMBER__FLOAT", "alias": "transfers_BLOCK_ID", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["silver__transfers"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target\\compiled\\axelar\\models\\silver\\silver__transfers.yml\\dbt_expectations_expect_column_d14f8e06b211ab74650e6ffd3f87952f.sql", "build_path": null, "deferred": false, "unrendered_config": {"store_failures": true, "alias": "dbt_expectations_expect_column_d14f8e06b211ab74650e6ffd3f87952f"}, "created_at": 1671050800.0677571, "compiled_sql": "with relation_columns as (\n\n        \n        select\n            cast('BLOCK_ID' as TEXT) as relation_column,\n            cast('NUMBER' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('BLOCK_TIMESTAMP' as TEXT) as relation_column,\n            cast('TIMESTAMP_NTZ' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('BLOCKCHAIN' as TEXT) as relation_column,\n            cast('VARCHAR' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('CHAIN_ID' as TEXT) as relation_column,\n            cast('VARCHAR' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('TX_ID' as TEXT) as relation_column,\n            cast('VARCHAR' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('TX_SUCCEEDED' as TEXT) as relation_column,\n            cast('BOOLEAN' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('TRANSFER_TYPE' as TEXT) as relation_column,\n            cast('VARCHAR' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('SENDER' as TEXT) as relation_column,\n            cast('VARCHAR' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('AMOUNT' as TEXT) as relation_column,\n            cast('NUMBER' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('CURRENCY' as TEXT) as relation_column,\n            cast('VARCHAR' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('DECIMAL' as TEXT) as relation_column,\n            cast('VARIANT' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('RECEIVER' as TEXT) as relation_column,\n            cast('VARCHAR' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('MSG_INDEX' as TEXT) as relation_column,\n            cast('NUMBER' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('_PARTITION_BY_BLOCK_ID' as TEXT) as relation_column,\n            cast('NUMBER' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('_UNIQUE_KEY' as TEXT) as relation_column,\n            cast('VARCHAR' as TEXT) as relation_column_type\n        \n        \n    ),\n    test_data as (\n\n        select\n            *\n        from\n            relation_columns\n        where\n            relation_column = 'BLOCK_ID'\n            and\n            relation_column_type not in ('NUMBER', 'FLOAT')\n\n    )\n    select *\n    from test_data", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "AXELAR_DEV.dbt_expectations_expect_column_values_to_be_in_type_list_silver.transfers_BLOCK_ID", "column_name": "BLOCK_ID", "file_key_name": "models.silver__transfers"}, "test.axelar.not_null_silver__transfers_BLOCK_TIMESTAMP.d599dc282c": {"raw_sql": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "BLOCK_TIMESTAMP", "model": "{{ get_where_subquery(ref('silver__transfers')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.axelar.silver__transfers"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": true, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "AXELAR_DEV", "schema": "not_null_silver", "fqn": ["axelar", "silver", "not_null_silver__transfers_BLOCK_TIMESTAMP"], "unique_id": "test.axelar.not_null_silver__transfers_BLOCK_TIMESTAMP.d599dc282c", "package_name": "axelar", "root_path": "C:\\Users\\jessi\\git\\axelar-models", "path": "not_null_silver__transfers_BLOCK_TIMESTAMP.sql", "original_file_path": "models\\silver\\silver__transfers.yml", "name": "not_null_silver__transfers_BLOCK_TIMESTAMP", "alias": "transfers_BLOCK_TIMESTAMP", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["silver__transfers"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target\\compiled\\axelar\\models\\silver\\silver__transfers.yml\\not_null_silver__transfers_BLOCK_TIMESTAMP.sql", "build_path": null, "deferred": false, "unrendered_config": {"store_failures": true}, "created_at": 1671050800.0677571, "compiled_sql": "\n    \n    \n\n\n\nselect *\nfrom AXELAR_DEV.silver.transfers\nwhere BLOCK_TIMESTAMP is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "AXELAR_DEV.not_null_silver.transfers_BLOCK_TIMESTAMP", "column_name": "BLOCK_TIMESTAMP", "file_key_name": "models.silver__transfers"}, "test.axelar.dbt_expectations_expect_row_values_to_have_recent_data_silver__transfers_BLOCK_TIMESTAMP__day__1.aef2ec1111": {"raw_sql": "{{ dbt_expectations.test_expect_row_values_to_have_recent_data(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_expectations_expect_row_va_0391e7977e8cebd188a1d5fa8d5e5c1d\") }}", "test_metadata": {"name": "expect_row_values_to_have_recent_data", "kwargs": {"datepart": "day", "interval": 1, "column_name": "BLOCK_TIMESTAMP", "model": "{{ get_where_subquery(ref('silver__transfers')) }}"}, "namespace": "dbt_expectations"}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt_expectations.test_expect_row_values_to_have_recent_data", "macro.dbt.get_where_subquery"], "nodes": ["model.axelar.silver__transfers"]}, "config": {"enabled": true, "alias": "dbt_expectations_expect_row_va_0391e7977e8cebd188a1d5fa8d5e5c1d", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": true, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "AXELAR_DEV", "schema": "dbt_expectations_expect_row_values_to_have_recent_data_silver", "fqn": ["axelar", "silver", "dbt_expectations_expect_row_values_to_have_recent_data_silver__transfers_BLOCK_TIMESTAMP__day__1"], "unique_id": "test.axelar.dbt_expectations_expect_row_values_to_have_recent_data_silver__transfers_BLOCK_TIMESTAMP__day__1.aef2ec1111", "package_name": "axelar", "root_path": "C:\\Users\\jessi\\git\\axelar-models", "path": "dbt_expectations_expect_row_va_0391e7977e8cebd188a1d5fa8d5e5c1d.sql", "original_file_path": "models\\silver\\silver__transfers.yml", "name": "dbt_expectations_expect_row_values_to_have_recent_data_silver__transfers_BLOCK_TIMESTAMP__day__1", "alias": "transfers_BLOCK_TIMESTAMP", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["silver__transfers"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target\\compiled\\axelar\\models\\silver\\silver__transfers.yml\\dbt_expectations_expect_row_va_0391e7977e8cebd188a1d5fa8d5e5c1d.sql", "build_path": null, "deferred": false, "unrendered_config": {"store_failures": true, "alias": "dbt_expectations_expect_row_va_0391e7977e8cebd188a1d5fa8d5e5c1d"}, "created_at": 1671050800.07836, "compiled_sql": "\n\n with max_recency as (\n\n    select max(cast(BLOCK_TIMESTAMP as TIMESTAMP)) as max_timestamp\n    from\n        AXELAR_DEV.silver.transfers\n    where\n        -- to exclude erroneous future dates\n        cast(BLOCK_TIMESTAMP as TIMESTAMP) <= convert_timezone('UTC', 'GMT',\n    cast(convert_timezone('UTC', current_timestamp()) as TIMESTAMP)\n)\n        \n)\nselect\n    *\nfrom\n    max_recency\nwhere\n    -- if the row_condition excludes all rows, we need to compare against a default date\n    -- to avoid false negatives\n    coalesce(max_timestamp, cast('1970-01-01' as TIMESTAMP))\n        <\n        cast(\n\n    dateadd(\n        day,\n        -1,\n        convert_timezone('UTC', 'GMT',\n    cast(convert_timezone('UTC', current_timestamp()) as TIMESTAMP)\n)\n        )\n\n as TIMESTAMP)\n\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "AXELAR_DEV.dbt_expectations_expect_row_values_to_have_recent_data_silver.transfers_BLOCK_TIMESTAMP", "column_name": "BLOCK_TIMESTAMP", "file_key_name": "models.silver__transfers"}, "test.axelar.dbt_expectations_expect_column_values_to_be_in_type_list_silver__transfers_BLOCK_TIMESTAMP__TIMESTAMP_NTZ.4ccf9184cd": {"raw_sql": "{{ dbt_expectations.test_expect_column_values_to_be_in_type_list(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_expectations_expect_column_aaa4d09592b0234773f61be8de1236a1\") }}", "test_metadata": {"name": "expect_column_values_to_be_in_type_list", "kwargs": {"column_type_list": ["TIMESTAMP_NTZ"], "column_name": "BLOCK_TIMESTAMP", "model": "{{ get_where_subquery(ref('silver__transfers')) }}"}, "namespace": "dbt_expectations"}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt_expectations.test_expect_column_values_to_be_in_type_list", "macro.dbt.get_where_subquery"], "nodes": ["model.axelar.silver__transfers"]}, "config": {"enabled": true, "alias": "dbt_expectations_expect_column_aaa4d09592b0234773f61be8de1236a1", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": true, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "AXELAR_DEV", "schema": "dbt_expectations_expect_column_values_to_be_in_type_list_silver", "fqn": ["axelar", "silver", "dbt_expectations_expect_column_values_to_be_in_type_list_silver__transfers_BLOCK_TIMESTAMP__TIMESTAMP_NTZ"], "unique_id": "test.axelar.dbt_expectations_expect_column_values_to_be_in_type_list_silver__transfers_BLOCK_TIMESTAMP__TIMESTAMP_NTZ.4ccf9184cd", "package_name": "axelar", "root_path": "C:\\Users\\jessi\\git\\axelar-models", "path": "dbt_expectations_expect_column_aaa4d09592b0234773f61be8de1236a1.sql", "original_file_path": "models\\silver\\silver__transfers.yml", "name": "dbt_expectations_expect_column_values_to_be_in_type_list_silver__transfers_BLOCK_TIMESTAMP__TIMESTAMP_NTZ", "alias": "transfers_BLOCK_TIMESTAMP", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["silver__transfers"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target\\compiled\\axelar\\models\\silver\\silver__transfers.yml\\dbt_expectations_expect_column_aaa4d09592b0234773f61be8de1236a1.sql", "build_path": null, "deferred": false, "unrendered_config": {"store_failures": true, "alias": "dbt_expectations_expect_column_aaa4d09592b0234773f61be8de1236a1"}, "created_at": 1671050800.0985136, "compiled_sql": "with relation_columns as (\n\n        \n        select\n            cast('BLOCK_ID' as TEXT) as relation_column,\n            cast('NUMBER' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('BLOCK_TIMESTAMP' as TEXT) as relation_column,\n            cast('TIMESTAMP_NTZ' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('BLOCKCHAIN' as TEXT) as relation_column,\n            cast('VARCHAR' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('CHAIN_ID' as TEXT) as relation_column,\n            cast('VARCHAR' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('TX_ID' as TEXT) as relation_column,\n            cast('VARCHAR' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('TX_SUCCEEDED' as TEXT) as relation_column,\n            cast('BOOLEAN' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('TRANSFER_TYPE' as TEXT) as relation_column,\n            cast('VARCHAR' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('SENDER' as TEXT) as relation_column,\n            cast('VARCHAR' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('AMOUNT' as TEXT) as relation_column,\n            cast('NUMBER' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('CURRENCY' as TEXT) as relation_column,\n            cast('VARCHAR' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('DECIMAL' as TEXT) as relation_column,\n            cast('VARIANT' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('RECEIVER' as TEXT) as relation_column,\n            cast('VARCHAR' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('MSG_INDEX' as TEXT) as relation_column,\n            cast('NUMBER' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('_PARTITION_BY_BLOCK_ID' as TEXT) as relation_column,\n            cast('NUMBER' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('_UNIQUE_KEY' as TEXT) as relation_column,\n            cast('VARCHAR' as TEXT) as relation_column_type\n        \n        \n    ),\n    test_data as (\n\n        select\n            *\n        from\n            relation_columns\n        where\n            relation_column = 'BLOCK_TIMESTAMP'\n            and\n            relation_column_type not in ('TIMESTAMP_NTZ')\n\n    )\n    select *\n    from test_data", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "AXELAR_DEV.dbt_expectations_expect_column_values_to_be_in_type_list_silver.transfers_BLOCK_TIMESTAMP", "column_name": "BLOCK_TIMESTAMP", "file_key_name": "models.silver__transfers"}, "test.axelar.not_null_silver__transfers_BLOCKCHAIN.0d49ed494c": {"raw_sql": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "BLOCKCHAIN", "model": "{{ get_where_subquery(ref('silver__transfers')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.axelar.silver__transfers"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": true, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "AXELAR_DEV", "schema": "not_null_silver", "fqn": ["axelar", "silver", "not_null_silver__transfers_BLOCKCHAIN"], "unique_id": "test.axelar.not_null_silver__transfers_BLOCKCHAIN.0d49ed494c", "package_name": "axelar", "root_path": "C:\\Users\\jessi\\git\\axelar-models", "path": "not_null_silver__transfers_BLOCKCHAIN.sql", "original_file_path": "models\\silver\\silver__transfers.yml", "name": "not_null_silver__transfers_BLOCKCHAIN", "alias": "transfers_BLOCKCHAIN", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["silver__transfers"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target\\compiled\\axelar\\models\\silver\\silver__transfers.yml\\not_null_silver__transfers_BLOCKCHAIN.sql", "build_path": null, "deferred": false, "unrendered_config": {"store_failures": true}, "created_at": 1671050800.1044962, "compiled_sql": "\n    \n    \n\n\n\nselect *\nfrom AXELAR_DEV.silver.transfers\nwhere BLOCKCHAIN is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "AXELAR_DEV.not_null_silver.transfers_BLOCKCHAIN", "column_name": "BLOCKCHAIN", "file_key_name": "models.silver__transfers"}, "test.axelar.not_null_silver__transfers_CHAIN_ID.f332cbbf7c": {"raw_sql": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "CHAIN_ID", "model": "{{ get_where_subquery(ref('silver__transfers')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.axelar.silver__transfers"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": true, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "AXELAR_DEV", "schema": "not_null_silver", "fqn": ["axelar", "silver", "not_null_silver__transfers_CHAIN_ID"], "unique_id": "test.axelar.not_null_silver__transfers_CHAIN_ID.f332cbbf7c", "package_name": "axelar", "root_path": "C:\\Users\\jessi\\git\\axelar-models", "path": "not_null_silver__transfers_CHAIN_ID.sql", "original_file_path": "models\\silver\\silver__transfers.yml", "name": "not_null_silver__transfers_CHAIN_ID", "alias": "transfers_CHAIN_ID", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["silver__transfers"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target\\compiled\\axelar\\models\\silver\\silver__transfers.yml\\not_null_silver__transfers_CHAIN_ID.sql", "build_path": null, "deferred": false, "unrendered_config": {"store_failures": true}, "created_at": 1671050800.1066053, "compiled_sql": "\n    \n    \n\n\n\nselect *\nfrom AXELAR_DEV.silver.transfers\nwhere CHAIN_ID is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "AXELAR_DEV.not_null_silver.transfers_CHAIN_ID", "column_name": "CHAIN_ID", "file_key_name": "models.silver__transfers"}, "test.axelar.not_null_silver__transfers_TX_ID.1be05d8ee2": {"raw_sql": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "TX_ID", "model": "{{ get_where_subquery(ref('silver__transfers')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.axelar.silver__transfers"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": true, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "AXELAR_DEV", "schema": "not_null_silver", "fqn": ["axelar", "silver", "not_null_silver__transfers_TX_ID"], "unique_id": "test.axelar.not_null_silver__transfers_TX_ID.1be05d8ee2", "package_name": "axelar", "root_path": "C:\\Users\\jessi\\git\\axelar-models", "path": "not_null_silver__transfers_TX_ID.sql", "original_file_path": "models\\silver\\silver__transfers.yml", "name": "not_null_silver__transfers_TX_ID", "alias": "transfers_TX_ID", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["silver__transfers"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target\\compiled\\axelar\\models\\silver\\silver__transfers.yml\\not_null_silver__transfers_TX_ID.sql", "build_path": null, "deferred": false, "unrendered_config": {"store_failures": true}, "created_at": 1671050800.1075807, "compiled_sql": "\n    \n    \n\n\n\nselect *\nfrom AXELAR_DEV.silver.transfers\nwhere TX_ID is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "AXELAR_DEV.not_null_silver.transfers_TX_ID", "column_name": "TX_ID", "file_key_name": "models.silver__transfers"}, "test.axelar.not_null_silver__transfers_TX_SUCCEEDED.e11534b2af": {"raw_sql": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "TX_SUCCEEDED", "model": "{{ get_where_subquery(ref('silver__transfers')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.axelar.silver__transfers"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": true, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "AXELAR_DEV", "schema": "not_null_silver", "fqn": ["axelar", "silver", "not_null_silver__transfers_TX_SUCCEEDED"], "unique_id": "test.axelar.not_null_silver__transfers_TX_SUCCEEDED.e11534b2af", "package_name": "axelar", "root_path": "C:\\Users\\jessi\\git\\axelar-models", "path": "not_null_silver__transfers_TX_SUCCEEDED.sql", "original_file_path": "models\\silver\\silver__transfers.yml", "name": "not_null_silver__transfers_TX_SUCCEEDED", "alias": "transfers_TX_SUCCEEDED", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["silver__transfers"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target\\compiled\\axelar\\models\\silver\\silver__transfers.yml\\not_null_silver__transfers_TX_SUCCEEDED.sql", "build_path": null, "deferred": false, "unrendered_config": {"store_failures": true}, "created_at": 1671050800.1085818, "compiled_sql": "\n    \n    \n\n\n\nselect *\nfrom AXELAR_DEV.silver.transfers\nwhere TX_SUCCEEDED is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "AXELAR_DEV.not_null_silver.transfers_TX_SUCCEEDED", "column_name": "TX_SUCCEEDED", "file_key_name": "models.silver__transfers"}, "test.axelar.not_null_silver__transfers_TRANSFER_TYPE.280bc9914f": {"raw_sql": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "TRANSFER_TYPE", "model": "{{ get_where_subquery(ref('silver__transfers')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.axelar.silver__transfers"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": true, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "AXELAR_DEV", "schema": "not_null_silver", "fqn": ["axelar", "silver", "not_null_silver__transfers_TRANSFER_TYPE"], "unique_id": "test.axelar.not_null_silver__transfers_TRANSFER_TYPE.280bc9914f", "package_name": "axelar", "root_path": "C:\\Users\\jessi\\git\\axelar-models", "path": "not_null_silver__transfers_TRANSFER_TYPE.sql", "original_file_path": "models\\silver\\silver__transfers.yml", "name": "not_null_silver__transfers_TRANSFER_TYPE", "alias": "transfers_TRANSFER_TYPE", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["silver__transfers"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target\\compiled\\axelar\\models\\silver\\silver__transfers.yml\\not_null_silver__transfers_TRANSFER_TYPE.sql", "build_path": null, "deferred": false, "unrendered_config": {"store_failures": true}, "created_at": 1671050800.1094997, "compiled_sql": "\n    \n    \n\n\n\nselect *\nfrom AXELAR_DEV.silver.transfers\nwhere TRANSFER_TYPE is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "AXELAR_DEV.not_null_silver.transfers_TRANSFER_TYPE", "column_name": "TRANSFER_TYPE", "file_key_name": "models.silver__transfers"}, "test.axelar.not_null_silver__transfers_SENDER.0abbede6fe": {"raw_sql": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "SENDER", "model": "{{ get_where_subquery(ref('silver__transfers')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.axelar.silver__transfers"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": true, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "AXELAR_DEV", "schema": "not_null_silver", "fqn": ["axelar", "silver", "not_null_silver__transfers_SENDER"], "unique_id": "test.axelar.not_null_silver__transfers_SENDER.0abbede6fe", "package_name": "axelar", "root_path": "C:\\Users\\jessi\\git\\axelar-models", "path": "not_null_silver__transfers_SENDER.sql", "original_file_path": "models\\silver\\silver__transfers.yml", "name": "not_null_silver__transfers_SENDER", "alias": "transfers_SENDER", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["silver__transfers"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target\\compiled\\axelar\\models\\silver\\silver__transfers.yml\\not_null_silver__transfers_SENDER.sql", "build_path": null, "deferred": false, "unrendered_config": {"store_failures": true}, "created_at": 1671050800.111588, "compiled_sql": "\n    \n    \n\n\n\nselect *\nfrom AXELAR_DEV.silver.transfers\nwhere SENDER is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "AXELAR_DEV.not_null_silver.transfers_SENDER", "column_name": "SENDER", "file_key_name": "models.silver__transfers"}, "test.axelar.not_null_silver__transfers_AMOUNT.ba102cb51b": {"raw_sql": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "AMOUNT", "model": "{{ get_where_subquery(ref('silver__transfers')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.axelar.silver__transfers"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": true, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "AXELAR_DEV", "schema": "not_null_silver", "fqn": ["axelar", "silver", "not_null_silver__transfers_AMOUNT"], "unique_id": "test.axelar.not_null_silver__transfers_AMOUNT.ba102cb51b", "package_name": "axelar", "root_path": "C:\\Users\\jessi\\git\\axelar-models", "path": "not_null_silver__transfers_AMOUNT.sql", "original_file_path": "models\\silver\\silver__transfers.yml", "name": "not_null_silver__transfers_AMOUNT", "alias": "transfers_AMOUNT", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["silver__transfers"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target\\compiled\\axelar\\models\\silver\\silver__transfers.yml\\not_null_silver__transfers_AMOUNT.sql", "build_path": null, "deferred": false, "unrendered_config": {"store_failures": true}, "created_at": 1671050800.1125045, "compiled_sql": "\n    \n    \n\n\n\nselect *\nfrom AXELAR_DEV.silver.transfers\nwhere AMOUNT is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "AXELAR_DEV.not_null_silver.transfers_AMOUNT", "column_name": "AMOUNT", "file_key_name": "models.silver__transfers"}, "test.axelar.not_null_silver__transfers_CURRENCY.4a8953d5ec": {"raw_sql": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "CURRENCY", "model": "{{ get_where_subquery(ref('silver__transfers')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.axelar.silver__transfers"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": true, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "AXELAR_DEV", "schema": "not_null_silver", "fqn": ["axelar", "silver", "not_null_silver__transfers_CURRENCY"], "unique_id": "test.axelar.not_null_silver__transfers_CURRENCY.4a8953d5ec", "package_name": "axelar", "root_path": "C:\\Users\\jessi\\git\\axelar-models", "path": "not_null_silver__transfers_CURRENCY.sql", "original_file_path": "models\\silver\\silver__transfers.yml", "name": "not_null_silver__transfers_CURRENCY", "alias": "transfers_CURRENCY", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["silver__transfers"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target\\compiled\\axelar\\models\\silver\\silver__transfers.yml\\not_null_silver__transfers_CURRENCY.sql", "build_path": null, "deferred": false, "unrendered_config": {"store_failures": true}, "created_at": 1671050800.1144974, "compiled_sql": "\n    \n    \n\n\n\nselect *\nfrom AXELAR_DEV.silver.transfers\nwhere CURRENCY is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "AXELAR_DEV.not_null_silver.transfers_CURRENCY", "column_name": "CURRENCY", "file_key_name": "models.silver__transfers"}, "test.axelar.not_null_silver__transfers_RECEIVER.965c9f325d": {"raw_sql": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "RECEIVER", "model": "{{ get_where_subquery(ref('silver__transfers')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.axelar.silver__transfers"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": true, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "AXELAR_DEV", "schema": "not_null_silver", "fqn": ["axelar", "silver", "not_null_silver__transfers_RECEIVER"], "unique_id": "test.axelar.not_null_silver__transfers_RECEIVER.965c9f325d", "package_name": "axelar", "root_path": "C:\\Users\\jessi\\git\\axelar-models", "path": "not_null_silver__transfers_RECEIVER.sql", "original_file_path": "models\\silver\\silver__transfers.yml", "name": "not_null_silver__transfers_RECEIVER", "alias": "transfers_RECEIVER", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["silver__transfers"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target\\compiled\\axelar\\models\\silver\\silver__transfers.yml\\not_null_silver__transfers_RECEIVER.sql", "build_path": null, "deferred": false, "unrendered_config": {"store_failures": true}, "created_at": 1671050800.1155825, "compiled_sql": "\n    \n    \n\n\n\nselect *\nfrom AXELAR_DEV.silver.transfers\nwhere RECEIVER is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "AXELAR_DEV.not_null_silver.transfers_RECEIVER", "column_name": "RECEIVER", "file_key_name": "models.silver__transfers"}, "test.axelar.not_null_silver__transfers__PARTITION_BY_BLOCK_ID.26915645ba": {"raw_sql": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "_PARTITION_BY_BLOCK_ID", "model": "{{ get_where_subquery(ref('silver__transfers')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.axelar.silver__transfers"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": true, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "AXELAR_DEV", "schema": "not_null_silver", "fqn": ["axelar", "silver", "not_null_silver__transfers__PARTITION_BY_BLOCK_ID"], "unique_id": "test.axelar.not_null_silver__transfers__PARTITION_BY_BLOCK_ID.26915645ba", "package_name": "axelar", "root_path": "C:\\Users\\jessi\\git\\axelar-models", "path": "not_null_silver__transfers__PARTITION_BY_BLOCK_ID.sql", "original_file_path": "models\\silver\\silver__transfers.yml", "name": "not_null_silver__transfers__PARTITION_BY_BLOCK_ID", "alias": "transfers", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["silver__transfers"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target\\compiled\\axelar\\models\\silver\\silver__transfers.yml\\not_null_silver__transfers__PARTITION_BY_BLOCK_ID.sql", "build_path": null, "deferred": false, "unrendered_config": {"store_failures": true}, "created_at": 1671050800.1175401, "compiled_sql": "\n    \n    \n\n\n\nselect *\nfrom AXELAR_DEV.silver.transfers\nwhere _PARTITION_BY_BLOCK_ID is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "AXELAR_DEV.not_null_silver.transfers", "column_name": "_PARTITION_BY_BLOCK_ID", "file_key_name": "models.silver__transfers"}, "test.axelar.dbt_utils_unique_combination_of_columns_silver__transfers_TX_ID__MSG_INDEX__CURRENCY.e9d94ef7c9": {"raw_sql": "{{ dbt_utils.test_unique_combination_of_columns(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_utils_unique_combination_o_e0f965ebd12a843fef11e731c01af833\") }}", "test_metadata": {"name": "unique_combination_of_columns", "kwargs": {"combination_of_columns": ["TX_ID", "MSG_INDEX", "CURRENCY"], "model": "{{ get_where_subquery(ref('silver__transfers')) }}"}, "namespace": "dbt_utils"}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt_utils.test_unique_combination_of_columns", "macro.dbt.get_where_subquery"], "nodes": ["model.axelar.silver__transfers"]}, "config": {"enabled": true, "alias": "dbt_utils_unique_combination_o_e0f965ebd12a843fef11e731c01af833", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": true, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "AXELAR_DEV", "schema": "dbt_utils_unique_combination_of_columns_silver", "fqn": ["axelar", "silver", "dbt_utils_unique_combination_of_columns_silver__transfers_TX_ID__MSG_INDEX__CURRENCY"], "unique_id": "test.axelar.dbt_utils_unique_combination_of_columns_silver__transfers_TX_ID__MSG_INDEX__CURRENCY.e9d94ef7c9", "package_name": "axelar", "root_path": "C:\\Users\\jessi\\git\\axelar-models", "path": "dbt_utils_unique_combination_o_e0f965ebd12a843fef11e731c01af833.sql", "original_file_path": "models\\silver\\silver__transfers.yml", "name": "dbt_utils_unique_combination_of_columns_silver__transfers_TX_ID__MSG_INDEX__CURRENCY", "alias": "transfers_TX_ID", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["silver__transfers"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target\\compiled\\axelar\\models\\silver\\silver__transfers.yml\\dbt_utils_unique_combination_o_e0f965ebd12a843fef11e731c01af833.sql", "build_path": null, "deferred": false, "unrendered_config": {"store_failures": true, "alias": "dbt_utils_unique_combination_o_e0f965ebd12a843fef11e731c01af833"}, "created_at": 1671050800.120585, "compiled_sql": "\n\n\n\n\n\nwith validation_errors as (\n\n    select\n        TX_ID, MSG_INDEX, CURRENCY\n    from AXELAR_DEV.silver.transfers\n    group by TX_ID, MSG_INDEX, CURRENCY\n    having count(*) > 1\n\n)\n\nselect *\nfrom validation_errors\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "AXELAR_DEV.dbt_utils_unique_combination_of_columns_silver.transfers_TX_ID", "column_name": null, "file_key_name": "models.silver__transfers"}, "model.axelar.bronze_api__get_validator_metadata": {"raw_sql": "{{ config(\r\n  materialized = 'table'\r\n) }}\r\n\r\nWITH call AS (\r\n    SELECT\r\n        ethereum.streamline.udf_api(\r\n            'POST',\r\n            'https://api.axelarscan.io',{},{'path':'/cosmos/staking/v1beta1/validators','module':'lcd'}\r\n        ) AS resp,\r\n        SYSDATE() AS _inserted_timestamp\r\n)\r\nSELECT\r\n    i.value :operator_address :: STRING AS address,\r\n    i.value AS data,\r\n    _inserted_timestamp\r\nFROM call, \r\nLATERAL FLATTEN(\r\n    input => resp :data :validators\r\n) i", "compiled": true, "resource_type": "model", "depends_on": {"macros": [], "nodes": []}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {}, "materialized": "table", "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "sync_all_columns", "grants": {}, "copy_grants": true, "post-hook": [], "pre-hook": []}, "database": "AXELAR_DEV", "schema": "bronze_api", "fqn": ["axelar", "bronze", "bronze_api", "bronze_api__get_validator_metadata"], "unique_id": "model.axelar.bronze_api__get_validator_metadata", "package_name": "axelar", "root_path": "C:\\Users\\jessi\\git\\axelar-models", "path": "bronze\\bronze_api\\bronze_api__get_validator_metadata.sql", "original_file_path": "models\\bronze\\bronze_api\\bronze_api__get_validator_metadata.sql", "name": "bronze_api__get_validator_metadata", "alias": "get_validator_metadata", "checksum": {"name": "sha256", "checksum": "a4e9d2693fed7a1e910d55175d97c6eba4b0608c0cafcb49a1555bd288e77dcf"}, "tags": [], "refs": [], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target\\compiled\\axelar\\models\\bronze\\bronze_api\\bronze_api__get_validator_metadata.sql", "build_path": null, "deferred": false, "unrendered_config": {"copy_grants": true, "on_schema_change": "sync_all_columns", "materialized": "table"}, "created_at": 1671053515.1581843, "compiled_sql": "\n\nWITH call AS (\n    SELECT\n        ethereum.streamline.udf_api(\n            'POST',\n            'https://api.axelarscan.io',{},{'path':'/cosmos/staking/v1beta1/validators','module':'lcd'}\n        ) AS resp,\n        SYSDATE() AS _inserted_timestamp\n)\nSELECT\n    i.value :operator_address :: STRING AS address,\n    i.value AS data,\n    _inserted_timestamp\nFROM call, \nLATERAL FLATTEN(\n    input => resp :data :validators\n) i", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "AXELAR_DEV.bronze_api.get_validator_metadata"}, "model.axelar.silver__validators": {"raw_sql": "{{ config(\r\n    materialized = 'table'\r\n) }}\r\n\r\nSELECT\r\n    address,\r\n    'axelar' AS blockchain,\r\n    'flipside' AS creator,\r\n    'operator' AS label_type,\r\n    'validator' AS label_subtype,\r\n    DATA :description :moniker :: STRING AS label,\r\n    DATA :description :identity :: STRING AS project_name,\r\n    DATA :delegator_shares :: INT AS delegator_shares,\r\n    DATA :jailed :: BOOLEAN AS jailed,\r\n    DATA :commission :commission_rates :rate :: FLOAT AS rate,\r\n    DATA :commission :commission_rates :max_change_rate :: FLOAT AS max_change_rate,\r\n    DATA :commission :commission_rates :max_rate :: FLOAT AS max_rate,\r\n    DATA :min_self_delegation :: INT AS min_self_delegation,\r\n    RANK() over (\r\n        PARTITION BY address\r\n        ORDER BY\r\n            DATA :delegator_shares :: INT DESC\r\n    ) AS RANK,\r\n    DATA AS raw_metadata,\r\n    concat_ws(\r\n        '-',\r\n        address,\r\n        creator,\r\n        blockchain\r\n    ) AS unique_key\r\nFROM\r\n    {{ ref('bronze_api__get_validator_metadata') }}", "compiled": true, "resource_type": "model", "depends_on": {"macros": [], "nodes": ["model.axelar.bronze_api__get_validator_metadata"]}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {}, "materialized": "table", "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "sync_all_columns", "grants": {}, "copy_grants": true, "post-hook": [], "pre-hook": []}, "database": "AXELAR_DEV", "schema": "silver", "fqn": ["axelar", "silver", "silver__validators"], "unique_id": "model.axelar.silver__validators", "package_name": "axelar", "root_path": "C:\\Users\\jessi\\git\\axelar-models", "path": "silver\\silver__validators.sql", "original_file_path": "models\\silver\\silver__validators.sql", "name": "silver__validators", "alias": "validators", "checksum": {"name": "sha256", "checksum": "0e49288e4ccd6dee50353171227e3591ae2461bbe2adf174178bfdcd81f54f95"}, "tags": [], "refs": [["bronze_api__get_validator_metadata"]], "sources": [], "metrics": [], "description": "", "columns": {"ADDRESS": {"name": "ADDRESS", "description": "Address unique to an individual wallet, validator, or token.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "BLOCKCHAIN": {"name": "BLOCKCHAIN", "description": "In this table, always Axelar. Used to join to cross-chain tables.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "CREATOR": {"name": "CREATOR", "description": "Name of the label creator - for now, this will always be \"Flipside.\"", "meta": {}, "data_type": null, "quote": null, "tags": []}, "LABEL_TYPE": {"name": "LABEL_TYPE", "description": "A broad category that describes what a label is representing.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "LABEL_SUBTYPE": {"name": "LABEL_SUBTYPE", "description": "Adds more detail to the label type.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "LABEL": {"name": "LABEL", "description": "The label or name of the address.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "PROJECT_NAME": {"name": "PROJECT_NAME", "description": "The name of the project the label belongs to.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "DELEGATOR_SHARES": {"name": "DELEGATOR_SHARES", "description": "The number of tokens staked to the validator.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "JAILED": {"name": "JAILED", "description": "FALSE when a validator is not jailed, TRUE when a validator is jailed", "meta": {}, "data_type": null, "quote": null, "tags": []}, "RATE": {"name": "RATE", "description": "The current commission rate the validator is charging stakers.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "MAX_CHANGE_RATE": {"name": "MAX_CHANGE_RATE", "description": "The maximum rate at which a validator can change their commission per day.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "MAX_RATE": {"name": "MAX_RATE", "description": "The maximum commission rate that the validator can charge", "meta": {}, "data_type": null, "quote": null, "tags": []}, "MIN_SELF_DELEGATION": {"name": "MIN_SELF_DELEGATION", "description": "The minimum number of OSMO tokens that the operator must be staking with their own validator", "meta": {}, "data_type": null, "quote": null, "tags": []}, "RANK": {"name": "RANK", "description": "The rank of the validator in the validator set. Rank is determined by the number of OSMO tokens staked to the validator", "meta": {}, "data_type": null, "quote": null, "tags": []}, "RAW_METADATA": {"name": "RAW_METADATA", "description": "Additional details about the validator or token in json format.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "UNIQUE_KEY": {"name": "UNIQUE_KEY", "description": "The unique key of the table", "meta": {}, "data_type": null, "quote": null, "tags": []}}, "meta": {}, "docs": {"show": true}, "patch_path": "axelar://models\\silver\\silver__validators.yml", "compiled_path": "target\\compiled\\axelar\\models\\silver\\silver__validators.sql", "build_path": null, "deferred": false, "unrendered_config": {"copy_grants": true, "on_schema_change": "sync_all_columns", "materialized": "table"}, "created_at": 1671054963.5349085, "compiled_sql": "\n\nSELECT\n    address,\n    'axelar' AS blockchain,\n    'flipside' AS creator,\n    'operator' AS label_type,\n    'validator' AS label_subtype,\n    DATA :description :moniker :: STRING AS label,\n    DATA :description :identity :: STRING AS project_name,\n    DATA :delegator_shares :: INT AS delegator_shares,\n    DATA :jailed :: BOOLEAN AS jailed,\n    DATA :commission :commission_rates :rate :: FLOAT AS rate,\n    DATA :commission :commission_rates :max_change_rate :: FLOAT AS max_change_rate,\n    DATA :commission :commission_rates :max_rate :: FLOAT AS max_rate,\n    DATA :min_self_delegation :: INT AS min_self_delegation,\n    RANK() over (\n        PARTITION BY address\n        ORDER BY\n            DATA :delegator_shares :: INT DESC\n    ) AS RANK,\n    DATA AS raw_metadata,\n    concat_ws(\n        '-',\n        address,\n        creator,\n        blockchain\n    ) AS unique_key\nFROM\n    AXELAR_DEV.bronze_api.get_validator_metadata", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "AXELAR_DEV.silver.validators"}, "test.axelar.not_null_silver__validators_ADDRESS.044bdd0fb3": {"raw_sql": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "ADDRESS", "model": "{{ get_where_subquery(ref('silver__validators')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.axelar.silver__validators"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": true, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "AXELAR_DEV", "schema": "not_null_silver", "fqn": ["axelar", "silver", "not_null_silver__validators_ADDRESS"], "unique_id": "test.axelar.not_null_silver__validators_ADDRESS.044bdd0fb3", "package_name": "axelar", "root_path": "C:\\Users\\jessi\\git\\axelar-models", "path": "not_null_silver__validators_ADDRESS.sql", "original_file_path": "models\\silver\\silver__validators.yml", "name": "not_null_silver__validators_ADDRESS", "alias": "validators_ADDRESS", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["silver__validators"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target\\compiled\\axelar\\models\\silver\\silver__validators.yml\\not_null_silver__validators_ADDRESS.sql", "build_path": null, "deferred": false, "unrendered_config": {"store_failures": true}, "created_at": 1671054963.5349085, "compiled_sql": "\n    \n    \n\n\n\nselect *\nfrom AXELAR_DEV.silver.validators\nwhere ADDRESS is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "AXELAR_DEV.not_null_silver.validators_ADDRESS", "column_name": "ADDRESS", "file_key_name": "models.silver__validators"}, "test.axelar.dbt_expectations_expect_column_values_to_be_in_type_list_silver__validators_ADDRESS__STRING__VARCHAR.639b5ecd2e": {"raw_sql": "{{ dbt_expectations.test_expect_column_values_to_be_in_type_list(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_expectations_expect_column_7bb749250b95dff100248be04784cfd7\") }}", "test_metadata": {"name": "expect_column_values_to_be_in_type_list", "kwargs": {"column_type_list": ["STRING", "VARCHAR"], "column_name": "ADDRESS", "model": "{{ get_where_subquery(ref('silver__validators')) }}"}, "namespace": "dbt_expectations"}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt_expectations.test_expect_column_values_to_be_in_type_list", "macro.dbt.get_where_subquery"], "nodes": ["model.axelar.silver__validators"]}, "config": {"enabled": true, "alias": "dbt_expectations_expect_column_7bb749250b95dff100248be04784cfd7", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": true, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "AXELAR_DEV", "schema": "dbt_expectations_expect_column_values_to_be_in_type_list_silver", "fqn": ["axelar", "silver", "dbt_expectations_expect_column_values_to_be_in_type_list_silver__validators_ADDRESS__STRING__VARCHAR"], "unique_id": "test.axelar.dbt_expectations_expect_column_values_to_be_in_type_list_silver__validators_ADDRESS__STRING__VARCHAR.639b5ecd2e", "package_name": "axelar", "root_path": "C:\\Users\\jessi\\git\\axelar-models", "path": "dbt_expectations_expect_column_7bb749250b95dff100248be04784cfd7.sql", "original_file_path": "models\\silver\\silver__validators.yml", "name": "dbt_expectations_expect_column_values_to_be_in_type_list_silver__validators_ADDRESS__STRING__VARCHAR", "alias": "validators_ADDRESS", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["silver__validators"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target\\compiled\\axelar\\models\\silver\\silver__validators.yml\\dbt_expectations_expect_column_7bb749250b95dff100248be04784cfd7.sql", "build_path": null, "deferred": false, "unrendered_config": {"store_failures": true, "alias": "dbt_expectations_expect_column_7bb749250b95dff100248be04784cfd7"}, "created_at": 1671054963.5349085, "compiled_sql": "with relation_columns as (\n\n        \n        select\n            cast('ADDRESS' as TEXT) as relation_column,\n            cast('VARCHAR' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('BLOCKCHAIN' as TEXT) as relation_column,\n            cast('VARCHAR' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('CREATOR' as TEXT) as relation_column,\n            cast('VARCHAR' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('LABEL_TYPE' as TEXT) as relation_column,\n            cast('VARCHAR' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('LABEL_SUBTYPE' as TEXT) as relation_column,\n            cast('VARCHAR' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('LABEL' as TEXT) as relation_column,\n            cast('VARCHAR' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('PROJECT_NAME' as TEXT) as relation_column,\n            cast('VARCHAR' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('DELEGATOR_SHARES' as TEXT) as relation_column,\n            cast('NUMBER' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('JAILED' as TEXT) as relation_column,\n            cast('BOOLEAN' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('RATE' as TEXT) as relation_column,\n            cast('FLOAT' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('MAX_CHANGE_RATE' as TEXT) as relation_column,\n            cast('FLOAT' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('MAX_RATE' as TEXT) as relation_column,\n            cast('FLOAT' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('MIN_SELF_DELEGATION' as TEXT) as relation_column,\n            cast('NUMBER' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('RANK' as TEXT) as relation_column,\n            cast('NUMBER' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('RAW_METADATA' as TEXT) as relation_column,\n            cast('VARIANT' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('UNIQUE_KEY' as TEXT) as relation_column,\n            cast('VARCHAR' as TEXT) as relation_column_type\n        \n        \n    ),\n    test_data as (\n\n        select\n            *\n        from\n            relation_columns\n        where\n            relation_column = 'ADDRESS'\n            and\n            relation_column_type not in ('STRING', 'VARCHAR')\n\n    )\n    select *\n    from test_data", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "AXELAR_DEV.dbt_expectations_expect_column_values_to_be_in_type_list_silver.validators_ADDRESS", "column_name": "ADDRESS", "file_key_name": "models.silver__validators"}, "test.axelar.not_null_silver__validators_BLOCKCHAIN.8d62ff2215": {"raw_sql": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "BLOCKCHAIN", "model": "{{ get_where_subquery(ref('silver__validators')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.axelar.silver__validators"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": true, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "AXELAR_DEV", "schema": "not_null_silver", "fqn": ["axelar", "silver", "not_null_silver__validators_BLOCKCHAIN"], "unique_id": "test.axelar.not_null_silver__validators_BLOCKCHAIN.8d62ff2215", "package_name": "axelar", "root_path": "C:\\Users\\jessi\\git\\axelar-models", "path": "not_null_silver__validators_BLOCKCHAIN.sql", "original_file_path": "models\\silver\\silver__validators.yml", "name": "not_null_silver__validators_BLOCKCHAIN", "alias": "validators_BLOCKCHAIN", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["silver__validators"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target\\compiled\\axelar\\models\\silver\\silver__validators.yml\\not_null_silver__validators_BLOCKCHAIN.sql", "build_path": null, "deferred": false, "unrendered_config": {"store_failures": true}, "created_at": 1671054963.5580385, "compiled_sql": "\n    \n    \n\n\n\nselect *\nfrom AXELAR_DEV.silver.validators\nwhere BLOCKCHAIN is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "AXELAR_DEV.not_null_silver.validators_BLOCKCHAIN", "column_name": "BLOCKCHAIN", "file_key_name": "models.silver__validators"}, "test.axelar.dbt_expectations_expect_column_values_to_be_in_type_list_silver__validators_BLOCKCHAIN__STRING__VARCHAR.5367cc76f5": {"raw_sql": "{{ dbt_expectations.test_expect_column_values_to_be_in_type_list(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_expectations_expect_column_9815b3637b428f3cb0d61c0ade025f77\") }}", "test_metadata": {"name": "expect_column_values_to_be_in_type_list", "kwargs": {"column_type_list": ["STRING", "VARCHAR"], "column_name": "BLOCKCHAIN", "model": "{{ get_where_subquery(ref('silver__validators')) }}"}, "namespace": "dbt_expectations"}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt_expectations.test_expect_column_values_to_be_in_type_list", "macro.dbt.get_where_subquery"], "nodes": ["model.axelar.silver__validators"]}, "config": {"enabled": true, "alias": "dbt_expectations_expect_column_9815b3637b428f3cb0d61c0ade025f77", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": true, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "AXELAR_DEV", "schema": "dbt_expectations_expect_column_values_to_be_in_type_list_silver", "fqn": ["axelar", "silver", "dbt_expectations_expect_column_values_to_be_in_type_list_silver__validators_BLOCKCHAIN__STRING__VARCHAR"], "unique_id": "test.axelar.dbt_expectations_expect_column_values_to_be_in_type_list_silver__validators_BLOCKCHAIN__STRING__VARCHAR.5367cc76f5", "package_name": "axelar", "root_path": "C:\\Users\\jessi\\git\\axelar-models", "path": "dbt_expectations_expect_column_9815b3637b428f3cb0d61c0ade025f77.sql", "original_file_path": "models\\silver\\silver__validators.yml", "name": "dbt_expectations_expect_column_values_to_be_in_type_list_silver__validators_BLOCKCHAIN__STRING__VARCHAR", "alias": "validators_BLOCKCHAIN", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["silver__validators"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target\\compiled\\axelar\\models\\silver\\silver__validators.yml\\dbt_expectations_expect_column_9815b3637b428f3cb0d61c0ade025f77.sql", "build_path": null, "deferred": false, "unrendered_config": {"store_failures": true, "alias": "dbt_expectations_expect_column_9815b3637b428f3cb0d61c0ade025f77"}, "created_at": 1671054963.5580385, "compiled_sql": "with relation_columns as (\n\n        \n        select\n            cast('ADDRESS' as TEXT) as relation_column,\n            cast('VARCHAR' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('BLOCKCHAIN' as TEXT) as relation_column,\n            cast('VARCHAR' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('CREATOR' as TEXT) as relation_column,\n            cast('VARCHAR' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('LABEL_TYPE' as TEXT) as relation_column,\n            cast('VARCHAR' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('LABEL_SUBTYPE' as TEXT) as relation_column,\n            cast('VARCHAR' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('LABEL' as TEXT) as relation_column,\n            cast('VARCHAR' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('PROJECT_NAME' as TEXT) as relation_column,\n            cast('VARCHAR' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('DELEGATOR_SHARES' as TEXT) as relation_column,\n            cast('NUMBER' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('JAILED' as TEXT) as relation_column,\n            cast('BOOLEAN' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('RATE' as TEXT) as relation_column,\n            cast('FLOAT' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('MAX_CHANGE_RATE' as TEXT) as relation_column,\n            cast('FLOAT' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('MAX_RATE' as TEXT) as relation_column,\n            cast('FLOAT' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('MIN_SELF_DELEGATION' as TEXT) as relation_column,\n            cast('NUMBER' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('RANK' as TEXT) as relation_column,\n            cast('NUMBER' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('RAW_METADATA' as TEXT) as relation_column,\n            cast('VARIANT' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('UNIQUE_KEY' as TEXT) as relation_column,\n            cast('VARCHAR' as TEXT) as relation_column_type\n        \n        \n    ),\n    test_data as (\n\n        select\n            *\n        from\n            relation_columns\n        where\n            relation_column = 'BLOCKCHAIN'\n            and\n            relation_column_type not in ('STRING', 'VARCHAR')\n\n    )\n    select *\n    from test_data", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "AXELAR_DEV.dbt_expectations_expect_column_values_to_be_in_type_list_silver.validators_BLOCKCHAIN", "column_name": "BLOCKCHAIN", "file_key_name": "models.silver__validators"}, "test.axelar.dbt_expectations_expect_column_values_to_be_in_set_silver__validators_BLOCKCHAIN__axelar.ff7788dcdb": {"raw_sql": "{{ dbt_expectations.test_expect_column_values_to_be_in_set(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_expectations_expect_column_1fd3015aee27bc3063aaf909ab038f55\") }}", "test_metadata": {"name": "expect_column_values_to_be_in_set", "kwargs": {"value_set": ["axelar"], "column_name": "BLOCKCHAIN", "model": "{{ get_where_subquery(ref('silver__validators')) }}"}, "namespace": "dbt_expectations"}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt_expectations.test_expect_column_values_to_be_in_set", "macro.dbt.get_where_subquery"], "nodes": ["model.axelar.silver__validators"]}, "config": {"enabled": true, "alias": "dbt_expectations_expect_column_1fd3015aee27bc3063aaf909ab038f55", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": true, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "AXELAR_DEV", "schema": "dbt_expectations_expect_column_values_to_be_in_set_silver", "fqn": ["axelar", "silver", "dbt_expectations_expect_column_values_to_be_in_set_silver__validators_BLOCKCHAIN__axelar"], "unique_id": "test.axelar.dbt_expectations_expect_column_values_to_be_in_set_silver__validators_BLOCKCHAIN__axelar.ff7788dcdb", "package_name": "axelar", "root_path": "C:\\Users\\jessi\\git\\axelar-models", "path": "dbt_expectations_expect_column_1fd3015aee27bc3063aaf909ab038f55.sql", "original_file_path": "models\\silver\\silver__validators.yml", "name": "dbt_expectations_expect_column_values_to_be_in_set_silver__validators_BLOCKCHAIN__axelar", "alias": "validators_BLOCKCHAIN", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["silver__validators"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target\\compiled\\axelar\\models\\silver\\silver__validators.yml\\dbt_expectations_expect_column_1fd3015aee27bc3063aaf909ab038f55.sql", "build_path": null, "deferred": false, "unrendered_config": {"store_failures": true, "alias": "dbt_expectations_expect_column_1fd3015aee27bc3063aaf909ab038f55"}, "created_at": 1671054963.5580385, "compiled_sql": "\n\nwith all_values as (\n\n    select\n        BLOCKCHAIN as value_field\n\n    from AXELAR_DEV.silver.validators\n    \n\n),\nset_values as (\n\n    select\n        cast('axelar' as TEXT) as value_field\n    \n    \n),\nvalidation_errors as (\n    -- values from the model that are not in the set\n    select\n        v.value_field\n    from\n        all_values v\n        left join\n        set_values s on v.value_field = s.value_field\n    where\n        s.value_field is null\n\n)\n\nselect *\nfrom validation_errors\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "AXELAR_DEV.dbt_expectations_expect_column_values_to_be_in_set_silver.validators_BLOCKCHAIN", "column_name": "BLOCKCHAIN", "file_key_name": "models.silver__validators"}, "test.axelar.not_null_silver__validators_CREATOR.29e051ca7b": {"raw_sql": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "CREATOR", "model": "{{ get_where_subquery(ref('silver__validators')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.axelar.silver__validators"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": true, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "AXELAR_DEV", "schema": "not_null_silver", "fqn": ["axelar", "silver", "not_null_silver__validators_CREATOR"], "unique_id": "test.axelar.not_null_silver__validators_CREATOR.29e051ca7b", "package_name": "axelar", "root_path": "C:\\Users\\jessi\\git\\axelar-models", "path": "not_null_silver__validators_CREATOR.sql", "original_file_path": "models\\silver\\silver__validators.yml", "name": "not_null_silver__validators_CREATOR", "alias": "validators_CREATOR", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["silver__validators"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target\\compiled\\axelar\\models\\silver\\silver__validators.yml\\not_null_silver__validators_CREATOR.sql", "build_path": null, "deferred": false, "unrendered_config": {"store_failures": true}, "created_at": 1671054963.573975, "compiled_sql": "\n    \n    \n\n\n\nselect *\nfrom AXELAR_DEV.silver.validators\nwhere CREATOR is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "AXELAR_DEV.not_null_silver.validators_CREATOR", "column_name": "CREATOR", "file_key_name": "models.silver__validators"}, "test.axelar.dbt_expectations_expect_column_values_to_be_in_type_list_silver__validators_CREATOR__STRING__VARCHAR.f793a7bf59": {"raw_sql": "{{ dbt_expectations.test_expect_column_values_to_be_in_type_list(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_expectations_expect_column_413e5adade88f8adb9e1957905098e58\") }}", "test_metadata": {"name": "expect_column_values_to_be_in_type_list", "kwargs": {"column_type_list": ["STRING", "VARCHAR"], "column_name": "CREATOR", "model": "{{ get_where_subquery(ref('silver__validators')) }}"}, "namespace": "dbt_expectations"}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt_expectations.test_expect_column_values_to_be_in_type_list", "macro.dbt.get_where_subquery"], "nodes": ["model.axelar.silver__validators"]}, "config": {"enabled": true, "alias": "dbt_expectations_expect_column_413e5adade88f8adb9e1957905098e58", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": true, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "AXELAR_DEV", "schema": "dbt_expectations_expect_column_values_to_be_in_type_list_silver", "fqn": ["axelar", "silver", "dbt_expectations_expect_column_values_to_be_in_type_list_silver__validators_CREATOR__STRING__VARCHAR"], "unique_id": "test.axelar.dbt_expectations_expect_column_values_to_be_in_type_list_silver__validators_CREATOR__STRING__VARCHAR.f793a7bf59", "package_name": "axelar", "root_path": "C:\\Users\\jessi\\git\\axelar-models", "path": "dbt_expectations_expect_column_413e5adade88f8adb9e1957905098e58.sql", "original_file_path": "models\\silver\\silver__validators.yml", "name": "dbt_expectations_expect_column_values_to_be_in_type_list_silver__validators_CREATOR__STRING__VARCHAR", "alias": "validators_CREATOR", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["silver__validators"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target\\compiled\\axelar\\models\\silver\\silver__validators.yml\\dbt_expectations_expect_column_413e5adade88f8adb9e1957905098e58.sql", "build_path": null, "deferred": false, "unrendered_config": {"store_failures": true, "alias": "dbt_expectations_expect_column_413e5adade88f8adb9e1957905098e58"}, "created_at": 1671054963.5759785, "compiled_sql": "with relation_columns as (\n\n        \n        select\n            cast('ADDRESS' as TEXT) as relation_column,\n            cast('VARCHAR' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('BLOCKCHAIN' as TEXT) as relation_column,\n            cast('VARCHAR' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('CREATOR' as TEXT) as relation_column,\n            cast('VARCHAR' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('LABEL_TYPE' as TEXT) as relation_column,\n            cast('VARCHAR' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('LABEL_SUBTYPE' as TEXT) as relation_column,\n            cast('VARCHAR' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('LABEL' as TEXT) as relation_column,\n            cast('VARCHAR' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('PROJECT_NAME' as TEXT) as relation_column,\n            cast('VARCHAR' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('DELEGATOR_SHARES' as TEXT) as relation_column,\n            cast('NUMBER' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('JAILED' as TEXT) as relation_column,\n            cast('BOOLEAN' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('RATE' as TEXT) as relation_column,\n            cast('FLOAT' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('MAX_CHANGE_RATE' as TEXT) as relation_column,\n            cast('FLOAT' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('MAX_RATE' as TEXT) as relation_column,\n            cast('FLOAT' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('MIN_SELF_DELEGATION' as TEXT) as relation_column,\n            cast('NUMBER' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('RANK' as TEXT) as relation_column,\n            cast('NUMBER' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('RAW_METADATA' as TEXT) as relation_column,\n            cast('VARIANT' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('UNIQUE_KEY' as TEXT) as relation_column,\n            cast('VARCHAR' as TEXT) as relation_column_type\n        \n        \n    ),\n    test_data as (\n\n        select\n            *\n        from\n            relation_columns\n        where\n            relation_column = 'CREATOR'\n            and\n            relation_column_type not in ('STRING', 'VARCHAR')\n\n    )\n    select *\n    from test_data", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "AXELAR_DEV.dbt_expectations_expect_column_values_to_be_in_type_list_silver.validators_CREATOR", "column_name": "CREATOR", "file_key_name": "models.silver__validators"}, "test.axelar.not_null_silver__validators_LABEL_TYPE.9ac3147d2a": {"raw_sql": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "LABEL_TYPE", "model": "{{ get_where_subquery(ref('silver__validators')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.axelar.silver__validators"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": true, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "AXELAR_DEV", "schema": "not_null_silver", "fqn": ["axelar", "silver", "not_null_silver__validators_LABEL_TYPE"], "unique_id": "test.axelar.not_null_silver__validators_LABEL_TYPE.9ac3147d2a", "package_name": "axelar", "root_path": "C:\\Users\\jessi\\git\\axelar-models", "path": "not_null_silver__validators_LABEL_TYPE.sql", "original_file_path": "models\\silver\\silver__validators.yml", "name": "not_null_silver__validators_LABEL_TYPE", "alias": "validators_LABEL_TYPE", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["silver__validators"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target\\compiled\\axelar\\models\\silver\\silver__validators.yml\\not_null_silver__validators_LABEL_TYPE.sql", "build_path": null, "deferred": false, "unrendered_config": {"store_failures": true}, "created_at": 1671054963.5829976, "compiled_sql": "\n    \n    \n\n\n\nselect *\nfrom AXELAR_DEV.silver.validators\nwhere LABEL_TYPE is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "AXELAR_DEV.not_null_silver.validators_LABEL_TYPE", "column_name": "LABEL_TYPE", "file_key_name": "models.silver__validators"}, "test.axelar.dbt_expectations_expect_column_values_to_be_in_type_list_silver__validators_LABEL_TYPE__STRING__VARCHAR.84e4acabd9": {"raw_sql": "{{ dbt_expectations.test_expect_column_values_to_be_in_type_list(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_expectations_expect_column_56a12fbe05ddbd63185fcaaea56a89aa\") }}", "test_metadata": {"name": "expect_column_values_to_be_in_type_list", "kwargs": {"column_type_list": ["STRING", "VARCHAR"], "column_name": "LABEL_TYPE", "model": "{{ get_where_subquery(ref('silver__validators')) }}"}, "namespace": "dbt_expectations"}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt_expectations.test_expect_column_values_to_be_in_type_list", "macro.dbt.get_where_subquery"], "nodes": ["model.axelar.silver__validators"]}, "config": {"enabled": true, "alias": "dbt_expectations_expect_column_56a12fbe05ddbd63185fcaaea56a89aa", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": true, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "AXELAR_DEV", "schema": "dbt_expectations_expect_column_values_to_be_in_type_list_silver", "fqn": ["axelar", "silver", "dbt_expectations_expect_column_values_to_be_in_type_list_silver__validators_LABEL_TYPE__STRING__VARCHAR"], "unique_id": "test.axelar.dbt_expectations_expect_column_values_to_be_in_type_list_silver__validators_LABEL_TYPE__STRING__VARCHAR.84e4acabd9", "package_name": "axelar", "root_path": "C:\\Users\\jessi\\git\\axelar-models", "path": "dbt_expectations_expect_column_56a12fbe05ddbd63185fcaaea56a89aa.sql", "original_file_path": "models\\silver\\silver__validators.yml", "name": "dbt_expectations_expect_column_values_to_be_in_type_list_silver__validators_LABEL_TYPE__STRING__VARCHAR", "alias": "validators_LABEL_TYPE", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["silver__validators"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target\\compiled\\axelar\\models\\silver\\silver__validators.yml\\dbt_expectations_expect_column_56a12fbe05ddbd63185fcaaea56a89aa.sql", "build_path": null, "deferred": false, "unrendered_config": {"store_failures": true, "alias": "dbt_expectations_expect_column_56a12fbe05ddbd63185fcaaea56a89aa"}, "created_at": 1671054963.5860596, "compiled_sql": "with relation_columns as (\n\n        \n        select\n            cast('ADDRESS' as TEXT) as relation_column,\n            cast('VARCHAR' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('BLOCKCHAIN' as TEXT) as relation_column,\n            cast('VARCHAR' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('CREATOR' as TEXT) as relation_column,\n            cast('VARCHAR' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('LABEL_TYPE' as TEXT) as relation_column,\n            cast('VARCHAR' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('LABEL_SUBTYPE' as TEXT) as relation_column,\n            cast('VARCHAR' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('LABEL' as TEXT) as relation_column,\n            cast('VARCHAR' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('PROJECT_NAME' as TEXT) as relation_column,\n            cast('VARCHAR' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('DELEGATOR_SHARES' as TEXT) as relation_column,\n            cast('NUMBER' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('JAILED' as TEXT) as relation_column,\n            cast('BOOLEAN' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('RATE' as TEXT) as relation_column,\n            cast('FLOAT' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('MAX_CHANGE_RATE' as TEXT) as relation_column,\n            cast('FLOAT' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('MAX_RATE' as TEXT) as relation_column,\n            cast('FLOAT' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('MIN_SELF_DELEGATION' as TEXT) as relation_column,\n            cast('NUMBER' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('RANK' as TEXT) as relation_column,\n            cast('NUMBER' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('RAW_METADATA' as TEXT) as relation_column,\n            cast('VARIANT' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('UNIQUE_KEY' as TEXT) as relation_column,\n            cast('VARCHAR' as TEXT) as relation_column_type\n        \n        \n    ),\n    test_data as (\n\n        select\n            *\n        from\n            relation_columns\n        where\n            relation_column = 'LABEL_TYPE'\n            and\n            relation_column_type not in ('STRING', 'VARCHAR')\n\n    )\n    select *\n    from test_data", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "AXELAR_DEV.dbt_expectations_expect_column_values_to_be_in_type_list_silver.validators_LABEL_TYPE", "column_name": "LABEL_TYPE", "file_key_name": "models.silver__validators"}, "test.axelar.dbt_expectations_expect_column_values_to_be_in_set_silver__validators_LABEL_TYPE__operator.32484733b8": {"raw_sql": "{{ dbt_expectations.test_expect_column_values_to_be_in_set(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_expectations_expect_column_8e647e9c5f9573af294584b1b89cac71\") }}", "test_metadata": {"name": "expect_column_values_to_be_in_set", "kwargs": {"value_set": ["operator"], "column_name": "LABEL_TYPE", "model": "{{ get_where_subquery(ref('silver__validators')) }}"}, "namespace": "dbt_expectations"}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt_expectations.test_expect_column_values_to_be_in_set", "macro.dbt.get_where_subquery"], "nodes": ["model.axelar.silver__validators"]}, "config": {"enabled": true, "alias": "dbt_expectations_expect_column_8e647e9c5f9573af294584b1b89cac71", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": true, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "AXELAR_DEV", "schema": "dbt_expectations_expect_column_values_to_be_in_set_silver", "fqn": ["axelar", "silver", "dbt_expectations_expect_column_values_to_be_in_set_silver__validators_LABEL_TYPE__operator"], "unique_id": "test.axelar.dbt_expectations_expect_column_values_to_be_in_set_silver__validators_LABEL_TYPE__operator.32484733b8", "package_name": "axelar", "root_path": "C:\\Users\\jessi\\git\\axelar-models", "path": "dbt_expectations_expect_column_8e647e9c5f9573af294584b1b89cac71.sql", "original_file_path": "models\\silver\\silver__validators.yml", "name": "dbt_expectations_expect_column_values_to_be_in_set_silver__validators_LABEL_TYPE__operator", "alias": "validators_LABEL_TYPE", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["silver__validators"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target\\compiled\\axelar\\models\\silver\\silver__validators.yml\\dbt_expectations_expect_column_8e647e9c5f9573af294584b1b89cac71.sql", "build_path": null, "deferred": false, "unrendered_config": {"store_failures": true, "alias": "dbt_expectations_expect_column_8e647e9c5f9573af294584b1b89cac71"}, "created_at": 1671054963.5890574, "compiled_sql": "\n\nwith all_values as (\n\n    select\n        LABEL_TYPE as value_field\n\n    from AXELAR_DEV.silver.validators\n    \n\n),\nset_values as (\n\n    select\n        cast('operator' as TEXT) as value_field\n    \n    \n),\nvalidation_errors as (\n    -- values from the model that are not in the set\n    select\n        v.value_field\n    from\n        all_values v\n        left join\n        set_values s on v.value_field = s.value_field\n    where\n        s.value_field is null\n\n)\n\nselect *\nfrom validation_errors\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "AXELAR_DEV.dbt_expectations_expect_column_values_to_be_in_set_silver.validators_LABEL_TYPE", "column_name": "LABEL_TYPE", "file_key_name": "models.silver__validators"}, "test.axelar.not_null_silver__validators_LABEL_SUBTYPE.64be738825": {"raw_sql": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "LABEL_SUBTYPE", "model": "{{ get_where_subquery(ref('silver__validators')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.axelar.silver__validators"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": true, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "AXELAR_DEV", "schema": "not_null_silver", "fqn": ["axelar", "silver", "not_null_silver__validators_LABEL_SUBTYPE"], "unique_id": "test.axelar.not_null_silver__validators_LABEL_SUBTYPE.64be738825", "package_name": "axelar", "root_path": "C:\\Users\\jessi\\git\\axelar-models", "path": "not_null_silver__validators_LABEL_SUBTYPE.sql", "original_file_path": "models\\silver\\silver__validators.yml", "name": "not_null_silver__validators_LABEL_SUBTYPE", "alias": "validators_LABEL_SUBTYPE", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["silver__validators"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target\\compiled\\axelar\\models\\silver\\silver__validators.yml\\not_null_silver__validators_LABEL_SUBTYPE.sql", "build_path": null, "deferred": false, "unrendered_config": {"store_failures": true}, "created_at": 1671054963.5940514, "compiled_sql": "\n    \n    \n\n\n\nselect *\nfrom AXELAR_DEV.silver.validators\nwhere LABEL_SUBTYPE is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "AXELAR_DEV.not_null_silver.validators_LABEL_SUBTYPE", "column_name": "LABEL_SUBTYPE", "file_key_name": "models.silver__validators"}, "test.axelar.dbt_expectations_expect_column_values_to_be_in_type_list_silver__validators_LABEL_SUBTYPE__STRING__VARCHAR.00e4e3f12b": {"raw_sql": "{{ dbt_expectations.test_expect_column_values_to_be_in_type_list(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_expectations_expect_column_c80c947000cee46c5a9289cc0ac66186\") }}", "test_metadata": {"name": "expect_column_values_to_be_in_type_list", "kwargs": {"column_type_list": ["STRING", "VARCHAR"], "column_name": "LABEL_SUBTYPE", "model": "{{ get_where_subquery(ref('silver__validators')) }}"}, "namespace": "dbt_expectations"}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt_expectations.test_expect_column_values_to_be_in_type_list", "macro.dbt.get_where_subquery"], "nodes": ["model.axelar.silver__validators"]}, "config": {"enabled": true, "alias": "dbt_expectations_expect_column_c80c947000cee46c5a9289cc0ac66186", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": true, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "AXELAR_DEV", "schema": "dbt_expectations_expect_column_values_to_be_in_type_list_silver", "fqn": ["axelar", "silver", "dbt_expectations_expect_column_values_to_be_in_type_list_silver__validators_LABEL_SUBTYPE__STRING__VARCHAR"], "unique_id": "test.axelar.dbt_expectations_expect_column_values_to_be_in_type_list_silver__validators_LABEL_SUBTYPE__STRING__VARCHAR.00e4e3f12b", "package_name": "axelar", "root_path": "C:\\Users\\jessi\\git\\axelar-models", "path": "dbt_expectations_expect_column_c80c947000cee46c5a9289cc0ac66186.sql", "original_file_path": "models\\silver\\silver__validators.yml", "name": "dbt_expectations_expect_column_values_to_be_in_type_list_silver__validators_LABEL_SUBTYPE__STRING__VARCHAR", "alias": "validators_LABEL_SUBTYPE", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["silver__validators"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target\\compiled\\axelar\\models\\silver\\silver__validators.yml\\dbt_expectations_expect_column_c80c947000cee46c5a9289cc0ac66186.sql", "build_path": null, "deferred": false, "unrendered_config": {"store_failures": true, "alias": "dbt_expectations_expect_column_c80c947000cee46c5a9289cc0ac66186"}, "created_at": 1671054963.5960612, "compiled_sql": "with relation_columns as (\n\n        \n        select\n            cast('ADDRESS' as TEXT) as relation_column,\n            cast('VARCHAR' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('BLOCKCHAIN' as TEXT) as relation_column,\n            cast('VARCHAR' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('CREATOR' as TEXT) as relation_column,\n            cast('VARCHAR' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('LABEL_TYPE' as TEXT) as relation_column,\n            cast('VARCHAR' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('LABEL_SUBTYPE' as TEXT) as relation_column,\n            cast('VARCHAR' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('LABEL' as TEXT) as relation_column,\n            cast('VARCHAR' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('PROJECT_NAME' as TEXT) as relation_column,\n            cast('VARCHAR' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('DELEGATOR_SHARES' as TEXT) as relation_column,\n            cast('NUMBER' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('JAILED' as TEXT) as relation_column,\n            cast('BOOLEAN' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('RATE' as TEXT) as relation_column,\n            cast('FLOAT' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('MAX_CHANGE_RATE' as TEXT) as relation_column,\n            cast('FLOAT' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('MAX_RATE' as TEXT) as relation_column,\n            cast('FLOAT' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('MIN_SELF_DELEGATION' as TEXT) as relation_column,\n            cast('NUMBER' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('RANK' as TEXT) as relation_column,\n            cast('NUMBER' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('RAW_METADATA' as TEXT) as relation_column,\n            cast('VARIANT' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('UNIQUE_KEY' as TEXT) as relation_column,\n            cast('VARCHAR' as TEXT) as relation_column_type\n        \n        \n    ),\n    test_data as (\n\n        select\n            *\n        from\n            relation_columns\n        where\n            relation_column = 'LABEL_SUBTYPE'\n            and\n            relation_column_type not in ('STRING', 'VARCHAR')\n\n    )\n    select *\n    from test_data", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "AXELAR_DEV.dbt_expectations_expect_column_values_to_be_in_type_list_silver.validators_LABEL_SUBTYPE", "column_name": "LABEL_SUBTYPE", "file_key_name": "models.silver__validators"}, "test.axelar.dbt_expectations_expect_column_values_to_be_in_set_silver__validators_LABEL_SUBTYPE__validator.522d73b50b": {"raw_sql": "{{ dbt_expectations.test_expect_column_values_to_be_in_set(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_expectations_expect_column_38a742a9f43f14616d945eacf27799f7\") }}", "test_metadata": {"name": "expect_column_values_to_be_in_set", "kwargs": {"value_set": ["validator"], "column_name": "LABEL_SUBTYPE", "model": "{{ get_where_subquery(ref('silver__validators')) }}"}, "namespace": "dbt_expectations"}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt_expectations.test_expect_column_values_to_be_in_set", "macro.dbt.get_where_subquery"], "nodes": ["model.axelar.silver__validators"]}, "config": {"enabled": true, "alias": "dbt_expectations_expect_column_38a742a9f43f14616d945eacf27799f7", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": true, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "AXELAR_DEV", "schema": "dbt_expectations_expect_column_values_to_be_in_set_silver", "fqn": ["axelar", "silver", "dbt_expectations_expect_column_values_to_be_in_set_silver__validators_LABEL_SUBTYPE__validator"], "unique_id": "test.axelar.dbt_expectations_expect_column_values_to_be_in_set_silver__validators_LABEL_SUBTYPE__validator.522d73b50b", "package_name": "axelar", "root_path": "C:\\Users\\jessi\\git\\axelar-models", "path": "dbt_expectations_expect_column_38a742a9f43f14616d945eacf27799f7.sql", "original_file_path": "models\\silver\\silver__validators.yml", "name": "dbt_expectations_expect_column_values_to_be_in_set_silver__validators_LABEL_SUBTYPE__validator", "alias": "validators_LABEL_SUBTYPE", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["silver__validators"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target\\compiled\\axelar\\models\\silver\\silver__validators.yml\\dbt_expectations_expect_column_38a742a9f43f14616d945eacf27799f7.sql", "build_path": null, "deferred": false, "unrendered_config": {"store_failures": true, "alias": "dbt_expectations_expect_column_38a742a9f43f14616d945eacf27799f7"}, "created_at": 1671054963.6514013, "compiled_sql": "\n\nwith all_values as (\n\n    select\n        LABEL_SUBTYPE as value_field\n\n    from AXELAR_DEV.silver.validators\n    \n\n),\nset_values as (\n\n    select\n        cast('validator' as TEXT) as value_field\n    \n    \n),\nvalidation_errors as (\n    -- values from the model that are not in the set\n    select\n        v.value_field\n    from\n        all_values v\n        left join\n        set_values s on v.value_field = s.value_field\n    where\n        s.value_field is null\n\n)\n\nselect *\nfrom validation_errors\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "AXELAR_DEV.dbt_expectations_expect_column_values_to_be_in_set_silver.validators_LABEL_SUBTYPE", "column_name": "LABEL_SUBTYPE", "file_key_name": "models.silver__validators"}, "test.axelar.not_null_silver__validators_LABEL.5e8c7267ff": {"raw_sql": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "LABEL", "model": "{{ get_where_subquery(ref('silver__validators')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.axelar.silver__validators"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": true, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "AXELAR_DEV", "schema": "not_null_silver", "fqn": ["axelar", "silver", "not_null_silver__validators_LABEL"], "unique_id": "test.axelar.not_null_silver__validators_LABEL.5e8c7267ff", "package_name": "axelar", "root_path": "C:\\Users\\jessi\\git\\axelar-models", "path": "not_null_silver__validators_LABEL.sql", "original_file_path": "models\\silver\\silver__validators.yml", "name": "not_null_silver__validators_LABEL", "alias": "validators_LABEL", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["silver__validators"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target\\compiled\\axelar\\models\\silver\\silver__validators.yml\\not_null_silver__validators_LABEL.sql", "build_path": null, "deferred": false, "unrendered_config": {"store_failures": true}, "created_at": 1671054963.6574051, "compiled_sql": "\n    \n    \n\n\n\nselect *\nfrom AXELAR_DEV.silver.validators\nwhere LABEL is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "AXELAR_DEV.not_null_silver.validators_LABEL", "column_name": "LABEL", "file_key_name": "models.silver__validators"}, "test.axelar.dbt_expectations_expect_column_values_to_be_in_type_list_silver__validators_LABEL__STRING__VARCHAR.f694d1a0e3": {"raw_sql": "{{ dbt_expectations.test_expect_column_values_to_be_in_type_list(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_expectations_expect_column_de1976eae2545d87a603ece6d2c109b5\") }}", "test_metadata": {"name": "expect_column_values_to_be_in_type_list", "kwargs": {"column_type_list": ["STRING", "VARCHAR"], "column_name": "LABEL", "model": "{{ get_where_subquery(ref('silver__validators')) }}"}, "namespace": "dbt_expectations"}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt_expectations.test_expect_column_values_to_be_in_type_list", "macro.dbt.get_where_subquery"], "nodes": ["model.axelar.silver__validators"]}, "config": {"enabled": true, "alias": "dbt_expectations_expect_column_de1976eae2545d87a603ece6d2c109b5", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": true, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "AXELAR_DEV", "schema": "dbt_expectations_expect_column_values_to_be_in_type_list_silver", "fqn": ["axelar", "silver", "dbt_expectations_expect_column_values_to_be_in_type_list_silver__validators_LABEL__STRING__VARCHAR"], "unique_id": "test.axelar.dbt_expectations_expect_column_values_to_be_in_type_list_silver__validators_LABEL__STRING__VARCHAR.f694d1a0e3", "package_name": "axelar", "root_path": "C:\\Users\\jessi\\git\\axelar-models", "path": "dbt_expectations_expect_column_de1976eae2545d87a603ece6d2c109b5.sql", "original_file_path": "models\\silver\\silver__validators.yml", "name": "dbt_expectations_expect_column_values_to_be_in_type_list_silver__validators_LABEL__STRING__VARCHAR", "alias": "validators_LABEL", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["silver__validators"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target\\compiled\\axelar\\models\\silver\\silver__validators.yml\\dbt_expectations_expect_column_de1976eae2545d87a603ece6d2c109b5.sql", "build_path": null, "deferred": false, "unrendered_config": {"store_failures": true, "alias": "dbt_expectations_expect_column_de1976eae2545d87a603ece6d2c109b5"}, "created_at": 1671054963.6584053, "compiled_sql": "with relation_columns as (\n\n        \n        select\n            cast('ADDRESS' as TEXT) as relation_column,\n            cast('VARCHAR' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('BLOCKCHAIN' as TEXT) as relation_column,\n            cast('VARCHAR' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('CREATOR' as TEXT) as relation_column,\n            cast('VARCHAR' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('LABEL_TYPE' as TEXT) as relation_column,\n            cast('VARCHAR' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('LABEL_SUBTYPE' as TEXT) as relation_column,\n            cast('VARCHAR' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('LABEL' as TEXT) as relation_column,\n            cast('VARCHAR' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('PROJECT_NAME' as TEXT) as relation_column,\n            cast('VARCHAR' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('DELEGATOR_SHARES' as TEXT) as relation_column,\n            cast('NUMBER' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('JAILED' as TEXT) as relation_column,\n            cast('BOOLEAN' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('RATE' as TEXT) as relation_column,\n            cast('FLOAT' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('MAX_CHANGE_RATE' as TEXT) as relation_column,\n            cast('FLOAT' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('MAX_RATE' as TEXT) as relation_column,\n            cast('FLOAT' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('MIN_SELF_DELEGATION' as TEXT) as relation_column,\n            cast('NUMBER' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('RANK' as TEXT) as relation_column,\n            cast('NUMBER' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('RAW_METADATA' as TEXT) as relation_column,\n            cast('VARIANT' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('UNIQUE_KEY' as TEXT) as relation_column,\n            cast('VARCHAR' as TEXT) as relation_column_type\n        \n        \n    ),\n    test_data as (\n\n        select\n            *\n        from\n            relation_columns\n        where\n            relation_column = 'LABEL'\n            and\n            relation_column_type not in ('STRING', 'VARCHAR')\n\n    )\n    select *\n    from test_data", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "AXELAR_DEV.dbt_expectations_expect_column_values_to_be_in_type_list_silver.validators_LABEL", "column_name": "LABEL", "file_key_name": "models.silver__validators"}, "test.axelar.not_null_silver__validators_PROJECT_NAME.b8f893f8e7": {"raw_sql": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "PROJECT_NAME", "model": "{{ get_where_subquery(ref('silver__validators')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.axelar.silver__validators"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": true, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "AXELAR_DEV", "schema": "not_null_silver", "fqn": ["axelar", "silver", "not_null_silver__validators_PROJECT_NAME"], "unique_id": "test.axelar.not_null_silver__validators_PROJECT_NAME.b8f893f8e7", "package_name": "axelar", "root_path": "C:\\Users\\jessi\\git\\axelar-models", "path": "not_null_silver__validators_PROJECT_NAME.sql", "original_file_path": "models\\silver\\silver__validators.yml", "name": "not_null_silver__validators_PROJECT_NAME", "alias": "validators_PROJECT_NAME", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["silver__validators"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target\\compiled\\axelar\\models\\silver\\silver__validators.yml\\not_null_silver__validators_PROJECT_NAME.sql", "build_path": null, "deferred": false, "unrendered_config": {"store_failures": true}, "created_at": 1671054963.6666236, "compiled_sql": "\n    \n    \n\n\n\nselect *\nfrom AXELAR_DEV.silver.validators\nwhere PROJECT_NAME is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "AXELAR_DEV.not_null_silver.validators_PROJECT_NAME", "column_name": "PROJECT_NAME", "file_key_name": "models.silver__validators"}, "test.axelar.dbt_expectations_expect_column_values_to_be_in_type_list_silver__validators_PROJECT_NAME__STRING__VARCHAR.0767218579": {"raw_sql": "{{ dbt_expectations.test_expect_column_values_to_be_in_type_list(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_expectations_expect_column_034451c95fa41a6934b414c0de483063\") }}", "test_metadata": {"name": "expect_column_values_to_be_in_type_list", "kwargs": {"column_type_list": ["STRING", "VARCHAR"], "column_name": "PROJECT_NAME", "model": "{{ get_where_subquery(ref('silver__validators')) }}"}, "namespace": "dbt_expectations"}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt_expectations.test_expect_column_values_to_be_in_type_list", "macro.dbt.get_where_subquery"], "nodes": ["model.axelar.silver__validators"]}, "config": {"enabled": true, "alias": "dbt_expectations_expect_column_034451c95fa41a6934b414c0de483063", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": true, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "AXELAR_DEV", "schema": "dbt_expectations_expect_column_values_to_be_in_type_list_silver", "fqn": ["axelar", "silver", "dbt_expectations_expect_column_values_to_be_in_type_list_silver__validators_PROJECT_NAME__STRING__VARCHAR"], "unique_id": "test.axelar.dbt_expectations_expect_column_values_to_be_in_type_list_silver__validators_PROJECT_NAME__STRING__VARCHAR.0767218579", "package_name": "axelar", "root_path": "C:\\Users\\jessi\\git\\axelar-models", "path": "dbt_expectations_expect_column_034451c95fa41a6934b414c0de483063.sql", "original_file_path": "models\\silver\\silver__validators.yml", "name": "dbt_expectations_expect_column_values_to_be_in_type_list_silver__validators_PROJECT_NAME__STRING__VARCHAR", "alias": "validators_PROJECT_NAME", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["silver__validators"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target\\compiled\\axelar\\models\\silver\\silver__validators.yml\\dbt_expectations_expect_column_034451c95fa41a6934b414c0de483063.sql", "build_path": null, "deferred": false, "unrendered_config": {"store_failures": true, "alias": "dbt_expectations_expect_column_034451c95fa41a6934b414c0de483063"}, "created_at": 1671054963.669612, "compiled_sql": "with relation_columns as (\n\n        \n        select\n            cast('ADDRESS' as TEXT) as relation_column,\n            cast('VARCHAR' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('BLOCKCHAIN' as TEXT) as relation_column,\n            cast('VARCHAR' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('CREATOR' as TEXT) as relation_column,\n            cast('VARCHAR' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('LABEL_TYPE' as TEXT) as relation_column,\n            cast('VARCHAR' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('LABEL_SUBTYPE' as TEXT) as relation_column,\n            cast('VARCHAR' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('LABEL' as TEXT) as relation_column,\n            cast('VARCHAR' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('PROJECT_NAME' as TEXT) as relation_column,\n            cast('VARCHAR' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('DELEGATOR_SHARES' as TEXT) as relation_column,\n            cast('NUMBER' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('JAILED' as TEXT) as relation_column,\n            cast('BOOLEAN' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('RATE' as TEXT) as relation_column,\n            cast('FLOAT' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('MAX_CHANGE_RATE' as TEXT) as relation_column,\n            cast('FLOAT' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('MAX_RATE' as TEXT) as relation_column,\n            cast('FLOAT' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('MIN_SELF_DELEGATION' as TEXT) as relation_column,\n            cast('NUMBER' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('RANK' as TEXT) as relation_column,\n            cast('NUMBER' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('RAW_METADATA' as TEXT) as relation_column,\n            cast('VARIANT' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('UNIQUE_KEY' as TEXT) as relation_column,\n            cast('VARCHAR' as TEXT) as relation_column_type\n        \n        \n    ),\n    test_data as (\n\n        select\n            *\n        from\n            relation_columns\n        where\n            relation_column = 'PROJECT_NAME'\n            and\n            relation_column_type not in ('STRING', 'VARCHAR')\n\n    )\n    select *\n    from test_data", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "AXELAR_DEV.dbt_expectations_expect_column_values_to_be_in_type_list_silver.validators_PROJECT_NAME", "column_name": "PROJECT_NAME", "file_key_name": "models.silver__validators"}, "test.axelar.not_null_silver__validators_DELEGATOR_SHARES.89b722f278": {"raw_sql": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "DELEGATOR_SHARES", "model": "{{ get_where_subquery(ref('silver__validators')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.axelar.silver__validators"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": true, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "AXELAR_DEV", "schema": "not_null_silver", "fqn": ["axelar", "silver", "not_null_silver__validators_DELEGATOR_SHARES"], "unique_id": "test.axelar.not_null_silver__validators_DELEGATOR_SHARES.89b722f278", "package_name": "axelar", "root_path": "C:\\Users\\jessi\\git\\axelar-models", "path": "not_null_silver__validators_DELEGATOR_SHARES.sql", "original_file_path": "models\\silver\\silver__validators.yml", "name": "not_null_silver__validators_DELEGATOR_SHARES", "alias": "validators_DELEGATOR_SHARES", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["silver__validators"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target\\compiled\\axelar\\models\\silver\\silver__validators.yml\\not_null_silver__validators_DELEGATOR_SHARES.sql", "build_path": null, "deferred": false, "unrendered_config": {"store_failures": true}, "created_at": 1671054963.6736126, "compiled_sql": "\n    \n    \n\n\n\nselect *\nfrom AXELAR_DEV.silver.validators\nwhere DELEGATOR_SHARES is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "AXELAR_DEV.not_null_silver.validators_DELEGATOR_SHARES", "column_name": "DELEGATOR_SHARES", "file_key_name": "models.silver__validators"}, "test.axelar.dbt_expectations_expect_column_values_to_be_in_type_list_silver__validators_DELEGATOR_SHARES__NUMBER__FLOAT.153a8d0cdb": {"raw_sql": "{{ dbt_expectations.test_expect_column_values_to_be_in_type_list(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_expectations_expect_column_2b9d08561d823ac0bbb1fc5261033b53\") }}", "test_metadata": {"name": "expect_column_values_to_be_in_type_list", "kwargs": {"column_type_list": ["NUMBER", "FLOAT"], "column_name": "DELEGATOR_SHARES", "model": "{{ get_where_subquery(ref('silver__validators')) }}"}, "namespace": "dbt_expectations"}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt_expectations.test_expect_column_values_to_be_in_type_list", "macro.dbt.get_where_subquery"], "nodes": ["model.axelar.silver__validators"]}, "config": {"enabled": true, "alias": "dbt_expectations_expect_column_2b9d08561d823ac0bbb1fc5261033b53", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": true, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "AXELAR_DEV", "schema": "dbt_expectations_expect_column_values_to_be_in_type_list_silver", "fqn": ["axelar", "silver", "dbt_expectations_expect_column_values_to_be_in_type_list_silver__validators_DELEGATOR_SHARES__NUMBER__FLOAT"], "unique_id": "test.axelar.dbt_expectations_expect_column_values_to_be_in_type_list_silver__validators_DELEGATOR_SHARES__NUMBER__FLOAT.153a8d0cdb", "package_name": "axelar", "root_path": "C:\\Users\\jessi\\git\\axelar-models", "path": "dbt_expectations_expect_column_2b9d08561d823ac0bbb1fc5261033b53.sql", "original_file_path": "models\\silver\\silver__validators.yml", "name": "dbt_expectations_expect_column_values_to_be_in_type_list_silver__validators_DELEGATOR_SHARES__NUMBER__FLOAT", "alias": "validators_DELEGATOR_SHARES", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["silver__validators"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target\\compiled\\axelar\\models\\silver\\silver__validators.yml\\dbt_expectations_expect_column_2b9d08561d823ac0bbb1fc5261033b53.sql", "build_path": null, "deferred": false, "unrendered_config": {"store_failures": true, "alias": "dbt_expectations_expect_column_2b9d08561d823ac0bbb1fc5261033b53"}, "created_at": 1671054963.6746123, "compiled_sql": "with relation_columns as (\n\n        \n        select\n            cast('ADDRESS' as TEXT) as relation_column,\n            cast('VARCHAR' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('BLOCKCHAIN' as TEXT) as relation_column,\n            cast('VARCHAR' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('CREATOR' as TEXT) as relation_column,\n            cast('VARCHAR' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('LABEL_TYPE' as TEXT) as relation_column,\n            cast('VARCHAR' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('LABEL_SUBTYPE' as TEXT) as relation_column,\n            cast('VARCHAR' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('LABEL' as TEXT) as relation_column,\n            cast('VARCHAR' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('PROJECT_NAME' as TEXT) as relation_column,\n            cast('VARCHAR' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('DELEGATOR_SHARES' as TEXT) as relation_column,\n            cast('NUMBER' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('JAILED' as TEXT) as relation_column,\n            cast('BOOLEAN' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('RATE' as TEXT) as relation_column,\n            cast('FLOAT' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('MAX_CHANGE_RATE' as TEXT) as relation_column,\n            cast('FLOAT' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('MAX_RATE' as TEXT) as relation_column,\n            cast('FLOAT' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('MIN_SELF_DELEGATION' as TEXT) as relation_column,\n            cast('NUMBER' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('RANK' as TEXT) as relation_column,\n            cast('NUMBER' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('RAW_METADATA' as TEXT) as relation_column,\n            cast('VARIANT' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('UNIQUE_KEY' as TEXT) as relation_column,\n            cast('VARCHAR' as TEXT) as relation_column_type\n        \n        \n    ),\n    test_data as (\n\n        select\n            *\n        from\n            relation_columns\n        where\n            relation_column = 'DELEGATOR_SHARES'\n            and\n            relation_column_type not in ('NUMBER', 'FLOAT')\n\n    )\n    select *\n    from test_data", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "AXELAR_DEV.dbt_expectations_expect_column_values_to_be_in_type_list_silver.validators_DELEGATOR_SHARES", "column_name": "DELEGATOR_SHARES", "file_key_name": "models.silver__validators"}, "test.axelar.not_null_silver__validators_JAILED.f85ae4ab21": {"raw_sql": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "JAILED", "model": "{{ get_where_subquery(ref('silver__validators')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.axelar.silver__validators"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": true, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "AXELAR_DEV", "schema": "not_null_silver", "fqn": ["axelar", "silver", "not_null_silver__validators_JAILED"], "unique_id": "test.axelar.not_null_silver__validators_JAILED.f85ae4ab21", "package_name": "axelar", "root_path": "C:\\Users\\jessi\\git\\axelar-models", "path": "not_null_silver__validators_JAILED.sql", "original_file_path": "models\\silver\\silver__validators.yml", "name": "not_null_silver__validators_JAILED", "alias": "validators_JAILED", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["silver__validators"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target\\compiled\\axelar\\models\\silver\\silver__validators.yml\\not_null_silver__validators_JAILED.sql", "build_path": null, "deferred": false, "unrendered_config": {"store_failures": true}, "created_at": 1671054963.679614, "compiled_sql": "\n    \n    \n\n\n\nselect *\nfrom AXELAR_DEV.silver.validators\nwhere JAILED is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "AXELAR_DEV.not_null_silver.validators_JAILED", "column_name": "JAILED", "file_key_name": "models.silver__validators"}, "test.axelar.dbt_expectations_expect_column_values_to_be_in_type_list_silver__validators_JAILED__BOOLEAN.34313ede18": {"raw_sql": "{{ dbt_expectations.test_expect_column_values_to_be_in_type_list(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_expectations_expect_column_61ed7f4dbeff528f01b15f11c9e2d8cd\") }}", "test_metadata": {"name": "expect_column_values_to_be_in_type_list", "kwargs": {"column_type_list": ["BOOLEAN"], "column_name": "JAILED", "model": "{{ get_where_subquery(ref('silver__validators')) }}"}, "namespace": "dbt_expectations"}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt_expectations.test_expect_column_values_to_be_in_type_list", "macro.dbt.get_where_subquery"], "nodes": ["model.axelar.silver__validators"]}, "config": {"enabled": true, "alias": "dbt_expectations_expect_column_61ed7f4dbeff528f01b15f11c9e2d8cd", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": true, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "AXELAR_DEV", "schema": "dbt_expectations_expect_column_values_to_be_in_type_list_silver", "fqn": ["axelar", "silver", "dbt_expectations_expect_column_values_to_be_in_type_list_silver__validators_JAILED__BOOLEAN"], "unique_id": "test.axelar.dbt_expectations_expect_column_values_to_be_in_type_list_silver__validators_JAILED__BOOLEAN.34313ede18", "package_name": "axelar", "root_path": "C:\\Users\\jessi\\git\\axelar-models", "path": "dbt_expectations_expect_column_61ed7f4dbeff528f01b15f11c9e2d8cd.sql", "original_file_path": "models\\silver\\silver__validators.yml", "name": "dbt_expectations_expect_column_values_to_be_in_type_list_silver__validators_JAILED__BOOLEAN", "alias": "validators_JAILED", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["silver__validators"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target\\compiled\\axelar\\models\\silver\\silver__validators.yml\\dbt_expectations_expect_column_61ed7f4dbeff528f01b15f11c9e2d8cd.sql", "build_path": null, "deferred": false, "unrendered_config": {"store_failures": true, "alias": "dbt_expectations_expect_column_61ed7f4dbeff528f01b15f11c9e2d8cd"}, "created_at": 1671054963.680613, "compiled_sql": "with relation_columns as (\n\n        \n        select\n            cast('ADDRESS' as TEXT) as relation_column,\n            cast('VARCHAR' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('BLOCKCHAIN' as TEXT) as relation_column,\n            cast('VARCHAR' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('CREATOR' as TEXT) as relation_column,\n            cast('VARCHAR' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('LABEL_TYPE' as TEXT) as relation_column,\n            cast('VARCHAR' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('LABEL_SUBTYPE' as TEXT) as relation_column,\n            cast('VARCHAR' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('LABEL' as TEXT) as relation_column,\n            cast('VARCHAR' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('PROJECT_NAME' as TEXT) as relation_column,\n            cast('VARCHAR' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('DELEGATOR_SHARES' as TEXT) as relation_column,\n            cast('NUMBER' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('JAILED' as TEXT) as relation_column,\n            cast('BOOLEAN' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('RATE' as TEXT) as relation_column,\n            cast('FLOAT' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('MAX_CHANGE_RATE' as TEXT) as relation_column,\n            cast('FLOAT' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('MAX_RATE' as TEXT) as relation_column,\n            cast('FLOAT' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('MIN_SELF_DELEGATION' as TEXT) as relation_column,\n            cast('NUMBER' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('RANK' as TEXT) as relation_column,\n            cast('NUMBER' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('RAW_METADATA' as TEXT) as relation_column,\n            cast('VARIANT' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('UNIQUE_KEY' as TEXT) as relation_column,\n            cast('VARCHAR' as TEXT) as relation_column_type\n        \n        \n    ),\n    test_data as (\n\n        select\n            *\n        from\n            relation_columns\n        where\n            relation_column = 'JAILED'\n            and\n            relation_column_type not in ('BOOLEAN')\n\n    )\n    select *\n    from test_data", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "AXELAR_DEV.dbt_expectations_expect_column_values_to_be_in_type_list_silver.validators_JAILED", "column_name": "JAILED", "file_key_name": "models.silver__validators"}, "test.axelar.not_null_silver__validators_RATE.fea467fa10": {"raw_sql": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "RATE", "model": "{{ get_where_subquery(ref('silver__validators')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.axelar.silver__validators"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": true, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "AXELAR_DEV", "schema": "not_null_silver", "fqn": ["axelar", "silver", "not_null_silver__validators_RATE"], "unique_id": "test.axelar.not_null_silver__validators_RATE.fea467fa10", "package_name": "axelar", "root_path": "C:\\Users\\jessi\\git\\axelar-models", "path": "not_null_silver__validators_RATE.sql", "original_file_path": "models\\silver\\silver__validators.yml", "name": "not_null_silver__validators_RATE", "alias": "validators_RATE", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["silver__validators"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target\\compiled\\axelar\\models\\silver\\silver__validators.yml\\not_null_silver__validators_RATE.sql", "build_path": null, "deferred": false, "unrendered_config": {"store_failures": true}, "created_at": 1671054963.6846125, "compiled_sql": "\n    \n    \n\n\n\nselect *\nfrom AXELAR_DEV.silver.validators\nwhere RATE is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "AXELAR_DEV.not_null_silver.validators_RATE", "column_name": "RATE", "file_key_name": "models.silver__validators"}, "test.axelar.dbt_expectations_expect_column_values_to_be_in_type_list_silver__validators_RATE__NUMBER__FLOAT.b620a8dc1d": {"raw_sql": "{{ dbt_expectations.test_expect_column_values_to_be_in_type_list(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_expectations_expect_column_059e6b3c4c7f671e566648deb67320e5\") }}", "test_metadata": {"name": "expect_column_values_to_be_in_type_list", "kwargs": {"column_type_list": ["NUMBER", "FLOAT"], "column_name": "RATE", "model": "{{ get_where_subquery(ref('silver__validators')) }}"}, "namespace": "dbt_expectations"}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt_expectations.test_expect_column_values_to_be_in_type_list", "macro.dbt.get_where_subquery"], "nodes": ["model.axelar.silver__validators"]}, "config": {"enabled": true, "alias": "dbt_expectations_expect_column_059e6b3c4c7f671e566648deb67320e5", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": true, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "AXELAR_DEV", "schema": "dbt_expectations_expect_column_values_to_be_in_type_list_silver", "fqn": ["axelar", "silver", "dbt_expectations_expect_column_values_to_be_in_type_list_silver__validators_RATE__NUMBER__FLOAT"], "unique_id": "test.axelar.dbt_expectations_expect_column_values_to_be_in_type_list_silver__validators_RATE__NUMBER__FLOAT.b620a8dc1d", "package_name": "axelar", "root_path": "C:\\Users\\jessi\\git\\axelar-models", "path": "dbt_expectations_expect_column_059e6b3c4c7f671e566648deb67320e5.sql", "original_file_path": "models\\silver\\silver__validators.yml", "name": "dbt_expectations_expect_column_values_to_be_in_type_list_silver__validators_RATE__NUMBER__FLOAT", "alias": "validators_RATE", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["silver__validators"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target\\compiled\\axelar\\models\\silver\\silver__validators.yml\\dbt_expectations_expect_column_059e6b3c4c7f671e566648deb67320e5.sql", "build_path": null, "deferred": false, "unrendered_config": {"store_failures": true, "alias": "dbt_expectations_expect_column_059e6b3c4c7f671e566648deb67320e5"}, "created_at": 1671054963.685612, "compiled_sql": "with relation_columns as (\n\n        \n        select\n            cast('ADDRESS' as TEXT) as relation_column,\n            cast('VARCHAR' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('BLOCKCHAIN' as TEXT) as relation_column,\n            cast('VARCHAR' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('CREATOR' as TEXT) as relation_column,\n            cast('VARCHAR' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('LABEL_TYPE' as TEXT) as relation_column,\n            cast('VARCHAR' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('LABEL_SUBTYPE' as TEXT) as relation_column,\n            cast('VARCHAR' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('LABEL' as TEXT) as relation_column,\n            cast('VARCHAR' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('PROJECT_NAME' as TEXT) as relation_column,\n            cast('VARCHAR' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('DELEGATOR_SHARES' as TEXT) as relation_column,\n            cast('NUMBER' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('JAILED' as TEXT) as relation_column,\n            cast('BOOLEAN' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('RATE' as TEXT) as relation_column,\n            cast('FLOAT' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('MAX_CHANGE_RATE' as TEXT) as relation_column,\n            cast('FLOAT' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('MAX_RATE' as TEXT) as relation_column,\n            cast('FLOAT' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('MIN_SELF_DELEGATION' as TEXT) as relation_column,\n            cast('NUMBER' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('RANK' as TEXT) as relation_column,\n            cast('NUMBER' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('RAW_METADATA' as TEXT) as relation_column,\n            cast('VARIANT' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('UNIQUE_KEY' as TEXT) as relation_column,\n            cast('VARCHAR' as TEXT) as relation_column_type\n        \n        \n    ),\n    test_data as (\n\n        select\n            *\n        from\n            relation_columns\n        where\n            relation_column = 'RATE'\n            and\n            relation_column_type not in ('NUMBER', 'FLOAT')\n\n    )\n    select *\n    from test_data", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "AXELAR_DEV.dbt_expectations_expect_column_values_to_be_in_type_list_silver.validators_RATE", "column_name": "RATE", "file_key_name": "models.silver__validators"}, "test.axelar.not_null_silver__validators_MAX_CHANGE_RATE.6156472781": {"raw_sql": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "MAX_CHANGE_RATE", "model": "{{ get_where_subquery(ref('silver__validators')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.axelar.silver__validators"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": true, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "AXELAR_DEV", "schema": "not_null_silver", "fqn": ["axelar", "silver", "not_null_silver__validators_MAX_CHANGE_RATE"], "unique_id": "test.axelar.not_null_silver__validators_MAX_CHANGE_RATE.6156472781", "package_name": "axelar", "root_path": "C:\\Users\\jessi\\git\\axelar-models", "path": "not_null_silver__validators_MAX_CHANGE_RATE.sql", "original_file_path": "models\\silver\\silver__validators.yml", "name": "not_null_silver__validators_MAX_CHANGE_RATE", "alias": "validators_MAX_CHANGE_RATE", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["silver__validators"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target\\compiled\\axelar\\models\\silver\\silver__validators.yml\\not_null_silver__validators_MAX_CHANGE_RATE.sql", "build_path": null, "deferred": false, "unrendered_config": {"store_failures": true}, "created_at": 1671054963.6896129, "compiled_sql": "\n    \n    \n\n\n\nselect *\nfrom AXELAR_DEV.silver.validators\nwhere MAX_CHANGE_RATE is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "AXELAR_DEV.not_null_silver.validators_MAX_CHANGE_RATE", "column_name": "MAX_CHANGE_RATE", "file_key_name": "models.silver__validators"}, "test.axelar.dbt_expectations_expect_column_values_to_be_in_type_list_silver__validators_MAX_CHANGE_RATE__NUMBER__FLOAT.ce20b99a85": {"raw_sql": "{{ dbt_expectations.test_expect_column_values_to_be_in_type_list(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_expectations_expect_column_a4e43e5492aed3ea649619fc626a544e\") }}", "test_metadata": {"name": "expect_column_values_to_be_in_type_list", "kwargs": {"column_type_list": ["NUMBER", "FLOAT"], "column_name": "MAX_CHANGE_RATE", "model": "{{ get_where_subquery(ref('silver__validators')) }}"}, "namespace": "dbt_expectations"}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt_expectations.test_expect_column_values_to_be_in_type_list", "macro.dbt.get_where_subquery"], "nodes": ["model.axelar.silver__validators"]}, "config": {"enabled": true, "alias": "dbt_expectations_expect_column_a4e43e5492aed3ea649619fc626a544e", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": true, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "AXELAR_DEV", "schema": "dbt_expectations_expect_column_values_to_be_in_type_list_silver", "fqn": ["axelar", "silver", "dbt_expectations_expect_column_values_to_be_in_type_list_silver__validators_MAX_CHANGE_RATE__NUMBER__FLOAT"], "unique_id": "test.axelar.dbt_expectations_expect_column_values_to_be_in_type_list_silver__validators_MAX_CHANGE_RATE__NUMBER__FLOAT.ce20b99a85", "package_name": "axelar", "root_path": "C:\\Users\\jessi\\git\\axelar-models", "path": "dbt_expectations_expect_column_a4e43e5492aed3ea649619fc626a544e.sql", "original_file_path": "models\\silver\\silver__validators.yml", "name": "dbt_expectations_expect_column_values_to_be_in_type_list_silver__validators_MAX_CHANGE_RATE__NUMBER__FLOAT", "alias": "validators_MAX_CHANGE_RATE", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["silver__validators"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target\\compiled\\axelar\\models\\silver\\silver__validators.yml\\dbt_expectations_expect_column_a4e43e5492aed3ea649619fc626a544e.sql", "build_path": null, "deferred": false, "unrendered_config": {"store_failures": true, "alias": "dbt_expectations_expect_column_a4e43e5492aed3ea649619fc626a544e"}, "created_at": 1671054963.6916122, "compiled_sql": "with relation_columns as (\n\n        \n        select\n            cast('ADDRESS' as TEXT) as relation_column,\n            cast('VARCHAR' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('BLOCKCHAIN' as TEXT) as relation_column,\n            cast('VARCHAR' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('CREATOR' as TEXT) as relation_column,\n            cast('VARCHAR' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('LABEL_TYPE' as TEXT) as relation_column,\n            cast('VARCHAR' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('LABEL_SUBTYPE' as TEXT) as relation_column,\n            cast('VARCHAR' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('LABEL' as TEXT) as relation_column,\n            cast('VARCHAR' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('PROJECT_NAME' as TEXT) as relation_column,\n            cast('VARCHAR' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('DELEGATOR_SHARES' as TEXT) as relation_column,\n            cast('NUMBER' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('JAILED' as TEXT) as relation_column,\n            cast('BOOLEAN' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('RATE' as TEXT) as relation_column,\n            cast('FLOAT' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('MAX_CHANGE_RATE' as TEXT) as relation_column,\n            cast('FLOAT' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('MAX_RATE' as TEXT) as relation_column,\n            cast('FLOAT' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('MIN_SELF_DELEGATION' as TEXT) as relation_column,\n            cast('NUMBER' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('RANK' as TEXT) as relation_column,\n            cast('NUMBER' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('RAW_METADATA' as TEXT) as relation_column,\n            cast('VARIANT' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('UNIQUE_KEY' as TEXT) as relation_column,\n            cast('VARCHAR' as TEXT) as relation_column_type\n        \n        \n    ),\n    test_data as (\n\n        select\n            *\n        from\n            relation_columns\n        where\n            relation_column = 'MAX_CHANGE_RATE'\n            and\n            relation_column_type not in ('NUMBER', 'FLOAT')\n\n    )\n    select *\n    from test_data", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "AXELAR_DEV.dbt_expectations_expect_column_values_to_be_in_type_list_silver.validators_MAX_CHANGE_RATE", "column_name": "MAX_CHANGE_RATE", "file_key_name": "models.silver__validators"}, "test.axelar.not_null_silver__validators_MAX_RATE.24b5d3c90d": {"raw_sql": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "MAX_RATE", "model": "{{ get_where_subquery(ref('silver__validators')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.axelar.silver__validators"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": true, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "AXELAR_DEV", "schema": "not_null_silver", "fqn": ["axelar", "silver", "not_null_silver__validators_MAX_RATE"], "unique_id": "test.axelar.not_null_silver__validators_MAX_RATE.24b5d3c90d", "package_name": "axelar", "root_path": "C:\\Users\\jessi\\git\\axelar-models", "path": "not_null_silver__validators_MAX_RATE.sql", "original_file_path": "models\\silver\\silver__validators.yml", "name": "not_null_silver__validators_MAX_RATE", "alias": "validators_MAX_RATE", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["silver__validators"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target\\compiled\\axelar\\models\\silver\\silver__validators.yml\\not_null_silver__validators_MAX_RATE.sql", "build_path": null, "deferred": false, "unrendered_config": {"store_failures": true}, "created_at": 1671054963.695613, "compiled_sql": "\n    \n    \n\n\n\nselect *\nfrom AXELAR_DEV.silver.validators\nwhere MAX_RATE is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "AXELAR_DEV.not_null_silver.validators_MAX_RATE", "column_name": "MAX_RATE", "file_key_name": "models.silver__validators"}, "test.axelar.dbt_expectations_expect_column_values_to_be_in_type_list_silver__validators_MAX_RATE__NUMBER__FLOAT.3b0f40cf38": {"raw_sql": "{{ dbt_expectations.test_expect_column_values_to_be_in_type_list(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_expectations_expect_column_08c1cdd3d0ebb2d923c5d07842082bf5\") }}", "test_metadata": {"name": "expect_column_values_to_be_in_type_list", "kwargs": {"column_type_list": ["NUMBER", "FLOAT"], "column_name": "MAX_RATE", "model": "{{ get_where_subquery(ref('silver__validators')) }}"}, "namespace": "dbt_expectations"}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt_expectations.test_expect_column_values_to_be_in_type_list", "macro.dbt.get_where_subquery"], "nodes": ["model.axelar.silver__validators"]}, "config": {"enabled": true, "alias": "dbt_expectations_expect_column_08c1cdd3d0ebb2d923c5d07842082bf5", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": true, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "AXELAR_DEV", "schema": "dbt_expectations_expect_column_values_to_be_in_type_list_silver", "fqn": ["axelar", "silver", "dbt_expectations_expect_column_values_to_be_in_type_list_silver__validators_MAX_RATE__NUMBER__FLOAT"], "unique_id": "test.axelar.dbt_expectations_expect_column_values_to_be_in_type_list_silver__validators_MAX_RATE__NUMBER__FLOAT.3b0f40cf38", "package_name": "axelar", "root_path": "C:\\Users\\jessi\\git\\axelar-models", "path": "dbt_expectations_expect_column_08c1cdd3d0ebb2d923c5d07842082bf5.sql", "original_file_path": "models\\silver\\silver__validators.yml", "name": "dbt_expectations_expect_column_values_to_be_in_type_list_silver__validators_MAX_RATE__NUMBER__FLOAT", "alias": "validators_MAX_RATE", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["silver__validators"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target\\compiled\\axelar\\models\\silver\\silver__validators.yml\\dbt_expectations_expect_column_08c1cdd3d0ebb2d923c5d07842082bf5.sql", "build_path": null, "deferred": false, "unrendered_config": {"store_failures": true, "alias": "dbt_expectations_expect_column_08c1cdd3d0ebb2d923c5d07842082bf5"}, "created_at": 1671054963.6966126, "compiled_sql": "with relation_columns as (\n\n        \n        select\n            cast('ADDRESS' as TEXT) as relation_column,\n            cast('VARCHAR' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('BLOCKCHAIN' as TEXT) as relation_column,\n            cast('VARCHAR' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('CREATOR' as TEXT) as relation_column,\n            cast('VARCHAR' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('LABEL_TYPE' as TEXT) as relation_column,\n            cast('VARCHAR' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('LABEL_SUBTYPE' as TEXT) as relation_column,\n            cast('VARCHAR' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('LABEL' as TEXT) as relation_column,\n            cast('VARCHAR' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('PROJECT_NAME' as TEXT) as relation_column,\n            cast('VARCHAR' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('DELEGATOR_SHARES' as TEXT) as relation_column,\n            cast('NUMBER' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('JAILED' as TEXT) as relation_column,\n            cast('BOOLEAN' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('RATE' as TEXT) as relation_column,\n            cast('FLOAT' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('MAX_CHANGE_RATE' as TEXT) as relation_column,\n            cast('FLOAT' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('MAX_RATE' as TEXT) as relation_column,\n            cast('FLOAT' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('MIN_SELF_DELEGATION' as TEXT) as relation_column,\n            cast('NUMBER' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('RANK' as TEXT) as relation_column,\n            cast('NUMBER' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('RAW_METADATA' as TEXT) as relation_column,\n            cast('VARIANT' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('UNIQUE_KEY' as TEXT) as relation_column,\n            cast('VARCHAR' as TEXT) as relation_column_type\n        \n        \n    ),\n    test_data as (\n\n        select\n            *\n        from\n            relation_columns\n        where\n            relation_column = 'MAX_RATE'\n            and\n            relation_column_type not in ('NUMBER', 'FLOAT')\n\n    )\n    select *\n    from test_data", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "AXELAR_DEV.dbt_expectations_expect_column_values_to_be_in_type_list_silver.validators_MAX_RATE", "column_name": "MAX_RATE", "file_key_name": "models.silver__validators"}, "test.axelar.not_null_silver__validators_MIN_SELF_DELEGATION.fcab1b0eb9": {"raw_sql": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "MIN_SELF_DELEGATION", "model": "{{ get_where_subquery(ref('silver__validators')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.axelar.silver__validators"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": true, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "AXELAR_DEV", "schema": "not_null_silver", "fqn": ["axelar", "silver", "not_null_silver__validators_MIN_SELF_DELEGATION"], "unique_id": "test.axelar.not_null_silver__validators_MIN_SELF_DELEGATION.fcab1b0eb9", "package_name": "axelar", "root_path": "C:\\Users\\jessi\\git\\axelar-models", "path": "not_null_silver__validators_MIN_SELF_DELEGATION.sql", "original_file_path": "models\\silver\\silver__validators.yml", "name": "not_null_silver__validators_MIN_SELF_DELEGATION", "alias": "validators_MIN_SELF_DELEGATION", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["silver__validators"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target\\compiled\\axelar\\models\\silver\\silver__validators.yml\\not_null_silver__validators_MIN_SELF_DELEGATION.sql", "build_path": null, "deferred": false, "unrendered_config": {"store_failures": true}, "created_at": 1671054963.7006128, "compiled_sql": "\n    \n    \n\n\n\nselect *\nfrom AXELAR_DEV.silver.validators\nwhere MIN_SELF_DELEGATION is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "AXELAR_DEV.not_null_silver.validators_MIN_SELF_DELEGATION", "column_name": "MIN_SELF_DELEGATION", "file_key_name": "models.silver__validators"}, "test.axelar.dbt_expectations_expect_column_values_to_be_in_type_list_silver__validators_MIN_SELF_DELEGATION__NUMBER__FLOAT.2b4fca8ff2": {"raw_sql": "{{ dbt_expectations.test_expect_column_values_to_be_in_type_list(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_expectations_expect_column_d847364d5216958ca0b28d395b11fa28\") }}", "test_metadata": {"name": "expect_column_values_to_be_in_type_list", "kwargs": {"column_type_list": ["NUMBER", "FLOAT"], "column_name": "MIN_SELF_DELEGATION", "model": "{{ get_where_subquery(ref('silver__validators')) }}"}, "namespace": "dbt_expectations"}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt_expectations.test_expect_column_values_to_be_in_type_list", "macro.dbt.get_where_subquery"], "nodes": ["model.axelar.silver__validators"]}, "config": {"enabled": true, "alias": "dbt_expectations_expect_column_d847364d5216958ca0b28d395b11fa28", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": true, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "AXELAR_DEV", "schema": "dbt_expectations_expect_column_values_to_be_in_type_list_silver", "fqn": ["axelar", "silver", "dbt_expectations_expect_column_values_to_be_in_type_list_silver__validators_MIN_SELF_DELEGATION__NUMBER__FLOAT"], "unique_id": "test.axelar.dbt_expectations_expect_column_values_to_be_in_type_list_silver__validators_MIN_SELF_DELEGATION__NUMBER__FLOAT.2b4fca8ff2", "package_name": "axelar", "root_path": "C:\\Users\\jessi\\git\\axelar-models", "path": "dbt_expectations_expect_column_d847364d5216958ca0b28d395b11fa28.sql", "original_file_path": "models\\silver\\silver__validators.yml", "name": "dbt_expectations_expect_column_values_to_be_in_type_list_silver__validators_MIN_SELF_DELEGATION__NUMBER__FLOAT", "alias": "validators_MIN_SELF_DELEGATION", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["silver__validators"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target\\compiled\\axelar\\models\\silver\\silver__validators.yml\\dbt_expectations_expect_column_d847364d5216958ca0b28d395b11fa28.sql", "build_path": null, "deferred": false, "unrendered_config": {"store_failures": true, "alias": "dbt_expectations_expect_column_d847364d5216958ca0b28d395b11fa28"}, "created_at": 1671054963.7026122, "compiled_sql": "with relation_columns as (\n\n        \n        select\n            cast('ADDRESS' as TEXT) as relation_column,\n            cast('VARCHAR' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('BLOCKCHAIN' as TEXT) as relation_column,\n            cast('VARCHAR' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('CREATOR' as TEXT) as relation_column,\n            cast('VARCHAR' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('LABEL_TYPE' as TEXT) as relation_column,\n            cast('VARCHAR' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('LABEL_SUBTYPE' as TEXT) as relation_column,\n            cast('VARCHAR' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('LABEL' as TEXT) as relation_column,\n            cast('VARCHAR' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('PROJECT_NAME' as TEXT) as relation_column,\n            cast('VARCHAR' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('DELEGATOR_SHARES' as TEXT) as relation_column,\n            cast('NUMBER' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('JAILED' as TEXT) as relation_column,\n            cast('BOOLEAN' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('RATE' as TEXT) as relation_column,\n            cast('FLOAT' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('MAX_CHANGE_RATE' as TEXT) as relation_column,\n            cast('FLOAT' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('MAX_RATE' as TEXT) as relation_column,\n            cast('FLOAT' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('MIN_SELF_DELEGATION' as TEXT) as relation_column,\n            cast('NUMBER' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('RANK' as TEXT) as relation_column,\n            cast('NUMBER' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('RAW_METADATA' as TEXT) as relation_column,\n            cast('VARIANT' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('UNIQUE_KEY' as TEXT) as relation_column,\n            cast('VARCHAR' as TEXT) as relation_column_type\n        \n        \n    ),\n    test_data as (\n\n        select\n            *\n        from\n            relation_columns\n        where\n            relation_column = 'MIN_SELF_DELEGATION'\n            and\n            relation_column_type not in ('NUMBER', 'FLOAT')\n\n    )\n    select *\n    from test_data", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "AXELAR_DEV.dbt_expectations_expect_column_values_to_be_in_type_list_silver.validators_MIN_SELF_DELEGATION", "column_name": "MIN_SELF_DELEGATION", "file_key_name": "models.silver__validators"}, "test.axelar.not_null_silver__validators_RANK.2e8e4ef4a4": {"raw_sql": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "RANK", "model": "{{ get_where_subquery(ref('silver__validators')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.axelar.silver__validators"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": true, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "AXELAR_DEV", "schema": "not_null_silver", "fqn": ["axelar", "silver", "not_null_silver__validators_RANK"], "unique_id": "test.axelar.not_null_silver__validators_RANK.2e8e4ef4a4", "package_name": "axelar", "root_path": "C:\\Users\\jessi\\git\\axelar-models", "path": "not_null_silver__validators_RANK.sql", "original_file_path": "models\\silver\\silver__validators.yml", "name": "not_null_silver__validators_RANK", "alias": "validators_RANK", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["silver__validators"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target\\compiled\\axelar\\models\\silver\\silver__validators.yml\\not_null_silver__validators_RANK.sql", "build_path": null, "deferred": false, "unrendered_config": {"store_failures": true}, "created_at": 1671054963.705613, "compiled_sql": "\n    \n    \n\n\n\nselect *\nfrom AXELAR_DEV.silver.validators\nwhere RANK is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "AXELAR_DEV.not_null_silver.validators_RANK", "column_name": "RANK", "file_key_name": "models.silver__validators"}, "test.axelar.dbt_expectations_expect_column_values_to_be_in_type_list_silver__validators_RANK__NUMBER__FLOAT.40bed35bb0": {"raw_sql": "{{ dbt_expectations.test_expect_column_values_to_be_in_type_list(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_expectations_expect_column_f5ecf8089259079f4fa6b478084a2aaa\") }}", "test_metadata": {"name": "expect_column_values_to_be_in_type_list", "kwargs": {"column_type_list": ["NUMBER", "FLOAT"], "column_name": "RANK", "model": "{{ get_where_subquery(ref('silver__validators')) }}"}, "namespace": "dbt_expectations"}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt_expectations.test_expect_column_values_to_be_in_type_list", "macro.dbt.get_where_subquery"], "nodes": ["model.axelar.silver__validators"]}, "config": {"enabled": true, "alias": "dbt_expectations_expect_column_f5ecf8089259079f4fa6b478084a2aaa", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": true, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "AXELAR_DEV", "schema": "dbt_expectations_expect_column_values_to_be_in_type_list_silver", "fqn": ["axelar", "silver", "dbt_expectations_expect_column_values_to_be_in_type_list_silver__validators_RANK__NUMBER__FLOAT"], "unique_id": "test.axelar.dbt_expectations_expect_column_values_to_be_in_type_list_silver__validators_RANK__NUMBER__FLOAT.40bed35bb0", "package_name": "axelar", "root_path": "C:\\Users\\jessi\\git\\axelar-models", "path": "dbt_expectations_expect_column_f5ecf8089259079f4fa6b478084a2aaa.sql", "original_file_path": "models\\silver\\silver__validators.yml", "name": "dbt_expectations_expect_column_values_to_be_in_type_list_silver__validators_RANK__NUMBER__FLOAT", "alias": "validators_RANK", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["silver__validators"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target\\compiled\\axelar\\models\\silver\\silver__validators.yml\\dbt_expectations_expect_column_f5ecf8089259079f4fa6b478084a2aaa.sql", "build_path": null, "deferred": false, "unrendered_config": {"store_failures": true, "alias": "dbt_expectations_expect_column_f5ecf8089259079f4fa6b478084a2aaa"}, "created_at": 1671054963.7076292, "compiled_sql": "with relation_columns as (\n\n        \n        select\n            cast('ADDRESS' as TEXT) as relation_column,\n            cast('VARCHAR' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('BLOCKCHAIN' as TEXT) as relation_column,\n            cast('VARCHAR' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('CREATOR' as TEXT) as relation_column,\n            cast('VARCHAR' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('LABEL_TYPE' as TEXT) as relation_column,\n            cast('VARCHAR' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('LABEL_SUBTYPE' as TEXT) as relation_column,\n            cast('VARCHAR' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('LABEL' as TEXT) as relation_column,\n            cast('VARCHAR' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('PROJECT_NAME' as TEXT) as relation_column,\n            cast('VARCHAR' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('DELEGATOR_SHARES' as TEXT) as relation_column,\n            cast('NUMBER' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('JAILED' as TEXT) as relation_column,\n            cast('BOOLEAN' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('RATE' as TEXT) as relation_column,\n            cast('FLOAT' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('MAX_CHANGE_RATE' as TEXT) as relation_column,\n            cast('FLOAT' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('MAX_RATE' as TEXT) as relation_column,\n            cast('FLOAT' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('MIN_SELF_DELEGATION' as TEXT) as relation_column,\n            cast('NUMBER' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('RANK' as TEXT) as relation_column,\n            cast('NUMBER' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('RAW_METADATA' as TEXT) as relation_column,\n            cast('VARIANT' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('UNIQUE_KEY' as TEXT) as relation_column,\n            cast('VARCHAR' as TEXT) as relation_column_type\n        \n        \n    ),\n    test_data as (\n\n        select\n            *\n        from\n            relation_columns\n        where\n            relation_column = 'RANK'\n            and\n            relation_column_type not in ('NUMBER', 'FLOAT')\n\n    )\n    select *\n    from test_data", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "AXELAR_DEV.dbt_expectations_expect_column_values_to_be_in_type_list_silver.validators_RANK", "column_name": "RANK", "file_key_name": "models.silver__validators"}, "test.axelar.not_null_silver__validators_RAW_METADATA.fb6370f348": {"raw_sql": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "RAW_METADATA", "model": "{{ get_where_subquery(ref('silver__validators')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.axelar.silver__validators"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": true, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "AXELAR_DEV", "schema": "not_null_silver", "fqn": ["axelar", "silver", "not_null_silver__validators_RAW_METADATA"], "unique_id": "test.axelar.not_null_silver__validators_RAW_METADATA.fb6370f348", "package_name": "axelar", "root_path": "C:\\Users\\jessi\\git\\axelar-models", "path": "not_null_silver__validators_RAW_METADATA.sql", "original_file_path": "models\\silver\\silver__validators.yml", "name": "not_null_silver__validators_RAW_METADATA", "alias": "validators_RAW_METADATA", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["silver__validators"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target\\compiled\\axelar\\models\\silver\\silver__validators.yml\\not_null_silver__validators_RAW_METADATA.sql", "build_path": null, "deferred": false, "unrendered_config": {"store_failures": true}, "created_at": 1671054963.7137482, "compiled_sql": "\n    \n    \n\n\n\nselect *\nfrom AXELAR_DEV.silver.validators\nwhere RAW_METADATA is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "AXELAR_DEV.not_null_silver.validators_RAW_METADATA", "column_name": "RAW_METADATA", "file_key_name": "models.silver__validators"}, "test.axelar.not_null_silver__validators_UNIQUE_KEY.cf923edd07": {"raw_sql": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "UNIQUE_KEY", "model": "{{ get_where_subquery(ref('silver__validators')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.axelar.silver__validators"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": true, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "AXELAR_DEV", "schema": "not_null_silver", "fqn": ["axelar", "silver", "not_null_silver__validators_UNIQUE_KEY"], "unique_id": "test.axelar.not_null_silver__validators_UNIQUE_KEY.cf923edd07", "package_name": "axelar", "root_path": "C:\\Users\\jessi\\git\\axelar-models", "path": "not_null_silver__validators_UNIQUE_KEY.sql", "original_file_path": "models\\silver\\silver__validators.yml", "name": "not_null_silver__validators_UNIQUE_KEY", "alias": "validators_UNIQUE_KEY", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["silver__validators"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target\\compiled\\axelar\\models\\silver\\silver__validators.yml\\not_null_silver__validators_UNIQUE_KEY.sql", "build_path": null, "deferred": false, "unrendered_config": {"store_failures": true}, "created_at": 1671054963.7137482, "compiled_sql": "\n    \n    \n\n\n\nselect *\nfrom AXELAR_DEV.silver.validators\nwhere UNIQUE_KEY is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "AXELAR_DEV.not_null_silver.validators_UNIQUE_KEY", "column_name": "UNIQUE_KEY", "file_key_name": "models.silver__validators"}, "test.axelar.dbt_expectations_expect_column_values_to_be_in_type_list_silver__validators_UNIQUE_KEY__STRING__VARCHAR.0953163d95": {"raw_sql": "{{ dbt_expectations.test_expect_column_values_to_be_in_type_list(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_expectations_expect_column_761f6d984685b2a0d36107d182e599e2\") }}", "test_metadata": {"name": "expect_column_values_to_be_in_type_list", "kwargs": {"column_type_list": ["STRING", "VARCHAR"], "column_name": "UNIQUE_KEY", "model": "{{ get_where_subquery(ref('silver__validators')) }}"}, "namespace": "dbt_expectations"}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt_expectations.test_expect_column_values_to_be_in_type_list", "macro.dbt.get_where_subquery"], "nodes": ["model.axelar.silver__validators"]}, "config": {"enabled": true, "alias": "dbt_expectations_expect_column_761f6d984685b2a0d36107d182e599e2", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": true, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "AXELAR_DEV", "schema": "dbt_expectations_expect_column_values_to_be_in_type_list_silver", "fqn": ["axelar", "silver", "dbt_expectations_expect_column_values_to_be_in_type_list_silver__validators_UNIQUE_KEY__STRING__VARCHAR"], "unique_id": "test.axelar.dbt_expectations_expect_column_values_to_be_in_type_list_silver__validators_UNIQUE_KEY__STRING__VARCHAR.0953163d95", "package_name": "axelar", "root_path": "C:\\Users\\jessi\\git\\axelar-models", "path": "dbt_expectations_expect_column_761f6d984685b2a0d36107d182e599e2.sql", "original_file_path": "models\\silver\\silver__validators.yml", "name": "dbt_expectations_expect_column_values_to_be_in_type_list_silver__validators_UNIQUE_KEY__STRING__VARCHAR", "alias": "validators_UNIQUE_KEY", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["silver__validators"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target\\compiled\\axelar\\models\\silver\\silver__validators.yml\\dbt_expectations_expect_column_761f6d984685b2a0d36107d182e599e2.sql", "build_path": null, "deferred": false, "unrendered_config": {"store_failures": true, "alias": "dbt_expectations_expect_column_761f6d984685b2a0d36107d182e599e2"}, "created_at": 1671054963.7137482, "compiled_sql": "with relation_columns as (\n\n        \n        select\n            cast('ADDRESS' as TEXT) as relation_column,\n            cast('VARCHAR' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('BLOCKCHAIN' as TEXT) as relation_column,\n            cast('VARCHAR' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('CREATOR' as TEXT) as relation_column,\n            cast('VARCHAR' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('LABEL_TYPE' as TEXT) as relation_column,\n            cast('VARCHAR' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('LABEL_SUBTYPE' as TEXT) as relation_column,\n            cast('VARCHAR' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('LABEL' as TEXT) as relation_column,\n            cast('VARCHAR' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('PROJECT_NAME' as TEXT) as relation_column,\n            cast('VARCHAR' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('DELEGATOR_SHARES' as TEXT) as relation_column,\n            cast('NUMBER' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('JAILED' as TEXT) as relation_column,\n            cast('BOOLEAN' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('RATE' as TEXT) as relation_column,\n            cast('FLOAT' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('MAX_CHANGE_RATE' as TEXT) as relation_column,\n            cast('FLOAT' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('MAX_RATE' as TEXT) as relation_column,\n            cast('FLOAT' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('MIN_SELF_DELEGATION' as TEXT) as relation_column,\n            cast('NUMBER' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('RANK' as TEXT) as relation_column,\n            cast('NUMBER' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('RAW_METADATA' as TEXT) as relation_column,\n            cast('VARIANT' as TEXT) as relation_column_type\n        union all\n        \n        select\n            cast('UNIQUE_KEY' as TEXT) as relation_column,\n            cast('VARCHAR' as TEXT) as relation_column_type\n        \n        \n    ),\n    test_data as (\n\n        select\n            *\n        from\n            relation_columns\n        where\n            relation_column = 'UNIQUE_KEY'\n            and\n            relation_column_type not in ('STRING', 'VARCHAR')\n\n    )\n    select *\n    from test_data", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "AXELAR_DEV.dbt_expectations_expect_column_values_to_be_in_type_list_silver.validators_UNIQUE_KEY", "column_name": "UNIQUE_KEY", "file_key_name": "models.silver__validators"}, "test.axelar.dbt_utils_unique_combination_of_columns_silver__validators_UNIQUE_KEY.1a5d96d3a9": {"raw_sql": "{{ dbt_utils.test_unique_combination_of_columns(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_utils_unique_combination_o_0bc77c5c337c620ac846e28ff1f2efd4\") }}", "test_metadata": {"name": "unique_combination_of_columns", "kwargs": {"combination_of_columns": ["UNIQUE_KEY"], "model": "{{ get_where_subquery(ref('silver__validators')) }}"}, "namespace": "dbt_utils"}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt_utils.test_unique_combination_of_columns", "macro.dbt.get_where_subquery"], "nodes": ["model.axelar.silver__validators"]}, "config": {"enabled": true, "alias": "dbt_utils_unique_combination_o_0bc77c5c337c620ac846e28ff1f2efd4", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": true, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "AXELAR_DEV", "schema": "dbt_utils_unique_combination_of_columns_silver", "fqn": ["axelar", "silver", "dbt_utils_unique_combination_of_columns_silver__validators_UNIQUE_KEY"], "unique_id": "test.axelar.dbt_utils_unique_combination_of_columns_silver__validators_UNIQUE_KEY.1a5d96d3a9", "package_name": "axelar", "root_path": "C:\\Users\\jessi\\git\\axelar-models", "path": "dbt_utils_unique_combination_o_0bc77c5c337c620ac846e28ff1f2efd4.sql", "original_file_path": "models\\silver\\silver__validators.yml", "name": "dbt_utils_unique_combination_of_columns_silver__validators_UNIQUE_KEY", "alias": "validators_UNIQUE_KEY", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["silver__validators"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target\\compiled\\axelar\\models\\silver\\silver__validators.yml\\dbt_utils_unique_combination_o_0bc77c5c337c620ac846e28ff1f2efd4.sql", "build_path": null, "deferred": false, "unrendered_config": {"store_failures": true, "alias": "dbt_utils_unique_combination_o_0bc77c5c337c620ac846e28ff1f2efd4"}, "created_at": 1671054963.7137482, "compiled_sql": "\n\n\n\n\n\nwith validation_errors as (\n\n    select\n        UNIQUE_KEY\n    from AXELAR_DEV.silver.validators\n    group by UNIQUE_KEY\n    having count(*) > 1\n\n)\n\nselect *\nfrom validation_errors\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "AXELAR_DEV.dbt_utils_unique_combination_of_columns_silver.validators_UNIQUE_KEY", "column_name": null, "file_key_name": "models.silver__validators"}, "model.axelar.core__fact_validators": {"raw_sql": "{{ config(\r\n    materialized = 'view'\r\n) }}\r\n\r\nSELECT\r\n    address,\r\n    blockchain,\r\n    creator,\r\n    label_type,\r\n    label_subtype,\r\n    label,\r\n    project_name,\r\n    delegator_shares,\r\n    jailed,\r\n    rate,\r\n    max_change_rate,\r\n    max_rate,\r\n    min_self_delegation,\r\n    RANK,\r\n    raw_metadata,\r\n    unique_key\r\nFROM\r\n    {{ ref('silver__validators') }}", "compiled": true, "resource_type": "model", "depends_on": {"macros": [], "nodes": ["model.axelar.silver__validators", "model.axelar.silver__validators"]}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {}, "materialized": "view", "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "sync_all_columns", "grants": {}, "copy_grants": true, "post-hook": [], "pre-hook": []}, "database": "AXELAR_DEV", "schema": "core", "fqn": ["axelar", "gold", "core__fact_validators"], "unique_id": "model.axelar.core__fact_validators", "package_name": "axelar", "root_path": "C:\\Users\\jessi\\git\\axelar-models", "path": "gold\\core__fact_validators.sql", "original_file_path": "models\\gold\\core__fact_validators.sql", "name": "core__fact_validators", "alias": "fact_validators", "checksum": {"name": "sha256", "checksum": "2a665f57b6f2a5cb3548d82f1b75615fa21e73635206fd7ff5abf327f9c8df0b"}, "tags": [], "refs": [["silver__validators"]], "sources": [], "metrics": [], "description": "Information about all active and inactive set validators on Axelar.", "columns": {"ADDRESS": {"name": "ADDRESS", "description": "Address unique to an individual wallet, validator, or token.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "BLOCKCHAIN": {"name": "BLOCKCHAIN", "description": "In this table, always Axelar. Used to join to cross-chain tables.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "CREATOR": {"name": "CREATOR", "description": "Name of the label creator - for now, this will always be \"Flipside.\"", "meta": {}, "data_type": null, "quote": null, "tags": []}, "LABEL_TYPE": {"name": "LABEL_TYPE", "description": "A broad category that describes what a label is representing.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "LABEL_SUBTYPE": {"name": "LABEL_SUBTYPE", "description": "Adds more detail to the label type.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "LABEL": {"name": "LABEL", "description": "The label or name of the address.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "PROJECT_NAME": {"name": "PROJECT_NAME", "description": "The name of the project the label belongs to.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "DELEGATOR_SHARES": {"name": "DELEGATOR_SHARES", "description": "The number of tokens staked to the validator.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "JAILED": {"name": "JAILED", "description": "FALSE when a validator is not jailed, TRUE when a validator is jailed", "meta": {}, "data_type": null, "quote": null, "tags": []}, "RATE": {"name": "RATE", "description": "The current commission rate the validator is charging stakers.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "MAX_CHANGE_RATE": {"name": "MAX_CHANGE_RATE", "description": "The maximum rate at which a validator can change their commission per day.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "MAX_RATE": {"name": "MAX_RATE", "description": "The maximum commission rate that the validator can charge", "meta": {}, "data_type": null, "quote": null, "tags": []}, "MIN_SELF_DELEGATION": {"name": "MIN_SELF_DELEGATION", "description": "The minimum number of OSMO tokens that the operator must be staking with their own validator", "meta": {}, "data_type": null, "quote": null, "tags": []}, "RANK": {"name": "RANK", "description": "The rank of the validator in the validator set. Rank is determined by the number of OSMO tokens staked to the validator", "meta": {}, "data_type": null, "quote": null, "tags": []}, "RAW_METADATA": {"name": "RAW_METADATA", "description": "Additional details about the validator or token in json format.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "UNIQUE_KEY": {"name": "UNIQUE_KEY", "description": "The unique key of the table", "meta": {}, "data_type": null, "quote": null, "tags": []}}, "meta": {}, "docs": {"show": true}, "patch_path": "axelar://models\\gold\\core__fact_validators.yml", "compiled_path": "target\\compiled\\axelar\\models\\gold\\core__fact_validators.sql", "build_path": null, "deferred": false, "unrendered_config": {"copy_grants": true, "on_schema_change": "sync_all_columns", "materialized": "view"}, "created_at": 1671055410.125219, "compiled_sql": "\n\nSELECT\n    address,\n    blockchain,\n    creator,\n    label_type,\n    label_subtype,\n    label,\n    project_name,\n    delegator_shares,\n    jailed,\n    rate,\n    max_change_rate,\n    max_rate,\n    min_self_delegation,\n    RANK,\n    raw_metadata,\n    unique_key\nFROM\n    AXELAR_DEV.silver.validators", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "AXELAR_DEV.core.fact_validators"}, "test.axelar.dbt_expectations_expect_column_to_exist_core__fact_validators_ADDRESS.28ea232145": {"raw_sql": "{{ dbt_expectations.test_expect_column_to_exist(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_expectations_expect_column_8a1be4f75e90de8dd39493a8d5534e7f\") }}", "test_metadata": {"name": "expect_column_to_exist", "kwargs": {"column_name": "ADDRESS", "model": "{{ get_where_subquery(ref('core__fact_validators')) }}"}, "namespace": "dbt_expectations"}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt_expectations.test_expect_column_to_exist", "macro.dbt.get_where_subquery"], "nodes": ["model.axelar.core__fact_validators"]}, "config": {"enabled": true, "alias": "dbt_expectations_expect_column_8a1be4f75e90de8dd39493a8d5534e7f", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": true, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "AXELAR_DEV", "schema": "dbt_expectations_expect_column_to_exist_core", "fqn": ["axelar", "gold", "dbt_expectations_expect_column_to_exist_core__fact_validators_ADDRESS"], "unique_id": "test.axelar.dbt_expectations_expect_column_to_exist_core__fact_validators_ADDRESS.28ea232145", "package_name": "axelar", "root_path": "C:\\Users\\jessi\\git\\axelar-models", "path": "dbt_expectations_expect_column_8a1be4f75e90de8dd39493a8d5534e7f.sql", "original_file_path": "models\\gold\\core__fact_validators.yml", "name": "dbt_expectations_expect_column_to_exist_core__fact_validators_ADDRESS", "alias": "fact_validators_ADDRESS", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["core__fact_validators"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target\\compiled\\axelar\\models\\gold\\core__fact_validators.yml\\dbt_expectations_expect_column_8a1be4f75e90de8dd39493a8d5534e7f.sql", "build_path": null, "deferred": false, "unrendered_config": {"store_failures": true, "alias": "dbt_expectations_expect_column_8a1be4f75e90de8dd39493a8d5534e7f"}, "created_at": 1671055410.125219, "compiled_sql": "\n\n    with test_data as (\n\n        select\n            cast('ADDRESS' as TEXT) as column_name,\n            0 as matching_column_index,\n            True as column_index_matches\n\n    )\n    select *\n    from test_data\n    where\n        not(matching_column_index >= 0 and column_index_matches)", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "AXELAR_DEV.dbt_expectations_expect_column_to_exist_core.fact_validators_ADDRESS", "column_name": "ADDRESS", "file_key_name": "models.core__fact_validators"}, "test.axelar.dbt_expectations_expect_column_to_exist_core__fact_validators_BLOCKCHAIN.8c212981c8": {"raw_sql": "{{ dbt_expectations.test_expect_column_to_exist(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_expectations_expect_column_c2c315959a55f46a6b717f8e879a2a44\") }}", "test_metadata": {"name": "expect_column_to_exist", "kwargs": {"column_name": "BLOCKCHAIN", "model": "{{ get_where_subquery(ref('core__fact_validators')) }}"}, "namespace": "dbt_expectations"}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt_expectations.test_expect_column_to_exist", "macro.dbt.get_where_subquery"], "nodes": ["model.axelar.core__fact_validators"]}, "config": {"enabled": true, "alias": "dbt_expectations_expect_column_c2c315959a55f46a6b717f8e879a2a44", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": true, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "AXELAR_DEV", "schema": "dbt_expectations_expect_column_to_exist_core", "fqn": ["axelar", "gold", "dbt_expectations_expect_column_to_exist_core__fact_validators_BLOCKCHAIN"], "unique_id": "test.axelar.dbt_expectations_expect_column_to_exist_core__fact_validators_BLOCKCHAIN.8c212981c8", "package_name": "axelar", "root_path": "C:\\Users\\jessi\\git\\axelar-models", "path": "dbt_expectations_expect_column_c2c315959a55f46a6b717f8e879a2a44.sql", "original_file_path": "models\\gold\\core__fact_validators.yml", "name": "dbt_expectations_expect_column_to_exist_core__fact_validators_BLOCKCHAIN", "alias": "fact_validators_BLOCKCHAIN", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["core__fact_validators"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target\\compiled\\axelar\\models\\gold\\core__fact_validators.yml\\dbt_expectations_expect_column_c2c315959a55f46a6b717f8e879a2a44.sql", "build_path": null, "deferred": false, "unrendered_config": {"store_failures": true, "alias": "dbt_expectations_expect_column_c2c315959a55f46a6b717f8e879a2a44"}, "created_at": 1671055410.14075, "compiled_sql": "\n\n    with test_data as (\n\n        select\n            cast('BLOCKCHAIN' as TEXT) as column_name,\n            1 as matching_column_index,\n            True as column_index_matches\n\n    )\n    select *\n    from test_data\n    where\n        not(matching_column_index >= 0 and column_index_matches)", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "AXELAR_DEV.dbt_expectations_expect_column_to_exist_core.fact_validators_BLOCKCHAIN", "column_name": "BLOCKCHAIN", "file_key_name": "models.core__fact_validators"}, "test.axelar.dbt_expectations_expect_column_to_exist_core__fact_validators_CREATOR.937fa2f10c": {"raw_sql": "{{ dbt_expectations.test_expect_column_to_exist(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_expectations_expect_column_cdf0f53054ecd10198fb431ab9dbe5c5\") }}", "test_metadata": {"name": "expect_column_to_exist", "kwargs": {"column_name": "CREATOR", "model": "{{ get_where_subquery(ref('core__fact_validators')) }}"}, "namespace": "dbt_expectations"}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt_expectations.test_expect_column_to_exist", "macro.dbt.get_where_subquery"], "nodes": ["model.axelar.core__fact_validators"]}, "config": {"enabled": true, "alias": "dbt_expectations_expect_column_cdf0f53054ecd10198fb431ab9dbe5c5", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": true, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "AXELAR_DEV", "schema": "dbt_expectations_expect_column_to_exist_core", "fqn": ["axelar", "gold", "dbt_expectations_expect_column_to_exist_core__fact_validators_CREATOR"], "unique_id": "test.axelar.dbt_expectations_expect_column_to_exist_core__fact_validators_CREATOR.937fa2f10c", "package_name": "axelar", "root_path": "C:\\Users\\jessi\\git\\axelar-models", "path": "dbt_expectations_expect_column_cdf0f53054ecd10198fb431ab9dbe5c5.sql", "original_file_path": "models\\gold\\core__fact_validators.yml", "name": "dbt_expectations_expect_column_to_exist_core__fact_validators_CREATOR", "alias": "fact_validators_CREATOR", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["core__fact_validators"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target\\compiled\\axelar\\models\\gold\\core__fact_validators.yml\\dbt_expectations_expect_column_cdf0f53054ecd10198fb431ab9dbe5c5.sql", "build_path": null, "deferred": false, "unrendered_config": {"store_failures": true, "alias": "dbt_expectations_expect_column_cdf0f53054ecd10198fb431ab9dbe5c5"}, "created_at": 1671055410.14075, "compiled_sql": "\n\n    with test_data as (\n\n        select\n            cast('CREATOR' as TEXT) as column_name,\n            2 as matching_column_index,\n            True as column_index_matches\n\n    )\n    select *\n    from test_data\n    where\n        not(matching_column_index >= 0 and column_index_matches)", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "AXELAR_DEV.dbt_expectations_expect_column_to_exist_core.fact_validators_CREATOR", "column_name": "CREATOR", "file_key_name": "models.core__fact_validators"}, "test.axelar.dbt_expectations_expect_column_to_exist_core__fact_validators_LABEL_TYPE.d259f1a775": {"raw_sql": "{{ dbt_expectations.test_expect_column_to_exist(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_expectations_expect_column_e060135375baea6d6cdd8adf15d3bbcb\") }}", "test_metadata": {"name": "expect_column_to_exist", "kwargs": {"column_name": "LABEL_TYPE", "model": "{{ get_where_subquery(ref('core__fact_validators')) }}"}, "namespace": "dbt_expectations"}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt_expectations.test_expect_column_to_exist", "macro.dbt.get_where_subquery"], "nodes": ["model.axelar.core__fact_validators"]}, "config": {"enabled": true, "alias": "dbt_expectations_expect_column_e060135375baea6d6cdd8adf15d3bbcb", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": true, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "AXELAR_DEV", "schema": "dbt_expectations_expect_column_to_exist_core", "fqn": ["axelar", "gold", "dbt_expectations_expect_column_to_exist_core__fact_validators_LABEL_TYPE"], "unique_id": "test.axelar.dbt_expectations_expect_column_to_exist_core__fact_validators_LABEL_TYPE.d259f1a775", "package_name": "axelar", "root_path": "C:\\Users\\jessi\\git\\axelar-models", "path": "dbt_expectations_expect_column_e060135375baea6d6cdd8adf15d3bbcb.sql", "original_file_path": "models\\gold\\core__fact_validators.yml", "name": "dbt_expectations_expect_column_to_exist_core__fact_validators_LABEL_TYPE", "alias": "fact_validators_LABEL_TYPE", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["core__fact_validators"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target\\compiled\\axelar\\models\\gold\\core__fact_validators.yml\\dbt_expectations_expect_column_e060135375baea6d6cdd8adf15d3bbcb.sql", "build_path": null, "deferred": false, "unrendered_config": {"store_failures": true, "alias": "dbt_expectations_expect_column_e060135375baea6d6cdd8adf15d3bbcb"}, "created_at": 1671055410.14075, "compiled_sql": "\n\n    with test_data as (\n\n        select\n            cast('LABEL_TYPE' as TEXT) as column_name,\n            3 as matching_column_index,\n            True as column_index_matches\n\n    )\n    select *\n    from test_data\n    where\n        not(matching_column_index >= 0 and column_index_matches)", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "AXELAR_DEV.dbt_expectations_expect_column_to_exist_core.fact_validators_LABEL_TYPE", "column_name": "LABEL_TYPE", "file_key_name": "models.core__fact_validators"}, "test.axelar.dbt_expectations_expect_column_to_exist_core__fact_validators_LABEL_SUBTYPE.545516ad48": {"raw_sql": "{{ dbt_expectations.test_expect_column_to_exist(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_expectations_expect_column_c6978560b9852b1cf28da68123aaad06\") }}", "test_metadata": {"name": "expect_column_to_exist", "kwargs": {"column_name": "LABEL_SUBTYPE", "model": "{{ get_where_subquery(ref('core__fact_validators')) }}"}, "namespace": "dbt_expectations"}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt_expectations.test_expect_column_to_exist", "macro.dbt.get_where_subquery"], "nodes": ["model.axelar.core__fact_validators"]}, "config": {"enabled": true, "alias": "dbt_expectations_expect_column_c6978560b9852b1cf28da68123aaad06", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": true, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "AXELAR_DEV", "schema": "dbt_expectations_expect_column_to_exist_core", "fqn": ["axelar", "gold", "dbt_expectations_expect_column_to_exist_core__fact_validators_LABEL_SUBTYPE"], "unique_id": "test.axelar.dbt_expectations_expect_column_to_exist_core__fact_validators_LABEL_SUBTYPE.545516ad48", "package_name": "axelar", "root_path": "C:\\Users\\jessi\\git\\axelar-models", "path": "dbt_expectations_expect_column_c6978560b9852b1cf28da68123aaad06.sql", "original_file_path": "models\\gold\\core__fact_validators.yml", "name": "dbt_expectations_expect_column_to_exist_core__fact_validators_LABEL_SUBTYPE", "alias": "fact_validators_LABEL_SUBTYPE", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["core__fact_validators"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target\\compiled\\axelar\\models\\gold\\core__fact_validators.yml\\dbt_expectations_expect_column_c6978560b9852b1cf28da68123aaad06.sql", "build_path": null, "deferred": false, "unrendered_config": {"store_failures": true, "alias": "dbt_expectations_expect_column_c6978560b9852b1cf28da68123aaad06"}, "created_at": 1671055410.1563761, "compiled_sql": "\n\n    with test_data as (\n\n        select\n            cast('LABEL_SUBTYPE' as TEXT) as column_name,\n            4 as matching_column_index,\n            True as column_index_matches\n\n    )\n    select *\n    from test_data\n    where\n        not(matching_column_index >= 0 and column_index_matches)", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "AXELAR_DEV.dbt_expectations_expect_column_to_exist_core.fact_validators_LABEL_SUBTYPE", "column_name": "LABEL_SUBTYPE", "file_key_name": "models.core__fact_validators"}, "test.axelar.dbt_expectations_expect_column_to_exist_core__fact_validators_LABEL.58ea9d5501": {"raw_sql": "{{ dbt_expectations.test_expect_column_to_exist(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_expectations_expect_column_fea362018a0ecfc9abacbba867fa5c41\") }}", "test_metadata": {"name": "expect_column_to_exist", "kwargs": {"column_name": "LABEL", "model": "{{ get_where_subquery(ref('core__fact_validators')) }}"}, "namespace": "dbt_expectations"}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt_expectations.test_expect_column_to_exist", "macro.dbt.get_where_subquery"], "nodes": ["model.axelar.core__fact_validators"]}, "config": {"enabled": true, "alias": "dbt_expectations_expect_column_fea362018a0ecfc9abacbba867fa5c41", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": true, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "AXELAR_DEV", "schema": "dbt_expectations_expect_column_to_exist_core", "fqn": ["axelar", "gold", "dbt_expectations_expect_column_to_exist_core__fact_validators_LABEL"], "unique_id": "test.axelar.dbt_expectations_expect_column_to_exist_core__fact_validators_LABEL.58ea9d5501", "package_name": "axelar", "root_path": "C:\\Users\\jessi\\git\\axelar-models", "path": "dbt_expectations_expect_column_fea362018a0ecfc9abacbba867fa5c41.sql", "original_file_path": "models\\gold\\core__fact_validators.yml", "name": "dbt_expectations_expect_column_to_exist_core__fact_validators_LABEL", "alias": "fact_validators_LABEL", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["core__fact_validators"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target\\compiled\\axelar\\models\\gold\\core__fact_validators.yml\\dbt_expectations_expect_column_fea362018a0ecfc9abacbba867fa5c41.sql", "build_path": null, "deferred": false, "unrendered_config": {"store_failures": true, "alias": "dbt_expectations_expect_column_fea362018a0ecfc9abacbba867fa5c41"}, "created_at": 1671055410.1563761, "compiled_sql": "\n\n    with test_data as (\n\n        select\n            cast('LABEL' as TEXT) as column_name,\n            5 as matching_column_index,\n            True as column_index_matches\n\n    )\n    select *\n    from test_data\n    where\n        not(matching_column_index >= 0 and column_index_matches)", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "AXELAR_DEV.dbt_expectations_expect_column_to_exist_core.fact_validators_LABEL", "column_name": "LABEL", "file_key_name": "models.core__fact_validators"}, "test.axelar.dbt_expectations_expect_column_to_exist_core__fact_validators_PROJECT_NAME.580ffece96": {"raw_sql": "{{ dbt_expectations.test_expect_column_to_exist(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_expectations_expect_column_a29a9479c1fc88a4e8e8b876324d1204\") }}", "test_metadata": {"name": "expect_column_to_exist", "kwargs": {"column_name": "PROJECT_NAME", "model": "{{ get_where_subquery(ref('core__fact_validators')) }}"}, "namespace": "dbt_expectations"}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt_expectations.test_expect_column_to_exist", "macro.dbt.get_where_subquery"], "nodes": ["model.axelar.core__fact_validators"]}, "config": {"enabled": true, "alias": "dbt_expectations_expect_column_a29a9479c1fc88a4e8e8b876324d1204", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": true, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "AXELAR_DEV", "schema": "dbt_expectations_expect_column_to_exist_core", "fqn": ["axelar", "gold", "dbt_expectations_expect_column_to_exist_core__fact_validators_PROJECT_NAME"], "unique_id": "test.axelar.dbt_expectations_expect_column_to_exist_core__fact_validators_PROJECT_NAME.580ffece96", "package_name": "axelar", "root_path": "C:\\Users\\jessi\\git\\axelar-models", "path": "dbt_expectations_expect_column_a29a9479c1fc88a4e8e8b876324d1204.sql", "original_file_path": "models\\gold\\core__fact_validators.yml", "name": "dbt_expectations_expect_column_to_exist_core__fact_validators_PROJECT_NAME", "alias": "fact_validators_PROJECT_NAME", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["core__fact_validators"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target\\compiled\\axelar\\models\\gold\\core__fact_validators.yml\\dbt_expectations_expect_column_a29a9479c1fc88a4e8e8b876324d1204.sql", "build_path": null, "deferred": false, "unrendered_config": {"store_failures": true, "alias": "dbt_expectations_expect_column_a29a9479c1fc88a4e8e8b876324d1204"}, "created_at": 1671055410.1563761, "compiled_sql": "\n\n    with test_data as (\n\n        select\n            cast('PROJECT_NAME' as TEXT) as column_name,\n            6 as matching_column_index,\n            True as column_index_matches\n\n    )\n    select *\n    from test_data\n    where\n        not(matching_column_index >= 0 and column_index_matches)", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "AXELAR_DEV.dbt_expectations_expect_column_to_exist_core.fact_validators_PROJECT_NAME", "column_name": "PROJECT_NAME", "file_key_name": "models.core__fact_validators"}, "test.axelar.dbt_expectations_expect_column_to_exist_core__fact_validators_DELEGATOR_SHARES.24690650ef": {"raw_sql": "{{ dbt_expectations.test_expect_column_to_exist(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_expectations_expect_column_b19ee3167f9fa427c8b28fa377fe689d\") }}", "test_metadata": {"name": "expect_column_to_exist", "kwargs": {"column_name": "DELEGATOR_SHARES", "model": "{{ get_where_subquery(ref('core__fact_validators')) }}"}, "namespace": "dbt_expectations"}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt_expectations.test_expect_column_to_exist", "macro.dbt.get_where_subquery"], "nodes": ["model.axelar.core__fact_validators"]}, "config": {"enabled": true, "alias": "dbt_expectations_expect_column_b19ee3167f9fa427c8b28fa377fe689d", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": true, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "AXELAR_DEV", "schema": "dbt_expectations_expect_column_to_exist_core", "fqn": ["axelar", "gold", "dbt_expectations_expect_column_to_exist_core__fact_validators_DELEGATOR_SHARES"], "unique_id": "test.axelar.dbt_expectations_expect_column_to_exist_core__fact_validators_DELEGATOR_SHARES.24690650ef", "package_name": "axelar", "root_path": "C:\\Users\\jessi\\git\\axelar-models", "path": "dbt_expectations_expect_column_b19ee3167f9fa427c8b28fa377fe689d.sql", "original_file_path": "models\\gold\\core__fact_validators.yml", "name": "dbt_expectations_expect_column_to_exist_core__fact_validators_DELEGATOR_SHARES", "alias": "fact_validators_DELEGATOR_SHARES", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["core__fact_validators"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target\\compiled\\axelar\\models\\gold\\core__fact_validators.yml\\dbt_expectations_expect_column_b19ee3167f9fa427c8b28fa377fe689d.sql", "build_path": null, "deferred": false, "unrendered_config": {"store_failures": true, "alias": "dbt_expectations_expect_column_b19ee3167f9fa427c8b28fa377fe689d"}, "created_at": 1671055410.1563761, "compiled_sql": "\n\n    with test_data as (\n\n        select\n            cast('DELEGATOR_SHARES' as TEXT) as column_name,\n            7 as matching_column_index,\n            True as column_index_matches\n\n    )\n    select *\n    from test_data\n    where\n        not(matching_column_index >= 0 and column_index_matches)", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "AXELAR_DEV.dbt_expectations_expect_column_to_exist_core.fact_validators_DELEGATOR_SHARES", "column_name": "DELEGATOR_SHARES", "file_key_name": "models.core__fact_validators"}, "test.axelar.dbt_expectations_expect_column_to_exist_core__fact_validators_JAILED.a889f6621b": {"raw_sql": "{{ dbt_expectations.test_expect_column_to_exist(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_expectations_expect_column_ad4f59766faee7b95cbe65e1db5d76aa\") }}", "test_metadata": {"name": "expect_column_to_exist", "kwargs": {"column_name": "JAILED", "model": "{{ get_where_subquery(ref('core__fact_validators')) }}"}, "namespace": "dbt_expectations"}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt_expectations.test_expect_column_to_exist", "macro.dbt.get_where_subquery"], "nodes": ["model.axelar.core__fact_validators"]}, "config": {"enabled": true, "alias": "dbt_expectations_expect_column_ad4f59766faee7b95cbe65e1db5d76aa", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": true, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "AXELAR_DEV", "schema": "dbt_expectations_expect_column_to_exist_core", "fqn": ["axelar", "gold", "dbt_expectations_expect_column_to_exist_core__fact_validators_JAILED"], "unique_id": "test.axelar.dbt_expectations_expect_column_to_exist_core__fact_validators_JAILED.a889f6621b", "package_name": "axelar", "root_path": "C:\\Users\\jessi\\git\\axelar-models", "path": "dbt_expectations_expect_column_ad4f59766faee7b95cbe65e1db5d76aa.sql", "original_file_path": "models\\gold\\core__fact_validators.yml", "name": "dbt_expectations_expect_column_to_exist_core__fact_validators_JAILED", "alias": "fact_validators_JAILED", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["core__fact_validators"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target\\compiled\\axelar\\models\\gold\\core__fact_validators.yml\\dbt_expectations_expect_column_ad4f59766faee7b95cbe65e1db5d76aa.sql", "build_path": null, "deferred": false, "unrendered_config": {"store_failures": true, "alias": "dbt_expectations_expect_column_ad4f59766faee7b95cbe65e1db5d76aa"}, "created_at": 1671055410.1563761, "compiled_sql": "\n\n    with test_data as (\n\n        select\n            cast('JAILED' as TEXT) as column_name,\n            8 as matching_column_index,\n            True as column_index_matches\n\n    )\n    select *\n    from test_data\n    where\n        not(matching_column_index >= 0 and column_index_matches)", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "AXELAR_DEV.dbt_expectations_expect_column_to_exist_core.fact_validators_JAILED", "column_name": "JAILED", "file_key_name": "models.core__fact_validators"}, "test.axelar.dbt_expectations_expect_column_to_exist_core__fact_validators_RATE.dbf93b6f73": {"raw_sql": "{{ dbt_expectations.test_expect_column_to_exist(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_expectations_expect_column_c610d9d0e5401e84669b8f74f0054f8d\") }}", "test_metadata": {"name": "expect_column_to_exist", "kwargs": {"column_name": "RATE", "model": "{{ get_where_subquery(ref('core__fact_validators')) }}"}, "namespace": "dbt_expectations"}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt_expectations.test_expect_column_to_exist", "macro.dbt.get_where_subquery"], "nodes": ["model.axelar.core__fact_validators"]}, "config": {"enabled": true, "alias": "dbt_expectations_expect_column_c610d9d0e5401e84669b8f74f0054f8d", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": true, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "AXELAR_DEV", "schema": "dbt_expectations_expect_column_to_exist_core", "fqn": ["axelar", "gold", "dbt_expectations_expect_column_to_exist_core__fact_validators_RATE"], "unique_id": "test.axelar.dbt_expectations_expect_column_to_exist_core__fact_validators_RATE.dbf93b6f73", "package_name": "axelar", "root_path": "C:\\Users\\jessi\\git\\axelar-models", "path": "dbt_expectations_expect_column_c610d9d0e5401e84669b8f74f0054f8d.sql", "original_file_path": "models\\gold\\core__fact_validators.yml", "name": "dbt_expectations_expect_column_to_exist_core__fact_validators_RATE", "alias": "fact_validators_RATE", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["core__fact_validators"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target\\compiled\\axelar\\models\\gold\\core__fact_validators.yml\\dbt_expectations_expect_column_c610d9d0e5401e84669b8f74f0054f8d.sql", "build_path": null, "deferred": false, "unrendered_config": {"store_failures": true, "alias": "dbt_expectations_expect_column_c610d9d0e5401e84669b8f74f0054f8d"}, "created_at": 1671055410.1563761, "compiled_sql": "\n\n    with test_data as (\n\n        select\n            cast('RATE' as TEXT) as column_name,\n            9 as matching_column_index,\n            True as column_index_matches\n\n    )\n    select *\n    from test_data\n    where\n        not(matching_column_index >= 0 and column_index_matches)", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "AXELAR_DEV.dbt_expectations_expect_column_to_exist_core.fact_validators_RATE", "column_name": "RATE", "file_key_name": "models.core__fact_validators"}, "test.axelar.dbt_expectations_expect_column_to_exist_core__fact_validators_MAX_CHANGE_RATE.2b5ddeda55": {"raw_sql": "{{ dbt_expectations.test_expect_column_to_exist(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_expectations_expect_column_1cd0217bbb06594deb48a003fa673d4d\") }}", "test_metadata": {"name": "expect_column_to_exist", "kwargs": {"column_name": "MAX_CHANGE_RATE", "model": "{{ get_where_subquery(ref('core__fact_validators')) }}"}, "namespace": "dbt_expectations"}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt_expectations.test_expect_column_to_exist", "macro.dbt.get_where_subquery"], "nodes": ["model.axelar.core__fact_validators"]}, "config": {"enabled": true, "alias": "dbt_expectations_expect_column_1cd0217bbb06594deb48a003fa673d4d", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": true, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "AXELAR_DEV", "schema": "dbt_expectations_expect_column_to_exist_core", "fqn": ["axelar", "gold", "dbt_expectations_expect_column_to_exist_core__fact_validators_MAX_CHANGE_RATE"], "unique_id": "test.axelar.dbt_expectations_expect_column_to_exist_core__fact_validators_MAX_CHANGE_RATE.2b5ddeda55", "package_name": "axelar", "root_path": "C:\\Users\\jessi\\git\\axelar-models", "path": "dbt_expectations_expect_column_1cd0217bbb06594deb48a003fa673d4d.sql", "original_file_path": "models\\gold\\core__fact_validators.yml", "name": "dbt_expectations_expect_column_to_exist_core__fact_validators_MAX_CHANGE_RATE", "alias": "fact_validators_MAX_CHANGE_RATE", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["core__fact_validators"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target\\compiled\\axelar\\models\\gold\\core__fact_validators.yml\\dbt_expectations_expect_column_1cd0217bbb06594deb48a003fa673d4d.sql", "build_path": null, "deferred": false, "unrendered_config": {"store_failures": true, "alias": "dbt_expectations_expect_column_1cd0217bbb06594deb48a003fa673d4d"}, "created_at": 1671055410.1739037, "compiled_sql": "\n\n    with test_data as (\n\n        select\n            cast('MAX_CHANGE_RATE' as TEXT) as column_name,\n            10 as matching_column_index,\n            True as column_index_matches\n\n    )\n    select *\n    from test_data\n    where\n        not(matching_column_index >= 0 and column_index_matches)", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "AXELAR_DEV.dbt_expectations_expect_column_to_exist_core.fact_validators_MAX_CHANGE_RATE", "column_name": "MAX_CHANGE_RATE", "file_key_name": "models.core__fact_validators"}, "test.axelar.dbt_expectations_expect_column_to_exist_core__fact_validators_MAX_RATE.e02041b45d": {"raw_sql": "{{ dbt_expectations.test_expect_column_to_exist(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_expectations_expect_column_d244a3c81accc5b1d5358c2a8f2a1fe2\") }}", "test_metadata": {"name": "expect_column_to_exist", "kwargs": {"column_name": "MAX_RATE", "model": "{{ get_where_subquery(ref('core__fact_validators')) }}"}, "namespace": "dbt_expectations"}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt_expectations.test_expect_column_to_exist", "macro.dbt.get_where_subquery"], "nodes": ["model.axelar.core__fact_validators"]}, "config": {"enabled": true, "alias": "dbt_expectations_expect_column_d244a3c81accc5b1d5358c2a8f2a1fe2", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": true, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "AXELAR_DEV", "schema": "dbt_expectations_expect_column_to_exist_core", "fqn": ["axelar", "gold", "dbt_expectations_expect_column_to_exist_core__fact_validators_MAX_RATE"], "unique_id": "test.axelar.dbt_expectations_expect_column_to_exist_core__fact_validators_MAX_RATE.e02041b45d", "package_name": "axelar", "root_path": "C:\\Users\\jessi\\git\\axelar-models", "path": "dbt_expectations_expect_column_d244a3c81accc5b1d5358c2a8f2a1fe2.sql", "original_file_path": "models\\gold\\core__fact_validators.yml", "name": "dbt_expectations_expect_column_to_exist_core__fact_validators_MAX_RATE", "alias": "fact_validators_MAX_RATE", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["core__fact_validators"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target\\compiled\\axelar\\models\\gold\\core__fact_validators.yml\\dbt_expectations_expect_column_d244a3c81accc5b1d5358c2a8f2a1fe2.sql", "build_path": null, "deferred": false, "unrendered_config": {"store_failures": true, "alias": "dbt_expectations_expect_column_d244a3c81accc5b1d5358c2a8f2a1fe2"}, "created_at": 1671055410.17507, "compiled_sql": "\n\n    with test_data as (\n\n        select\n            cast('MAX_RATE' as TEXT) as column_name,\n            11 as matching_column_index,\n            True as column_index_matches\n\n    )\n    select *\n    from test_data\n    where\n        not(matching_column_index >= 0 and column_index_matches)", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "AXELAR_DEV.dbt_expectations_expect_column_to_exist_core.fact_validators_MAX_RATE", "column_name": "MAX_RATE", "file_key_name": "models.core__fact_validators"}, "test.axelar.dbt_expectations_expect_column_to_exist_core__fact_validators_MIN_SELF_DELEGATION.a456038134": {"raw_sql": "{{ dbt_expectations.test_expect_column_to_exist(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_expectations_expect_column_b371258fb9a636bb15343e2ddd9a05b7\") }}", "test_metadata": {"name": "expect_column_to_exist", "kwargs": {"column_name": "MIN_SELF_DELEGATION", "model": "{{ get_where_subquery(ref('core__fact_validators')) }}"}, "namespace": "dbt_expectations"}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt_expectations.test_expect_column_to_exist", "macro.dbt.get_where_subquery"], "nodes": ["model.axelar.core__fact_validators"]}, "config": {"enabled": true, "alias": "dbt_expectations_expect_column_b371258fb9a636bb15343e2ddd9a05b7", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": true, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "AXELAR_DEV", "schema": "dbt_expectations_expect_column_to_exist_core", "fqn": ["axelar", "gold", "dbt_expectations_expect_column_to_exist_core__fact_validators_MIN_SELF_DELEGATION"], "unique_id": "test.axelar.dbt_expectations_expect_column_to_exist_core__fact_validators_MIN_SELF_DELEGATION.a456038134", "package_name": "axelar", "root_path": "C:\\Users\\jessi\\git\\axelar-models", "path": "dbt_expectations_expect_column_b371258fb9a636bb15343e2ddd9a05b7.sql", "original_file_path": "models\\gold\\core__fact_validators.yml", "name": "dbt_expectations_expect_column_to_exist_core__fact_validators_MIN_SELF_DELEGATION", "alias": "fact_validators_MIN_SELF_DELEGATION", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["core__fact_validators"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target\\compiled\\axelar\\models\\gold\\core__fact_validators.yml\\dbt_expectations_expect_column_b371258fb9a636bb15343e2ddd9a05b7.sql", "build_path": null, "deferred": false, "unrendered_config": {"store_failures": true, "alias": "dbt_expectations_expect_column_b371258fb9a636bb15343e2ddd9a05b7"}, "created_at": 1671055410.17507, "compiled_sql": "\n\n    with test_data as (\n\n        select\n            cast('MIN_SELF_DELEGATION' as TEXT) as column_name,\n            12 as matching_column_index,\n            True as column_index_matches\n\n    )\n    select *\n    from test_data\n    where\n        not(matching_column_index >= 0 and column_index_matches)", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "AXELAR_DEV.dbt_expectations_expect_column_to_exist_core.fact_validators_MIN_SELF_DELEGATION", "column_name": "MIN_SELF_DELEGATION", "file_key_name": "models.core__fact_validators"}, "test.axelar.dbt_expectations_expect_column_to_exist_core__fact_validators_RANK.8ccac4f170": {"raw_sql": "{{ dbt_expectations.test_expect_column_to_exist(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_expectations_expect_column_3d9baa6c305a2431d533a636a514c862\") }}", "test_metadata": {"name": "expect_column_to_exist", "kwargs": {"column_name": "RANK", "model": "{{ get_where_subquery(ref('core__fact_validators')) }}"}, "namespace": "dbt_expectations"}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt_expectations.test_expect_column_to_exist", "macro.dbt.get_where_subquery"], "nodes": ["model.axelar.core__fact_validators"]}, "config": {"enabled": true, "alias": "dbt_expectations_expect_column_3d9baa6c305a2431d533a636a514c862", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": true, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "AXELAR_DEV", "schema": "dbt_expectations_expect_column_to_exist_core", "fqn": ["axelar", "gold", "dbt_expectations_expect_column_to_exist_core__fact_validators_RANK"], "unique_id": "test.axelar.dbt_expectations_expect_column_to_exist_core__fact_validators_RANK.8ccac4f170", "package_name": "axelar", "root_path": "C:\\Users\\jessi\\git\\axelar-models", "path": "dbt_expectations_expect_column_3d9baa6c305a2431d533a636a514c862.sql", "original_file_path": "models\\gold\\core__fact_validators.yml", "name": "dbt_expectations_expect_column_to_exist_core__fact_validators_RANK", "alias": "fact_validators_RANK", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["core__fact_validators"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target\\compiled\\axelar\\models\\gold\\core__fact_validators.yml\\dbt_expectations_expect_column_3d9baa6c305a2431d533a636a514c862.sql", "build_path": null, "deferred": false, "unrendered_config": {"store_failures": true, "alias": "dbt_expectations_expect_column_3d9baa6c305a2431d533a636a514c862"}, "created_at": 1671055410.1816611, "compiled_sql": "\n\n    with test_data as (\n\n        select\n            cast('RANK' as TEXT) as column_name,\n            13 as matching_column_index,\n            True as column_index_matches\n\n    )\n    select *\n    from test_data\n    where\n        not(matching_column_index >= 0 and column_index_matches)", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "AXELAR_DEV.dbt_expectations_expect_column_to_exist_core.fact_validators_RANK", "column_name": "RANK", "file_key_name": "models.core__fact_validators"}, "test.axelar.dbt_expectations_expect_column_to_exist_core__fact_validators_RAW_METADATA.935f630216": {"raw_sql": "{{ dbt_expectations.test_expect_column_to_exist(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_expectations_expect_column_4eddca1569da641be625ba84989a7468\") }}", "test_metadata": {"name": "expect_column_to_exist", "kwargs": {"column_name": "RAW_METADATA", "model": "{{ get_where_subquery(ref('core__fact_validators')) }}"}, "namespace": "dbt_expectations"}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt_expectations.test_expect_column_to_exist", "macro.dbt.get_where_subquery"], "nodes": ["model.axelar.core__fact_validators"]}, "config": {"enabled": true, "alias": "dbt_expectations_expect_column_4eddca1569da641be625ba84989a7468", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": true, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "AXELAR_DEV", "schema": "dbt_expectations_expect_column_to_exist_core", "fqn": ["axelar", "gold", "dbt_expectations_expect_column_to_exist_core__fact_validators_RAW_METADATA"], "unique_id": "test.axelar.dbt_expectations_expect_column_to_exist_core__fact_validators_RAW_METADATA.935f630216", "package_name": "axelar", "root_path": "C:\\Users\\jessi\\git\\axelar-models", "path": "dbt_expectations_expect_column_4eddca1569da641be625ba84989a7468.sql", "original_file_path": "models\\gold\\core__fact_validators.yml", "name": "dbt_expectations_expect_column_to_exist_core__fact_validators_RAW_METADATA", "alias": "fact_validators_RAW_METADATA", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["core__fact_validators"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target\\compiled\\axelar\\models\\gold\\core__fact_validators.yml\\dbt_expectations_expect_column_4eddca1569da641be625ba84989a7468.sql", "build_path": null, "deferred": false, "unrendered_config": {"store_failures": true, "alias": "dbt_expectations_expect_column_4eddca1569da641be625ba84989a7468"}, "created_at": 1671055410.1816611, "compiled_sql": "\n\n    with test_data as (\n\n        select\n            cast('RAW_METADATA' as TEXT) as column_name,\n            14 as matching_column_index,\n            True as column_index_matches\n\n    )\n    select *\n    from test_data\n    where\n        not(matching_column_index >= 0 and column_index_matches)", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "AXELAR_DEV.dbt_expectations_expect_column_to_exist_core.fact_validators_RAW_METADATA", "column_name": "RAW_METADATA", "file_key_name": "models.core__fact_validators"}, "test.axelar.dbt_expectations_expect_column_to_exist_core__fact_validators_UNIQUE_KEY.f3f4e0c31e": {"raw_sql": "{{ dbt_expectations.test_expect_column_to_exist(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_expectations_expect_column_df9b56c4997907c016900ed52c3fc334\") }}", "test_metadata": {"name": "expect_column_to_exist", "kwargs": {"column_name": "UNIQUE_KEY", "model": "{{ get_where_subquery(ref('core__fact_validators')) }}"}, "namespace": "dbt_expectations"}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt_expectations.test_expect_column_to_exist", "macro.dbt.get_where_subquery"], "nodes": ["model.axelar.core__fact_validators"]}, "config": {"enabled": true, "alias": "dbt_expectations_expect_column_df9b56c4997907c016900ed52c3fc334", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": true, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "AXELAR_DEV", "schema": "dbt_expectations_expect_column_to_exist_core", "fqn": ["axelar", "gold", "dbt_expectations_expect_column_to_exist_core__fact_validators_UNIQUE_KEY"], "unique_id": "test.axelar.dbt_expectations_expect_column_to_exist_core__fact_validators_UNIQUE_KEY.f3f4e0c31e", "package_name": "axelar", "root_path": "C:\\Users\\jessi\\git\\axelar-models", "path": "dbt_expectations_expect_column_df9b56c4997907c016900ed52c3fc334.sql", "original_file_path": "models\\gold\\core__fact_validators.yml", "name": "dbt_expectations_expect_column_to_exist_core__fact_validators_UNIQUE_KEY", "alias": "fact_validators_UNIQUE_KEY", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["core__fact_validators"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target\\compiled\\axelar\\models\\gold\\core__fact_validators.yml\\dbt_expectations_expect_column_df9b56c4997907c016900ed52c3fc334.sql", "build_path": null, "deferred": false, "unrendered_config": {"store_failures": true, "alias": "dbt_expectations_expect_column_df9b56c4997907c016900ed52c3fc334"}, "created_at": 1671055410.1877542, "compiled_sql": "\n\n    with test_data as (\n\n        select\n            cast('UNIQUE_KEY' as TEXT) as column_name,\n            15 as matching_column_index,\n            True as column_index_matches\n\n    )\n    select *\n    from test_data\n    where\n        not(matching_column_index >= 0 and column_index_matches)", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "AXELAR_DEV.dbt_expectations_expect_column_to_exist_core.fact_validators_UNIQUE_KEY", "column_name": "UNIQUE_KEY", "file_key_name": "models.core__fact_validators"}, "test.axelar.dbt_utils_unique_combination_of_columns_core__fact_validators_UNIQUE_KEY.d1d5c77f77": {"raw_sql": "{{ dbt_utils.test_unique_combination_of_columns(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_utils_unique_combination_o_0e38896ac15f1103459ed7f33a6df15e\") }}", "test_metadata": {"name": "unique_combination_of_columns", "kwargs": {"combination_of_columns": ["UNIQUE_KEY"], "model": "{{ get_where_subquery(ref('core__fact_validators')) }}"}, "namespace": "dbt_utils"}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt_utils.test_unique_combination_of_columns", "macro.dbt.get_where_subquery"], "nodes": ["model.axelar.core__fact_validators"]}, "config": {"enabled": true, "alias": "dbt_utils_unique_combination_o_0e38896ac15f1103459ed7f33a6df15e", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": true, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "AXELAR_DEV", "schema": "dbt_utils_unique_combination_of_columns_core", "fqn": ["axelar", "gold", "dbt_utils_unique_combination_of_columns_core__fact_validators_UNIQUE_KEY"], "unique_id": "test.axelar.dbt_utils_unique_combination_of_columns_core__fact_validators_UNIQUE_KEY.d1d5c77f77", "package_name": "axelar", "root_path": "C:\\Users\\jessi\\git\\axelar-models", "path": "dbt_utils_unique_combination_o_0e38896ac15f1103459ed7f33a6df15e.sql", "original_file_path": "models\\gold\\core__fact_validators.yml", "name": "dbt_utils_unique_combination_of_columns_core__fact_validators_UNIQUE_KEY", "alias": "fact_validators_UNIQUE_KEY", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["core__fact_validators"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target\\compiled\\axelar\\models\\gold\\core__fact_validators.yml\\dbt_utils_unique_combination_o_0e38896ac15f1103459ed7f33a6df15e.sql", "build_path": null, "deferred": false, "unrendered_config": {"store_failures": true, "alias": "dbt_utils_unique_combination_o_0e38896ac15f1103459ed7f33a6df15e"}, "created_at": 1671055410.1877542, "compiled_sql": "\n\n\n\n\n\nwith validation_errors as (\n\n    select\n        UNIQUE_KEY\n    from AXELAR_DEV.core.fact_validators\n    group by UNIQUE_KEY\n    having count(*) > 1\n\n)\n\nselect *\nfrom validation_errors\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "AXELAR_DEV.dbt_utils_unique_combination_of_columns_core.fact_validators_UNIQUE_KEY", "column_name": null, "file_key_name": "models.core__fact_validators"}, "model.axelar.core__dim_labels": {"raw_sql": "{{ config(\r\n    materialized = 'view'\r\n) }}\r\n\r\nSELECT\r\n    blockchain,\r\n    creator,\r\n    address,\r\n    label_type,\r\n    label_subtype,\r\n    project_name AS label,\r\n    address_name AS address_name,\r\n    NULL AS raw_metadata\r\nFROM\r\n    {{ source(\r\n        'crosschain',\r\n        'address_labels'\r\n    ) }}\r\nWHERE\r\n    blockchain = 'axelar'\r\nUNION ALL\r\nSELECT\r\n    'axelar' AS blockchain,\r\n    creator,\r\n    address,\r\n    label_type,\r\n    label_subtype,\r\n    label,\r\n    project_name,\r\n    raw_metadata\r\nFROM\r\n    {{ ref('core__dim_tokens') }}\r\nUNION ALL\r\nSELECT\r\n    'axelar' AS blockchain,\r\n    creator,\r\n    address,\r\n    label_type,\r\n    label_subtype,\r\n    label,\r\n    project_name,\r\n    raw_metadata\r\nFROM\r\n    {{ ref('core__fact_validators') }}", "compiled": true, "resource_type": "model", "depends_on": {"macros": [], "nodes": ["source.axelar.crosschain.address_labels", "model.axelar.core__dim_tokens", "model.axelar.core__fact_validators"]}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {}, "materialized": "view", "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "sync_all_columns", "grants": {}, "copy_grants": true, "post-hook": [], "pre-hook": []}, "database": "AXELAR_DEV", "schema": "core", "fqn": ["axelar", "gold", "core__dim_labels"], "unique_id": "model.axelar.core__dim_labels", "package_name": "axelar", "root_path": "C:\\Users\\jessi\\git\\axelar-models", "path": "gold\\core__dim_labels.sql", "original_file_path": "models\\gold\\core__dim_labels.sql", "name": "core__dim_labels", "alias": "dim_labels", "checksum": {"name": "sha256", "checksum": "55c2c4aea91b400ccd426e5379b769c2ea4419fa9478ede7e44dfcfedd59e04d"}, "tags": [], "refs": [["core__dim_tokens"], ["core__fact_validators"]], "sources": [["crosschain", "address_labels"]], "metrics": [], "description": "A hand curated table containing address names / labels for popular contracts, validators, tokens, etc.", "columns": {"BLOCKCHAIN": {"name": "BLOCKCHAIN", "description": "The name of the blockchain", "meta": {}, "data_type": null, "quote": null, "tags": []}, "CREATOR": {"name": "CREATOR", "description": "The name of the creator of the label", "meta": {}, "data_type": null, "quote": null, "tags": []}, "LABEL_TYPE": {"name": "LABEL_TYPE", "description": "A high-level category describing the addresses main function or ownership", "meta": {}, "data_type": null, "quote": null, "tags": []}, "LABEL_SUBTYPE": {"name": "LABEL_SUBTYPE", "description": "A sub-category nested within label type providing further detail", "meta": {}, "data_type": null, "quote": null, "tags": []}, "LABEL": {"name": "LABEL", "description": "Name of the controlling entity of the address", "meta": {}, "data_type": null, "quote": null, "tags": []}, "ADDRESS": {"name": "ADDRESS", "description": "Address that the label is for. This is the field that should be used to join other tables with labels.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "RAW_METADATA": {"name": "RAW_METADATA", "description": "A field available for tokens that contains decimal information", "meta": {}, "data_type": null, "quote": null, "tags": []}}, "meta": {}, "docs": {"show": true}, "patch_path": "axelar://models\\gold\\core__dim_labels.yml", "compiled_path": "target\\compiled\\axelar\\models\\gold\\core__dim_labels.sql", "build_path": null, "deferred": false, "unrendered_config": {"copy_grants": true, "on_schema_change": "sync_all_columns", "materialized": "view"}, "created_at": 1671055642.7052233, "compiled_sql": "\n\nSELECT\n    blockchain,\n    creator,\n    address,\n    label_type,\n    label_subtype,\n    project_name AS label,\n    address_name AS address_name,\n    NULL AS raw_metadata\nFROM\n    crosschain.core.address_labels\nWHERE\n    blockchain = 'axelar'\nUNION ALL\nSELECT\n    'axelar' AS blockchain,\n    creator,\n    address,\n    label_type,\n    label_subtype,\n    label,\n    project_name,\n    raw_metadata\nFROM\n    AXELAR_DEV.core.dim_tokens\nUNION ALL\nSELECT\n    'axelar' AS blockchain,\n    creator,\n    address,\n    label_type,\n    label_subtype,\n    label,\n    project_name,\n    raw_metadata\nFROM\n    AXELAR_DEV.core.fact_validators", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "AXELAR_DEV.core.dim_labels"}, "test.axelar.not_null_core__dim_labels_BLOCKCHAIN.a4e09054d7": {"raw_sql": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "BLOCKCHAIN", "model": "{{ get_where_subquery(ref('core__dim_labels')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.axelar.core__dim_labels"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": true, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "AXELAR_DEV", "schema": "not_null_core", "fqn": ["axelar", "gold", "not_null_core__dim_labels_BLOCKCHAIN"], "unique_id": "test.axelar.not_null_core__dim_labels_BLOCKCHAIN.a4e09054d7", "package_name": "axelar", "root_path": "C:\\Users\\jessi\\git\\axelar-models", "path": "not_null_core__dim_labels_BLOCKCHAIN.sql", "original_file_path": "models\\gold\\core__dim_labels.yml", "name": "not_null_core__dim_labels_BLOCKCHAIN", "alias": "dim_labels_BLOCKCHAIN", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["core__dim_labels"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target\\compiled\\axelar\\models\\gold\\core__dim_labels.yml\\not_null_core__dim_labels_BLOCKCHAIN.sql", "build_path": null, "deferred": false, "unrendered_config": {"store_failures": true}, "created_at": 1671055642.7052233, "compiled_sql": "\n    \n    \n\n\n\nselect *\nfrom AXELAR_DEV.core.dim_labels\nwhere BLOCKCHAIN is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "AXELAR_DEV.not_null_core.dim_labels_BLOCKCHAIN", "column_name": "BLOCKCHAIN", "file_key_name": "models.core__dim_labels"}, "test.axelar.not_null_core__dim_labels_CREATOR.0c77d5749c": {"raw_sql": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "CREATOR", "model": "{{ get_where_subquery(ref('core__dim_labels')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.axelar.core__dim_labels"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": true, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "AXELAR_DEV", "schema": "not_null_core", "fqn": ["axelar", "gold", "not_null_core__dim_labels_CREATOR"], "unique_id": "test.axelar.not_null_core__dim_labels_CREATOR.0c77d5749c", "package_name": "axelar", "root_path": "C:\\Users\\jessi\\git\\axelar-models", "path": "not_null_core__dim_labels_CREATOR.sql", "original_file_path": "models\\gold\\core__dim_labels.yml", "name": "not_null_core__dim_labels_CREATOR", "alias": "dim_labels_CREATOR", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["core__dim_labels"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target\\compiled\\axelar\\models\\gold\\core__dim_labels.yml\\not_null_core__dim_labels_CREATOR.sql", "build_path": null, "deferred": false, "unrendered_config": {"store_failures": true}, "created_at": 1671055642.7052233, "compiled_sql": "\n    \n    \n\n\n\nselect *\nfrom AXELAR_DEV.core.dim_labels\nwhere CREATOR is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "AXELAR_DEV.not_null_core.dim_labels_CREATOR", "column_name": "CREATOR", "file_key_name": "models.core__dim_labels"}, "test.axelar.not_null_core__dim_labels_LABEL_TYPE.65b0f6f1ed": {"raw_sql": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "LABEL_TYPE", "model": "{{ get_where_subquery(ref('core__dim_labels')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.axelar.core__dim_labels"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": true, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "AXELAR_DEV", "schema": "not_null_core", "fqn": ["axelar", "gold", "not_null_core__dim_labels_LABEL_TYPE"], "unique_id": "test.axelar.not_null_core__dim_labels_LABEL_TYPE.65b0f6f1ed", "package_name": "axelar", "root_path": "C:\\Users\\jessi\\git\\axelar-models", "path": "not_null_core__dim_labels_LABEL_TYPE.sql", "original_file_path": "models\\gold\\core__dim_labels.yml", "name": "not_null_core__dim_labels_LABEL_TYPE", "alias": "dim_labels_LABEL_TYPE", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["core__dim_labels"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target\\compiled\\axelar\\models\\gold\\core__dim_labels.yml\\not_null_core__dim_labels_LABEL_TYPE.sql", "build_path": null, "deferred": false, "unrendered_config": {"store_failures": true}, "created_at": 1671055642.7052233, "compiled_sql": "\n    \n    \n\n\n\nselect *\nfrom AXELAR_DEV.core.dim_labels\nwhere LABEL_TYPE is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "AXELAR_DEV.not_null_core.dim_labels_LABEL_TYPE", "column_name": "LABEL_TYPE", "file_key_name": "models.core__dim_labels"}, "test.axelar.dbt_expectations_expect_column_values_to_be_in_set_core__dim_labels_LABEL_TYPE__flotsam__nft__defi__dex__cex__dapp__token__operator__layer2__chadmin.aa3909a8f8": {"raw_sql": "{{ dbt_expectations.test_expect_column_values_to_be_in_set(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_expectations_expect_column_8416c55e41b03a75d51c67dad07ecafc\") }}", "test_metadata": {"name": "expect_column_values_to_be_in_set", "kwargs": {"value_set": ["flotsam", "nft", "defi", "dex", "cex", "dapp", "token", "operator", "layer2", "chadmin"], "column_name": "LABEL_TYPE", "model": "{{ get_where_subquery(ref('core__dim_labels')) }}"}, "namespace": "dbt_expectations"}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt_expectations.test_expect_column_values_to_be_in_set", "macro.dbt.get_where_subquery"], "nodes": ["model.axelar.core__dim_labels"]}, "config": {"enabled": true, "alias": "dbt_expectations_expect_column_8416c55e41b03a75d51c67dad07ecafc", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": true, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "AXELAR_DEV", "schema": "dbt_expectations_expect_column_values_to_be_in_set_core", "fqn": ["axelar", "gold", "dbt_expectations_expect_column_values_to_be_in_set_core__dim_labels_LABEL_TYPE__flotsam__nft__defi__dex__cex__dapp__token__operator__layer2__chadmin"], "unique_id": "test.axelar.dbt_expectations_expect_column_values_to_be_in_set_core__dim_labels_LABEL_TYPE__flotsam__nft__defi__dex__cex__dapp__token__operator__layer2__chadmin.aa3909a8f8", "package_name": "axelar", "root_path": "C:\\Users\\jessi\\git\\axelar-models", "path": "dbt_expectations_expect_column_8416c55e41b03a75d51c67dad07ecafc.sql", "original_file_path": "models\\gold\\core__dim_labels.yml", "name": "dbt_expectations_expect_column_values_to_be_in_set_core__dim_labels_LABEL_TYPE__flotsam__nft__defi__dex__cex__dapp__token__operator__layer2__chadmin", "alias": "dim_labels_LABEL_TYPE", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["core__dim_labels"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target\\compiled\\axelar\\models\\gold\\core__dim_labels.yml\\dbt_expectations_expect_column_8416c55e41b03a75d51c67dad07ecafc.sql", "build_path": null, "deferred": false, "unrendered_config": {"store_failures": true, "alias": "dbt_expectations_expect_column_8416c55e41b03a75d51c67dad07ecafc"}, "created_at": 1671055642.7052233, "compiled_sql": "\n\nwith all_values as (\n\n    select\n        LABEL_TYPE as value_field\n\n    from AXELAR_DEV.core.dim_labels\n    \n\n),\nset_values as (\n\n    select\n        cast('flotsam' as TEXT) as value_field\n    union all\n    select\n        cast('nft' as TEXT) as value_field\n    union all\n    select\n        cast('defi' as TEXT) as value_field\n    union all\n    select\n        cast('dex' as TEXT) as value_field\n    union all\n    select\n        cast('cex' as TEXT) as value_field\n    union all\n    select\n        cast('dapp' as TEXT) as value_field\n    union all\n    select\n        cast('token' as TEXT) as value_field\n    union all\n    select\n        cast('operator' as TEXT) as value_field\n    union all\n    select\n        cast('layer2' as TEXT) as value_field\n    union all\n    select\n        cast('chadmin' as TEXT) as value_field\n    \n    \n),\nvalidation_errors as (\n    -- values from the model that are not in the set\n    select\n        v.value_field\n    from\n        all_values v\n        left join\n        set_values s on v.value_field = s.value_field\n    where\n        s.value_field is null\n\n)\n\nselect *\nfrom validation_errors\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "AXELAR_DEV.dbt_expectations_expect_column_values_to_be_in_set_core.dim_labels_LABEL_TYPE", "column_name": "LABEL_TYPE", "file_key_name": "models.core__dim_labels"}, "test.axelar.not_null_core__dim_labels_LABEL_SUBTYPE.556a65235c": {"raw_sql": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "LABEL_SUBTYPE", "model": "{{ get_where_subquery(ref('core__dim_labels')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.axelar.core__dim_labels"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": true, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "AXELAR_DEV", "schema": "not_null_core", "fqn": ["axelar", "gold", "not_null_core__dim_labels_LABEL_SUBTYPE"], "unique_id": "test.axelar.not_null_core__dim_labels_LABEL_SUBTYPE.556a65235c", "package_name": "axelar", "root_path": "C:\\Users\\jessi\\git\\axelar-models", "path": "not_null_core__dim_labels_LABEL_SUBTYPE.sql", "original_file_path": "models\\gold\\core__dim_labels.yml", "name": "not_null_core__dim_labels_LABEL_SUBTYPE", "alias": "dim_labels_LABEL_SUBTYPE", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["core__dim_labels"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target\\compiled\\axelar\\models\\gold\\core__dim_labels.yml\\not_null_core__dim_labels_LABEL_SUBTYPE.sql", "build_path": null, "deferred": false, "unrendered_config": {"store_failures": true}, "created_at": 1671055642.7439017, "compiled_sql": "\n    \n    \n\n\n\nselect *\nfrom AXELAR_DEV.core.dim_labels\nwhere LABEL_SUBTYPE is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "AXELAR_DEV.not_null_core.dim_labels_LABEL_SUBTYPE", "column_name": "LABEL_SUBTYPE", "file_key_name": "models.core__dim_labels"}, "test.axelar.not_null_core__dim_labels_LABEL.05696d692d": {"raw_sql": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "LABEL", "model": "{{ get_where_subquery(ref('core__dim_labels')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.axelar.core__dim_labels"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": true, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "AXELAR_DEV", "schema": "not_null_core", "fqn": ["axelar", "gold", "not_null_core__dim_labels_LABEL"], "unique_id": "test.axelar.not_null_core__dim_labels_LABEL.05696d692d", "package_name": "axelar", "root_path": "C:\\Users\\jessi\\git\\axelar-models", "path": "not_null_core__dim_labels_LABEL.sql", "original_file_path": "models\\gold\\core__dim_labels.yml", "name": "not_null_core__dim_labels_LABEL", "alias": "dim_labels_LABEL", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["core__dim_labels"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target\\compiled\\axelar\\models\\gold\\core__dim_labels.yml\\not_null_core__dim_labels_LABEL.sql", "build_path": null, "deferred": false, "unrendered_config": {"store_failures": true}, "created_at": 1671055642.745902, "compiled_sql": "\n    \n    \n\n\n\nselect *\nfrom AXELAR_DEV.core.dim_labels\nwhere LABEL is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "AXELAR_DEV.not_null_core.dim_labels_LABEL", "column_name": "LABEL", "file_key_name": "models.core__dim_labels"}, "test.axelar.not_null_core__dim_labels_ADDRESS.ddf35f62af": {"raw_sql": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "ADDRESS", "model": "{{ get_where_subquery(ref('core__dim_labels')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.axelar.core__dim_labels"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": true, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "AXELAR_DEV", "schema": "not_null_core", "fqn": ["axelar", "gold", "not_null_core__dim_labels_ADDRESS"], "unique_id": "test.axelar.not_null_core__dim_labels_ADDRESS.ddf35f62af", "package_name": "axelar", "root_path": "C:\\Users\\jessi\\git\\axelar-models", "path": "not_null_core__dim_labels_ADDRESS.sql", "original_file_path": "models\\gold\\core__dim_labels.yml", "name": "not_null_core__dim_labels_ADDRESS", "alias": "dim_labels_ADDRESS", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["core__dim_labels"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target\\compiled\\axelar\\models\\gold\\core__dim_labels.yml\\not_null_core__dim_labels_ADDRESS.sql", "build_path": null, "deferred": false, "unrendered_config": {"store_failures": true}, "created_at": 1671055642.7479076, "compiled_sql": "\n    \n    \n\n\n\nselect *\nfrom AXELAR_DEV.core.dim_labels\nwhere ADDRESS is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "AXELAR_DEV.not_null_core.dim_labels_ADDRESS", "column_name": "ADDRESS", "file_key_name": "models.core__dim_labels"}}, "sources": {"source.axelar.bronze.blocks": {"fqn": ["axelar", "bronze", "blocks"], "database": "streamline", "schema": "axelar_dev", "unique_id": "source.axelar.bronze.blocks", "package_name": "axelar", "root_path": "C:\\Users\\jessi\\git\\axelar-models", "path": "models\\sources.yml", "original_file_path": "models\\sources.yml", "name": "blocks", "source_name": "bronze", "source_description": "", "loader": "", "identifier": "blocks", "resource_type": "source", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": null, "freshness": {"warn_after": {"count": null, "period": null}, "error_after": {"count": null, "period": null}, "filter": null}, "external": null, "description": "", "columns": {}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true}, "patch_path": null, "unrendered_config": {}, "relation_name": "streamline.axelar_dev.blocks", "created_at": 1671050800.1235805}, "source.axelar.bronze.txs": {"fqn": ["axelar", "bronze", "txs"], "database": "streamline", "schema": "axelar_dev", "unique_id": "source.axelar.bronze.txs", "package_name": "axelar", "root_path": "C:\\Users\\jessi\\git\\axelar-models", "path": "models\\sources.yml", "original_file_path": "models\\sources.yml", "name": "txs", "source_name": "bronze", "source_description": "", "loader": "", "identifier": "txs", "resource_type": "source", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": null, "freshness": {"warn_after": {"count": null, "period": null}, "error_after": {"count": null, "period": null}, "filter": null}, "external": null, "description": "", "columns": {}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true}, "patch_path": null, "unrendered_config": {}, "relation_name": "streamline.axelar_dev.txs", "created_at": 1671050800.1235805}, "source.axelar.bronze.txs_details": {"fqn": ["axelar", "bronze", "txs_details"], "database": "streamline", "schema": "axelar_dev", "unique_id": "source.axelar.bronze.txs_details", "package_name": "axelar", "root_path": "C:\\Users\\jessi\\git\\axelar-models", "path": "models\\sources.yml", "original_file_path": "models\\sources.yml", "name": "txs_details", "source_name": "bronze", "source_description": "", "loader": "", "identifier": "txs_details", "resource_type": "source", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": null, "freshness": {"warn_after": {"count": null, "period": null}, "error_after": {"count": null, "period": null}, "filter": null}, "external": null, "description": "", "columns": {}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true}, "patch_path": null, "unrendered_config": {}, "relation_name": "streamline.axelar_dev.txs_details", "created_at": 1671050800.1235805}, "source.axelar.tokens.dim_labels": {"fqn": ["axelar", "tokens", "dim_labels"], "database": "osmosis", "schema": "core", "unique_id": "source.axelar.tokens.dim_labels", "package_name": "axelar", "root_path": "C:\\Users\\jessi\\git\\axelar-models", "path": "models\\sources.yml", "original_file_path": "models\\sources.yml", "name": "dim_labels", "source_name": "tokens", "source_description": "", "loader": "", "identifier": "dim_labels", "resource_type": "source", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": null, "freshness": {"warn_after": {"count": null, "period": null}, "error_after": {"count": null, "period": null}, "filter": null}, "external": null, "description": "", "columns": {}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true}, "patch_path": null, "unrendered_config": {}, "relation_name": "osmosis.core.dim_labels", "created_at": 1671050800.1235805}, "source.axelar.crosschain.address_labels": {"fqn": ["axelar", "crosschain", "address_labels"], "database": "crosschain", "schema": "core", "unique_id": "source.axelar.crosschain.address_labels", "package_name": "axelar", "root_path": "C:\\Users\\jessi\\git\\axelar-models", "path": "models\\sources.yml", "original_file_path": "models\\sources.yml", "name": "address_labels", "source_name": "crosschain", "source_description": "", "loader": "", "identifier": "address_labels", "resource_type": "source", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": null, "freshness": {"warn_after": {"count": null, "period": null}, "error_after": {"count": null, "period": null}, "filter": null}, "external": null, "description": "", "columns": {}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true}, "patch_path": null, "unrendered_config": {}, "relation_name": "crosschain.core.address_labels", "created_at": 1671050800.1235805}, "source.axelar.bronze_streamline.blocks": {"fqn": ["axelar", "bronze_streamline", "blocks"], "database": "streamline", "schema": "AXELAR_DEV", "unique_id": "source.axelar.bronze_streamline.blocks", "package_name": "axelar", "root_path": "C:\\Users\\jessi\\git\\axelar-models", "path": "models\\sources.yml", "original_file_path": "models\\sources.yml", "name": "blocks", "source_name": "bronze_streamline", "source_description": "", "loader": "", "identifier": "blocks", "resource_type": "source", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": null, "freshness": {"warn_after": {"count": null, "period": null}, "error_after": {"count": null, "period": null}, "filter": null}, "external": null, "description": "", "columns": {}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true}, "patch_path": null, "unrendered_config": {}, "relation_name": "streamline.AXELAR_DEV.blocks", "created_at": 1671050800.1235805}, "source.axelar.bronze_streamline.txs": {"fqn": ["axelar", "bronze_streamline", "txs"], "database": "streamline", "schema": "AXELAR_DEV", "unique_id": "source.axelar.bronze_streamline.txs", "package_name": "axelar", "root_path": "C:\\Users\\jessi\\git\\axelar-models", "path": "models\\sources.yml", "original_file_path": "models\\sources.yml", "name": "txs", "source_name": "bronze_streamline", "source_description": "", "loader": "", "identifier": "txs", "resource_type": "source", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": null, "freshness": {"warn_after": {"count": null, "period": null}, "error_after": {"count": null, "period": null}, "filter": null}, "external": null, "description": "", "columns": {}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true}, "patch_path": null, "unrendered_config": {}, "relation_name": "streamline.AXELAR_DEV.txs", "created_at": 1671050800.1235805}, "source.axelar.bronze_streamline.txs_details": {"fqn": ["axelar", "bronze_streamline", "txs_details"], "database": "streamline", "schema": "AXELAR_DEV", "unique_id": "source.axelar.bronze_streamline.txs_details", "package_name": "axelar", "root_path": "C:\\Users\\jessi\\git\\axelar-models", "path": "models\\sources.yml", "original_file_path": "models\\sources.yml", "name": "txs_details", "source_name": "bronze_streamline", "source_description": "", "loader": "", "identifier": "txs_details", "resource_type": "source", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": null, "freshness": {"warn_after": {"count": null, "period": null}, "error_after": {"count": null, "period": null}, "filter": null}, "external": null, "description": "", "columns": {}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true}, "patch_path": null, "unrendered_config": {}, "relation_name": "streamline.AXELAR_DEV.txs_details", "created_at": 1671050800.1235805}, "source.axelar.osmo.asset_metadata": {"fqn": ["axelar", "osmo", "asset_metadata"], "database": "osmosis", "schema": "silver", "unique_id": "source.axelar.osmo.asset_metadata", "package_name": "axelar", "root_path": "C:\\Users\\jessi\\git\\axelar-models", "path": "models\\sources.yml", "original_file_path": "models\\sources.yml", "name": "asset_metadata", "source_name": "osmo", "source_description": "", "loader": "", "identifier": "asset_metadata", "resource_type": "source", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": null, "freshness": {"warn_after": {"count": null, "period": null}, "error_after": {"count": null, "period": null}, "filter": null}, "external": null, "description": "", "columns": {}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true}, "patch_path": null, "unrendered_config": {}, "relation_name": "osmosis.silver.asset_metadata", "created_at": 1671050800.1245809}}, "macros": {"macro.axelar.create_sps": {"unique_id": "macro.axelar.create_sps", "package_name": "axelar", "root_path": "C:\\Users\\jessi\\git\\axelar-models", "path": "macros\\create_sps.sql", "original_file_path": "macros\\create_sps.sql", "name": "create_sps", "macro_sql": "{% macro create_sps() %}\r\n    {% if target.database == 'AXELAR' %}\r\n        CREATE SCHEMA IF NOT EXISTS _internal;\r\n        -- {{ sp_create_prod_clone('_internal') }};\r\n    {% endif %}\r\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.axelar.sp_create_prod_clone"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1671050797.6858277}, "macro.axelar.create_udfs": {"unique_id": "macro.axelar.create_udfs", "package_name": "axelar", "root_path": "C:\\Users\\jessi\\git\\axelar-models", "path": "macros\\create_udfs.sql", "original_file_path": "macros\\create_udfs.sql", "name": "create_udfs", "macro_sql": "{% macro create_udfs() %}\r\n    {% set sql %}\r\n    CREATE schema if NOT EXISTS silver;\r\n{{ create_js_hex_to_int() }};\r\n{{ create_udtf_get_base_table(\r\n        schema = \"streamline\"\r\n    ) }}\r\n\r\n    {% endset %}\r\n    {% do run_query(sql) %}\r\n    {% set sql %}\r\n    {{ create_udf_bulk_get_blocks() }}\r\n    {{ create_udf_bulk_get_txs() }}\r\n\r\n    {% endset %}\r\n    {% do run_query(sql) %}\r\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.axelar.create_js_hex_to_int", "macro.axelar.create_udtf_get_base_table", "macro.dbt.run_query", "macro.axelar.create_udf_bulk_get_blocks", "macro.axelar.create_udf_bulk_get_txs"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1671050797.6868284}, "macro.axelar.generate_schema_name": {"unique_id": "macro.axelar.generate_schema_name", "package_name": "axelar", "root_path": "C:\\Users\\jessi\\git\\axelar-models", "path": "macros\\custom_naming_macros.sql", "original_file_path": "macros\\custom_naming_macros.sql", "name": "generate_schema_name", "macro_sql": "{% macro generate_schema_name(custom_schema_name=none, node=none) -%}\r\n    {% set node_name = node.name %}\r\n    {% set split_name = node_name.split('__') %}\r\n    {{ split_name[0] | trim }}\r\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1671050797.6878188}, "macro.axelar.generate_alias_name": {"unique_id": "macro.axelar.generate_alias_name", "package_name": "axelar", "root_path": "C:\\Users\\jessi\\git\\axelar-models", "path": "macros\\custom_naming_macros.sql", "original_file_path": "macros\\custom_naming_macros.sql", "name": "generate_alias_name", "macro_sql": "{% macro generate_alias_name(custom_alias_name=none, node=none) -%}\r\n    {% set node_name = node.name %}\r\n    {% set split_name = node_name.split('__') %}\r\n    {{ split_name[1] | trim }}\r\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1671050797.6878188}, "macro.axelar.set_query_tag": {"unique_id": "macro.axelar.set_query_tag", "package_name": "axelar", "root_path": "C:\\Users\\jessi\\git\\axelar-models", "path": "macros\\custom_query_tag.sql", "original_file_path": "macros\\custom_query_tag.sql", "name": "set_query_tag", "macro_sql": "{% macro set_query_tag() -%}\r\n {% set new_json = {\"repo\":project_name, \"object\":this.table, \"profile\":target.profile_name, \"env\":target.name, \"existing_tag\":get_current_query_tag()  } %}\r\n{% set new_query_tag = tojson(new_json) | as_text %}\r\n  {% if new_query_tag %}\r\n    {% set original_query_tag = get_current_query_tag() %}\r\n    {{ log(\"Setting query_tag to '\" ~ new_query_tag ~ \"'. Will reset to '\" ~ original_query_tag ~ \"' after materialization.\") }}\r\n    {% do run_query(\"alter session set query_tag = '{}'\".format(new_query_tag)) %}\r\n    {{ return(original_query_tag)}}\r\n  {% endif %}\r\n  {{ return(none)}}\r\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_snowflake.get_current_query_tag", "macro.dbt.run_query"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1671050797.689822}, "macro.axelar.create_js_hex_to_int": {"unique_id": "macro.axelar.create_js_hex_to_int", "package_name": "axelar", "root_path": "C:\\Users\\jessi\\git\\axelar-models", "path": "macros\\js_hextoint.sql", "original_file_path": "macros\\js_hextoint.sql", "name": "create_js_hex_to_int", "macro_sql": "{% macro create_js_hex_to_int() %}\r\n    CREATE FUNCTION IF NOT EXISTS {{ target.schema }}.js_hex_to_int (\r\n        s STRING\r\n    ) returns DOUBLE LANGUAGE javascript AS 'if (S !== null) { yourNumber = parseInt(S, 16); } return yourNumber'\r\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1671050797.689822}, "macro.axelar.run_sp_create_prod_clone": {"unique_id": "macro.axelar.run_sp_create_prod_clone", "package_name": "axelar", "root_path": "C:\\Users\\jessi\\git\\axelar-models", "path": "macros\\run_sp_create_prod_clone.sql", "original_file_path": "macros\\run_sp_create_prod_clone.sql", "name": "run_sp_create_prod_clone", "macro_sql": "{% macro run_sp_create_prod_clone() %}\r\n{% set clone_query %}\r\ncall axelar._internal.create_prod_clone('axelar', 'axelar_dev', 'internal_dev');\r\n{% endset %}\r\n\r\n{% do run_query(clone_query) %}\r\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.run_query"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1671050797.690819}, "macro.axelar.sp_create_prod_clone": {"unique_id": "macro.axelar.sp_create_prod_clone", "package_name": "axelar", "root_path": "C:\\Users\\jessi\\git\\axelar-models", "path": "macros\\sp_create_prod_clone.sql", "original_file_path": "macros\\sp_create_prod_clone.sql", "name": "sp_create_prod_clone", "macro_sql": "{% macro sp_create_prod_clone(target_schema) -%}\r\n\r\ncreate or replace procedure {{ target_schema }}.create_prod_clone(source_db_name string, destination_db_name string, role_name string)\r\nreturns boolean \r\nlanguage javascript\r\nexecute as caller\r\nas\r\n$$\r\n    snowflake.execute({sqlText: `BEGIN TRANSACTION;`});\r\n    try {\r\n        snowflake.execute({sqlText: `DROP DATABASE IF EXISTS ${DESTINATION_DB_NAME}`});\r\n        snowflake.execute({sqlText: `CREATE DATABASE ${DESTINATION_DB_NAME} CLONE ${SOURCE_DB_NAME}`});\r\n        snowflake.execute({sqlText: `DROP SCHEMA ${DESTINATION_DB_NAME}._INTERNAL`}); /* this only needs to be in prod */\r\n\r\n        var existing_schemas = snowflake.execute({sqlText: `SELECT table_schema\r\n            FROM ${DESTINATION_DB_NAME}.INFORMATION_SCHEMA.TABLE_PRIVILEGES\r\n            WHERE grantor IS NOT NULL\r\n            GROUP BY 1;`});\r\n\r\n        while (existing_schemas.next()) {\r\n            var schema = existing_schemas.getColumnValue(1)\r\n            snowflake.execute({sqlText: `GRANT OWNERSHIP ON SCHEMA ${DESTINATION_DB_NAME}.${schema} TO ROLE ${ROLE_NAME} COPY CURRENT GRANTS;`});\r\n        }\r\n\r\n        var existing_tables = snowflake.execute({sqlText: `SELECT table_schema, table_name\r\n            FROM ${DESTINATION_DB_NAME}.INFORMATION_SCHEMA.TABLE_PRIVILEGES\r\n            WHERE grantor IS NOT NULL\r\n            GROUP BY 1,2;`});\r\n\r\n        while (existing_tables.next()) {\r\n            var schema = existing_tables.getColumnValue(1)\r\n            var table_name = existing_tables.getColumnValue(2)\r\n            snowflake.execute({sqlText: `GRANT OWNERSHIP ON TABLE ${DESTINATION_DB_NAME}.${schema}.${table_name} TO ROLE ${ROLE_NAME} COPY CURRENT GRANTS;`});\r\n        }\r\n\r\n        var existing_functions = snowflake.execute({sqlText: `SELECT function_schema, function_name, concat('(',array_to_string(regexp_substr_all(argument_signature, 'VARCHAR|NUMBER|FLOAT|ARRAY|VARIANT|OBJECT|DOUBLE|BOOLEAN'),','),')') as argument_signature\r\n            FROM ${DESTINATION_DB_NAME}.INFORMATION_SCHEMA.FUNCTIONS;`});\r\n\r\n        while (existing_functions.next()) {\r\n            var schema = existing_functions.getColumnValue(1)\r\n            var function_name = existing_functions.getColumnValue(2)\r\n            var argument_signature = existing_functions.getColumnValue(3)\r\n            snowflake.execute({sqlText: `GRANT OWNERSHIP ON FUNCTION ${DESTINATION_DB_NAME}.${schema}.${function_name}${argument_signature} to role ${ROLE_NAME} REVOKE CURRENT GRANTS;`});\r\n        }\r\n\r\n        var existing_procedures = snowflake.execute({sqlText: `SELECT procedure_schema, procedure_name, concat('(',array_to_string(regexp_substr_all(argument_signature, 'VARCHAR|NUMBER|FLOAT|ARRAY|VARIANT|OBJECT|DOUBLE|BOOLEAN'),','),')') as argument_signature\r\n            FROM ${DESTINATION_DB_NAME}.INFORMATION_SCHEMA.PROCEDURES;`});\r\n\r\n        while (existing_procedures.next()) {\r\n            var schema = existing_procedures.getColumnValue(1)\r\n            var procedure_name = existing_procedures.getColumnValue(2)\r\n            var argument_signature = existing_procedures.getColumnValue(3)\r\n            snowflake.execute({sqlText: `GRANT OWNERSHIP ON PROCEDURE ${DESTINATION_DB_NAME}.${schema}.${procedure_name}${argument_signature} to role ${ROLE_NAME} REVOKE CURRENT GRANTS;`});\r\n        }\r\n\r\n        var existing_tasks = snowflake.execute({sqlText: `SHOW TASKS IN DATABASE ${DESTINATION_DB_NAME};`});\r\n\r\n        while (existing_tasks.next()) {\r\n            var schema = existing_tasks.getColumnValue(5)\r\n            var task_name = existing_tasks.getColumnValue(2)\r\n            snowflake.execute({sqlText: `ALTER TASK ${DESTINATION_DB_NAME}.${schema}.${task_name} SUSPEND;`})\r\n            snowflake.execute({sqlText: `GRANT OWNERSHIP ON TASK ${DESTINATION_DB_NAME}.${schema}.${task_name} to role ${ROLE_NAME} REVOKE CURRENT GRANTS;`});\r\n        }\r\n\r\n        snowflake.execute({sqlText: `GRANT OWNERSHIP ON DATABASE ${DESTINATION_DB_NAME} TO ROLE ${ROLE_NAME};`})\r\n        snowflake.execute({sqlText: `COMMIT;`});\r\n    } catch (err) {\r\n        snowflake.execute({sqlText: `ROLLBACK;`});\r\n        throw(err);\r\n    }\r\n    \r\n    return true\r\n$$\r\n\r\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1671050797.691824}, "macro.axelar.if_data_call_function": {"unique_id": "macro.axelar.if_data_call_function", "package_name": "axelar", "root_path": "C:\\Users\\jessi\\git\\axelar-models", "path": "macros\\utils.sql", "original_file_path": "macros\\utils.sql", "name": "if_data_call_function", "macro_sql": "{% macro if_data_call_function(\r\n        func,\r\n        target\r\n    ) %}\r\n    {% if var(\r\n            \"STREAMLINE_INVOKE_STREAMS\"\r\n        ) %}\r\n        {% if execute %}\r\n            {{ log(\r\n                \"Running macro `if_data_call_function`: Calling udf \" ~ func ~ \" on \" ~ target,\r\n                True\r\n            ) }}\r\n        {% endif %}\r\n    SELECT\r\n        {{ func }}\r\n    WHERE\r\n        EXISTS(\r\n            SELECT\r\n                1\r\n            FROM\r\n                {{ target }}\r\n            LIMIT\r\n                1\r\n        )\r\n    {% else %}\r\n        {% if execute %}\r\n            {{ log(\r\n                \"Running macro `if_data_call_function`: NOOP\",\r\n                False\r\n            ) }}\r\n        {% endif %}\r\n    SELECT\r\n        NULL\r\n    {% endif %}\r\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1671050797.6938205}, "macro.axelar.create_udf_hex_to_int": {"unique_id": "macro.axelar.create_udf_hex_to_int", "package_name": "axelar", "root_path": "C:\\Users\\jessi\\git\\axelar-models", "path": "macros\\python\\hex_to_int_udf.sql", "original_file_path": "macros\\python\\hex_to_int_udf.sql", "name": "create_udf_hex_to_int", "macro_sql": "{% macro create_udf_hex_to_int(schema) %}\r\ncreate or replace function {{ schema }}.udf_hex_to_int(hex string)\r\nreturns string\r\nlanguage python\r\nruntime_version = '3.8'\r\nhandler = 'hex_to_int'\r\nas\r\n$$\r\ndef hex_to_int(hex) -> str:\r\n  \"\"\"\r\n  Converts hex (of any size) to int (as a string). Snowflake and java script can only handle up to 64-bit (38 digits of precision)\r\n  select hex_to_int('200000000000000000000000000000211');\r\n  >> 680564733841876926926749214863536423441\r\n  select hex_to_int('0x200000000000000000000000000000211');\r\n  >> 680564733841876926926749214863536423441\r\n  select hex_to_int(NULL);\r\n  >> NULL\r\n  \"\"\"\r\n  return (str(int(hex, 16)) if hex and hex != \"0x\" else None)\r\n$$;\r\n\r\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1671050797.6938205}, "macro.axelar.create_udf_hex_to_int_with_inputs": {"unique_id": "macro.axelar.create_udf_hex_to_int_with_inputs", "package_name": "axelar", "root_path": "C:\\Users\\jessi\\git\\axelar-models", "path": "macros\\python\\hex_to_int_udf.sql", "original_file_path": "macros\\python\\hex_to_int_udf.sql", "name": "create_udf_hex_to_int_with_inputs", "macro_sql": "{% macro create_udf_hex_to_int_with_inputs(schema) %}\r\ncreate or replace function {{ schema }}.udf_hex_to_int(encoding string, hex string)\r\nreturns string\r\nlanguage python\r\nruntime_version = '3.8'\r\nhandler = 'hex_to_int'\r\nas\r\n$$\r\ndef hex_to_int(encoding, hex) -> str:\r\n  \"\"\"\r\n  Converts hex (of any size) to int (as a string). Snowflake and java script can only handle up to 64-bit (38 digits of precision)\r\n  select hex_to_int('hex', '200000000000000000000000000000211');\r\n  >> 680564733841876926926749214863536423441\r\n  select hex_to_int('hex', '0x200000000000000000000000000000211');\r\n  >> 680564733841876926926749214863536423441\r\n  select hex_to_int('hex', NULL);\r\n  >> NULL\r\n  select hex_to_int('s2c', 'ffffffffffffffffffffffffffffffffffffffffffffffffffffffffe5b83acf');\r\n   >> -440911153\r\n  \"\"\"\r\n  if not hex:\r\n    return None\r\n  if encoding.lower() == 's2c':\r\n    if hex[0:2].lower() != '0x':\r\n      hex = f'0x{hex}'\r\n\r\n    bits = len(hex[2:])*4\r\n    value = int(hex, 0)\r\n    if value & (1 << (bits-1)):\r\n        value -= 1 << bits\r\n    return str(value)\r\n  else:\r\n    return str(int(hex, 16))\r\n\r\n$$;\r\n\r\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1671050797.6948192}, "macro.axelar.create_udtf_get_base_table": {"unique_id": "macro.axelar.create_udtf_get_base_table", "package_name": "axelar", "root_path": "C:\\Users\\jessi\\git\\axelar-models", "path": "macros\\streamline\\get_base_table_udtf.sql", "original_file_path": "macros\\streamline\\get_base_table_udtf.sql", "name": "create_udtf_get_base_table", "macro_sql": "{% macro create_udtf_get_base_table(schema) %}\r\ncreate function if not exists {{ schema }}.udtf_get_base_table(max_height integer)\r\nreturns table (height number)\r\nas\r\n$$\r\n    with base as (\r\n        select\r\n            row_number() over (\r\n                order by\r\n                    seq4()\r\n            ) as id\r\n        from\r\n            table(generator(rowcount => 100000000))\r\n    )\r\nselect\r\n    id as height\r\nfrom\r\n    base\r\nwhere\r\n    id <= max_height\r\n$$\r\n;\r\n\r\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1671050797.6948192}, "macro.axelar.create_udf_bulk_get_blocks": {"unique_id": "macro.axelar.create_udf_bulk_get_blocks", "package_name": "axelar", "root_path": "C:\\Users\\jessi\\git\\axelar-models", "path": "macros\\streamline\\streamline_udfs.sql", "original_file_path": "macros\\streamline\\streamline_udfs.sql", "name": "create_udf_bulk_get_blocks", "macro_sql": "{% macro create_udf_bulk_get_blocks() %}\r\n    CREATE EXTERNAL FUNCTION IF NOT EXISTS streamline.udf_bulk_get_blocks(\r\n        json variant\r\n    ) returns variant api_integration = aws_axelar_api AS {% if target.name == \"prod\" %}\r\n        'https://klo2pavknf.execute-api.us-east-1.amazonaws.com/prod/bulk_get_blocks'\r\n    {% else %}\r\n        'https://69qcbfajak.execute-api.us-east-1.amazonaws.com/dev/bulk_get_blocks'\r\n    {%- endif %};\r\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1671050797.6966803}, "macro.axelar.create_udf_bulk_get_txs": {"unique_id": "macro.axelar.create_udf_bulk_get_txs", "package_name": "axelar", "root_path": "C:\\Users\\jessi\\git\\axelar-models", "path": "macros\\streamline\\streamline_udfs.sql", "original_file_path": "macros\\streamline\\streamline_udfs.sql", "name": "create_udf_bulk_get_txs", "macro_sql": "{% macro create_udf_bulk_get_txs() %}\r\n    CREATE EXTERNAL FUNCTION IF NOT EXISTS streamline.udf_bulk_get_txs(\r\n        json variant\r\n    ) returns variant api_integration = aws_axelar_api AS {% if target.name == \"prod\" %}\r\n        'https://klo2pavknf.execute-api.us-east-1.amazonaws.com/prod/bulk_get_txs'\r\n    {% else %}\r\n        'https://69qcbfajak.execute-api.us-east-1.amazonaws.com/dev/bulk_get_txs'\r\n    {%- endif %};\r\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1671050797.6971827}, "macro.axelar.create_udf_get_chainhead": {"unique_id": "macro.axelar.create_udf_get_chainhead", "package_name": "axelar", "root_path": "C:\\Users\\jessi\\git\\axelar-models", "path": "macros\\streamline\\streamline_udfs.sql", "original_file_path": "macros\\streamline\\streamline_udfs.sql", "name": "create_udf_get_chainhead", "macro_sql": "{% macro create_udf_get_chainhead() %}\r\n    CREATE EXTERNAL FUNCTION IF NOT EXISTS streamline.udf_get_chainhead() returns variant api_integration = aws_axelar_api AS {% if target.name == \"prod\" %}\r\n        'https://klo2pavknf.execute-api.us-east-1.amazonaws.com/prod/get_chainhead'\r\n    {% else %}\r\n        'https://69qcbfajak.execute-api.us-east-1.amazonaws.com/dev/get_chainhead'\r\n    {%- endif %};\r\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1671050797.6971827}, "macro.axelar.test_sequence_gaps": {"unique_id": "macro.axelar.test_sequence_gaps", "package_name": "axelar", "root_path": "C:\\Users\\jessi\\git\\axelar-models", "path": "macros\\tests\\sequence_gaps.sql", "original_file_path": "macros\\tests\\sequence_gaps.sql", "name": "test_sequence_gaps", "macro_sql": "{% test sequence_gaps(\r\n    model,\r\n    partition_by,\r\n    column_name\r\n) %}\r\n{%- set partition_sql = partition_by | join(\", \") -%}\r\n{%- set previous_column = \"prev_\" ~ column_name -%}\r\nWITH source AS (\r\n    SELECT\r\n        {{ partition_sql + \",\" if partition_sql }}\r\n        {{ column_name }},\r\n        LAG(\r\n            {{ column_name }},\r\n            1\r\n        ) over (\r\n            {{ \"PARTITION BY \" ~ partition_sql if partition_sql }}\r\n            ORDER BY\r\n                {{ column_name }} ASC\r\n        ) AS {{ previous_column }}\r\n    FROM\r\n        {{ model }}\r\n)\r\nSELECT\r\n    {{ partition_sql + \",\" if partition_sql }}\r\n    {{ previous_column }},\r\n    {{ column_name }},\r\n    {{ column_name }} - {{ previous_column }}\r\n    - 1 AS gap\r\nFROM\r\n    source\r\nWHERE\r\n    {{ column_name }} - {{ previous_column }} <> 1\r\nORDER BY\r\n    gap DESC {% endtest %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1671050797.7011964}, "macro.axelar.tx_gaps": {"unique_id": "macro.axelar.tx_gaps", "package_name": "axelar", "root_path": "C:\\Users\\jessi\\git\\axelar-models", "path": "macros\\tests\\tx_gaps.sql", "original_file_path": "macros\\tests\\tx_gaps.sql", "name": "tx_gaps", "macro_sql": "{% macro tx_gaps(\r\n        model\r\n    ) %}\r\n    WITH block_base AS (\r\n        SELECT\r\n            block_number,\r\n            tx_count\r\n        FROM\r\n            {{ ref('silver__blocks') }}\r\n    ),\r\n    model_name AS (\r\n        SELECT\r\n            block_number,\r\n            COUNT(\r\n                DISTINCT tx_hash\r\n            ) AS model_tx_count\r\n        FROM\r\n            {{ model }}\r\n        GROUP BY\r\n            block_number\r\n    )\r\nSELECT\r\n    block_base.block_number,\r\n    tx_count,\r\n    model_name.block_number AS model_block_number,\r\n    model_tx_count\r\nFROM\r\n    block_base\r\n    LEFT JOIN model_name\r\n    ON block_base.block_number = model_name.block_number\r\nWHERE\r\n    tx_count <> model_tx_count\r\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1671050797.7021983}, "macro.dbt_snowflake.snowflake__create_table_as": {"unique_id": "macro.dbt_snowflake.snowflake__create_table_as", "package_name": "dbt_snowflake", "root_path": "C:\\Python310\\lib\\site-packages\\dbt\\include\\snowflake", "path": "macros\\adapters.sql", "original_file_path": "macros\\adapters.sql", "name": "snowflake__create_table_as", "macro_sql": "{% macro snowflake__create_table_as(temporary, relation, sql) -%}\n  {%- set transient = config.get('transient', default=true) -%}\n  {%- set cluster_by_keys = config.get('cluster_by', default=none) -%}\n  {%- set enable_automatic_clustering = config.get('automatic_clustering', default=false) -%}\n  {%- set copy_grants = config.get('copy_grants', default=false) -%}\n\n  {%- if cluster_by_keys is not none and cluster_by_keys is string -%}\n    {%- set cluster_by_keys = [cluster_by_keys] -%}\n  {%- endif -%}\n  {%- if cluster_by_keys is not none -%}\n    {%- set cluster_by_string = cluster_by_keys|join(\", \")-%}\n  {% else %}\n    {%- set cluster_by_string = none -%}\n  {%- endif -%}\n  {%- set sql_header = config.get('sql_header', none) -%}\n\n  {{ sql_header if sql_header is not none }}\n\n      create or replace {% if temporary -%}\n        temporary\n      {%- elif transient -%}\n        transient\n      {%- endif %} table {{ relation }} {% if copy_grants and not temporary -%} copy grants {%- endif %} as\n      (\n        {%- if cluster_by_string is not none -%}\n          select * from(\n            {{ sql }}\n            ) order by ({{ cluster_by_string }})\n        {%- else -%}\n          {{ sql }}\n        {%- endif %}\n      );\n    {% if cluster_by_string is not none and not temporary -%}\n      alter table {{relation}} cluster by ({{cluster_by_string}});\n    {%- endif -%}\n    {% if enable_automatic_clustering and cluster_by_string is not none and not temporary  -%}\n      alter table {{relation}} resume recluster;\n    {%- endif -%}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1671050797.7200227}, "macro.dbt_snowflake.get_column_comment_sql": {"unique_id": "macro.dbt_snowflake.get_column_comment_sql", "package_name": "dbt_snowflake", "root_path": "C:\\Python310\\lib\\site-packages\\dbt\\include\\snowflake", "path": "macros\\adapters.sql", "original_file_path": "macros\\adapters.sql", "name": "get_column_comment_sql", "macro_sql": "{% macro get_column_comment_sql(column_name, column_dict) -%}\n  {% if (column_name|upper in column_dict) -%}\n    {% set matched_column = column_name|upper -%}\n  {% elif (column_name|lower in column_dict) -%}\n    {% set matched_column = column_name|lower -%}\n  {% elif (column_name in column_dict) -%}\n    {% set matched_column = column_name -%}\n  {% else -%}\n    {% set matched_column = None -%}\n  {% endif -%}\n  {% if matched_column -%}\n    {{ adapter.quote(column_name) }} COMMENT $${{ column_dict[matched_column]['description'] | replace('$', '[$]') }}$$\n  {%- else -%}\n    {{ adapter.quote(column_name) }} COMMENT $$$$\n  {%- endif -%}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1671050797.7220235}, "macro.dbt_snowflake.get_persist_docs_column_list": {"unique_id": "macro.dbt_snowflake.get_persist_docs_column_list", "package_name": "dbt_snowflake", "root_path": "C:\\Python310\\lib\\site-packages\\dbt\\include\\snowflake", "path": "macros\\adapters.sql", "original_file_path": "macros\\adapters.sql", "name": "get_persist_docs_column_list", "macro_sql": "{% macro get_persist_docs_column_list(model_columns, query_columns) %}\n(\n  {% for column_name in query_columns %}\n    {{ get_column_comment_sql(column_name, model_columns) }}\n    {{- \", \" if not loop.last else \"\" }}\n  {% endfor %}\n)\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_snowflake.get_column_comment_sql"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1671050797.7220235}, "macro.dbt_snowflake.snowflake__create_view_as": {"unique_id": "macro.dbt_snowflake.snowflake__create_view_as", "package_name": "dbt_snowflake", "root_path": "C:\\Python310\\lib\\site-packages\\dbt\\include\\snowflake", "path": "macros\\adapters.sql", "original_file_path": "macros\\adapters.sql", "name": "snowflake__create_view_as", "macro_sql": "{% macro snowflake__create_view_as(relation, sql) -%}\n  {%- set secure = config.get('secure', default=false) -%}\n  {%- set copy_grants = config.get('copy_grants', default=false) -%}\n  {%- set sql_header = config.get('sql_header', none) -%}\n\n  {{ sql_header if sql_header is not none }}\n  create or replace {% if secure -%}\n    secure\n  {%- endif %} view {{ relation }}\n  {% if config.persist_column_docs() -%}\n    {% set model_columns = model.columns %}\n    {% set query_columns = get_columns_in_query(sql) %}\n    {{ get_persist_docs_column_list(model_columns, query_columns) }}\n\n  {%- endif %}\n  {% if copy_grants -%} copy grants {%- endif %} as (\n    {{ sql }}\n  );\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.get_columns_in_query", "macro.dbt_snowflake.get_persist_docs_column_list"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1671050797.724023}, "macro.dbt_snowflake.snowflake__get_columns_in_relation": {"unique_id": "macro.dbt_snowflake.snowflake__get_columns_in_relation", "package_name": "dbt_snowflake", "root_path": "C:\\Python310\\lib\\site-packages\\dbt\\include\\snowflake", "path": "macros\\adapters.sql", "original_file_path": "macros\\adapters.sql", "name": "snowflake__get_columns_in_relation", "macro_sql": "{% macro snowflake__get_columns_in_relation(relation) -%}\n  {%- set sql -%}\n    describe table {{ relation }}\n  {%- endset -%}\n  {%- set result = run_query(sql) -%}\n\n  {% set maximum = 10000 %}\n  {% if (result | length) >= maximum %}\n    {% set msg %}\n      Too many columns in relation {{ relation }}! dbt can only get\n      information about relations with fewer than {{ maximum }} columns.\n    {% endset %}\n    {% do exceptions.raise_compiler_error(msg) %}\n  {% endif %}\n\n  {% set columns = [] %}\n  {% for row in result %}\n    {% do columns.append(api.Column.from_description(row['name'], row['type'])) %}\n  {% endfor %}\n  {% do return(columns) %}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.run_query"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1671050797.726024}, "macro.dbt_snowflake.snowflake__list_schemas": {"unique_id": "macro.dbt_snowflake.snowflake__list_schemas", "package_name": "dbt_snowflake", "root_path": "C:\\Python310\\lib\\site-packages\\dbt\\include\\snowflake", "path": "macros\\adapters.sql", "original_file_path": "macros\\adapters.sql", "name": "snowflake__list_schemas", "macro_sql": "{% macro snowflake__list_schemas(database) -%}\n  {# 10k limit from here: https://docs.snowflake.net/manuals/sql-reference/sql/show-schemas.html#usage-notes #}\n  {% set maximum = 10000 %}\n  {% set sql -%}\n    show terse schemas in database {{ database }}\n    limit {{ maximum }}\n  {%- endset %}\n  {% set result = run_query(sql) %}\n  {% if (result | length) >= maximum %}\n    {% set msg %}\n      Too many schemas in database {{ database }}! dbt can only get\n      information about databases with fewer than {{ maximum }} schemas.\n    {% endset %}\n    {% do exceptions.raise_compiler_error(msg) %}\n  {% endif %}\n  {{ return(result) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.run_query"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1671050797.7280235}, "macro.dbt_snowflake.snowflake__list_relations_without_caching": {"unique_id": "macro.dbt_snowflake.snowflake__list_relations_without_caching", "package_name": "dbt_snowflake", "root_path": "C:\\Python310\\lib\\site-packages\\dbt\\include\\snowflake", "path": "macros\\adapters.sql", "original_file_path": "macros\\adapters.sql", "name": "snowflake__list_relations_without_caching", "macro_sql": "{% macro snowflake__list_relations_without_caching(schema_relation) %}\n  {%- set sql -%}\n    show terse objects in {{ schema_relation }}\n  {%- endset -%}\n\n  {%- set result = run_query(sql) -%}\n  {% set maximum = 10000 %}\n  {% if (result | length) >= maximum %}\n    {% set msg %}\n      Too many schemas in schema  {{ schema_relation }}! dbt can only get\n      information about schemas with fewer than {{ maximum }} objects.\n    {% endset %}\n    {% do exceptions.raise_compiler_error(msg) %}\n  {% endif %}\n  {%- do return(result) -%}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.run_query"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1671050797.7288134}, "macro.dbt_snowflake.snowflake__check_schema_exists": {"unique_id": "macro.dbt_snowflake.snowflake__check_schema_exists", "package_name": "dbt_snowflake", "root_path": "C:\\Python310\\lib\\site-packages\\dbt\\include\\snowflake", "path": "macros\\adapters.sql", "original_file_path": "macros\\adapters.sql", "name": "snowflake__check_schema_exists", "macro_sql": "{% macro snowflake__check_schema_exists(information_schema, schema) -%}\n  {% call statement('check_schema_exists', fetch_result=True) -%}\n        select count(*)\n        from {{ information_schema }}.schemata\n        where upper(schema_name) = upper('{{ schema }}')\n            and upper(catalog_name) = upper('{{ information_schema.database }}')\n  {%- endcall %}\n  {{ return(load_result('check_schema_exists').table) }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.statement"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1671050797.7298248}, "macro.dbt_snowflake.snowflake__current_timestamp": {"unique_id": "macro.dbt_snowflake.snowflake__current_timestamp", "package_name": "dbt_snowflake", "root_path": "C:\\Python310\\lib\\site-packages\\dbt\\include\\snowflake", "path": "macros\\adapters.sql", "original_file_path": "macros\\adapters.sql", "name": "snowflake__current_timestamp", "macro_sql": "{% macro snowflake__current_timestamp() -%}\n  convert_timezone('UTC', current_timestamp())\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1671050797.730824}, "macro.dbt_snowflake.snowflake__snapshot_string_as_time": {"unique_id": "macro.dbt_snowflake.snowflake__snapshot_string_as_time", "package_name": "dbt_snowflake", "root_path": "C:\\Python310\\lib\\site-packages\\dbt\\include\\snowflake", "path": "macros\\adapters.sql", "original_file_path": "macros\\adapters.sql", "name": "snowflake__snapshot_string_as_time", "macro_sql": "{% macro snowflake__snapshot_string_as_time(timestamp) -%}\n    {%- set result = \"to_timestamp_ntz('\" ~ timestamp ~ \"')\" -%}\n    {{ return(result) }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1671050797.730824}, "macro.dbt_snowflake.snowflake__snapshot_get_time": {"unique_id": "macro.dbt_snowflake.snowflake__snapshot_get_time", "package_name": "dbt_snowflake", "root_path": "C:\\Python310\\lib\\site-packages\\dbt\\include\\snowflake", "path": "macros\\adapters.sql", "original_file_path": "macros\\adapters.sql", "name": "snowflake__snapshot_get_time", "macro_sql": "{% macro snowflake__snapshot_get_time() -%}\n  to_timestamp_ntz({{ current_timestamp() }})\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.current_timestamp"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1671050797.730824}, "macro.dbt_snowflake.snowflake__rename_relation": {"unique_id": "macro.dbt_snowflake.snowflake__rename_relation", "package_name": "dbt_snowflake", "root_path": "C:\\Python310\\lib\\site-packages\\dbt\\include\\snowflake", "path": "macros\\adapters.sql", "original_file_path": "macros\\adapters.sql", "name": "snowflake__rename_relation", "macro_sql": "{% macro snowflake__rename_relation(from_relation, to_relation) -%}\n  {% call statement('rename_relation') -%}\n    alter table {{ from_relation }} rename to {{ to_relation }}\n  {%- endcall %}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.statement"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1671050797.7318382}, "macro.dbt_snowflake.snowflake__alter_column_type": {"unique_id": "macro.dbt_snowflake.snowflake__alter_column_type", "package_name": "dbt_snowflake", "root_path": "C:\\Python310\\lib\\site-packages\\dbt\\include\\snowflake", "path": "macros\\adapters.sql", "original_file_path": "macros\\adapters.sql", "name": "snowflake__alter_column_type", "macro_sql": "{% macro snowflake__alter_column_type(relation, column_name, new_column_type) -%}\n  {% call statement('alter_column_type') %}\n    alter table {{ relation }} alter {{ adapter.quote(column_name) }} set data type {{ new_column_type }};\n  {% endcall %}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.statement"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1671050797.7318382}, "macro.dbt_snowflake.snowflake__alter_relation_comment": {"unique_id": "macro.dbt_snowflake.snowflake__alter_relation_comment", "package_name": "dbt_snowflake", "root_path": "C:\\Python310\\lib\\site-packages\\dbt\\include\\snowflake", "path": "macros\\adapters.sql", "original_file_path": "macros\\adapters.sql", "name": "snowflake__alter_relation_comment", "macro_sql": "{% macro snowflake__alter_relation_comment(relation, relation_comment) -%}\n  comment on {{ relation.type }} {{ relation }} IS $${{ relation_comment | replace('$', '[$]') }}$$;\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1671050797.7328284}, "macro.dbt_snowflake.snowflake__alter_column_comment": {"unique_id": "macro.dbt_snowflake.snowflake__alter_column_comment", "package_name": "dbt_snowflake", "root_path": "C:\\Python310\\lib\\site-packages\\dbt\\include\\snowflake", "path": "macros\\adapters.sql", "original_file_path": "macros\\adapters.sql", "name": "snowflake__alter_column_comment", "macro_sql": "{% macro snowflake__alter_column_comment(relation, column_dict) -%}\n    {% set existing_columns = adapter.get_columns_in_relation(relation) | map(attribute=\"name\") | list %}\n    alter {{ relation.type }} {{ relation }} alter\n    {% for column_name in existing_columns if (column_name in existing_columns) or (column_name|lower in existing_columns) %}\n        {{ get_column_comment_sql(column_name, column_dict) }} {{- ',' if not loop.last else ';' }}\n    {% endfor %}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_snowflake.get_column_comment_sql"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1671050797.7338276}, "macro.dbt_snowflake.get_current_query_tag": {"unique_id": "macro.dbt_snowflake.get_current_query_tag", "package_name": "dbt_snowflake", "root_path": "C:\\Python310\\lib\\site-packages\\dbt\\include\\snowflake", "path": "macros\\adapters.sql", "original_file_path": "macros\\adapters.sql", "name": "get_current_query_tag", "macro_sql": "{% macro get_current_query_tag() -%}\n  {{ return(run_query(\"show parameters like 'query_tag' in session\").rows[0]['value']) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.run_query"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1671050797.734823}, "macro.dbt_snowflake.set_query_tag": {"unique_id": "macro.dbt_snowflake.set_query_tag", "package_name": "dbt_snowflake", "root_path": "C:\\Python310\\lib\\site-packages\\dbt\\include\\snowflake", "path": "macros\\adapters.sql", "original_file_path": "macros\\adapters.sql", "name": "set_query_tag", "macro_sql": "{% macro set_query_tag() -%}\n    {{ return(adapter.dispatch('set_query_tag', 'dbt')()) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_snowflake.snowflake__set_query_tag"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1671050797.734823}, "macro.dbt_snowflake.snowflake__set_query_tag": {"unique_id": "macro.dbt_snowflake.snowflake__set_query_tag", "package_name": "dbt_snowflake", "root_path": "C:\\Python310\\lib\\site-packages\\dbt\\include\\snowflake", "path": "macros\\adapters.sql", "original_file_path": "macros\\adapters.sql", "name": "snowflake__set_query_tag", "macro_sql": "{% macro snowflake__set_query_tag() -%}\n  {% set new_query_tag = config.get('query_tag') %}\n  {% if new_query_tag %}\n    {% set original_query_tag = get_current_query_tag() %}\n    {{ log(\"Setting query_tag to '\" ~ new_query_tag ~ \"'. Will reset to '\" ~ original_query_tag ~ \"' after materialization.\") }}\n    {% do run_query(\"alter session set query_tag = '{}'\".format(new_query_tag)) %}\n    {{ return(original_query_tag)}}\n  {% endif %}\n  {{ return(none)}}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_snowflake.get_current_query_tag", "macro.dbt.run_query"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1671050797.735823}, "macro.dbt_snowflake.unset_query_tag": {"unique_id": "macro.dbt_snowflake.unset_query_tag", "package_name": "dbt_snowflake", "root_path": "C:\\Python310\\lib\\site-packages\\dbt\\include\\snowflake", "path": "macros\\adapters.sql", "original_file_path": "macros\\adapters.sql", "name": "unset_query_tag", "macro_sql": "{% macro unset_query_tag(original_query_tag) -%}\n    {{ return(adapter.dispatch('unset_query_tag', 'dbt')(original_query_tag)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_snowflake.snowflake__unset_query_tag"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1671050797.735823}, "macro.dbt_snowflake.snowflake__unset_query_tag": {"unique_id": "macro.dbt_snowflake.snowflake__unset_query_tag", "package_name": "dbt_snowflake", "root_path": "C:\\Python310\\lib\\site-packages\\dbt\\include\\snowflake", "path": "macros\\adapters.sql", "original_file_path": "macros\\adapters.sql", "name": "snowflake__unset_query_tag", "macro_sql": "{% macro snowflake__unset_query_tag(original_query_tag) -%}\n  {% set new_query_tag = config.get('query_tag') %}\n  {% if new_query_tag %}\n    {% if original_query_tag %}\n      {{ log(\"Resetting query_tag to '\" ~ original_query_tag ~ \"'.\") }}\n      {% do run_query(\"alter session set query_tag = '{}'\".format(original_query_tag)) %}\n    {% else %}\n      {{ log(\"No original query_tag, unsetting parameter.\") }}\n      {% do run_query(\"alter session unset query_tag\") %}\n    {% endif %}\n  {% endif %}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.run_query"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1671050797.7368228}, "macro.dbt_snowflake.snowflake__alter_relation_add_remove_columns": {"unique_id": "macro.dbt_snowflake.snowflake__alter_relation_add_remove_columns", "package_name": "dbt_snowflake", "root_path": "C:\\Python310\\lib\\site-packages\\dbt\\include\\snowflake", "path": "macros\\adapters.sql", "original_file_path": "macros\\adapters.sql", "name": "snowflake__alter_relation_add_remove_columns", "macro_sql": "{% macro snowflake__alter_relation_add_remove_columns(relation, add_columns, remove_columns) %}\n\n  {% if add_columns %}\n\n    {% set sql -%}\n       alter {{ relation.type }} {{ relation }} add column\n          {% for column in add_columns %}\n            {{ column.name }} {{ column.data_type }}{{ ',' if not loop.last }}\n          {% endfor %}\n    {%- endset -%}\n\n    {% do run_query(sql) %}\n\n  {% endif %}\n\n  {% if remove_columns %}\n\n    {% set sql -%}\n        alter {{ relation.type }} {{ relation }} drop column\n            {% for column in remove_columns %}\n                {{ column.name }}{{ ',' if not loop.last }}\n            {% endfor %}\n    {%- endset -%}\n\n    {% do run_query(sql) %}\n\n  {% endif %}\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.run_query"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1671050797.7388225}, "macro.dbt_snowflake.snowflake_dml_explicit_transaction": {"unique_id": "macro.dbt_snowflake.snowflake_dml_explicit_transaction", "package_name": "dbt_snowflake", "root_path": "C:\\Python310\\lib\\site-packages\\dbt\\include\\snowflake", "path": "macros\\adapters.sql", "original_file_path": "macros\\adapters.sql", "name": "snowflake_dml_explicit_transaction", "macro_sql": "{% macro snowflake_dml_explicit_transaction(dml) %}\n  {#\n    Use this macro to wrap all INSERT, MERGE, UPDATE, DELETE, and TRUNCATE\n    statements before passing them into run_query(), or calling in the 'main' statement\n    of a materialization\n  #}\n  {% set dml_transaction -%}\n    begin;\n    {{ dml }};\n    commit;\n  {%- endset %}\n\n  {% do return(dml_transaction) %}\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1671050797.7388225}, "macro.dbt_snowflake.snowflake__truncate_relation": {"unique_id": "macro.dbt_snowflake.snowflake__truncate_relation", "package_name": "dbt_snowflake", "root_path": "C:\\Python310\\lib\\site-packages\\dbt\\include\\snowflake", "path": "macros\\adapters.sql", "original_file_path": "macros\\adapters.sql", "name": "snowflake__truncate_relation", "macro_sql": "{% macro snowflake__truncate_relation(relation) -%}\n  {% set truncate_dml %}\n    truncate table {{ relation }}\n  {% endset %}\n  {% call statement('truncate_relation') -%}\n    {{ snowflake_dml_explicit_transaction(truncate_dml) }}\n  {%- endcall %}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.statement", "macro.dbt_snowflake.snowflake_dml_explicit_transaction"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1671050797.7398226}, "macro.dbt_snowflake.snowflake__copy_grants": {"unique_id": "macro.dbt_snowflake.snowflake__copy_grants", "package_name": "dbt_snowflake", "root_path": "C:\\Python310\\lib\\site-packages\\dbt\\include\\snowflake", "path": "macros\\adapters.sql", "original_file_path": "macros\\adapters.sql", "name": "snowflake__copy_grants", "macro_sql": "{% macro snowflake__copy_grants() %}\n    {% set copy_grants = config.get('copy_grants', False) %}\n    {{ return(copy_grants) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1671050797.7398226}, "macro.dbt_snowflake.snowflake__support_multiple_grantees_per_dcl_statement": {"unique_id": "macro.dbt_snowflake.snowflake__support_multiple_grantees_per_dcl_statement", "package_name": "dbt_snowflake", "root_path": "C:\\Python310\\lib\\site-packages\\dbt\\include\\snowflake", "path": "macros\\adapters.sql", "original_file_path": "macros\\adapters.sql", "name": "snowflake__support_multiple_grantees_per_dcl_statement", "macro_sql": "\n\n{%- macro snowflake__support_multiple_grantees_per_dcl_statement() -%}\n    {{ return(False) }}\n{%- endmacro -%}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1671050797.7408228}, "macro.dbt_snowflake.snowflake__get_catalog": {"unique_id": "macro.dbt_snowflake.snowflake__get_catalog", "package_name": "dbt_snowflake", "root_path": "C:\\Python310\\lib\\site-packages\\dbt\\include\\snowflake", "path": "macros\\catalog.sql", "original_file_path": "macros\\catalog.sql", "name": "snowflake__get_catalog", "macro_sql": "{% macro snowflake__get_catalog(information_schema, schemas) -%}\n  {% set query %}\n      with tables as (\n\n          select\n              table_catalog as \"table_database\",\n              table_schema as \"table_schema\",\n              table_name as \"table_name\",\n              table_type as \"table_type\",\n              comment as \"table_comment\",\n\n              -- note: this is the _role_ that owns the table\n              table_owner as \"table_owner\",\n\n              'Clustering Key' as \"stats:clustering_key:label\",\n              clustering_key as \"stats:clustering_key:value\",\n              'The key used to cluster this table' as \"stats:clustering_key:description\",\n              (clustering_key is not null) as \"stats:clustering_key:include\",\n\n              'Row Count' as \"stats:row_count:label\",\n              row_count as \"stats:row_count:value\",\n              'An approximate count of rows in this table' as \"stats:row_count:description\",\n              (row_count is not null) as \"stats:row_count:include\",\n\n              'Approximate Size' as \"stats:bytes:label\",\n              bytes as \"stats:bytes:value\",\n              'Approximate size of the table as reported by Snowflake' as \"stats:bytes:description\",\n              (bytes is not null) as \"stats:bytes:include\",\n\n              'Last Modified' as \"stats:last_modified:label\",\n              to_varchar(convert_timezone('UTC', last_altered), 'yyyy-mm-dd HH24:MI'||'UTC') as \"stats:last_modified:value\",\n              'The timestamp for last update/change' as \"stats:last_modified:description\",\n              (last_altered is not null and table_type='BASE TABLE') as \"stats:last_modified:include\"\n\n          from {{ information_schema }}.tables\n\n      ),\n\n      columns as (\n\n          select\n              table_catalog as \"table_database\",\n              table_schema as \"table_schema\",\n              table_name as \"table_name\",\n\n              column_name as \"column_name\",\n              ordinal_position as \"column_index\",\n              data_type as \"column_type\",\n              comment as \"column_comment\"\n\n          from {{ information_schema }}.columns\n      )\n\n      select *\n      from tables\n      join columns using (\"table_database\", \"table_schema\", \"table_name\")\n      where (\n        {%- for schema in schemas -%}\n          upper(\"table_schema\") = upper('{{ schema }}'){%- if not loop.last %} or {% endif -%}\n        {%- endfor -%}\n      )\n      order by \"column_index\"\n    {%- endset -%}\n\n  {{ return(run_query(query)) }}\n\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.run_query"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1671050797.7428384}, "macro.dbt_snowflake.dbt_snowflake_validate_get_incremental_strategy": {"unique_id": "macro.dbt_snowflake.dbt_snowflake_validate_get_incremental_strategy", "package_name": "dbt_snowflake", "root_path": "C:\\Python310\\lib\\site-packages\\dbt\\include\\snowflake", "path": "macros\\materializations\\incremental.sql", "original_file_path": "macros\\materializations\\incremental.sql", "name": "dbt_snowflake_validate_get_incremental_strategy", "macro_sql": "{% macro dbt_snowflake_validate_get_incremental_strategy(config) %}\n  {#-- Find and validate the incremental strategy #}\n  {%- set strategy = config.get(\"incremental_strategy\", default=\"merge\") -%}\n\n  {% set invalid_strategy_msg -%}\n    Invalid incremental strategy provided: {{ strategy }}\n    Expected one of: 'merge', 'delete+insert'\n  {%- endset %}\n  {% if strategy not in ['merge', 'delete+insert'] %}\n    {% do exceptions.raise_compiler_error(invalid_strategy_msg) %}\n  {% endif %}\n\n  {% do return(strategy) %}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1671050797.7467291}, "macro.dbt_snowflake.dbt_snowflake_get_incremental_sql": {"unique_id": "macro.dbt_snowflake.dbt_snowflake_get_incremental_sql", "package_name": "dbt_snowflake", "root_path": "C:\\Python310\\lib\\site-packages\\dbt\\include\\snowflake", "path": "macros\\materializations\\incremental.sql", "original_file_path": "macros\\materializations\\incremental.sql", "name": "dbt_snowflake_get_incremental_sql", "macro_sql": "{% macro dbt_snowflake_get_incremental_sql(strategy, tmp_relation, target_relation, unique_key, dest_columns) %}\n  {% if strategy == 'merge' %}\n    {% do return(get_merge_sql(target_relation, tmp_relation, unique_key, dest_columns)) %}\n  {% elif strategy == 'delete+insert' %}\n    {% do return(get_delete_insert_merge_sql(target_relation, tmp_relation, unique_key, dest_columns)) %}\n  {% else %}\n    {% do exceptions.raise_compiler_error('invalid strategy: ' ~ strategy) %}\n  {% endif %}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.get_merge_sql", "macro.dbt.get_delete_insert_merge_sql"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1671050797.7497592}, "macro.dbt_snowflake.materialization_incremental_snowflake": {"unique_id": "macro.dbt_snowflake.materialization_incremental_snowflake", "package_name": "dbt_snowflake", "root_path": "C:\\Python310\\lib\\site-packages\\dbt\\include\\snowflake", "path": "macros\\materializations\\incremental.sql", "original_file_path": "macros\\materializations\\incremental.sql", "name": "materialization_incremental_snowflake", "macro_sql": "{% materialization incremental, adapter='snowflake' -%}\n\n  {% set original_query_tag = set_query_tag() %}\n\n  {%- set unique_key = config.get('unique_key') -%}\n  {%- set full_refresh_mode = (should_full_refresh()) -%}\n\n  {% set target_relation = this %}\n  {% set existing_relation = load_relation(this) %}\n  {% set tmp_relation = make_temp_relation(this) %}\n\n  {% set  grant_config = config.get('grants') %}\n\n  {#-- Validate early so we don't run SQL if the strategy is invalid --#}\n  {% set strategy = dbt_snowflake_validate_get_incremental_strategy(config) -%}\n  {% set on_schema_change = incremental_validate_on_schema_change(config.get('on_schema_change'), default='ignore') %}\n\n  {{ run_hooks(pre_hooks) }}\n\n  {% if existing_relation is none %}\n    {% set build_sql = create_table_as(False, target_relation, sql) %}\n\n  {% elif existing_relation.is_view %}\n    {#-- Can't overwrite a view with a table - we must drop --#}\n    {{ log(\"Dropping relation \" ~ target_relation ~ \" because it is a view and this model is a table.\") }}\n    {% do adapter.drop_relation(existing_relation) %}\n    {% set build_sql = create_table_as(False, target_relation, sql) %}\n\n  {% elif full_refresh_mode %}\n    {% set build_sql = create_table_as(False, target_relation, sql) %}\n\n  {% else %}\n    {% do run_query(create_table_as(True, tmp_relation, sql)) %}\n    {% do adapter.expand_target_column_types(\n           from_relation=tmp_relation,\n           to_relation=target_relation) %}\n    {#-- Process schema changes. Returns dict of changes if successful. Use source columns for upserting/merging --#}\n    {% set dest_columns = process_schema_changes(on_schema_change, tmp_relation, existing_relation) %}\n    {% if not dest_columns %}\n      {% set dest_columns = adapter.get_columns_in_relation(existing_relation) %}\n    {% endif %}\n    {% set build_sql = dbt_snowflake_get_incremental_sql(strategy, tmp_relation, target_relation, unique_key, dest_columns) %}\n\n  {% endif %}\n\n  {%- call statement('main') -%}\n    {{ build_sql }}\n  {%- endcall -%}\n\n  {{ run_hooks(post_hooks) }}\n\n  {% set target_relation = target_relation.incorporate(type='table') %}\n\n  {% set should_revoke =\n   should_revoke(existing_relation.is_table, full_refresh_mode) %}\n  {% do apply_grants(target_relation, grant_config, should_revoke=should_revoke) %}\n\n  {% do persist_docs(target_relation, model) %}\n\n  {% do unset_query_tag(original_query_tag) %}\n\n  {{ return({'relations': [target_relation]}) }}\n\n{%- endmaterialization %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.axelar.set_query_tag", "macro.dbt.should_full_refresh", "macro.dbt.load_relation", "macro.dbt.make_temp_relation", "macro.dbt_snowflake.dbt_snowflake_validate_get_incremental_strategy", "macro.dbt.incremental_validate_on_schema_change", "macro.dbt.run_hooks", "macro.dbt.create_table_as", "macro.dbt.run_query", "macro.dbt.process_schema_changes", "macro.dbt_snowflake.dbt_snowflake_get_incremental_sql", "macro.dbt.statement", "macro.dbt.should_revoke", "macro.dbt.apply_grants", "macro.dbt.persist_docs", "macro.dbt_snowflake.unset_query_tag"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1671050797.7557597}, "macro.dbt_snowflake.snowflake__get_merge_sql": {"unique_id": "macro.dbt_snowflake.snowflake__get_merge_sql", "package_name": "dbt_snowflake", "root_path": "C:\\Python310\\lib\\site-packages\\dbt\\include\\snowflake", "path": "macros\\materializations\\merge.sql", "original_file_path": "macros\\materializations\\merge.sql", "name": "snowflake__get_merge_sql", "macro_sql": "{% macro snowflake__get_merge_sql(target, source_sql, unique_key, dest_columns, predicates) -%}\n\n    {#\n       Workaround for Snowflake not being happy with a merge on a constant-false predicate.\n       When no unique_key is provided, this macro will do a regular insert. If a unique_key\n       is provided, then this macro will do a proper merge instead.\n    #}\n\n    {%- set dest_cols_csv = get_quoted_csv(dest_columns | map(attribute='name')) -%}\n    {%- set sql_header = config.get('sql_header', none) -%}\n\n    {%- set dml -%}\n    {%- if unique_key is none -%}\n\n        {{ sql_header if sql_header is not none }}\n\n        insert into {{ target }} ({{ dest_cols_csv }})\n        (\n            select {{ dest_cols_csv }}\n            from {{ source_sql }}\n        )\n\n    {%- else -%}\n\n        {{ default__get_merge_sql(target, source_sql, unique_key, dest_columns, predicates) }}\n\n    {%- endif -%}\n    {%- endset -%}\n\n    {% do return(snowflake_dml_explicit_transaction(dml)) %}\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.get_quoted_csv", "macro.dbt.default__get_merge_sql", "macro.dbt_snowflake.snowflake_dml_explicit_transaction"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1671050797.7587566}, "macro.dbt_snowflake.snowflake__get_delete_insert_merge_sql": {"unique_id": "macro.dbt_snowflake.snowflake__get_delete_insert_merge_sql", "package_name": "dbt_snowflake", "root_path": "C:\\Python310\\lib\\site-packages\\dbt\\include\\snowflake", "path": "macros\\materializations\\merge.sql", "original_file_path": "macros\\materializations\\merge.sql", "name": "snowflake__get_delete_insert_merge_sql", "macro_sql": "{% macro snowflake__get_delete_insert_merge_sql(target, source, unique_key, dest_columns) %}\n    {% set dml = default__get_delete_insert_merge_sql(target, source, unique_key, dest_columns) %}\n    {% do return(snowflake_dml_explicit_transaction(dml)) %}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.default__get_delete_insert_merge_sql", "macro.dbt_snowflake.snowflake_dml_explicit_transaction"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1671050797.7597616}, "macro.dbt_snowflake.snowflake__snapshot_merge_sql": {"unique_id": "macro.dbt_snowflake.snowflake__snapshot_merge_sql", "package_name": "dbt_snowflake", "root_path": "C:\\Python310\\lib\\site-packages\\dbt\\include\\snowflake", "path": "macros\\materializations\\merge.sql", "original_file_path": "macros\\materializations\\merge.sql", "name": "snowflake__snapshot_merge_sql", "macro_sql": "{% macro snowflake__snapshot_merge_sql(target, source, insert_cols) %}\n    {% set dml = default__snapshot_merge_sql(target, source, insert_cols) %}\n    {% do return(snowflake_dml_explicit_transaction(dml)) %}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.default__snapshot_merge_sql", "macro.dbt_snowflake.snowflake_dml_explicit_transaction"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1671050797.760757}, "macro.dbt_snowflake.snowflake__load_csv_rows": {"unique_id": "macro.dbt_snowflake.snowflake__load_csv_rows", "package_name": "dbt_snowflake", "root_path": "C:\\Python310\\lib\\site-packages\\dbt\\include\\snowflake", "path": "macros\\materializations\\seed.sql", "original_file_path": "macros\\materializations\\seed.sql", "name": "snowflake__load_csv_rows", "macro_sql": "{% macro snowflake__load_csv_rows(model, agate_table) %}\n    {% set batch_size = get_batch_size() %}\n    {% set cols_sql = get_seed_column_quoted_csv(model, agate_table.column_names) %}\n    {% set bindings = [] %}\n\n    {% set statements = [] %}\n\n    {% for chunk in agate_table.rows | batch(batch_size) %}\n        {% set bindings = [] %}\n\n        {% for row in chunk %}\n            {% do bindings.extend(row) %}\n        {% endfor %}\n\n        {% set sql %}\n            insert into {{ this.render() }} ({{ cols_sql }}) values\n            {% for row in chunk -%}\n                ({%- for column in agate_table.column_names -%}\n                    %s\n                    {%- if not loop.last%},{%- endif %}\n                {%- endfor -%})\n                {%- if not loop.last%},{%- endif %}\n            {%- endfor %}\n        {% endset %}\n\n        {% do adapter.add_query('BEGIN', auto_begin=False) %}\n        {% do adapter.add_query(sql, bindings=bindings, abridge_sql_log=True) %}\n        {% do adapter.add_query('COMMIT', auto_begin=False) %}\n\n        {% if loop.index0 == 0 %}\n            {% do statements.append(sql) %}\n        {% endif %}\n    {% endfor %}\n\n    {# Return SQL so we can render it out into the compiled files #}\n    {{ return(statements[0]) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.get_batch_size", "macro.dbt.get_seed_column_quoted_csv"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1671050797.7657468}, "macro.dbt_snowflake.materialization_seed_snowflake": {"unique_id": "macro.dbt_snowflake.materialization_seed_snowflake", "package_name": "dbt_snowflake", "root_path": "C:\\Python310\\lib\\site-packages\\dbt\\include\\snowflake", "path": "macros\\materializations\\seed.sql", "original_file_path": "macros\\materializations\\seed.sql", "name": "materialization_seed_snowflake", "macro_sql": "{% materialization seed, adapter='snowflake' %}\n    {% set original_query_tag = set_query_tag() %}\n\n    {% set relations = materialization_seed_default() %}\n\n    {% do unset_query_tag(original_query_tag) %}\n\n    {{ return(relations) }}\n{% endmaterialization %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.axelar.set_query_tag", "macro.dbt.materialization_seed_default", "macro.dbt_snowflake.unset_query_tag"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1671050797.7667515}, "macro.dbt_snowflake.materialization_snapshot_snowflake": {"unique_id": "macro.dbt_snowflake.materialization_snapshot_snowflake", "package_name": "dbt_snowflake", "root_path": "C:\\Python310\\lib\\site-packages\\dbt\\include\\snowflake", "path": "macros\\materializations\\snapshot.sql", "original_file_path": "macros\\materializations\\snapshot.sql", "name": "materialization_snapshot_snowflake", "macro_sql": "{% materialization snapshot, adapter='snowflake' %}\n    {% set original_query_tag = set_query_tag() %}\n    {% set relations = materialization_snapshot_default() %}\n\n    {% do unset_query_tag(original_query_tag) %}\n\n    {{ return(relations) }}\n{% endmaterialization %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.axelar.set_query_tag", "macro.dbt.materialization_snapshot_default", "macro.dbt_snowflake.unset_query_tag"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1671050797.7677324}, "macro.dbt_snowflake.materialization_table_snowflake": {"unique_id": "macro.dbt_snowflake.materialization_table_snowflake", "package_name": "dbt_snowflake", "root_path": "C:\\Python310\\lib\\site-packages\\dbt\\include\\snowflake", "path": "macros\\materializations\\table.sql", "original_file_path": "macros\\materializations\\table.sql", "name": "materialization_table_snowflake", "macro_sql": "{% materialization table, adapter='snowflake' %}\n\n  {% set original_query_tag = set_query_tag() %}\n\n  {%- set identifier = model['alias'] -%}\n\n  {% set grant_config = config.get('grants') %}\n\n  {%- set old_relation = adapter.get_relation(database=database, schema=schema, identifier=identifier) -%}\n  {%- set target_relation = api.Relation.create(identifier=identifier,\n                                                schema=schema,\n                                                database=database, type='table') -%}\n\n  {{ run_hooks(pre_hooks) }}\n\n  {#-- Drop the relation if it was a view to \"convert\" it in a table. This may lead to\n    -- downtime, but it should be a relatively infrequent occurrence  #}\n  {% if old_relation is not none and not old_relation.is_table %}\n    {{ log(\"Dropping relation \" ~ old_relation ~ \" because it is of type \" ~ old_relation.type) }}\n    {{ drop_relation_if_exists(old_relation) }}\n  {% endif %}\n\n  --build model\n  {% call statement('main') -%}\n    {{ create_table_as(false, target_relation, sql) }}\n  {%- endcall %}\n\n  {{ run_hooks(post_hooks) }}\n\n  {% set should_revoke = should_revoke(old_relation, full_refresh_mode=True) %}\n  {% do apply_grants(target_relation, grant_config, should_revoke=should_revoke) %}\n\n  {% do persist_docs(target_relation, model) %}\n\n  {% do unset_query_tag(original_query_tag) %}\n\n  {{ return({'relations': [target_relation]}) }}\n\n{% endmaterialization %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.axelar.set_query_tag", "macro.dbt.run_hooks", "macro.dbt.drop_relation_if_exists", "macro.dbt.statement", "macro.dbt.create_table_as", "macro.dbt.should_revoke", "macro.dbt.apply_grants", "macro.dbt.persist_docs", "macro.dbt_snowflake.unset_query_tag"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1671050797.770748}, "macro.dbt_snowflake.materialization_view_snowflake": {"unique_id": "macro.dbt_snowflake.materialization_view_snowflake", "package_name": "dbt_snowflake", "root_path": "C:\\Python310\\lib\\site-packages\\dbt\\include\\snowflake", "path": "macros\\materializations\\view.sql", "original_file_path": "macros\\materializations\\view.sql", "name": "materialization_view_snowflake", "macro_sql": "{% materialization view, adapter='snowflake' -%}\n\n    {% set original_query_tag = set_query_tag() %}\n    {% set to_return = create_or_replace_view() %}\n\n    {% set target_relation = this.incorporate(type='view') %}\n\n    {% do persist_docs(target_relation, model, for_columns=false) %}\n\n    {% do return(to_return) %}\n\n    {% do unset_query_tag(original_query_tag) %}\n\n{%- endmaterialization %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.axelar.set_query_tag", "macro.dbt.create_or_replace_view", "macro.dbt.persist_docs", "macro.dbt_snowflake.unset_query_tag"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1671050797.772734}, "macro.dbt_snowflake.snowflake__bool_or": {"unique_id": "macro.dbt_snowflake.snowflake__bool_or", "package_name": "dbt_snowflake", "root_path": "C:\\Python310\\lib\\site-packages\\dbt\\include\\snowflake", "path": "macros\\utils\\bool_or.sql", "original_file_path": "macros\\utils\\bool_or.sql", "name": "snowflake__bool_or", "macro_sql": "{% macro snowflake__bool_or(expression) -%}\n\n    boolor_agg({{ expression }})\n\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1671050797.772734}, "macro.dbt_snowflake.snowflake__escape_single_quotes": {"unique_id": "macro.dbt_snowflake.snowflake__escape_single_quotes", "package_name": "dbt_snowflake", "root_path": "C:\\Python310\\lib\\site-packages\\dbt\\include\\snowflake", "path": "macros\\utils\\escape_single_quotes.sql", "original_file_path": "macros\\utils\\escape_single_quotes.sql", "name": "snowflake__escape_single_quotes", "macro_sql": "{% macro snowflake__escape_single_quotes(expression) -%}\n{{ expression | replace(\"'\", \"\\\\'\") }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1671050797.7737315}, "macro.dbt_snowflake.snowflake__right": {"unique_id": "macro.dbt_snowflake.snowflake__right", "package_name": "dbt_snowflake", "root_path": "C:\\Python310\\lib\\site-packages\\dbt\\include\\snowflake", "path": "macros\\utils\\right.sql", "original_file_path": "macros\\utils\\right.sql", "name": "snowflake__right", "macro_sql": "{% macro snowflake__right(string_text, length_expression) %}\n\n    case when {{ length_expression }} = 0\n        then ''\n    else\n        right(\n            {{ string_text }},\n            {{ length_expression }}\n        )\n    end\n\n{%- endmacro -%}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1671050797.7737315}, "macro.dbt_snowflake.snowflake__safe_cast": {"unique_id": "macro.dbt_snowflake.snowflake__safe_cast", "package_name": "dbt_snowflake", "root_path": "C:\\Python310\\lib\\site-packages\\dbt\\include\\snowflake", "path": "macros\\utils\\safe_cast.sql", "original_file_path": "macros\\utils\\safe_cast.sql", "name": "snowflake__safe_cast", "macro_sql": "{% macro snowflake__safe_cast(field, type) %}\n    try_cast({{field}} as {{type}})\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1671050797.775268}, "macro.dbt.copy_grants": {"unique_id": "macro.dbt.copy_grants", "package_name": "dbt", "root_path": "C:\\Python310\\lib\\site-packages\\dbt\\include\\global_project", "path": "macros\\adapters\\apply_grants.sql", "original_file_path": "macros\\adapters\\apply_grants.sql", "name": "copy_grants", "macro_sql": "{% macro copy_grants() %}\n    {{ return(adapter.dispatch('copy_grants', 'dbt')()) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_snowflake.snowflake__copy_grants"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1671050797.7783005}, "macro.dbt.default__copy_grants": {"unique_id": "macro.dbt.default__copy_grants", "package_name": "dbt", "root_path": "C:\\Python310\\lib\\site-packages\\dbt\\include\\global_project", "path": "macros\\adapters\\apply_grants.sql", "original_file_path": "macros\\adapters\\apply_grants.sql", "name": "default__copy_grants", "macro_sql": "{% macro default__copy_grants() %}\n    {{ return(True) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1671050797.7783005}, "macro.dbt.support_multiple_grantees_per_dcl_statement": {"unique_id": "macro.dbt.support_multiple_grantees_per_dcl_statement", "package_name": "dbt", "root_path": "C:\\Python310\\lib\\site-packages\\dbt\\include\\global_project", "path": "macros\\adapters\\apply_grants.sql", "original_file_path": "macros\\adapters\\apply_grants.sql", "name": "support_multiple_grantees_per_dcl_statement", "macro_sql": "{% macro support_multiple_grantees_per_dcl_statement() %}\n    {{ return(adapter.dispatch('support_multiple_grantees_per_dcl_statement', 'dbt')()) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_snowflake.snowflake__support_multiple_grantees_per_dcl_statement"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1671050797.778928}, "macro.dbt.default__support_multiple_grantees_per_dcl_statement": {"unique_id": "macro.dbt.default__support_multiple_grantees_per_dcl_statement", "package_name": "dbt", "root_path": "C:\\Python310\\lib\\site-packages\\dbt\\include\\global_project", "path": "macros\\adapters\\apply_grants.sql", "original_file_path": "macros\\adapters\\apply_grants.sql", "name": "default__support_multiple_grantees_per_dcl_statement", "macro_sql": "\n\n{%- macro default__support_multiple_grantees_per_dcl_statement() -%}\n    {{ return(True) }}\n{%- endmacro -%}\n\n\n", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1671050797.778928}, "macro.dbt.should_revoke": {"unique_id": "macro.dbt.should_revoke", "package_name": "dbt", "root_path": "C:\\Python310\\lib\\site-packages\\dbt\\include\\global_project", "path": "macros\\adapters\\apply_grants.sql", "original_file_path": "macros\\adapters\\apply_grants.sql", "name": "should_revoke", "macro_sql": "{% macro should_revoke(existing_relation, full_refresh_mode=True) %}\n\n    {% if not existing_relation %}\n        {#-- The table doesn't already exist, so no grants to copy over --#}\n        {{ return(False) }}\n    {% elif full_refresh_mode %}\n        {#-- The object is being REPLACED -- whether grants are copied over depends on the value of user config --#}\n        {{ return(copy_grants()) }}\n    {% else %}\n        {#-- The table is being merged/upserted/inserted -- grants will be carried over --#}\n        {{ return(True) }}\n    {% endif %}\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.copy_grants"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1671050797.780097}, "macro.dbt.get_show_grant_sql": {"unique_id": "macro.dbt.get_show_grant_sql", "package_name": "dbt", "root_path": "C:\\Python310\\lib\\site-packages\\dbt\\include\\global_project", "path": "macros\\adapters\\apply_grants.sql", "original_file_path": "macros\\adapters\\apply_grants.sql", "name": "get_show_grant_sql", "macro_sql": "{% macro get_show_grant_sql(relation) %}\n    {{ return(adapter.dispatch(\"get_show_grant_sql\", \"dbt\")(relation)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.default__get_show_grant_sql"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1671050797.780097}, "macro.dbt.default__get_show_grant_sql": {"unique_id": "macro.dbt.default__get_show_grant_sql", "package_name": "dbt", "root_path": "C:\\Python310\\lib\\site-packages\\dbt\\include\\global_project", "path": "macros\\adapters\\apply_grants.sql", "original_file_path": "macros\\adapters\\apply_grants.sql", "name": "default__get_show_grant_sql", "macro_sql": "{% macro default__get_show_grant_sql(relation) %}\n    show grants on {{ relation }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1671050797.780097}, "macro.dbt.get_grant_sql": {"unique_id": "macro.dbt.get_grant_sql", "package_name": "dbt", "root_path": "C:\\Python310\\lib\\site-packages\\dbt\\include\\global_project", "path": "macros\\adapters\\apply_grants.sql", "original_file_path": "macros\\adapters\\apply_grants.sql", "name": "get_grant_sql", "macro_sql": "{% macro get_grant_sql(relation, privilege, grantees) %}\n    {{ return(adapter.dispatch('get_grant_sql', 'dbt')(relation, privilege, grantees)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.default__get_grant_sql"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1671050797.7810826}, "macro.dbt.default__get_grant_sql": {"unique_id": "macro.dbt.default__get_grant_sql", "package_name": "dbt", "root_path": "C:\\Python310\\lib\\site-packages\\dbt\\include\\global_project", "path": "macros\\adapters\\apply_grants.sql", "original_file_path": "macros\\adapters\\apply_grants.sql", "name": "default__get_grant_sql", "macro_sql": "\n\n{%- macro default__get_grant_sql(relation, privilege, grantees) -%}\n    grant {{ privilege }} on {{ relation }} to {{ grantees | join(', ') }}\n{%- endmacro -%}\n\n\n", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1671050797.7810826}, "macro.dbt.get_revoke_sql": {"unique_id": "macro.dbt.get_revoke_sql", "package_name": "dbt", "root_path": "C:\\Python310\\lib\\site-packages\\dbt\\include\\global_project", "path": "macros\\adapters\\apply_grants.sql", "original_file_path": "macros\\adapters\\apply_grants.sql", "name": "get_revoke_sql", "macro_sql": "{% macro get_revoke_sql(relation, privilege, grantees) %}\n    {{ return(adapter.dispatch('get_revoke_sql', 'dbt')(relation, privilege, grantees)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.default__get_revoke_sql"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1671050797.7819967}, "macro.dbt.default__get_revoke_sql": {"unique_id": "macro.dbt.default__get_revoke_sql", "package_name": "dbt", "root_path": "C:\\Python310\\lib\\site-packages\\dbt\\include\\global_project", "path": "macros\\adapters\\apply_grants.sql", "original_file_path": "macros\\adapters\\apply_grants.sql", "name": "default__get_revoke_sql", "macro_sql": "\n\n{%- macro default__get_revoke_sql(relation, privilege, grantees) -%}\n    revoke {{ privilege }} on {{ relation }} from {{ grantees | join(', ') }}\n{%- endmacro -%}\n\n\n", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1671050797.7819967}, "macro.dbt.get_dcl_statement_list": {"unique_id": "macro.dbt.get_dcl_statement_list", "package_name": "dbt", "root_path": "C:\\Python310\\lib\\site-packages\\dbt\\include\\global_project", "path": "macros\\adapters\\apply_grants.sql", "original_file_path": "macros\\adapters\\apply_grants.sql", "name": "get_dcl_statement_list", "macro_sql": "{% macro get_dcl_statement_list(relation, grant_config, get_dcl_macro) %}\n    {{ return(adapter.dispatch('get_dcl_statement_list', 'dbt')(relation, grant_config, get_dcl_macro)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.default__get_dcl_statement_list"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1671050797.7830157}, "macro.dbt.default__get_dcl_statement_list": {"unique_id": "macro.dbt.default__get_dcl_statement_list", "package_name": "dbt", "root_path": "C:\\Python310\\lib\\site-packages\\dbt\\include\\global_project", "path": "macros\\adapters\\apply_grants.sql", "original_file_path": "macros\\adapters\\apply_grants.sql", "name": "default__get_dcl_statement_list", "macro_sql": "\n\n{%- macro default__get_dcl_statement_list(relation, grant_config, get_dcl_macro) -%}\n    {#\n      -- Unpack grant_config into specific privileges and the set of users who need them granted/revoked.\n      -- Depending on whether this database supports multiple grantees per statement, pass in the list of\n      -- all grantees per privilege, or (if not) template one statement per privilege-grantee pair.\n      -- `get_dcl_macro` will be either `get_grant_sql` or `get_revoke_sql`\n    #}\n    {%- set dcl_statements = [] -%}\n    {%- for privilege, grantees in grant_config.items() %}\n        {%- if support_multiple_grantees_per_dcl_statement() and grantees -%}\n          {%- set dcl = get_dcl_macro(relation, privilege, grantees) -%}\n          {%- do dcl_statements.append(dcl) -%}\n        {%- else -%}\n          {%- for grantee in grantees -%}\n              {% set dcl = get_dcl_macro(relation, privilege, [grantee]) %}\n              {%- do dcl_statements.append(dcl) -%}\n          {% endfor -%}\n        {%- endif -%}\n    {%- endfor -%}\n    {{ return(dcl_statements) }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.support_multiple_grantees_per_dcl_statement"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1671050797.7839968}, "macro.dbt.call_dcl_statements": {"unique_id": "macro.dbt.call_dcl_statements", "package_name": "dbt", "root_path": "C:\\Python310\\lib\\site-packages\\dbt\\include\\global_project", "path": "macros\\adapters\\apply_grants.sql", "original_file_path": "macros\\adapters\\apply_grants.sql", "name": "call_dcl_statements", "macro_sql": "{% macro call_dcl_statements(dcl_statement_list) %}\n    {{ return(adapter.dispatch(\"call_dcl_statements\", \"dbt\")(dcl_statement_list)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.default__call_dcl_statements"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1671050797.7849996}, "macro.dbt.default__call_dcl_statements": {"unique_id": "macro.dbt.default__call_dcl_statements", "package_name": "dbt", "root_path": "C:\\Python310\\lib\\site-packages\\dbt\\include\\global_project", "path": "macros\\adapters\\apply_grants.sql", "original_file_path": "macros\\adapters\\apply_grants.sql", "name": "default__call_dcl_statements", "macro_sql": "{% macro default__call_dcl_statements(dcl_statement_list) %}\n    {#\n      -- By default, supply all grant + revoke statements in a single semicolon-separated block,\n      -- so that they're all processed together.\n\n      -- Some databases do not support this. Those adapters will need to override this macro\n      -- to run each statement individually.\n    #}\n    {% call statement('grants') %}\n        {% for dcl_statement in dcl_statement_list %}\n            {{ dcl_statement }};\n        {% endfor %}\n    {% endcall %}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.statement"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1671050797.7849996}, "macro.dbt.apply_grants": {"unique_id": "macro.dbt.apply_grants", "package_name": "dbt", "root_path": "C:\\Python310\\lib\\site-packages\\dbt\\include\\global_project", "path": "macros\\adapters\\apply_grants.sql", "original_file_path": "macros\\adapters\\apply_grants.sql", "name": "apply_grants", "macro_sql": "{% macro apply_grants(relation, grant_config, should_revoke) %}\n    {{ return(adapter.dispatch(\"apply_grants\", \"dbt\")(relation, grant_config, should_revoke)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.default__apply_grants"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1671050797.7859962}, "macro.dbt.default__apply_grants": {"unique_id": "macro.dbt.default__apply_grants", "package_name": "dbt", "root_path": "C:\\Python310\\lib\\site-packages\\dbt\\include\\global_project", "path": "macros\\adapters\\apply_grants.sql", "original_file_path": "macros\\adapters\\apply_grants.sql", "name": "default__apply_grants", "macro_sql": "{% macro default__apply_grants(relation, grant_config, should_revoke=True) %}\n    {#-- If grant_config is {} or None, this is a no-op --#}\n    {% if grant_config %}\n        {% if should_revoke %}\n            {#-- We think previous grants may have carried over --#}\n            {#-- Show current grants and calculate diffs --#}\n            {% set current_grants_table = run_query(get_show_grant_sql(relation)) %}\n            {% set current_grants_dict = adapter.standardize_grants_dict(current_grants_table) %}\n            {% set needs_granting = diff_of_two_dicts(grant_config, current_grants_dict) %}\n            {% set needs_revoking = diff_of_two_dicts(current_grants_dict, grant_config) %}\n            {% if not (needs_granting or needs_revoking) %}\n                {{ log('On ' ~ relation ~': All grants are in place, no revocation or granting needed.')}}\n            {% endif %}\n        {% else %}\n            {#-- We don't think there's any chance of previous grants having carried over. --#}\n            {#-- Jump straight to granting what the user has configured. --#}\n            {% set needs_revoking = {} %}\n            {% set needs_granting = grant_config %}\n        {% endif %}\n        {% if needs_granting or needs_revoking %}\n            {% set revoke_statement_list = get_dcl_statement_list(relation, needs_revoking, get_revoke_sql) %}\n            {% set grant_statement_list = get_dcl_statement_list(relation, needs_granting, get_grant_sql) %}\n            {% set dcl_statement_list = revoke_statement_list + grant_statement_list %}\n            {% if dcl_statement_list %}\n                {{ call_dcl_statements(dcl_statement_list) }}\n            {% endif %}\n        {% endif %}\n    {% endif %}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.run_query", "macro.dbt.get_show_grant_sql", "macro.dbt.get_dcl_statement_list", "macro.dbt.call_dcl_statements"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1671050797.7880023}, "macro.dbt.get_columns_in_relation": {"unique_id": "macro.dbt.get_columns_in_relation", "package_name": "dbt", "root_path": "C:\\Python310\\lib\\site-packages\\dbt\\include\\global_project", "path": "macros\\adapters\\columns.sql", "original_file_path": "macros\\adapters\\columns.sql", "name": "get_columns_in_relation", "macro_sql": "{% macro get_columns_in_relation(relation) -%}\n  {{ return(adapter.dispatch('get_columns_in_relation', 'dbt')(relation)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_snowflake.snowflake__get_columns_in_relation"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1671050797.7930083}, "macro.dbt.default__get_columns_in_relation": {"unique_id": "macro.dbt.default__get_columns_in_relation", "package_name": "dbt", "root_path": "C:\\Python310\\lib\\site-packages\\dbt\\include\\global_project", "path": "macros\\adapters\\columns.sql", "original_file_path": "macros\\adapters\\columns.sql", "name": "default__get_columns_in_relation", "macro_sql": "{% macro default__get_columns_in_relation(relation) -%}\n  {{ exceptions.raise_not_implemented(\n    'get_columns_in_relation macro not implemented for adapter '+adapter.type()) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1671050797.7930083}, "macro.dbt.sql_convert_columns_in_relation": {"unique_id": "macro.dbt.sql_convert_columns_in_relation", "package_name": "dbt", "root_path": "C:\\Python310\\lib\\site-packages\\dbt\\include\\global_project", "path": "macros\\adapters\\columns.sql", "original_file_path": "macros\\adapters\\columns.sql", "name": "sql_convert_columns_in_relation", "macro_sql": "{% macro sql_convert_columns_in_relation(table) -%}\n  {% set columns = [] %}\n  {% for row in table %}\n    {% do columns.append(api.Column(*row)) %}\n  {% endfor %}\n  {{ return(columns) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1671050797.794008}, "macro.dbt.get_columns_in_query": {"unique_id": "macro.dbt.get_columns_in_query", "package_name": "dbt", "root_path": "C:\\Python310\\lib\\site-packages\\dbt\\include\\global_project", "path": "macros\\adapters\\columns.sql", "original_file_path": "macros\\adapters\\columns.sql", "name": "get_columns_in_query", "macro_sql": "{% macro get_columns_in_query(select_sql) -%}\n  {{ return(adapter.dispatch('get_columns_in_query', 'dbt')(select_sql)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.default__get_columns_in_query"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1671050797.794008}, "macro.dbt.default__get_columns_in_query": {"unique_id": "macro.dbt.default__get_columns_in_query", "package_name": "dbt", "root_path": "C:\\Python310\\lib\\site-packages\\dbt\\include\\global_project", "path": "macros\\adapters\\columns.sql", "original_file_path": "macros\\adapters\\columns.sql", "name": "default__get_columns_in_query", "macro_sql": "{% macro default__get_columns_in_query(select_sql) %}\n    {% call statement('get_columns_in_query', fetch_result=True, auto_begin=False) -%}\n        select * from (\n            {{ select_sql }}\n        ) as __dbt_sbq\n        where false\n        limit 0\n    {% endcall %}\n\n    {{ return(load_result('get_columns_in_query').table.columns | map(attribute='name') | list) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.statement"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1671050797.7950182}, "macro.dbt.alter_column_type": {"unique_id": "macro.dbt.alter_column_type", "package_name": "dbt", "root_path": "C:\\Python310\\lib\\site-packages\\dbt\\include\\global_project", "path": "macros\\adapters\\columns.sql", "original_file_path": "macros\\adapters\\columns.sql", "name": "alter_column_type", "macro_sql": "{% macro alter_column_type(relation, column_name, new_column_type) -%}\n  {{ return(adapter.dispatch('alter_column_type', 'dbt')(relation, column_name, new_column_type)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_snowflake.snowflake__alter_column_type"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1671050797.7950182}, "macro.dbt.default__alter_column_type": {"unique_id": "macro.dbt.default__alter_column_type", "package_name": "dbt", "root_path": "C:\\Python310\\lib\\site-packages\\dbt\\include\\global_project", "path": "macros\\adapters\\columns.sql", "original_file_path": "macros\\adapters\\columns.sql", "name": "default__alter_column_type", "macro_sql": "{% macro default__alter_column_type(relation, column_name, new_column_type) -%}\n  {#\n    1. Create a new column (w/ temp name and correct type)\n    2. Copy data over to it\n    3. Drop the existing column (cascade!)\n    4. Rename the new column to existing column\n  #}\n  {%- set tmp_column = column_name + \"__dbt_alter\" -%}\n\n  {% call statement('alter_column_type') %}\n    alter table {{ relation }} add column {{ adapter.quote(tmp_column) }} {{ new_column_type }};\n    update {{ relation }} set {{ adapter.quote(tmp_column) }} = {{ adapter.quote(column_name) }};\n    alter table {{ relation }} drop column {{ adapter.quote(column_name) }} cascade;\n    alter table {{ relation }} rename column {{ adapter.quote(tmp_column) }} to {{ adapter.quote(column_name) }}\n  {% endcall %}\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.statement"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1671050797.7960067}, "macro.dbt.alter_relation_add_remove_columns": {"unique_id": "macro.dbt.alter_relation_add_remove_columns", "package_name": "dbt", "root_path": "C:\\Python310\\lib\\site-packages\\dbt\\include\\global_project", "path": "macros\\adapters\\columns.sql", "original_file_path": "macros\\adapters\\columns.sql", "name": "alter_relation_add_remove_columns", "macro_sql": "{% macro alter_relation_add_remove_columns(relation, add_columns = none, remove_columns = none) -%}\n  {{ return(adapter.dispatch('alter_relation_add_remove_columns', 'dbt')(relation, add_columns, remove_columns)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_snowflake.snowflake__alter_relation_add_remove_columns"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1671050797.7970097}, "macro.dbt.default__alter_relation_add_remove_columns": {"unique_id": "macro.dbt.default__alter_relation_add_remove_columns", "package_name": "dbt", "root_path": "C:\\Python310\\lib\\site-packages\\dbt\\include\\global_project", "path": "macros\\adapters\\columns.sql", "original_file_path": "macros\\adapters\\columns.sql", "name": "default__alter_relation_add_remove_columns", "macro_sql": "{% macro default__alter_relation_add_remove_columns(relation, add_columns, remove_columns) %}\n\n  {% if add_columns is none %}\n    {% set add_columns = [] %}\n  {% endif %}\n  {% if remove_columns is none %}\n    {% set remove_columns = [] %}\n  {% endif %}\n\n  {% set sql -%}\n\n     alter {{ relation.type }} {{ relation }}\n\n            {% for column in add_columns %}\n               add column {{ column.name }} {{ column.data_type }}{{ ',' if not loop.last }}\n            {% endfor %}{{ ',' if add_columns and remove_columns }}\n\n            {% for column in remove_columns %}\n                drop column {{ column.name }}{{ ',' if not loop.last }}\n            {% endfor %}\n\n  {%- endset -%}\n\n  {% do run_query(sql) %}\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.run_query"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1671050797.7980096}, "macro.dbt.current_timestamp": {"unique_id": "macro.dbt.current_timestamp", "package_name": "dbt", "root_path": "C:\\Python310\\lib\\site-packages\\dbt\\include\\global_project", "path": "macros\\adapters\\freshness.sql", "original_file_path": "macros\\adapters\\freshness.sql", "name": "current_timestamp", "macro_sql": "{% macro current_timestamp() -%}\n  {{ adapter.dispatch('current_timestamp', 'dbt')() }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_snowflake.snowflake__current_timestamp"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1671050797.799007}, "macro.dbt.default__current_timestamp": {"unique_id": "macro.dbt.default__current_timestamp", "package_name": "dbt", "root_path": "C:\\Python310\\lib\\site-packages\\dbt\\include\\global_project", "path": "macros\\adapters\\freshness.sql", "original_file_path": "macros\\adapters\\freshness.sql", "name": "default__current_timestamp", "macro_sql": "{% macro default__current_timestamp() -%}\n  {{ exceptions.raise_not_implemented(\n    'current_timestamp macro not implemented for adapter '+adapter.type()) }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1671050797.800009}, "macro.dbt.collect_freshness": {"unique_id": "macro.dbt.collect_freshness", "package_name": "dbt", "root_path": "C:\\Python310\\lib\\site-packages\\dbt\\include\\global_project", "path": "macros\\adapters\\freshness.sql", "original_file_path": "macros\\adapters\\freshness.sql", "name": "collect_freshness", "macro_sql": "{% macro collect_freshness(source, loaded_at_field, filter) %}\n  {{ return(adapter.dispatch('collect_freshness', 'dbt')(source, loaded_at_field, filter))}}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.default__collect_freshness"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1671050797.801}, "macro.dbt.default__collect_freshness": {"unique_id": "macro.dbt.default__collect_freshness", "package_name": "dbt", "root_path": "C:\\Python310\\lib\\site-packages\\dbt\\include\\global_project", "path": "macros\\adapters\\freshness.sql", "original_file_path": "macros\\adapters\\freshness.sql", "name": "default__collect_freshness", "macro_sql": "{% macro default__collect_freshness(source, loaded_at_field, filter) %}\n  {% call statement('collect_freshness', fetch_result=True, auto_begin=False) -%}\n    select\n      max({{ loaded_at_field }}) as max_loaded_at,\n      {{ current_timestamp() }} as snapshotted_at\n    from {{ source }}\n    {% if filter %}\n    where {{ filter }}\n    {% endif %}\n  {% endcall %}\n  {{ return(load_result('collect_freshness').table) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.statement", "macro.dbt_utils.current_timestamp"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1671050797.8028507}, "macro.dbt.get_create_index_sql": {"unique_id": "macro.dbt.get_create_index_sql", "package_name": "dbt", "root_path": "C:\\Python310\\lib\\site-packages\\dbt\\include\\global_project", "path": "macros\\adapters\\indexes.sql", "original_file_path": "macros\\adapters\\indexes.sql", "name": "get_create_index_sql", "macro_sql": "{% macro get_create_index_sql(relation, index_dict) -%}\n  {{ return(adapter.dispatch('get_create_index_sql', 'dbt')(relation, index_dict)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.default__get_create_index_sql"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1671050797.80385}, "macro.dbt.default__get_create_index_sql": {"unique_id": "macro.dbt.default__get_create_index_sql", "package_name": "dbt", "root_path": "C:\\Python310\\lib\\site-packages\\dbt\\include\\global_project", "path": "macros\\adapters\\indexes.sql", "original_file_path": "macros\\adapters\\indexes.sql", "name": "default__get_create_index_sql", "macro_sql": "{% macro default__get_create_index_sql(relation, index_dict) -%}\n  {% do return(None) %}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1671050797.80385}, "macro.dbt.create_indexes": {"unique_id": "macro.dbt.create_indexes", "package_name": "dbt", "root_path": "C:\\Python310\\lib\\site-packages\\dbt\\include\\global_project", "path": "macros\\adapters\\indexes.sql", "original_file_path": "macros\\adapters\\indexes.sql", "name": "create_indexes", "macro_sql": "{% macro create_indexes(relation) -%}\n  {{ adapter.dispatch('create_indexes', 'dbt')(relation) }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.default__create_indexes"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1671050797.8048906}, "macro.dbt.default__create_indexes": {"unique_id": "macro.dbt.default__create_indexes", "package_name": "dbt", "root_path": "C:\\Python310\\lib\\site-packages\\dbt\\include\\global_project", "path": "macros\\adapters\\indexes.sql", "original_file_path": "macros\\adapters\\indexes.sql", "name": "default__create_indexes", "macro_sql": "{% macro default__create_indexes(relation) -%}\n  {%- set _indexes = config.get('indexes', default=[]) -%}\n\n  {% for _index_dict in _indexes %}\n    {% set create_index_sql = get_create_index_sql(relation, _index_dict) %}\n    {% if create_index_sql %}\n      {% do run_query(create_index_sql) %}\n    {% endif %}\n  {% endfor %}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.get_create_index_sql", "macro.dbt.run_query"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1671050797.8059266}, "macro.dbt.get_catalog": {"unique_id": "macro.dbt.get_catalog", "package_name": "dbt", "root_path": "C:\\Python310\\lib\\site-packages\\dbt\\include\\global_project", "path": "macros\\adapters\\metadata.sql", "original_file_path": "macros\\adapters\\metadata.sql", "name": "get_catalog", "macro_sql": "{% macro get_catalog(information_schema, schemas) -%}\n  {{ return(adapter.dispatch('get_catalog', 'dbt')(information_schema, schemas)) }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_snowflake.snowflake__get_catalog"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1671050797.807939}, "macro.dbt.default__get_catalog": {"unique_id": "macro.dbt.default__get_catalog", "package_name": "dbt", "root_path": "C:\\Python310\\lib\\site-packages\\dbt\\include\\global_project", "path": "macros\\adapters\\metadata.sql", "original_file_path": "macros\\adapters\\metadata.sql", "name": "default__get_catalog", "macro_sql": "{% macro default__get_catalog(information_schema, schemas) -%}\n\n  {% set typename = adapter.type() %}\n  {% set msg -%}\n    get_catalog not implemented for {{ typename }}\n  {%- endset %}\n\n  {{ exceptions.raise_compiler_error(msg) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1671050797.809208}, "macro.dbt.information_schema_name": {"unique_id": "macro.dbt.information_schema_name", "package_name": "dbt", "root_path": "C:\\Python310\\lib\\site-packages\\dbt\\include\\global_project", "path": "macros\\adapters\\metadata.sql", "original_file_path": "macros\\adapters\\metadata.sql", "name": "information_schema_name", "macro_sql": "{% macro information_schema_name(database) %}\n  {{ return(adapter.dispatch('information_schema_name', 'dbt')(database)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.default__information_schema_name"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1671050797.809208}, "macro.dbt.default__information_schema_name": {"unique_id": "macro.dbt.default__information_schema_name", "package_name": "dbt", "root_path": "C:\\Python310\\lib\\site-packages\\dbt\\include\\global_project", "path": "macros\\adapters\\metadata.sql", "original_file_path": "macros\\adapters\\metadata.sql", "name": "default__information_schema_name", "macro_sql": "{% macro default__information_schema_name(database) -%}\n  {%- if database -%}\n    {{ database }}.INFORMATION_SCHEMA\n  {%- else -%}\n    INFORMATION_SCHEMA\n  {%- endif -%}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1671050797.8102221}, "macro.dbt.list_schemas": {"unique_id": "macro.dbt.list_schemas", "package_name": "dbt", "root_path": "C:\\Python310\\lib\\site-packages\\dbt\\include\\global_project", "path": "macros\\adapters\\metadata.sql", "original_file_path": "macros\\adapters\\metadata.sql", "name": "list_schemas", "macro_sql": "{% macro list_schemas(database) -%}\n  {{ return(adapter.dispatch('list_schemas', 'dbt')(database)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_snowflake.snowflake__list_schemas"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1671050797.8102221}, "macro.dbt.default__list_schemas": {"unique_id": "macro.dbt.default__list_schemas", "package_name": "dbt", "root_path": "C:\\Python310\\lib\\site-packages\\dbt\\include\\global_project", "path": "macros\\adapters\\metadata.sql", "original_file_path": "macros\\adapters\\metadata.sql", "name": "default__list_schemas", "macro_sql": "{% macro default__list_schemas(database) -%}\n  {% set sql %}\n    select distinct schema_name\n    from {{ information_schema_name(database) }}.SCHEMATA\n    where catalog_name ilike '{{ database }}'\n  {% endset %}\n  {{ return(run_query(sql)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.information_schema_name", "macro.dbt.run_query"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1671050797.8112214}, "macro.dbt.check_schema_exists": {"unique_id": "macro.dbt.check_schema_exists", "package_name": "dbt", "root_path": "C:\\Python310\\lib\\site-packages\\dbt\\include\\global_project", "path": "macros\\adapters\\metadata.sql", "original_file_path": "macros\\adapters\\metadata.sql", "name": "check_schema_exists", "macro_sql": "{% macro check_schema_exists(information_schema, schema) -%}\n  {{ return(adapter.dispatch('check_schema_exists', 'dbt')(information_schema, schema)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_snowflake.snowflake__check_schema_exists"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1671050797.8112214}, "macro.dbt.default__check_schema_exists": {"unique_id": "macro.dbt.default__check_schema_exists", "package_name": "dbt", "root_path": "C:\\Python310\\lib\\site-packages\\dbt\\include\\global_project", "path": "macros\\adapters\\metadata.sql", "original_file_path": "macros\\adapters\\metadata.sql", "name": "default__check_schema_exists", "macro_sql": "{% macro default__check_schema_exists(information_schema, schema) -%}\n  {% set sql -%}\n        select count(*)\n        from {{ information_schema.replace(information_schema_view='SCHEMATA') }}\n        where catalog_name='{{ information_schema.database }}'\n          and schema_name='{{ schema }}'\n  {%- endset %}\n  {{ return(run_query(sql)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.replace", "macro.dbt.run_query"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1671050797.8122208}, "macro.dbt.list_relations_without_caching": {"unique_id": "macro.dbt.list_relations_without_caching", "package_name": "dbt", "root_path": "C:\\Python310\\lib\\site-packages\\dbt\\include\\global_project", "path": "macros\\adapters\\metadata.sql", "original_file_path": "macros\\adapters\\metadata.sql", "name": "list_relations_without_caching", "macro_sql": "{% macro list_relations_without_caching(schema_relation) %}\n  {{ return(adapter.dispatch('list_relations_without_caching', 'dbt')(schema_relation)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_snowflake.snowflake__list_relations_without_caching"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1671050797.8132212}, "macro.dbt.default__list_relations_without_caching": {"unique_id": "macro.dbt.default__list_relations_without_caching", "package_name": "dbt", "root_path": "C:\\Python310\\lib\\site-packages\\dbt\\include\\global_project", "path": "macros\\adapters\\metadata.sql", "original_file_path": "macros\\adapters\\metadata.sql", "name": "default__list_relations_without_caching", "macro_sql": "{% macro default__list_relations_without_caching(schema_relation) %}\n  {{ exceptions.raise_not_implemented(\n    'list_relations_without_caching macro not implemented for adapter '+adapter.type()) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1671050797.8132212}, "macro.dbt.alter_column_comment": {"unique_id": "macro.dbt.alter_column_comment", "package_name": "dbt", "root_path": "C:\\Python310\\lib\\site-packages\\dbt\\include\\global_project", "path": "macros\\adapters\\persist_docs.sql", "original_file_path": "macros\\adapters\\persist_docs.sql", "name": "alter_column_comment", "macro_sql": "{% macro alter_column_comment(relation, column_dict) -%}\n  {{ return(adapter.dispatch('alter_column_comment', 'dbt')(relation, column_dict)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_snowflake.snowflake__alter_column_comment"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1671050797.8152223}, "macro.dbt.default__alter_column_comment": {"unique_id": "macro.dbt.default__alter_column_comment", "package_name": "dbt", "root_path": "C:\\Python310\\lib\\site-packages\\dbt\\include\\global_project", "path": "macros\\adapters\\persist_docs.sql", "original_file_path": "macros\\adapters\\persist_docs.sql", "name": "default__alter_column_comment", "macro_sql": "{% macro default__alter_column_comment(relation, column_dict) -%}\n  {{ exceptions.raise_not_implemented(\n    'alter_column_comment macro not implemented for adapter '+adapter.type()) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1671050797.8162234}, "macro.dbt.alter_relation_comment": {"unique_id": "macro.dbt.alter_relation_comment", "package_name": "dbt", "root_path": "C:\\Python310\\lib\\site-packages\\dbt\\include\\global_project", "path": "macros\\adapters\\persist_docs.sql", "original_file_path": "macros\\adapters\\persist_docs.sql", "name": "alter_relation_comment", "macro_sql": "{% macro alter_relation_comment(relation, relation_comment) -%}\n  {{ return(adapter.dispatch('alter_relation_comment', 'dbt')(relation, relation_comment)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_snowflake.snowflake__alter_relation_comment"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1671050797.8162234}, "macro.dbt.default__alter_relation_comment": {"unique_id": "macro.dbt.default__alter_relation_comment", "package_name": "dbt", "root_path": "C:\\Python310\\lib\\site-packages\\dbt\\include\\global_project", "path": "macros\\adapters\\persist_docs.sql", "original_file_path": "macros\\adapters\\persist_docs.sql", "name": "default__alter_relation_comment", "macro_sql": "{% macro default__alter_relation_comment(relation, relation_comment) -%}\n  {{ exceptions.raise_not_implemented(\n    'alter_relation_comment macro not implemented for adapter '+adapter.type()) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1671050797.817219}, "macro.dbt.persist_docs": {"unique_id": "macro.dbt.persist_docs", "package_name": "dbt", "root_path": "C:\\Python310\\lib\\site-packages\\dbt\\include\\global_project", "path": "macros\\adapters\\persist_docs.sql", "original_file_path": "macros\\adapters\\persist_docs.sql", "name": "persist_docs", "macro_sql": "{% macro persist_docs(relation, model, for_relation=true, for_columns=true) -%}\n  {{ return(adapter.dispatch('persist_docs', 'dbt')(relation, model, for_relation, for_columns)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.default__persist_docs"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1671050797.8182187}, "macro.dbt.default__persist_docs": {"unique_id": "macro.dbt.default__persist_docs", "package_name": "dbt", "root_path": "C:\\Python310\\lib\\site-packages\\dbt\\include\\global_project", "path": "macros\\adapters\\persist_docs.sql", "original_file_path": "macros\\adapters\\persist_docs.sql", "name": "default__persist_docs", "macro_sql": "{% macro default__persist_docs(relation, model, for_relation, for_columns) -%}\n  {% if for_relation and config.persist_relation_docs() and model.description %}\n    {% do run_query(alter_relation_comment(relation, model.description)) %}\n  {% endif %}\n\n  {% if for_columns and config.persist_column_docs() and model.columns %}\n    {% do run_query(alter_column_comment(relation, model.columns)) %}\n  {% endif %}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.run_query", "macro.dbt.alter_relation_comment", "macro.dbt.alter_column_comment"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1671050797.8192725}, "macro.dbt.make_intermediate_relation": {"unique_id": "macro.dbt.make_intermediate_relation", "package_name": "dbt", "root_path": "C:\\Python310\\lib\\site-packages\\dbt\\include\\global_project", "path": "macros\\adapters\\relation.sql", "original_file_path": "macros\\adapters\\relation.sql", "name": "make_intermediate_relation", "macro_sql": "{% macro make_intermediate_relation(base_relation, suffix='__dbt_tmp') %}\n  {{ return(adapter.dispatch('make_intermediate_relation', 'dbt')(base_relation, suffix)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.default__make_intermediate_relation"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1671050797.8245733}, "macro.dbt.default__make_intermediate_relation": {"unique_id": "macro.dbt.default__make_intermediate_relation", "package_name": "dbt", "root_path": "C:\\Python310\\lib\\site-packages\\dbt\\include\\global_project", "path": "macros\\adapters\\relation.sql", "original_file_path": "macros\\adapters\\relation.sql", "name": "default__make_intermediate_relation", "macro_sql": "{% macro default__make_intermediate_relation(base_relation, suffix) %}\n    {{ return(default__make_temp_relation(base_relation, suffix)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.default__make_temp_relation"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1671050797.8245733}, "macro.dbt.make_temp_relation": {"unique_id": "macro.dbt.make_temp_relation", "package_name": "dbt", "root_path": "C:\\Python310\\lib\\site-packages\\dbt\\include\\global_project", "path": "macros\\adapters\\relation.sql", "original_file_path": "macros\\adapters\\relation.sql", "name": "make_temp_relation", "macro_sql": "{% macro make_temp_relation(base_relation, suffix='__dbt_tmp') %}\n  {{ return(adapter.dispatch('make_temp_relation', 'dbt')(base_relation, suffix)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.default__make_temp_relation"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1671050797.8256607}, "macro.dbt.default__make_temp_relation": {"unique_id": "macro.dbt.default__make_temp_relation", "package_name": "dbt", "root_path": "C:\\Python310\\lib\\site-packages\\dbt\\include\\global_project", "path": "macros\\adapters\\relation.sql", "original_file_path": "macros\\adapters\\relation.sql", "name": "default__make_temp_relation", "macro_sql": "{% macro default__make_temp_relation(base_relation, suffix) %}\n    {%- set temp_identifier = base_relation.identifier ~ suffix -%}\n    {%- set temp_relation = base_relation.incorporate(\n                                path={\"identifier\": temp_identifier}) -%}\n\n    {{ return(temp_relation) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1671050797.8256607}, "macro.dbt.make_backup_relation": {"unique_id": "macro.dbt.make_backup_relation", "package_name": "dbt", "root_path": "C:\\Python310\\lib\\site-packages\\dbt\\include\\global_project", "path": "macros\\adapters\\relation.sql", "original_file_path": "macros\\adapters\\relation.sql", "name": "make_backup_relation", "macro_sql": "{% macro make_backup_relation(base_relation, backup_relation_type, suffix='__dbt_backup') %}\n    {{ return(adapter.dispatch('make_backup_relation', 'dbt')(base_relation, backup_relation_type, suffix)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.default__make_backup_relation"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1671050797.8266609}, "macro.dbt.default__make_backup_relation": {"unique_id": "macro.dbt.default__make_backup_relation", "package_name": "dbt", "root_path": "C:\\Python310\\lib\\site-packages\\dbt\\include\\global_project", "path": "macros\\adapters\\relation.sql", "original_file_path": "macros\\adapters\\relation.sql", "name": "default__make_backup_relation", "macro_sql": "{% macro default__make_backup_relation(base_relation, backup_relation_type, suffix) %}\n    {%- set backup_identifier = base_relation.identifier ~ suffix -%}\n    {%- set backup_relation = base_relation.incorporate(\n                                  path={\"identifier\": backup_identifier},\n                                  type=backup_relation_type\n    ) -%}\n    {{ return(backup_relation) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1671050797.8275735}, "macro.dbt.drop_relation": {"unique_id": "macro.dbt.drop_relation", "package_name": "dbt", "root_path": "C:\\Python310\\lib\\site-packages\\dbt\\include\\global_project", "path": "macros\\adapters\\relation.sql", "original_file_path": "macros\\adapters\\relation.sql", "name": "drop_relation", "macro_sql": "{% macro drop_relation(relation) -%}\n  {{ return(adapter.dispatch('drop_relation', 'dbt')(relation)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.default__drop_relation"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1671050797.8275735}, "macro.dbt.default__drop_relation": {"unique_id": "macro.dbt.default__drop_relation", "package_name": "dbt", "root_path": "C:\\Python310\\lib\\site-packages\\dbt\\include\\global_project", "path": "macros\\adapters\\relation.sql", "original_file_path": "macros\\adapters\\relation.sql", "name": "default__drop_relation", "macro_sql": "{% macro default__drop_relation(relation) -%}\n  {% call statement('drop_relation', auto_begin=False) -%}\n    drop {{ relation.type }} if exists {{ relation }} cascade\n  {%- endcall %}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.statement"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1671050797.8275735}, "macro.dbt.truncate_relation": {"unique_id": "macro.dbt.truncate_relation", "package_name": "dbt", "root_path": "C:\\Python310\\lib\\site-packages\\dbt\\include\\global_project", "path": "macros\\adapters\\relation.sql", "original_file_path": "macros\\adapters\\relation.sql", "name": "truncate_relation", "macro_sql": "{% macro truncate_relation(relation) -%}\n  {{ return(adapter.dispatch('truncate_relation', 'dbt')(relation)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_snowflake.snowflake__truncate_relation"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1671050797.8285742}, "macro.dbt.default__truncate_relation": {"unique_id": "macro.dbt.default__truncate_relation", "package_name": "dbt", "root_path": "C:\\Python310\\lib\\site-packages\\dbt\\include\\global_project", "path": "macros\\adapters\\relation.sql", "original_file_path": "macros\\adapters\\relation.sql", "name": "default__truncate_relation", "macro_sql": "{% macro default__truncate_relation(relation) -%}\n  {% call statement('truncate_relation') -%}\n    truncate table {{ relation }}\n  {%- endcall %}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.statement"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1671050797.8285742}, "macro.dbt.rename_relation": {"unique_id": "macro.dbt.rename_relation", "package_name": "dbt", "root_path": "C:\\Python310\\lib\\site-packages\\dbt\\include\\global_project", "path": "macros\\adapters\\relation.sql", "original_file_path": "macros\\adapters\\relation.sql", "name": "rename_relation", "macro_sql": "{% macro rename_relation(from_relation, to_relation) -%}\n  {{ return(adapter.dispatch('rename_relation', 'dbt')(from_relation, to_relation)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_snowflake.snowflake__rename_relation"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1671050797.8285742}, "macro.dbt.default__rename_relation": {"unique_id": "macro.dbt.default__rename_relation", "package_name": "dbt", "root_path": "C:\\Python310\\lib\\site-packages\\dbt\\include\\global_project", "path": "macros\\adapters\\relation.sql", "original_file_path": "macros\\adapters\\relation.sql", "name": "default__rename_relation", "macro_sql": "{% macro default__rename_relation(from_relation, to_relation) -%}\n  {% set target_name = adapter.quote_as_configured(to_relation.identifier, 'identifier') %}\n  {% call statement('rename_relation') -%}\n    alter table {{ from_relation }} rename to {{ target_name }}\n  {%- endcall %}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.statement"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1671050797.8295732}, "macro.dbt.get_or_create_relation": {"unique_id": "macro.dbt.get_or_create_relation", "package_name": "dbt", "root_path": "C:\\Python310\\lib\\site-packages\\dbt\\include\\global_project", "path": "macros\\adapters\\relation.sql", "original_file_path": "macros\\adapters\\relation.sql", "name": "get_or_create_relation", "macro_sql": "{% macro get_or_create_relation(database, schema, identifier, type) -%}\n  {{ return(adapter.dispatch('get_or_create_relation', 'dbt')(database, schema, identifier, type)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.default__get_or_create_relation"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1671050797.8306713}, "macro.dbt.default__get_or_create_relation": {"unique_id": "macro.dbt.default__get_or_create_relation", "package_name": "dbt", "root_path": "C:\\Python310\\lib\\site-packages\\dbt\\include\\global_project", "path": "macros\\adapters\\relation.sql", "original_file_path": "macros\\adapters\\relation.sql", "name": "default__get_or_create_relation", "macro_sql": "{% macro default__get_or_create_relation(database, schema, identifier, type) %}\n  {%- set target_relation = adapter.get_relation(database=database, schema=schema, identifier=identifier) %}\n\n  {% if target_relation %}\n    {% do return([true, target_relation]) %}\n  {% endif %}\n\n  {%- set new_relation = api.Relation.create(\n      database=database,\n      schema=schema,\n      identifier=identifier,\n      type=type\n  ) -%}\n  {% do return([false, new_relation]) %}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1671050797.8315744}, "macro.dbt.load_cached_relation": {"unique_id": "macro.dbt.load_cached_relation", "package_name": "dbt", "root_path": "C:\\Python310\\lib\\site-packages\\dbt\\include\\global_project", "path": "macros\\adapters\\relation.sql", "original_file_path": "macros\\adapters\\relation.sql", "name": "load_cached_relation", "macro_sql": "{% macro load_cached_relation(relation) %}\n  {% do return(adapter.get_relation(\n    database=relation.database,\n    schema=relation.schema,\n    identifier=relation.identifier\n  )) -%}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1671050797.8315744}, "macro.dbt.load_relation": {"unique_id": "macro.dbt.load_relation", "package_name": "dbt", "root_path": "C:\\Python310\\lib\\site-packages\\dbt\\include\\global_project", "path": "macros\\adapters\\relation.sql", "original_file_path": "macros\\adapters\\relation.sql", "name": "load_relation", "macro_sql": "{% macro load_relation(relation) %}\n    {{ return(load_cached_relation(relation)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.load_cached_relation"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1671050797.832709}, "macro.dbt.drop_relation_if_exists": {"unique_id": "macro.dbt.drop_relation_if_exists", "package_name": "dbt", "root_path": "C:\\Python310\\lib\\site-packages\\dbt\\include\\global_project", "path": "macros\\adapters\\relation.sql", "original_file_path": "macros\\adapters\\relation.sql", "name": "drop_relation_if_exists", "macro_sql": "{% macro drop_relation_if_exists(relation) %}\n  {% if relation is not none %}\n    {{ adapter.drop_relation(relation) }}\n  {% endif %}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1671050797.8336575}, "macro.dbt.create_schema": {"unique_id": "macro.dbt.create_schema", "package_name": "dbt", "root_path": "C:\\Python310\\lib\\site-packages\\dbt\\include\\global_project", "path": "macros\\adapters\\schema.sql", "original_file_path": "macros\\adapters\\schema.sql", "name": "create_schema", "macro_sql": "{% macro create_schema(relation) -%}\n  {{ adapter.dispatch('create_schema', 'dbt')(relation) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.default__create_schema"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1671050797.8378606}, "macro.dbt.default__create_schema": {"unique_id": "macro.dbt.default__create_schema", "package_name": "dbt", "root_path": "C:\\Python310\\lib\\site-packages\\dbt\\include\\global_project", "path": "macros\\adapters\\schema.sql", "original_file_path": "macros\\adapters\\schema.sql", "name": "default__create_schema", "macro_sql": "{% macro default__create_schema(relation) -%}\n  {%- call statement('create_schema') -%}\n    create schema if not exists {{ relation.without_identifier() }}\n  {% endcall %}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.statement"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1671050797.8385623}, "macro.dbt.drop_schema": {"unique_id": "macro.dbt.drop_schema", "package_name": "dbt", "root_path": "C:\\Python310\\lib\\site-packages\\dbt\\include\\global_project", "path": "macros\\adapters\\schema.sql", "original_file_path": "macros\\adapters\\schema.sql", "name": "drop_schema", "macro_sql": "{% macro drop_schema(relation) -%}\n  {{ adapter.dispatch('drop_schema', 'dbt')(relation) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.default__drop_schema"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1671050797.840062}, "macro.dbt.default__drop_schema": {"unique_id": "macro.dbt.default__drop_schema", "package_name": "dbt", "root_path": "C:\\Python310\\lib\\site-packages\\dbt\\include\\global_project", "path": "macros\\adapters\\schema.sql", "original_file_path": "macros\\adapters\\schema.sql", "name": "default__drop_schema", "macro_sql": "{% macro default__drop_schema(relation) -%}\n  {%- call statement('drop_schema') -%}\n    drop schema if exists {{ relation.without_identifier() }} cascade\n  {% endcall %}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.statement"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1671050797.8406873}, "macro.dbt.convert_datetime": {"unique_id": "macro.dbt.convert_datetime", "package_name": "dbt", "root_path": "C:\\Python310\\lib\\site-packages\\dbt\\include\\global_project", "path": "macros\\etc\\datetime.sql", "original_file_path": "macros\\etc\\datetime.sql", "name": "convert_datetime", "macro_sql": "{% macro convert_datetime(date_str, date_fmt) %}\n\n  {% set error_msg -%}\n      The provided partition date '{{ date_str }}' does not match the expected format '{{ date_fmt }}'\n  {%- endset %}\n\n  {% set res = try_or_compiler_error(error_msg, modules.datetime.datetime.strptime, date_str.strip(), date_fmt) %}\n  {{ return(res) }}\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1671050797.8454046}, "macro.dbt.dates_in_range": {"unique_id": "macro.dbt.dates_in_range", "package_name": "dbt", "root_path": "C:\\Python310\\lib\\site-packages\\dbt\\include\\global_project", "path": "macros\\etc\\datetime.sql", "original_file_path": "macros\\etc\\datetime.sql", "name": "dates_in_range", "macro_sql": "{% macro dates_in_range(start_date_str, end_date_str=none, in_fmt=\"%Y%m%d\", out_fmt=\"%Y%m%d\") %}\n    {% set end_date_str = start_date_str if end_date_str is none else end_date_str %}\n\n    {% set start_date = convert_datetime(start_date_str, in_fmt) %}\n    {% set end_date = convert_datetime(end_date_str, in_fmt) %}\n\n    {% set day_count = (end_date - start_date).days %}\n    {% if day_count < 0 %}\n        {% set msg -%}\n            Partiton start date is after the end date ({{ start_date }}, {{ end_date }})\n        {%- endset %}\n\n        {{ exceptions.raise_compiler_error(msg, model) }}\n    {% endif %}\n\n    {% set date_list = [] %}\n    {% for i in range(0, day_count + 1) %}\n        {% set the_date = (modules.datetime.timedelta(days=i) + start_date) %}\n        {% if not out_fmt %}\n            {% set _ = date_list.append(the_date) %}\n        {% else %}\n            {% set _ = date_list.append(the_date.strftime(out_fmt)) %}\n        {% endif %}\n    {% endfor %}\n\n    {{ return(date_list) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.convert_datetime"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1671050797.8485043}, "macro.dbt.partition_range": {"unique_id": "macro.dbt.partition_range", "package_name": "dbt", "root_path": "C:\\Python310\\lib\\site-packages\\dbt\\include\\global_project", "path": "macros\\etc\\datetime.sql", "original_file_path": "macros\\etc\\datetime.sql", "name": "partition_range", "macro_sql": "{% macro partition_range(raw_partition_date, date_fmt='%Y%m%d') %}\n    {% set partition_range = (raw_partition_date | string).split(\",\") %}\n\n    {% if (partition_range | length) == 1 %}\n      {% set start_date = partition_range[0] %}\n      {% set end_date = none %}\n    {% elif (partition_range | length) == 2 %}\n      {% set start_date = partition_range[0] %}\n      {% set end_date = partition_range[1] %}\n    {% else %}\n      {{ exceptions.raise_compiler_error(\"Invalid partition time. Expected format: {Start Date}[,{End Date}]. Got: \" ~ raw_partition_date) }}\n    {% endif %}\n\n    {{ return(dates_in_range(start_date, end_date, in_fmt=date_fmt)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.dates_in_range"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1671050797.8508136}, "macro.dbt.py_current_timestring": {"unique_id": "macro.dbt.py_current_timestring", "package_name": "dbt", "root_path": "C:\\Python310\\lib\\site-packages\\dbt\\include\\global_project", "path": "macros\\etc\\datetime.sql", "original_file_path": "macros\\etc\\datetime.sql", "name": "py_current_timestring", "macro_sql": "{% macro py_current_timestring() %}\n    {% set dt = modules.datetime.datetime.now() %}\n    {% do return(dt.strftime(\"%Y%m%d%H%M%S%f\")) %}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1671050797.8513095}, "macro.dbt.statement": {"unique_id": "macro.dbt.statement", "package_name": "dbt", "root_path": "C:\\Python310\\lib\\site-packages\\dbt\\include\\global_project", "path": "macros\\etc\\statement.sql", "original_file_path": "macros\\etc\\statement.sql", "name": "statement", "macro_sql": "{% macro statement(name=None, fetch_result=False, auto_begin=True) -%}\n  {%- if execute: -%}\n    {%- set sql = caller() -%}\n\n    {%- if name == 'main' -%}\n      {{ log('Writing runtime SQL for node \"{}\"'.format(model['unique_id'])) }}\n      {{ write(sql) }}\n    {%- endif -%}\n\n    {%- set res, table = adapter.execute(sql, auto_begin=auto_begin, fetch=fetch_result) -%}\n    {%- if name is not none -%}\n      {{ store_result(name, response=res, agate_table=table) }}\n    {%- endif -%}\n\n  {%- endif -%}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1671050797.853994}, "macro.dbt.noop_statement": {"unique_id": "macro.dbt.noop_statement", "package_name": "dbt", "root_path": "C:\\Python310\\lib\\site-packages\\dbt\\include\\global_project", "path": "macros\\etc\\statement.sql", "original_file_path": "macros\\etc\\statement.sql", "name": "noop_statement", "macro_sql": "{% macro noop_statement(name=None, message=None, code=None, rows_affected=None, res=None) -%}\n  {%- set sql = caller() -%}\n\n  {%- if name == 'main' -%}\n    {{ log('Writing runtime SQL for node \"{}\"'.format(model['unique_id'])) }}\n    {{ write(sql) }}\n  {%- endif -%}\n\n  {%- if name is not none -%}\n    {{ store_raw_result(name, message=message, code=code, rows_affected=rows_affected, agate_table=res) }}\n  {%- endif -%}\n\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1671050797.8549864}, "macro.dbt.run_query": {"unique_id": "macro.dbt.run_query", "package_name": "dbt", "root_path": "C:\\Python310\\lib\\site-packages\\dbt\\include\\global_project", "path": "macros\\etc\\statement.sql", "original_file_path": "macros\\etc\\statement.sql", "name": "run_query", "macro_sql": "{% macro run_query(sql) %}\n  {% call statement(\"run_query_statement\", fetch_result=true, auto_begin=false) %}\n    {{ sql }}\n  {% endcall %}\n\n  {% do return(load_result(\"run_query_statement\").table) %}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.statement"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1671050797.855991}, "macro.dbt.default__test_accepted_values": {"unique_id": "macro.dbt.default__test_accepted_values", "package_name": "dbt", "root_path": "C:\\Python310\\lib\\site-packages\\dbt\\include\\global_project", "path": "macros\\generic_test_sql\\accepted_values.sql", "original_file_path": "macros\\generic_test_sql\\accepted_values.sql", "name": "default__test_accepted_values", "macro_sql": "{% macro default__test_accepted_values(model, column_name, values, quote=True) %}\n\nwith all_values as (\n\n    select\n        {{ column_name }} as value_field,\n        count(*) as n_records\n\n    from {{ model }}\n    group by {{ column_name }}\n\n)\n\nselect *\nfrom all_values\nwhere value_field not in (\n    {% for value in values -%}\n        {% if quote -%}\n        '{{ value }}'\n        {%- else -%}\n        {{ value }}\n        {%- endif -%}\n        {%- if not loop.last -%},{%- endif %}\n    {%- endfor %}\n)\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1671050797.8569012}, "macro.dbt.default__test_not_null": {"unique_id": "macro.dbt.default__test_not_null", "package_name": "dbt", "root_path": "C:\\Python310\\lib\\site-packages\\dbt\\include\\global_project", "path": "macros\\generic_test_sql\\not_null.sql", "original_file_path": "macros\\generic_test_sql\\not_null.sql", "name": "default__test_not_null", "macro_sql": "{% macro default__test_not_null(model, column_name) %}\n\n{% set column_list = '*' if should_store_failures() else column_name %}\n\nselect {{ column_list }}\nfrom {{ model }}\nwhere {{ column_name }} is null\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.should_store_failures"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1671050797.857988}, "macro.dbt.default__test_relationships": {"unique_id": "macro.dbt.default__test_relationships", "package_name": "dbt", "root_path": "C:\\Python310\\lib\\site-packages\\dbt\\include\\global_project", "path": "macros\\generic_test_sql\\relationships.sql", "original_file_path": "macros\\generic_test_sql\\relationships.sql", "name": "default__test_relationships", "macro_sql": "{% macro default__test_relationships(model, column_name, to, field) %}\n\nwith child as (\n    select {{ column_name }} as from_field\n    from {{ model }}\n    where {{ column_name }} is not null\n),\n\nparent as (\n    select {{ field }} as to_field\n    from {{ to }}\n)\n\nselect\n    from_field\n\nfrom child\nleft join parent\n    on child.from_field = parent.to_field\n\nwhere parent.to_field is null\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1671050797.8589382}, "macro.dbt.default__test_unique": {"unique_id": "macro.dbt.default__test_unique", "package_name": "dbt", "root_path": "C:\\Python310\\lib\\site-packages\\dbt\\include\\global_project", "path": "macros\\generic_test_sql\\unique.sql", "original_file_path": "macros\\generic_test_sql\\unique.sql", "name": "default__test_unique", "macro_sql": "{% macro default__test_unique(model, column_name) %}\n\nselect\n    {{ column_name }} as unique_field,\n    count(*) as n_records\n\nfrom {{ model }}\nwhere {{ column_name }} is not null\ngroup by {{ column_name }}\nhaving count(*) > 1\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1671050797.8599002}, "macro.dbt.generate_alias_name": {"unique_id": "macro.dbt.generate_alias_name", "package_name": "dbt", "root_path": "C:\\Python310\\lib\\site-packages\\dbt\\include\\global_project", "path": "macros\\get_custom_name\\get_custom_alias.sql", "original_file_path": "macros\\get_custom_name\\get_custom_alias.sql", "name": "generate_alias_name", "macro_sql": "{% macro generate_alias_name(custom_alias_name=none, node=none) -%}\n    {% do return(adapter.dispatch('generate_alias_name', 'dbt')(custom_alias_name, node)) %}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.default__generate_alias_name"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1671050797.8608997}, "macro.dbt.default__generate_alias_name": {"unique_id": "macro.dbt.default__generate_alias_name", "package_name": "dbt", "root_path": "C:\\Python310\\lib\\site-packages\\dbt\\include\\global_project", "path": "macros\\get_custom_name\\get_custom_alias.sql", "original_file_path": "macros\\get_custom_name\\get_custom_alias.sql", "name": "default__generate_alias_name", "macro_sql": "{% macro default__generate_alias_name(custom_alias_name=none, node=none) -%}\n\n    {%- if custom_alias_name is none -%}\n\n        {{ node.name }}\n\n    {%- else -%}\n\n        {{ custom_alias_name | trim }}\n\n    {%- endif -%}\n\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1671050797.8618996}, "macro.dbt.generate_database_name": {"unique_id": "macro.dbt.generate_database_name", "package_name": "dbt", "root_path": "C:\\Python310\\lib\\site-packages\\dbt\\include\\global_project", "path": "macros\\get_custom_name\\get_custom_database.sql", "original_file_path": "macros\\get_custom_name\\get_custom_database.sql", "name": "generate_database_name", "macro_sql": "{% macro generate_database_name(custom_database_name=none, node=none) -%}\n    {% do return(adapter.dispatch('generate_database_name', 'dbt')(custom_database_name, node)) %}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.default__generate_database_name"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1671050797.8628993}, "macro.dbt.default__generate_database_name": {"unique_id": "macro.dbt.default__generate_database_name", "package_name": "dbt", "root_path": "C:\\Python310\\lib\\site-packages\\dbt\\include\\global_project", "path": "macros\\get_custom_name\\get_custom_database.sql", "original_file_path": "macros\\get_custom_name\\get_custom_database.sql", "name": "default__generate_database_name", "macro_sql": "{% macro default__generate_database_name(custom_database_name=none, node=none) -%}\n    {%- set default_database = target.database -%}\n    {%- if custom_database_name is none -%}\n\n        {{ default_database }}\n\n    {%- else -%}\n\n        {{ custom_database_name }}\n\n    {%- endif -%}\n\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1671050797.8638995}, "macro.dbt.generate_schema_name": {"unique_id": "macro.dbt.generate_schema_name", "package_name": "dbt", "root_path": "C:\\Python310\\lib\\site-packages\\dbt\\include\\global_project", "path": "macros\\get_custom_name\\get_custom_schema.sql", "original_file_path": "macros\\get_custom_name\\get_custom_schema.sql", "name": "generate_schema_name", "macro_sql": "{% macro generate_schema_name(custom_schema_name=none, node=none) -%}\n    {{ return(adapter.dispatch('generate_schema_name', 'dbt')(custom_schema_name, node)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.default__generate_schema_name"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1671050797.8648994}, "macro.dbt.default__generate_schema_name": {"unique_id": "macro.dbt.default__generate_schema_name", "package_name": "dbt", "root_path": "C:\\Python310\\lib\\site-packages\\dbt\\include\\global_project", "path": "macros\\get_custom_name\\get_custom_schema.sql", "original_file_path": "macros\\get_custom_name\\get_custom_schema.sql", "name": "default__generate_schema_name", "macro_sql": "{% macro default__generate_schema_name(custom_schema_name, node) -%}\n\n    {%- set default_schema = target.schema -%}\n    {%- if custom_schema_name is none -%}\n\n        {{ default_schema }}\n\n    {%- else -%}\n\n        {{ default_schema }}_{{ custom_schema_name | trim }}\n\n    {%- endif -%}\n\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1671050797.865899}, "macro.dbt.generate_schema_name_for_env": {"unique_id": "macro.dbt.generate_schema_name_for_env", "package_name": "dbt", "root_path": "C:\\Python310\\lib\\site-packages\\dbt\\include\\global_project", "path": "macros\\get_custom_name\\get_custom_schema.sql", "original_file_path": "macros\\get_custom_name\\get_custom_schema.sql", "name": "generate_schema_name_for_env", "macro_sql": "{% macro generate_schema_name_for_env(custom_schema_name, node) -%}\n\n    {%- set default_schema = target.schema -%}\n    {%- if target.name == 'prod' and custom_schema_name is not none -%}\n\n        {{ custom_schema_name | trim }}\n\n    {%- else -%}\n\n        {{ default_schema }}\n\n    {%- endif -%}\n\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1671050797.865899}, "macro.dbt.set_sql_header": {"unique_id": "macro.dbt.set_sql_header", "package_name": "dbt", "root_path": "C:\\Python310\\lib\\site-packages\\dbt\\include\\global_project", "path": "macros\\materializations\\configs.sql", "original_file_path": "macros\\materializations\\configs.sql", "name": "set_sql_header", "macro_sql": "{% macro set_sql_header(config) -%}\n  {{ config.set('sql_header', caller()) }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1671050797.8668997}, "macro.dbt.should_full_refresh": {"unique_id": "macro.dbt.should_full_refresh", "package_name": "dbt", "root_path": "C:\\Python310\\lib\\site-packages\\dbt\\include\\global_project", "path": "macros\\materializations\\configs.sql", "original_file_path": "macros\\materializations\\configs.sql", "name": "should_full_refresh", "macro_sql": "{% macro should_full_refresh() %}\n  {% set config_full_refresh = config.get('full_refresh') %}\n  {% if config_full_refresh is none %}\n    {% set config_full_refresh = flags.FULL_REFRESH %}\n  {% endif %}\n  {% do return(config_full_refresh) %}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1671050797.8678994}, "macro.dbt.should_store_failures": {"unique_id": "macro.dbt.should_store_failures", "package_name": "dbt", "root_path": "C:\\Python310\\lib\\site-packages\\dbt\\include\\global_project", "path": "macros\\materializations\\configs.sql", "original_file_path": "macros\\materializations\\configs.sql", "name": "should_store_failures", "macro_sql": "{% macro should_store_failures() %}\n  {% set config_store_failures = config.get('store_failures') %}\n  {% if config_store_failures is none %}\n    {% set config_store_failures = flags.STORE_FAILURES %}\n  {% endif %}\n  {% do return(config_store_failures) %}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1671050797.868899}, "macro.dbt.run_hooks": {"unique_id": "macro.dbt.run_hooks", "package_name": "dbt", "root_path": "C:\\Python310\\lib\\site-packages\\dbt\\include\\global_project", "path": "macros\\materializations\\hooks.sql", "original_file_path": "macros\\materializations\\hooks.sql", "name": "run_hooks", "macro_sql": "{% macro run_hooks(hooks, inside_transaction=True) %}\n  {% for hook in hooks | selectattr('transaction', 'equalto', inside_transaction)  %}\n    {% if not inside_transaction and loop.first %}\n      {% call statement(auto_begin=inside_transaction) %}\n        commit;\n      {% endcall %}\n    {% endif %}\n    {% set rendered = render(hook.get('sql')) | trim %}\n    {% if (rendered | length) > 0 %}\n      {% call statement(auto_begin=inside_transaction) %}\n        {{ rendered }}\n      {% endcall %}\n    {% endif %}\n  {% endfor %}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.statement"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1671050797.8719006}, "macro.dbt.make_hook_config": {"unique_id": "macro.dbt.make_hook_config", "package_name": "dbt", "root_path": "C:\\Python310\\lib\\site-packages\\dbt\\include\\global_project", "path": "macros\\materializations\\hooks.sql", "original_file_path": "macros\\materializations\\hooks.sql", "name": "make_hook_config", "macro_sql": "{% macro make_hook_config(sql, inside_transaction) %}\n    {{ tojson({\"sql\": sql, \"transaction\": inside_transaction}) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1671050797.8719006}, "macro.dbt.before_begin": {"unique_id": "macro.dbt.before_begin", "package_name": "dbt", "root_path": "C:\\Python310\\lib\\site-packages\\dbt\\include\\global_project", "path": "macros\\materializations\\hooks.sql", "original_file_path": "macros\\materializations\\hooks.sql", "name": "before_begin", "macro_sql": "{% macro before_begin(sql) %}\n    {{ make_hook_config(sql, inside_transaction=False) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.make_hook_config"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1671050797.8729}, "macro.dbt.in_transaction": {"unique_id": "macro.dbt.in_transaction", "package_name": "dbt", "root_path": "C:\\Python310\\lib\\site-packages\\dbt\\include\\global_project", "path": "macros\\materializations\\hooks.sql", "original_file_path": "macros\\materializations\\hooks.sql", "name": "in_transaction", "macro_sql": "{% macro in_transaction(sql) %}\n    {{ make_hook_config(sql, inside_transaction=True) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.make_hook_config"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1671050797.873652}, "macro.dbt.after_commit": {"unique_id": "macro.dbt.after_commit", "package_name": "dbt", "root_path": "C:\\Python310\\lib\\site-packages\\dbt\\include\\global_project", "path": "macros\\materializations\\hooks.sql", "original_file_path": "macros\\materializations\\hooks.sql", "name": "after_commit", "macro_sql": "{% macro after_commit(sql) %}\n    {{ make_hook_config(sql, inside_transaction=False) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.make_hook_config"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1671050797.8741484}, "macro.dbt.get_quoted_csv": {"unique_id": "macro.dbt.get_quoted_csv", "package_name": "dbt", "root_path": "C:\\Python310\\lib\\site-packages\\dbt\\include\\global_project", "path": "macros\\materializations\\models\\incremental\\column_helpers.sql", "original_file_path": "macros\\materializations\\models\\incremental\\column_helpers.sql", "name": "get_quoted_csv", "macro_sql": "{% macro get_quoted_csv(column_names) %}\n\n    {% set quoted = [] %}\n    {% for col in column_names -%}\n        {%- do quoted.append(adapter.quote(col)) -%}\n    {%- endfor %}\n\n    {%- set dest_cols_csv = quoted | join(', ') -%}\n    {{ return(dest_cols_csv) }}\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1671050797.8777246}, "macro.dbt.diff_columns": {"unique_id": "macro.dbt.diff_columns", "package_name": "dbt", "root_path": "C:\\Python310\\lib\\site-packages\\dbt\\include\\global_project", "path": "macros\\materializations\\models\\incremental\\column_helpers.sql", "original_file_path": "macros\\materializations\\models\\incremental\\column_helpers.sql", "name": "diff_columns", "macro_sql": "{% macro diff_columns(source_columns, target_columns) %}\n\n  {% set result = [] %}\n  {% set source_names = source_columns | map(attribute = 'column') | list %}\n  {% set target_names = target_columns | map(attribute = 'column') | list %}\n\n   {# --check whether the name attribute exists in the target - this does not perform a data type check #}\n   {% for sc in source_columns %}\n     {% if sc.name not in target_names %}\n        {{ result.append(sc) }}\n     {% endif %}\n   {% endfor %}\n\n  {{ return(result) }}\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1671050797.8803687}, "macro.dbt.diff_column_data_types": {"unique_id": "macro.dbt.diff_column_data_types", "package_name": "dbt", "root_path": "C:\\Python310\\lib\\site-packages\\dbt\\include\\global_project", "path": "macros\\materializations\\models\\incremental\\column_helpers.sql", "original_file_path": "macros\\materializations\\models\\incremental\\column_helpers.sql", "name": "diff_column_data_types", "macro_sql": "{% macro diff_column_data_types(source_columns, target_columns) %}\n\n  {% set result = [] %}\n  {% for sc in source_columns %}\n    {% set tc = target_columns | selectattr(\"name\", \"equalto\", sc.name) | list | first %}\n    {% if tc %}\n      {% if sc.data_type != tc.data_type %}\n        {{ result.append( { 'column_name': tc.name, 'new_type': sc.data_type } ) }}\n      {% endif %}\n    {% endif %}\n  {% endfor %}\n\n  {{ return(result) }}\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1671050797.8823788}, "macro.dbt.materialization_incremental_default": {"unique_id": "macro.dbt.materialization_incremental_default", "package_name": "dbt", "root_path": "C:\\Python310\\lib\\site-packages\\dbt\\include\\global_project", "path": "macros\\materializations\\models\\incremental\\incremental.sql", "original_file_path": "macros\\materializations\\models\\incremental\\incremental.sql", "name": "materialization_incremental_default", "macro_sql": "{% materialization incremental, default -%}\n\n  -- relations\n  {%- set existing_relation = load_cached_relation(this) -%}\n  {%- set target_relation = this.incorporate(type='table') -%}\n  {%- set temp_relation = make_temp_relation(target_relation)-%}\n  {%- set intermediate_relation = make_intermediate_relation(target_relation)-%}\n  {%- set backup_relation_type = 'table' if existing_relation is none else existing_relation.type -%}\n  {%- set backup_relation = make_backup_relation(target_relation, backup_relation_type) -%}\n\n  -- configs\n  {%- set unique_key = config.get('unique_key') -%}\n  {%- set full_refresh_mode = (should_full_refresh()  or existing_relation.is_view) -%}\n  {%- set on_schema_change = incremental_validate_on_schema_change(config.get('on_schema_change'), default='ignore') -%}\n\n  -- the temp_ and backup_ relations should not already exist in the database; get_relation\n  -- will return None in that case. Otherwise, we get a relation that we can drop\n  -- later, before we try to use this name for the current operation. This has to happen before\n  -- BEGIN, in a separate transaction\n  {%- set preexisting_intermediate_relation = load_cached_relation(intermediate_relation)-%}\n  {%- set preexisting_backup_relation = load_cached_relation(backup_relation) -%}\n   -- grab current tables grants config for comparision later on\n  {% set grant_config = config.get('grants') %}\n  {{ drop_relation_if_exists(preexisting_intermediate_relation) }}\n  {{ drop_relation_if_exists(preexisting_backup_relation) }}\n\n  {{ run_hooks(pre_hooks, inside_transaction=False) }}\n\n  -- `BEGIN` happens here:\n  {{ run_hooks(pre_hooks, inside_transaction=True) }}\n\n  {% set to_drop = [] %}\n\n  {% if existing_relation is none %}\n      {% set build_sql = get_create_table_as_sql(False, target_relation, sql) %}\n  {% elif full_refresh_mode %}\n      {% set build_sql = get_create_table_as_sql(False, intermediate_relation, sql) %}\n      {% set need_swap = true %}\n  {% else %}\n    {% do run_query(get_create_table_as_sql(True, temp_relation, sql)) %}\n    {% do adapter.expand_target_column_types(\n             from_relation=temp_relation,\n             to_relation=target_relation) %}\n    {#-- Process schema changes. Returns dict of changes if successful. Use source columns for upserting/merging --#}\n    {% set dest_columns = process_schema_changes(on_schema_change, temp_relation, existing_relation) %}\n    {% if not dest_columns %}\n      {% set dest_columns = adapter.get_columns_in_relation(existing_relation) %}\n    {% endif %}\n    {% set build_sql = get_delete_insert_merge_sql(target_relation, temp_relation, unique_key, dest_columns) %}\n\n  {% endif %}\n\n  {% call statement(\"main\") %}\n      {{ build_sql }}\n  {% endcall %}\n\n  {% if need_swap %}\n      {% do adapter.rename_relation(target_relation, backup_relation) %}\n      {% do adapter.rename_relation(intermediate_relation, target_relation) %}\n      {% do to_drop.append(backup_relation) %}\n  {% endif %}\n\n  {% set should_revoke = should_revoke(existing_relation, full_refresh_mode) %}\n  {% do apply_grants(target_relation, grant_config, should_revoke=should_revoke) %}\n\n  {% do persist_docs(target_relation, model) %}\n\n  {% if existing_relation is none or existing_relation.is_view or should_full_refresh() %}\n    {% do create_indexes(target_relation) %}\n  {% endif %}\n\n  {{ run_hooks(post_hooks, inside_transaction=True) }}\n\n  -- `COMMIT` happens here\n  {% do adapter.commit() %}\n\n  {% for rel in to_drop %}\n      {% do adapter.drop_relation(rel) %}\n  {% endfor %}\n\n  {{ run_hooks(post_hooks, inside_transaction=False) }}\n\n  {{ return({'relations': [target_relation]}) }}\n\n{%- endmaterialization %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.load_cached_relation", "macro.dbt.make_temp_relation", "macro.dbt.make_intermediate_relation", "macro.dbt.make_backup_relation", "macro.dbt.should_full_refresh", "macro.dbt.incremental_validate_on_schema_change", "macro.dbt.drop_relation_if_exists", "macro.dbt.run_hooks", "macro.dbt.get_create_table_as_sql", "macro.dbt.run_query", "macro.dbt.process_schema_changes", "macro.dbt.get_delete_insert_merge_sql", "macro.dbt.statement", "macro.dbt.should_revoke", "macro.dbt.apply_grants", "macro.dbt.persist_docs", "macro.dbt.create_indexes"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1671050797.8993776}, "macro.dbt.is_incremental": {"unique_id": "macro.dbt.is_incremental", "package_name": "dbt", "root_path": "C:\\Python310\\lib\\site-packages\\dbt\\include\\global_project", "path": "macros\\materializations\\models\\incremental\\is_incremental.sql", "original_file_path": "macros\\materializations\\models\\incremental\\is_incremental.sql", "name": "is_incremental", "macro_sql": "{% macro is_incremental() %}\n    {#-- do not run introspective queries in parsing #}\n    {% if not execute %}\n        {{ return(False) }}\n    {% else %}\n        {% set relation = adapter.get_relation(this.database, this.schema, this.table) %}\n        {{ return(relation is not none\n                  and relation.type == 'table'\n                  and model.config.materialized == 'incremental'\n                  and not should_full_refresh()) }}\n    {% endif %}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.should_full_refresh"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1671050797.9023774}, "macro.dbt.get_merge_sql": {"unique_id": "macro.dbt.get_merge_sql", "package_name": "dbt", "root_path": "C:\\Python310\\lib\\site-packages\\dbt\\include\\global_project", "path": "macros\\materializations\\models\\incremental\\merge.sql", "original_file_path": "macros\\materializations\\models\\incremental\\merge.sql", "name": "get_merge_sql", "macro_sql": "{% macro get_merge_sql(target, source, unique_key, dest_columns, predicates=none) -%}\n  {{ adapter.dispatch('get_merge_sql', 'dbt')(target, source, unique_key, dest_columns, predicates) }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_snowflake.snowflake__get_merge_sql"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1671050797.913033}, "macro.dbt.default__get_merge_sql": {"unique_id": "macro.dbt.default__get_merge_sql", "package_name": "dbt", "root_path": "C:\\Python310\\lib\\site-packages\\dbt\\include\\global_project", "path": "macros\\materializations\\models\\incremental\\merge.sql", "original_file_path": "macros\\materializations\\models\\incremental\\merge.sql", "name": "default__get_merge_sql", "macro_sql": "{% macro default__get_merge_sql(target, source, unique_key, dest_columns, predicates) -%}\n    {%- set predicates = [] if predicates is none else [] + predicates -%}\n    {%- set dest_cols_csv = get_quoted_csv(dest_columns | map(attribute=\"name\")) -%}\n    {%- set update_columns = config.get('merge_update_columns', default = dest_columns | map(attribute=\"quoted\") | list) -%}\n    {%- set sql_header = config.get('sql_header', none) -%}\n\n    {% if unique_key %}\n        {% if unique_key is sequence and unique_key is not mapping and unique_key is not string %}\n            {% for key in unique_key %}\n                {% set this_key_match %}\n                    DBT_INTERNAL_SOURCE.{{ key }} = DBT_INTERNAL_DEST.{{ key }}\n                {% endset %}\n                {% do predicates.append(this_key_match) %}\n            {% endfor %}\n        {% else %}\n            {% set unique_key_match %}\n                DBT_INTERNAL_SOURCE.{{ unique_key }} = DBT_INTERNAL_DEST.{{ unique_key }}\n            {% endset %}\n            {% do predicates.append(unique_key_match) %}\n        {% endif %}\n    {% else %}\n        {% do predicates.append('FALSE') %}\n    {% endif %}\n\n    {{ sql_header if sql_header is not none }}\n\n    merge into {{ target }} as DBT_INTERNAL_DEST\n        using {{ source }} as DBT_INTERNAL_SOURCE\n        on {{ predicates | join(' and ') }}\n\n    {% if unique_key %}\n    when matched then update set\n        {% for column_name in update_columns -%}\n            {{ column_name }} = DBT_INTERNAL_SOURCE.{{ column_name }}\n            {%- if not loop.last %}, {%- endif %}\n        {%- endfor %}\n    {% endif %}\n\n    when not matched then insert\n        ({{ dest_cols_csv }})\n    values\n        ({{ dest_cols_csv }})\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.get_quoted_csv"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1671050797.9180336}, "macro.dbt.get_delete_insert_merge_sql": {"unique_id": "macro.dbt.get_delete_insert_merge_sql", "package_name": "dbt", "root_path": "C:\\Python310\\lib\\site-packages\\dbt\\include\\global_project", "path": "macros\\materializations\\models\\incremental\\merge.sql", "original_file_path": "macros\\materializations\\models\\incremental\\merge.sql", "name": "get_delete_insert_merge_sql", "macro_sql": "{% macro get_delete_insert_merge_sql(target, source, unique_key, dest_columns) -%}\n  {{ adapter.dispatch('get_delete_insert_merge_sql', 'dbt')(target, source, unique_key, dest_columns) }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_snowflake.snowflake__get_delete_insert_merge_sql"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1671050797.9180336}, "macro.dbt.default__get_delete_insert_merge_sql": {"unique_id": "macro.dbt.default__get_delete_insert_merge_sql", "package_name": "dbt", "root_path": "C:\\Python310\\lib\\site-packages\\dbt\\include\\global_project", "path": "macros\\materializations\\models\\incremental\\merge.sql", "original_file_path": "macros\\materializations\\models\\incremental\\merge.sql", "name": "default__get_delete_insert_merge_sql", "macro_sql": "{% macro default__get_delete_insert_merge_sql(target, source, unique_key, dest_columns) -%}\n\n    {%- set dest_cols_csv = get_quoted_csv(dest_columns | map(attribute=\"name\")) -%}\n\n    {% if unique_key %}\n        {% if unique_key is sequence and unique_key is not string %}\n            delete from {{target }}\n            using {{ source }}\n            where (\n                {% for key in unique_key %}\n                    {{ source }}.{{ key }} = {{ target }}.{{ key }}\n                    {{ \"and \" if not loop.last }}\n                {% endfor %}\n            );\n        {% else %}\n            delete from {{ target }}\n            where (\n                {{ unique_key }}) in (\n                select ({{ unique_key }})\n                from {{ source }}\n            );\n\n        {% endif %}\n        {% endif %}\n\n    insert into {{ target }} ({{ dest_cols_csv }})\n    (\n        select {{ dest_cols_csv }}\n        from {{ source }}\n    )\n\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.get_quoted_csv"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1671050797.9359539}, "macro.dbt.get_insert_overwrite_merge_sql": {"unique_id": "macro.dbt.get_insert_overwrite_merge_sql", "package_name": "dbt", "root_path": "C:\\Python310\\lib\\site-packages\\dbt\\include\\global_project", "path": "macros\\materializations\\models\\incremental\\merge.sql", "original_file_path": "macros\\materializations\\models\\incremental\\merge.sql", "name": "get_insert_overwrite_merge_sql", "macro_sql": "{% macro get_insert_overwrite_merge_sql(target, source, dest_columns, predicates, include_sql_header=false) -%}\n  {{ adapter.dispatch('get_insert_overwrite_merge_sql', 'dbt')(target, source, dest_columns, predicates, include_sql_header) }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.default__get_insert_overwrite_merge_sql"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1671050797.936954}, "macro.dbt.default__get_insert_overwrite_merge_sql": {"unique_id": "macro.dbt.default__get_insert_overwrite_merge_sql", "package_name": "dbt", "root_path": "C:\\Python310\\lib\\site-packages\\dbt\\include\\global_project", "path": "macros\\materializations\\models\\incremental\\merge.sql", "original_file_path": "macros\\materializations\\models\\incremental\\merge.sql", "name": "default__get_insert_overwrite_merge_sql", "macro_sql": "{% macro default__get_insert_overwrite_merge_sql(target, source, dest_columns, predicates, include_sql_header) -%}\n    {%- set predicates = [] if predicates is none else [] + predicates -%}\n    {%- set dest_cols_csv = get_quoted_csv(dest_columns | map(attribute=\"name\")) -%}\n    {%- set sql_header = config.get('sql_header', none) -%}\n\n    {{ sql_header if sql_header is not none and include_sql_header }}\n\n    merge into {{ target }} as DBT_INTERNAL_DEST\n        using {{ source }} as DBT_INTERNAL_SOURCE\n        on FALSE\n\n    when not matched by source\n        {% if predicates %} and {{ predicates | join(' and ') }} {% endif %}\n        then delete\n\n    when not matched then insert\n        ({{ dest_cols_csv }})\n    values\n        ({{ dest_cols_csv }})\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.get_quoted_csv"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1671050797.9386954}, "macro.dbt.incremental_validate_on_schema_change": {"unique_id": "macro.dbt.incremental_validate_on_schema_change", "package_name": "dbt", "root_path": "C:\\Python310\\lib\\site-packages\\dbt\\include\\global_project", "path": "macros\\materializations\\models\\incremental\\on_schema_change.sql", "original_file_path": "macros\\materializations\\models\\incremental\\on_schema_change.sql", "name": "incremental_validate_on_schema_change", "macro_sql": "{% macro incremental_validate_on_schema_change(on_schema_change, default='ignore') %}\n\n   {% if on_schema_change not in ['sync_all_columns', 'append_new_columns', 'fail', 'ignore'] %}\n\n     {% set log_message = 'Invalid value for on_schema_change (%s) specified. Setting default value of %s.' % (on_schema_change, default) %}\n     {% do log(log_message) %}\n\n     {{ return(default) }}\n\n   {% else %}\n\n     {{ return(on_schema_change) }}\n\n   {% endif %}\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1671050797.9455447}, "macro.dbt.check_for_schema_changes": {"unique_id": "macro.dbt.check_for_schema_changes", "package_name": "dbt", "root_path": "C:\\Python310\\lib\\site-packages\\dbt\\include\\global_project", "path": "macros\\materializations\\models\\incremental\\on_schema_change.sql", "original_file_path": "macros\\materializations\\models\\incremental\\on_schema_change.sql", "name": "check_for_schema_changes", "macro_sql": "{% macro check_for_schema_changes(source_relation, target_relation) %}\n\n  {% set schema_changed = False %}\n\n  {%- set source_columns = adapter.get_columns_in_relation(source_relation) -%}\n  {%- set target_columns = adapter.get_columns_in_relation(target_relation) -%}\n  {%- set source_not_in_target = diff_columns(source_columns, target_columns) -%}\n  {%- set target_not_in_source = diff_columns(target_columns, source_columns) -%}\n\n  {% set new_target_types = diff_column_data_types(source_columns, target_columns) %}\n\n  {% if source_not_in_target != [] %}\n    {% set schema_changed = True %}\n  {% elif target_not_in_source != [] or new_target_types != [] %}\n    {% set schema_changed = True %}\n  {% elif new_target_types != [] %}\n    {% set schema_changed = True %}\n  {% endif %}\n\n  {% set changes_dict = {\n    'schema_changed': schema_changed,\n    'source_not_in_target': source_not_in_target,\n    'target_not_in_source': target_not_in_source,\n    'source_columns': source_columns,\n    'target_columns': target_columns,\n    'new_target_types': new_target_types\n  } %}\n\n  {% set msg %}\n    In {{ target_relation }}:\n        Schema changed: {{ schema_changed }}\n        Source columns not in target: {{ source_not_in_target }}\n        Target columns not in source: {{ target_not_in_source }}\n        New column types: {{ new_target_types }}\n  {% endset %}\n\n  {% do log(msg) %}\n\n  {{ return(changes_dict) }}\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.diff_columns", "macro.dbt.diff_column_data_types"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1671050797.9485443}, "macro.dbt.sync_column_schemas": {"unique_id": "macro.dbt.sync_column_schemas", "package_name": "dbt", "root_path": "C:\\Python310\\lib\\site-packages\\dbt\\include\\global_project", "path": "macros\\materializations\\models\\incremental\\on_schema_change.sql", "original_file_path": "macros\\materializations\\models\\incremental\\on_schema_change.sql", "name": "sync_column_schemas", "macro_sql": "{% macro sync_column_schemas(on_schema_change, target_relation, schema_changes_dict) %}\n\n  {%- set add_to_target_arr = schema_changes_dict['source_not_in_target'] -%}\n\n  {%- if on_schema_change == 'append_new_columns'-%}\n     {%- if add_to_target_arr | length > 0 -%}\n       {%- do alter_relation_add_remove_columns(target_relation, add_to_target_arr, none) -%}\n     {%- endif -%}\n\n  {% elif on_schema_change == 'sync_all_columns' %}\n     {%- set remove_from_target_arr = schema_changes_dict['target_not_in_source'] -%}\n     {%- set new_target_types = schema_changes_dict['new_target_types'] -%}\n\n     {% if add_to_target_arr | length > 0 or remove_from_target_arr | length > 0 %}\n       {%- do alter_relation_add_remove_columns(target_relation, add_to_target_arr, remove_from_target_arr) -%}\n     {% endif %}\n\n     {% if new_target_types != [] %}\n       {% for ntt in new_target_types %}\n         {% set column_name = ntt['column_name'] %}\n         {% set new_type = ntt['new_type'] %}\n         {% do alter_column_type(target_relation, column_name, new_type) %}\n       {% endfor %}\n     {% endif %}\n\n  {% endif %}\n\n  {% set schema_change_message %}\n    In {{ target_relation }}:\n        Schema change approach: {{ on_schema_change }}\n        Columns added: {{ add_to_target_arr }}\n        Columns removed: {{ remove_from_target_arr }}\n        Data types changed: {{ new_target_types }}\n  {% endset %}\n\n  {% do log(schema_change_message) %}\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.alter_relation_add_remove_columns", "macro.dbt.alter_column_type"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1671050797.9515448}, "macro.dbt.process_schema_changes": {"unique_id": "macro.dbt.process_schema_changes", "package_name": "dbt", "root_path": "C:\\Python310\\lib\\site-packages\\dbt\\include\\global_project", "path": "macros\\materializations\\models\\incremental\\on_schema_change.sql", "original_file_path": "macros\\materializations\\models\\incremental\\on_schema_change.sql", "name": "process_schema_changes", "macro_sql": "{% macro process_schema_changes(on_schema_change, source_relation, target_relation) %}\n\n    {% if on_schema_change == 'ignore' %}\n\n     {{ return({}) }}\n\n    {% else %}\n\n      {% set schema_changes_dict = check_for_schema_changes(source_relation, target_relation) %}\n\n      {% if schema_changes_dict['schema_changed'] %}\n\n        {% if on_schema_change == 'fail' %}\n\n          {% set fail_msg %}\n              The source and target schemas on this incremental model are out of sync!\n              They can be reconciled in several ways:\n                - set the `on_schema_change` config to either append_new_columns or sync_all_columns, depending on your situation.\n                - Re-run the incremental model with `full_refresh: True` to update the target schema.\n                - update the schema manually and re-run the process.\n          {% endset %}\n\n          {% do exceptions.raise_compiler_error(fail_msg) %}\n\n        {# -- unless we ignore, run the sync operation per the config #}\n        {% else %}\n\n          {% do sync_column_schemas(on_schema_change, target_relation, schema_changes_dict) %}\n\n        {% endif %}\n\n      {% endif %}\n\n      {{ return(schema_changes_dict['source_columns']) }}\n\n    {% endif %}\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.check_for_schema_changes", "macro.dbt.sync_column_schemas"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1671050797.9525445}, "macro.dbt.get_create_table_as_sql": {"unique_id": "macro.dbt.get_create_table_as_sql", "package_name": "dbt", "root_path": "C:\\Python310\\lib\\site-packages\\dbt\\include\\global_project", "path": "macros\\materializations\\models\\table\\create_table_as.sql", "original_file_path": "macros\\materializations\\models\\table\\create_table_as.sql", "name": "get_create_table_as_sql", "macro_sql": "{% macro get_create_table_as_sql(temporary, relation, sql) -%}\n  {{ adapter.dispatch('get_create_table_as_sql', 'dbt')(temporary, relation, sql) }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.default__get_create_table_as_sql"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1671050797.9549973}, "macro.dbt.default__get_create_table_as_sql": {"unique_id": "macro.dbt.default__get_create_table_as_sql", "package_name": "dbt", "root_path": "C:\\Python310\\lib\\site-packages\\dbt\\include\\global_project", "path": "macros\\materializations\\models\\table\\create_table_as.sql", "original_file_path": "macros\\materializations\\models\\table\\create_table_as.sql", "name": "default__get_create_table_as_sql", "macro_sql": "{% macro default__get_create_table_as_sql(temporary, relation, sql) -%}\n  {{ return(create_table_as(temporary, relation, sql)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.create_table_as"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1671050797.9554946}, "macro.dbt.create_table_as": {"unique_id": "macro.dbt.create_table_as", "package_name": "dbt", "root_path": "C:\\Python310\\lib\\site-packages\\dbt\\include\\global_project", "path": "macros\\materializations\\models\\table\\create_table_as.sql", "original_file_path": "macros\\materializations\\models\\table\\create_table_as.sql", "name": "create_table_as", "macro_sql": "{% macro create_table_as(temporary, relation, sql) -%}\n  {{ adapter.dispatch('create_table_as', 'dbt')(temporary, relation, sql) }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_snowflake.snowflake__create_table_as"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1671050797.9565055}, "macro.dbt.default__create_table_as": {"unique_id": "macro.dbt.default__create_table_as", "package_name": "dbt", "root_path": "C:\\Python310\\lib\\site-packages\\dbt\\include\\global_project", "path": "macros\\materializations\\models\\table\\create_table_as.sql", "original_file_path": "macros\\materializations\\models\\table\\create_table_as.sql", "name": "default__create_table_as", "macro_sql": "{% macro default__create_table_as(temporary, relation, sql) -%}\n  {%- set sql_header = config.get('sql_header', none) -%}\n\n  {{ sql_header if sql_header is not none }}\n\n  create {% if temporary: -%}temporary{%- endif %} table\n    {{ relation.include(database=(not temporary), schema=(not temporary)) }}\n  as (\n    {{ sql }}\n  );\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1671050797.9575055}, "macro.dbt.materialization_table_default": {"unique_id": "macro.dbt.materialization_table_default", "package_name": "dbt", "root_path": "C:\\Python310\\lib\\site-packages\\dbt\\include\\global_project", "path": "macros\\materializations\\models\\table\\table.sql", "original_file_path": "macros\\materializations\\models\\table\\table.sql", "name": "materialization_table_default", "macro_sql": "{% materialization table, default %}\n\n  {%- set existing_relation = load_cached_relation(this) -%}\n  {%- set target_relation = this.incorporate(type='table') %}\n  {%- set intermediate_relation =  make_intermediate_relation(target_relation) -%}\n  -- the intermediate_relation should not already exist in the database; get_relation\n  -- will return None in that case. Otherwise, we get a relation that we can drop\n  -- later, before we try to use this name for the current operation\n  {%- set preexisting_intermediate_relation = load_cached_relation(intermediate_relation) -%}\n  /*\n      See ../view/view.sql for more information about this relation.\n  */\n  {%- set backup_relation_type = 'table' if existing_relation is none else existing_relation.type -%}\n  {%- set backup_relation = make_backup_relation(target_relation, backup_relation_type) -%}\n  -- as above, the backup_relation should not already exist\n  {%- set preexisting_backup_relation = load_cached_relation(backup_relation) -%}\n  -- grab current tables grants config for comparision later on\n  {% set grant_config = config.get('grants') %}\n\n  -- drop the temp relations if they exist already in the database\n  {{ drop_relation_if_exists(preexisting_intermediate_relation) }}\n  {{ drop_relation_if_exists(preexisting_backup_relation) }}\n\n  {{ run_hooks(pre_hooks, inside_transaction=False) }}\n\n  -- `BEGIN` happens here:\n  {{ run_hooks(pre_hooks, inside_transaction=True) }}\n\n  -- build model\n  {% call statement('main') -%}\n    {{ get_create_table_as_sql(False, intermediate_relation, sql) }}\n  {%- endcall %}\n\n  -- cleanup\n  {% if existing_relation is not none %}\n      {{ adapter.rename_relation(existing_relation, backup_relation) }}\n  {% endif %}\n\n  {{ adapter.rename_relation(intermediate_relation, target_relation) }}\n\n  {% do create_indexes(target_relation) %}\n\n  {{ run_hooks(post_hooks, inside_transaction=True) }}\n\n  {% set should_revoke = should_revoke(existing_relation, full_refresh_mode=True) %}\n  {% do apply_grants(target_relation, grant_config, should_revoke=should_revoke) %}\n\n  {% do persist_docs(target_relation, model) %}\n\n  -- `COMMIT` happens here\n  {{ adapter.commit() }}\n\n  -- finally, drop the existing/backup relation after the commit\n  {{ drop_relation_if_exists(backup_relation) }}\n\n  {{ run_hooks(post_hooks, inside_transaction=False) }}\n\n  {{ return({'relations': [target_relation]}) }}\n{% endmaterialization %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.load_cached_relation", "macro.dbt.make_intermediate_relation", "macro.dbt.make_backup_relation", "macro.dbt.drop_relation_if_exists", "macro.dbt.run_hooks", "macro.dbt.statement", "macro.dbt.get_create_table_as_sql", "macro.dbt.create_indexes", "macro.dbt.should_revoke", "macro.dbt.apply_grants", "macro.dbt.persist_docs"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1671050797.9635453}, "macro.dbt.create_or_replace_view": {"unique_id": "macro.dbt.create_or_replace_view", "package_name": "dbt", "root_path": "C:\\Python310\\lib\\site-packages\\dbt\\include\\global_project", "path": "macros\\materializations\\models\\view\\create_or_replace_view.sql", "original_file_path": "macros\\materializations\\models\\view\\create_or_replace_view.sql", "name": "create_or_replace_view", "macro_sql": "{% macro create_or_replace_view() %}\n  {%- set identifier = model['alias'] -%}\n\n  {%- set old_relation = adapter.get_relation(database=database, schema=schema, identifier=identifier) -%}\n  {%- set exists_as_view = (old_relation is not none and old_relation.is_view) -%}\n\n  {%- set target_relation = api.Relation.create(\n      identifier=identifier, schema=schema, database=database,\n      type='view') -%}\n  {% set grant_config = config.get('grants') %}\n\n  {{ run_hooks(pre_hooks) }}\n\n  -- If there's a table with the same name and we weren't told to full refresh,\n  -- that's an error. If we were told to full refresh, drop it. This behavior differs\n  -- for Snowflake and BigQuery, so multiple dispatch is used.\n  {%- if old_relation is not none and old_relation.is_table -%}\n    {{ handle_existing_table(should_full_refresh(), old_relation) }}\n  {%- endif -%}\n\n  -- build model\n  {% call statement('main') -%}\n    {{ get_create_view_as_sql(target_relation, sql) }}\n  {%- endcall %}\n\n  {% set should_revoke = should_revoke(exists_as_view, full_refresh_mode=True) %}\n  {% do apply_grants(target_relation, grant_config, should_revoke=True) %}\n\n  {{ run_hooks(post_hooks) }}\n\n  {{ return({'relations': [target_relation]}) }}\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.run_hooks", "macro.dbt.handle_existing_table", "macro.dbt.should_full_refresh", "macro.dbt.statement", "macro.dbt.get_create_view_as_sql", "macro.dbt.should_revoke", "macro.dbt.apply_grants"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1671050797.967552}, "macro.dbt.get_create_view_as_sql": {"unique_id": "macro.dbt.get_create_view_as_sql", "package_name": "dbt", "root_path": "C:\\Python310\\lib\\site-packages\\dbt\\include\\global_project", "path": "macros\\materializations\\models\\view\\create_view_as.sql", "original_file_path": "macros\\materializations\\models\\view\\create_view_as.sql", "name": "get_create_view_as_sql", "macro_sql": "{% macro get_create_view_as_sql(relation, sql) -%}\n  {{ adapter.dispatch('get_create_view_as_sql', 'dbt')(relation, sql) }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.default__get_create_view_as_sql"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1671050797.9691317}, "macro.dbt.default__get_create_view_as_sql": {"unique_id": "macro.dbt.default__get_create_view_as_sql", "package_name": "dbt", "root_path": "C:\\Python310\\lib\\site-packages\\dbt\\include\\global_project", "path": "macros\\materializations\\models\\view\\create_view_as.sql", "original_file_path": "macros\\materializations\\models\\view\\create_view_as.sql", "name": "default__get_create_view_as_sql", "macro_sql": "{% macro default__get_create_view_as_sql(relation, sql) -%}\n  {{ return(create_view_as(relation, sql)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.create_view_as"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1671050797.9691317}, "macro.dbt.create_view_as": {"unique_id": "macro.dbt.create_view_as", "package_name": "dbt", "root_path": "C:\\Python310\\lib\\site-packages\\dbt\\include\\global_project", "path": "macros\\materializations\\models\\view\\create_view_as.sql", "original_file_path": "macros\\materializations\\models\\view\\create_view_as.sql", "name": "create_view_as", "macro_sql": "{% macro create_view_as(relation, sql) -%}\n  {{ adapter.dispatch('create_view_as', 'dbt')(relation, sql) }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_snowflake.snowflake__create_view_as"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1671050797.9701617}, "macro.dbt.default__create_view_as": {"unique_id": "macro.dbt.default__create_view_as", "package_name": "dbt", "root_path": "C:\\Python310\\lib\\site-packages\\dbt\\include\\global_project", "path": "macros\\materializations\\models\\view\\create_view_as.sql", "original_file_path": "macros\\materializations\\models\\view\\create_view_as.sql", "name": "default__create_view_as", "macro_sql": "{% macro default__create_view_as(relation, sql) -%}\n  {%- set sql_header = config.get('sql_header', none) -%}\n\n  {{ sql_header if sql_header is not none }}\n  create view {{ relation }} as (\n    {{ sql }}\n  );\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1671050797.9701617}, "macro.dbt.handle_existing_table": {"unique_id": "macro.dbt.handle_existing_table", "package_name": "dbt", "root_path": "C:\\Python310\\lib\\site-packages\\dbt\\include\\global_project", "path": "macros\\materializations\\models\\view\\helpers.sql", "original_file_path": "macros\\materializations\\models\\view\\helpers.sql", "name": "handle_existing_table", "macro_sql": "{% macro handle_existing_table(full_refresh, old_relation) %}\n    {{ adapter.dispatch('handle_existing_table', 'dbt')(full_refresh, old_relation) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.default__handle_existing_table"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1671050797.9717462}, "macro.dbt.default__handle_existing_table": {"unique_id": "macro.dbt.default__handle_existing_table", "package_name": "dbt", "root_path": "C:\\Python310\\lib\\site-packages\\dbt\\include\\global_project", "path": "macros\\materializations\\models\\view\\helpers.sql", "original_file_path": "macros\\materializations\\models\\view\\helpers.sql", "name": "default__handle_existing_table", "macro_sql": "{% macro default__handle_existing_table(full_refresh, old_relation) %}\n    {{ log(\"Dropping relation \" ~ old_relation ~ \" because it is of type \" ~ old_relation.type) }}\n    {{ adapter.drop_relation(old_relation) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1671050797.9727128}, "macro.dbt.materialization_view_default": {"unique_id": "macro.dbt.materialization_view_default", "package_name": "dbt", "root_path": "C:\\Python310\\lib\\site-packages\\dbt\\include\\global_project", "path": "macros\\materializations\\models\\view\\view.sql", "original_file_path": "macros\\materializations\\models\\view\\view.sql", "name": "materialization_view_default", "macro_sql": "{%- materialization view, default -%}\n\n  {%- set existing_relation = load_cached_relation(this) -%}\n  {%- set target_relation = this.incorporate(type='view') -%}\n  {%- set intermediate_relation =  make_intermediate_relation(target_relation) -%}\n\n  -- the intermediate_relation should not already exist in the database; get_relation\n  -- will return None in that case. Otherwise, we get a relation that we can drop\n  -- later, before we try to use this name for the current operation\n  {%- set preexisting_intermediate_relation = load_cached_relation(intermediate_relation) -%}\n  /*\n     This relation (probably) doesn't exist yet. If it does exist, it's a leftover from\n     a previous run, and we're going to try to drop it immediately. At the end of this\n     materialization, we're going to rename the \"existing_relation\" to this identifier,\n     and then we're going to drop it. In order to make sure we run the correct one of:\n       - drop view ...\n       - drop table ...\n\n     We need to set the type of this relation to be the type of the existing_relation, if it exists,\n     or else \"view\" as a sane default if it does not. Note that if the existing_relation does not\n     exist, then there is nothing to move out of the way and subsequentally drop. In that case,\n     this relation will be effectively unused.\n  */\n  {%- set backup_relation_type = 'view' if existing_relation is none else existing_relation.type -%}\n  {%- set backup_relation = make_backup_relation(target_relation, backup_relation_type) -%}\n  -- as above, the backup_relation should not already exist\n  {%- set preexisting_backup_relation = load_cached_relation(backup_relation) -%}\n  -- grab current tables grants config for comparision later on\n  {% set grant_config = config.get('grants') %}\n\n  {{ run_hooks(pre_hooks, inside_transaction=False) }}\n\n  -- drop the temp relations if they exist already in the database\n  {{ drop_relation_if_exists(preexisting_intermediate_relation) }}\n  {{ drop_relation_if_exists(preexisting_backup_relation) }}\n\n  -- `BEGIN` happens here:\n  {{ run_hooks(pre_hooks, inside_transaction=True) }}\n\n  -- build model\n  {% call statement('main') -%}\n    {{ get_create_view_as_sql(intermediate_relation, sql) }}\n  {%- endcall %}\n\n  -- cleanup\n  -- move the existing view out of the way\n  {% if existing_relation is not none %}\n    {{ adapter.rename_relation(existing_relation, backup_relation) }}\n  {% endif %}\n  {{ adapter.rename_relation(intermediate_relation, target_relation) }}\n\n  {% set should_revoke = should_revoke(existing_relation, full_refresh_mode=True) %}\n  {% do apply_grants(target_relation, grant_config, should_revoke=should_revoke) %}\n\n  {% do persist_docs(target_relation, model) %}\n\n  {{ run_hooks(post_hooks, inside_transaction=True) }}\n\n  {{ adapter.commit() }}\n\n  {{ drop_relation_if_exists(backup_relation) }}\n\n  {{ run_hooks(post_hooks, inside_transaction=False) }}\n\n  {{ return({'relations': [target_relation]}) }}\n\n{%- endmaterialization -%}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.load_cached_relation", "macro.dbt.make_intermediate_relation", "macro.dbt.make_backup_relation", "macro.dbt.run_hooks", "macro.dbt.drop_relation_if_exists", "macro.dbt.statement", "macro.dbt.get_create_view_as_sql", "macro.dbt.should_revoke", "macro.dbt.apply_grants", "macro.dbt.persist_docs"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1671050797.9794316}, "macro.dbt.create_csv_table": {"unique_id": "macro.dbt.create_csv_table", "package_name": "dbt", "root_path": "C:\\Python310\\lib\\site-packages\\dbt\\include\\global_project", "path": "macros\\materializations\\seeds\\helpers.sql", "original_file_path": "macros\\materializations\\seeds\\helpers.sql", "name": "create_csv_table", "macro_sql": "{% macro create_csv_table(model, agate_table) -%}\n  {{ adapter.dispatch('create_csv_table', 'dbt')(model, agate_table) }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.default__create_csv_table"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1671050797.9866126}, "macro.dbt.default__create_csv_table": {"unique_id": "macro.dbt.default__create_csv_table", "package_name": "dbt", "root_path": "C:\\Python310\\lib\\site-packages\\dbt\\include\\global_project", "path": "macros\\materializations\\seeds\\helpers.sql", "original_file_path": "macros\\materializations\\seeds\\helpers.sql", "name": "default__create_csv_table", "macro_sql": "{% macro default__create_csv_table(model, agate_table) %}\n  {%- set column_override = model['config'].get('column_types', {}) -%}\n  {%- set quote_seed_column = model['config'].get('quote_columns', None) -%}\n\n  {% set sql %}\n    create table {{ this.render() }} (\n        {%- for col_name in agate_table.column_names -%}\n            {%- set inferred_type = adapter.convert_type(agate_table, loop.index0) -%}\n            {%- set type = column_override.get(col_name, inferred_type) -%}\n            {%- set column_name = (col_name | string) -%}\n            {{ adapter.quote_seed_column(column_name, quote_seed_column) }} {{ type }} {%- if not loop.last -%}, {%- endif -%}\n        {%- endfor -%}\n    )\n  {% endset %}\n\n  {% call statement('_') -%}\n    {{ sql }}\n  {%- endcall %}\n\n  {{ return(sql) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.statement"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1671050797.9886127}, "macro.dbt.reset_csv_table": {"unique_id": "macro.dbt.reset_csv_table", "package_name": "dbt", "root_path": "C:\\Python310\\lib\\site-packages\\dbt\\include\\global_project", "path": "macros\\materializations\\seeds\\helpers.sql", "original_file_path": "macros\\materializations\\seeds\\helpers.sql", "name": "reset_csv_table", "macro_sql": "{% macro reset_csv_table(model, full_refresh, old_relation, agate_table) -%}\n  {{ adapter.dispatch('reset_csv_table', 'dbt')(model, full_refresh, old_relation, agate_table) }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.default__reset_csv_table"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1671050797.9886127}, "macro.dbt.default__reset_csv_table": {"unique_id": "macro.dbt.default__reset_csv_table", "package_name": "dbt", "root_path": "C:\\Python310\\lib\\site-packages\\dbt\\include\\global_project", "path": "macros\\materializations\\seeds\\helpers.sql", "original_file_path": "macros\\materializations\\seeds\\helpers.sql", "name": "default__reset_csv_table", "macro_sql": "{% macro default__reset_csv_table(model, full_refresh, old_relation, agate_table) %}\n    {% set sql = \"\" %}\n    {% if full_refresh %}\n        {{ adapter.drop_relation(old_relation) }}\n        {% set sql = create_csv_table(model, agate_table) %}\n    {% else %}\n        {{ adapter.truncate_relation(old_relation) }}\n        {% set sql = \"truncate table \" ~ old_relation %}\n    {% endif %}\n\n    {{ return(sql) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.create_csv_table"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1671050797.990613}, "macro.dbt.get_csv_sql": {"unique_id": "macro.dbt.get_csv_sql", "package_name": "dbt", "root_path": "C:\\Python310\\lib\\site-packages\\dbt\\include\\global_project", "path": "macros\\materializations\\seeds\\helpers.sql", "original_file_path": "macros\\materializations\\seeds\\helpers.sql", "name": "get_csv_sql", "macro_sql": "{% macro get_csv_sql(create_or_truncate_sql, insert_sql) %}\n    {{ adapter.dispatch('get_csv_sql', 'dbt')(create_or_truncate_sql, insert_sql) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.default__get_csv_sql"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1671050797.990613}, "macro.dbt.default__get_csv_sql": {"unique_id": "macro.dbt.default__get_csv_sql", "package_name": "dbt", "root_path": "C:\\Python310\\lib\\site-packages\\dbt\\include\\global_project", "path": "macros\\materializations\\seeds\\helpers.sql", "original_file_path": "macros\\materializations\\seeds\\helpers.sql", "name": "default__get_csv_sql", "macro_sql": "{% macro default__get_csv_sql(create_or_truncate_sql, insert_sql) %}\n    {{ create_or_truncate_sql }};\n    -- dbt seed --\n    {{ insert_sql }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1671050797.990613}, "macro.dbt.get_binding_char": {"unique_id": "macro.dbt.get_binding_char", "package_name": "dbt", "root_path": "C:\\Python310\\lib\\site-packages\\dbt\\include\\global_project", "path": "macros\\materializations\\seeds\\helpers.sql", "original_file_path": "macros\\materializations\\seeds\\helpers.sql", "name": "get_binding_char", "macro_sql": "{% macro get_binding_char() -%}\n  {{ adapter.dispatch('get_binding_char', 'dbt')() }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.default__get_binding_char"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1671050797.990613}, "macro.dbt.default__get_binding_char": {"unique_id": "macro.dbt.default__get_binding_char", "package_name": "dbt", "root_path": "C:\\Python310\\lib\\site-packages\\dbt\\include\\global_project", "path": "macros\\materializations\\seeds\\helpers.sql", "original_file_path": "macros\\materializations\\seeds\\helpers.sql", "name": "default__get_binding_char", "macro_sql": "{% macro default__get_binding_char() %}\n  {{ return('%s') }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1671050797.991613}, "macro.dbt.get_batch_size": {"unique_id": "macro.dbt.get_batch_size", "package_name": "dbt", "root_path": "C:\\Python310\\lib\\site-packages\\dbt\\include\\global_project", "path": "macros\\materializations\\seeds\\helpers.sql", "original_file_path": "macros\\materializations\\seeds\\helpers.sql", "name": "get_batch_size", "macro_sql": "{% macro get_batch_size() -%}\n  {{ return(adapter.dispatch('get_batch_size', 'dbt')()) }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.default__get_batch_size"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1671050797.991613}, "macro.dbt.default__get_batch_size": {"unique_id": "macro.dbt.default__get_batch_size", "package_name": "dbt", "root_path": "C:\\Python310\\lib\\site-packages\\dbt\\include\\global_project", "path": "macros\\materializations\\seeds\\helpers.sql", "original_file_path": "macros\\materializations\\seeds\\helpers.sql", "name": "default__get_batch_size", "macro_sql": "{% macro default__get_batch_size() %}\n  {{ return(10000) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1671050797.991613}, "macro.dbt.get_seed_column_quoted_csv": {"unique_id": "macro.dbt.get_seed_column_quoted_csv", "package_name": "dbt", "root_path": "C:\\Python310\\lib\\site-packages\\dbt\\include\\global_project", "path": "macros\\materializations\\seeds\\helpers.sql", "original_file_path": "macros\\materializations\\seeds\\helpers.sql", "name": "get_seed_column_quoted_csv", "macro_sql": "{% macro get_seed_column_quoted_csv(model, column_names) %}\n  {%- set quote_seed_column = model['config'].get('quote_columns', None) -%}\n    {% set quoted = [] %}\n    {% for col in column_names -%}\n        {%- do quoted.append(adapter.quote_seed_column(col, quote_seed_column)) -%}\n    {%- endfor %}\n\n    {%- set dest_cols_csv = quoted | join(', ') -%}\n    {{ return(dest_cols_csv) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1671050797.9927256}, "macro.dbt.load_csv_rows": {"unique_id": "macro.dbt.load_csv_rows", "package_name": "dbt", "root_path": "C:\\Python310\\lib\\site-packages\\dbt\\include\\global_project", "path": "macros\\materializations\\seeds\\helpers.sql", "original_file_path": "macros\\materializations\\seeds\\helpers.sql", "name": "load_csv_rows", "macro_sql": "{% macro load_csv_rows(model, agate_table) -%}\n  {{ adapter.dispatch('load_csv_rows', 'dbt')(model, agate_table) }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_snowflake.snowflake__load_csv_rows"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1671050797.9932964}, "macro.dbt.default__load_csv_rows": {"unique_id": "macro.dbt.default__load_csv_rows", "package_name": "dbt", "root_path": "C:\\Python310\\lib\\site-packages\\dbt\\include\\global_project", "path": "macros\\materializations\\seeds\\helpers.sql", "original_file_path": "macros\\materializations\\seeds\\helpers.sql", "name": "default__load_csv_rows", "macro_sql": "{% macro default__load_csv_rows(model, agate_table) %}\n\n  {% set batch_size = get_batch_size() %}\n\n  {% set cols_sql = get_seed_column_quoted_csv(model, agate_table.column_names) %}\n  {% set bindings = [] %}\n\n  {% set statements = [] %}\n\n  {% for chunk in agate_table.rows | batch(batch_size) %}\n      {% set bindings = [] %}\n\n      {% for row in chunk %}\n          {% do bindings.extend(row) %}\n      {% endfor %}\n\n      {% set sql %}\n          insert into {{ this.render() }} ({{ cols_sql }}) values\n          {% for row in chunk -%}\n              ({%- for column in agate_table.column_names -%}\n                  {{ get_binding_char() }}\n                  {%- if not loop.last%},{%- endif %}\n              {%- endfor -%})\n              {%- if not loop.last%},{%- endif %}\n          {%- endfor %}\n      {% endset %}\n\n      {% do adapter.add_query(sql, bindings=bindings, abridge_sql_log=True) %}\n\n      {% if loop.index0 == 0 %}\n          {% do statements.append(sql) %}\n      {% endif %}\n  {% endfor %}\n\n  {# Return SQL so we can render it out into the compiled files #}\n  {{ return(statements[0]) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.get_batch_size", "macro.dbt.get_seed_column_quoted_csv", "macro.dbt.get_binding_char"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1671050797.9959533}, "macro.dbt.materialization_seed_default": {"unique_id": "macro.dbt.materialization_seed_default", "package_name": "dbt", "root_path": "C:\\Python310\\lib\\site-packages\\dbt\\include\\global_project", "path": "macros\\materializations\\seeds\\seed.sql", "original_file_path": "macros\\materializations\\seeds\\seed.sql", "name": "materialization_seed_default", "macro_sql": "{% materialization seed, default %}\n\n  {%- set identifier = model['alias'] -%}\n  {%- set full_refresh_mode = (should_full_refresh()) -%}\n\n  {%- set old_relation = adapter.get_relation(database=database, schema=schema, identifier=identifier) -%}\n\n  {%- set exists_as_table = (old_relation is not none and old_relation.is_table) -%}\n  {%- set exists_as_view = (old_relation is not none and old_relation.is_view) -%}\n\n  {%- set grant_config = config.get('grants') -%}\n  {%- set agate_table = load_agate_table() -%}\n  -- grab current tables grants config for comparision later on\n\n  {%- do store_result('agate_table', response='OK', agate_table=agate_table) -%}\n\n  {{ run_hooks(pre_hooks, inside_transaction=False) }}\n\n  -- `BEGIN` happens here:\n  {{ run_hooks(pre_hooks, inside_transaction=True) }}\n\n  -- build model\n  {% set create_table_sql = \"\" %}\n  {% if exists_as_view %}\n    {{ exceptions.raise_compiler_error(\"Cannot seed to '{}', it is a view\".format(old_relation)) }}\n  {% elif exists_as_table %}\n    {% set create_table_sql = reset_csv_table(model, full_refresh_mode, old_relation, agate_table) %}\n  {% else %}\n    {% set create_table_sql = create_csv_table(model, agate_table) %}\n  {% endif %}\n\n  {% set code = 'CREATE' if full_refresh_mode else 'INSERT' %}\n  {% set rows_affected = (agate_table.rows | length) %}\n  {% set sql = load_csv_rows(model, agate_table) %}\n\n  {% call noop_statement('main', code ~ ' ' ~ rows_affected, code, rows_affected) %}\n    {{ get_csv_sql(create_table_sql, sql) }};\n  {% endcall %}\n\n  {% set target_relation = this.incorporate(type='table') %}\n\n  {% set should_revoke = should_revoke(old_relation, full_refresh_mode) %}\n  {% do apply_grants(target_relation, grant_config, should_revoke=should_revoke) %}\n\n  {% do persist_docs(target_relation, model) %}\n\n  {% if full_refresh_mode or not exists_as_table %}\n    {% do create_indexes(target_relation) %}\n  {% endif %}\n\n  {{ run_hooks(post_hooks, inside_transaction=True) }}\n\n  -- `COMMIT` happens here\n  {{ adapter.commit() }}\n\n  {{ run_hooks(post_hooks, inside_transaction=False) }}\n\n  {{ return({'relations': [target_relation]}) }}\n\n{% endmaterialization %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.should_full_refresh", "macro.dbt.run_hooks", "macro.dbt.reset_csv_table", "macro.dbt.create_csv_table", "macro.dbt.load_csv_rows", "macro.dbt.noop_statement", "macro.dbt.get_csv_sql", "macro.dbt.should_revoke", "macro.dbt.apply_grants", "macro.dbt.persist_docs", "macro.dbt.create_indexes"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1671050798.003955}, "macro.dbt.create_columns": {"unique_id": "macro.dbt.create_columns", "package_name": "dbt", "root_path": "C:\\Python310\\lib\\site-packages\\dbt\\include\\global_project", "path": "macros\\materializations\\snapshots\\helpers.sql", "original_file_path": "macros\\materializations\\snapshots\\helpers.sql", "name": "create_columns", "macro_sql": "{% macro create_columns(relation, columns) %}\n  {{ adapter.dispatch('create_columns', 'dbt')(relation, columns) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.default__create_columns"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1671050798.007532}, "macro.dbt.default__create_columns": {"unique_id": "macro.dbt.default__create_columns", "package_name": "dbt", "root_path": "C:\\Python310\\lib\\site-packages\\dbt\\include\\global_project", "path": "macros\\materializations\\snapshots\\helpers.sql", "original_file_path": "macros\\materializations\\snapshots\\helpers.sql", "name": "default__create_columns", "macro_sql": "{% macro default__create_columns(relation, columns) %}\n  {% for column in columns %}\n    {% call statement() %}\n      alter table {{ relation }} add column \"{{ column.name }}\" {{ column.data_type }};\n    {% endcall %}\n  {% endfor %}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.statement"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1671050798.007532}, "macro.dbt.post_snapshot": {"unique_id": "macro.dbt.post_snapshot", "package_name": "dbt", "root_path": "C:\\Python310\\lib\\site-packages\\dbt\\include\\global_project", "path": "macros\\materializations\\snapshots\\helpers.sql", "original_file_path": "macros\\materializations\\snapshots\\helpers.sql", "name": "post_snapshot", "macro_sql": "{% macro post_snapshot(staging_relation) %}\n  {{ adapter.dispatch('post_snapshot', 'dbt')(staging_relation) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.default__post_snapshot"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1671050798.007532}, "macro.dbt.default__post_snapshot": {"unique_id": "macro.dbt.default__post_snapshot", "package_name": "dbt", "root_path": "C:\\Python310\\lib\\site-packages\\dbt\\include\\global_project", "path": "macros\\materializations\\snapshots\\helpers.sql", "original_file_path": "macros\\materializations\\snapshots\\helpers.sql", "name": "default__post_snapshot", "macro_sql": "{% macro default__post_snapshot(staging_relation) %}\n    {# no-op #}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1671050798.007532}, "macro.dbt.get_true_sql": {"unique_id": "macro.dbt.get_true_sql", "package_name": "dbt", "root_path": "C:\\Python310\\lib\\site-packages\\dbt\\include\\global_project", "path": "macros\\materializations\\snapshots\\helpers.sql", "original_file_path": "macros\\materializations\\snapshots\\helpers.sql", "name": "get_true_sql", "macro_sql": "{% macro get_true_sql() %}\n  {{ adapter.dispatch('get_true_sql', 'dbt')() }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.default__get_true_sql"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1671050798.007532}, "macro.dbt.default__get_true_sql": {"unique_id": "macro.dbt.default__get_true_sql", "package_name": "dbt", "root_path": "C:\\Python310\\lib\\site-packages\\dbt\\include\\global_project", "path": "macros\\materializations\\snapshots\\helpers.sql", "original_file_path": "macros\\materializations\\snapshots\\helpers.sql", "name": "default__get_true_sql", "macro_sql": "{% macro default__get_true_sql() %}\n    {{ return('TRUE') }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1671050798.007532}, "macro.dbt.snapshot_staging_table": {"unique_id": "macro.dbt.snapshot_staging_table", "package_name": "dbt", "root_path": "C:\\Python310\\lib\\site-packages\\dbt\\include\\global_project", "path": "macros\\materializations\\snapshots\\helpers.sql", "original_file_path": "macros\\materializations\\snapshots\\helpers.sql", "name": "snapshot_staging_table", "macro_sql": "{% macro snapshot_staging_table(strategy, source_sql, target_relation) -%}\n  {{ adapter.dispatch('snapshot_staging_table', 'dbt')(strategy, source_sql, target_relation) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.default__snapshot_staging_table"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1671050798.007532}, "macro.dbt.default__snapshot_staging_table": {"unique_id": "macro.dbt.default__snapshot_staging_table", "package_name": "dbt", "root_path": "C:\\Python310\\lib\\site-packages\\dbt\\include\\global_project", "path": "macros\\materializations\\snapshots\\helpers.sql", "original_file_path": "macros\\materializations\\snapshots\\helpers.sql", "name": "default__snapshot_staging_table", "macro_sql": "{% macro default__snapshot_staging_table(strategy, source_sql, target_relation) -%}\n\n    with snapshot_query as (\n\n        {{ source_sql }}\n\n    ),\n\n    snapshotted_data as (\n\n        select *,\n            {{ strategy.unique_key }} as dbt_unique_key\n\n        from {{ target_relation }}\n        where dbt_valid_to is null\n\n    ),\n\n    insertions_source_data as (\n\n        select\n            *,\n            {{ strategy.unique_key }} as dbt_unique_key,\n            {{ strategy.updated_at }} as dbt_updated_at,\n            {{ strategy.updated_at }} as dbt_valid_from,\n            nullif({{ strategy.updated_at }}, {{ strategy.updated_at }}) as dbt_valid_to,\n            {{ strategy.scd_id }} as dbt_scd_id\n\n        from snapshot_query\n    ),\n\n    updates_source_data as (\n\n        select\n            *,\n            {{ strategy.unique_key }} as dbt_unique_key,\n            {{ strategy.updated_at }} as dbt_updated_at,\n            {{ strategy.updated_at }} as dbt_valid_from,\n            {{ strategy.updated_at }} as dbt_valid_to\n\n        from snapshot_query\n    ),\n\n    {%- if strategy.invalidate_hard_deletes %}\n\n    deletes_source_data as (\n\n        select\n            *,\n            {{ strategy.unique_key }} as dbt_unique_key\n        from snapshot_query\n    ),\n    {% endif %}\n\n    insertions as (\n\n        select\n            'insert' as dbt_change_type,\n            source_data.*\n\n        from insertions_source_data as source_data\n        left outer join snapshotted_data on snapshotted_data.dbt_unique_key = source_data.dbt_unique_key\n        where snapshotted_data.dbt_unique_key is null\n           or (\n                snapshotted_data.dbt_unique_key is not null\n            and (\n                {{ strategy.row_changed }}\n            )\n        )\n\n    ),\n\n    updates as (\n\n        select\n            'update' as dbt_change_type,\n            source_data.*,\n            snapshotted_data.dbt_scd_id\n\n        from updates_source_data as source_data\n        join snapshotted_data on snapshotted_data.dbt_unique_key = source_data.dbt_unique_key\n        where (\n            {{ strategy.row_changed }}\n        )\n    )\n\n    {%- if strategy.invalidate_hard_deletes -%}\n    ,\n\n    deletes as (\n\n        select\n            'delete' as dbt_change_type,\n            source_data.*,\n            {{ snapshot_get_time() }} as dbt_valid_from,\n            {{ snapshot_get_time() }} as dbt_updated_at,\n            {{ snapshot_get_time() }} as dbt_valid_to,\n            snapshotted_data.dbt_scd_id\n\n        from snapshotted_data\n        left join deletes_source_data as source_data on snapshotted_data.dbt_unique_key = source_data.dbt_unique_key\n        where source_data.dbt_unique_key is null\n    )\n    {%- endif %}\n\n    select * from insertions\n    union all\n    select * from updates\n    {%- if strategy.invalidate_hard_deletes %}\n    union all\n    select * from deletes\n    {%- endif %}\n\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.snapshot_get_time"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1671050798.0130587}, "macro.dbt.build_snapshot_table": {"unique_id": "macro.dbt.build_snapshot_table", "package_name": "dbt", "root_path": "C:\\Python310\\lib\\site-packages\\dbt\\include\\global_project", "path": "macros\\materializations\\snapshots\\helpers.sql", "original_file_path": "macros\\materializations\\snapshots\\helpers.sql", "name": "build_snapshot_table", "macro_sql": "{% macro build_snapshot_table(strategy, sql) -%}\n  {{ adapter.dispatch('build_snapshot_table', 'dbt')(strategy, sql) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.default__build_snapshot_table"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1671050798.0140796}, "macro.dbt.default__build_snapshot_table": {"unique_id": "macro.dbt.default__build_snapshot_table", "package_name": "dbt", "root_path": "C:\\Python310\\lib\\site-packages\\dbt\\include\\global_project", "path": "macros\\materializations\\snapshots\\helpers.sql", "original_file_path": "macros\\materializations\\snapshots\\helpers.sql", "name": "default__build_snapshot_table", "macro_sql": "{% macro default__build_snapshot_table(strategy, sql) %}\n\n    select *,\n        {{ strategy.scd_id }} as dbt_scd_id,\n        {{ strategy.updated_at }} as dbt_updated_at,\n        {{ strategy.updated_at }} as dbt_valid_from,\n        nullif({{ strategy.updated_at }}, {{ strategy.updated_at }}) as dbt_valid_to\n    from (\n        {{ sql }}\n    ) sbq\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1671050798.0140796}, "macro.dbt.build_snapshot_staging_table": {"unique_id": "macro.dbt.build_snapshot_staging_table", "package_name": "dbt", "root_path": "C:\\Python310\\lib\\site-packages\\dbt\\include\\global_project", "path": "macros\\materializations\\snapshots\\helpers.sql", "original_file_path": "macros\\materializations\\snapshots\\helpers.sql", "name": "build_snapshot_staging_table", "macro_sql": "{% macro build_snapshot_staging_table(strategy, sql, target_relation) %}\n    {% set temp_relation = make_temp_relation(target_relation) %}\n\n    {% set select = snapshot_staging_table(strategy, sql, target_relation) %}\n\n    {% call statement('build_snapshot_staging_relation') %}\n        {{ create_table_as(True, temp_relation, select) }}\n    {% endcall %}\n\n    {% do return(temp_relation) %}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.make_temp_relation", "macro.dbt.snapshot_staging_table", "macro.dbt.statement", "macro.dbt.create_table_as"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1671050798.0150602}, "macro.dbt.materialization_snapshot_default": {"unique_id": "macro.dbt.materialization_snapshot_default", "package_name": "dbt", "root_path": "C:\\Python310\\lib\\site-packages\\dbt\\include\\global_project", "path": "macros\\materializations\\snapshots\\snapshot.sql", "original_file_path": "macros\\materializations\\snapshots\\snapshot.sql", "name": "materialization_snapshot_default", "macro_sql": "{% materialization snapshot, default %}\n  {%- set config = model['config'] -%}\n\n  {%- set target_table = model.get('alias', model.get('name')) -%}\n\n  {%- set strategy_name = config.get('strategy') -%}\n  {%- set unique_key = config.get('unique_key') %}\n  -- grab current tables grants config for comparision later on\n  {%- set grant_config = config.get('grants') -%}\n\n  {% set target_relation_exists, target_relation = get_or_create_relation(\n          database=model.database,\n          schema=model.schema,\n          identifier=target_table,\n          type='table') -%}\n\n  {%- if not target_relation.is_table -%}\n    {% do exceptions.relation_wrong_type(target_relation, 'table') %}\n  {%- endif -%}\n\n\n  {{ run_hooks(pre_hooks, inside_transaction=False) }}\n\n  {{ run_hooks(pre_hooks, inside_transaction=True) }}\n\n  {% set strategy_macro = strategy_dispatch(strategy_name) %}\n  {% set strategy = strategy_macro(model, \"snapshotted_data\", \"source_data\", config, target_relation_exists) %}\n\n  {% if not target_relation_exists %}\n\n      {% set build_sql = build_snapshot_table(strategy, model['compiled_sql']) %}\n      {% set final_sql = create_table_as(False, target_relation, build_sql) %}\n\n  {% else %}\n\n      {{ adapter.valid_snapshot_target(target_relation) }}\n\n      {% set staging_table = build_snapshot_staging_table(strategy, sql, target_relation) %}\n\n      -- this may no-op if the database does not require column expansion\n      {% do adapter.expand_target_column_types(from_relation=staging_table,\n                                               to_relation=target_relation) %}\n\n      {% set missing_columns = adapter.get_missing_columns(staging_table, target_relation)\n                                   | rejectattr('name', 'equalto', 'dbt_change_type')\n                                   | rejectattr('name', 'equalto', 'DBT_CHANGE_TYPE')\n                                   | rejectattr('name', 'equalto', 'dbt_unique_key')\n                                   | rejectattr('name', 'equalto', 'DBT_UNIQUE_KEY')\n                                   | list %}\n\n      {% do create_columns(target_relation, missing_columns) %}\n\n      {% set source_columns = adapter.get_columns_in_relation(staging_table)\n                                   | rejectattr('name', 'equalto', 'dbt_change_type')\n                                   | rejectattr('name', 'equalto', 'DBT_CHANGE_TYPE')\n                                   | rejectattr('name', 'equalto', 'dbt_unique_key')\n                                   | rejectattr('name', 'equalto', 'DBT_UNIQUE_KEY')\n                                   | list %}\n\n      {% set quoted_source_columns = [] %}\n      {% for column in source_columns %}\n        {% do quoted_source_columns.append(adapter.quote(column.name)) %}\n      {% endfor %}\n\n      {% set final_sql = snapshot_merge_sql(\n            target = target_relation,\n            source = staging_table,\n            insert_cols = quoted_source_columns\n         )\n      %}\n\n  {% endif %}\n\n  {% call statement('main') %}\n      {{ final_sql }}\n  {% endcall %}\n\n  {% set should_revoke = should_revoke(target_relation_exists, full_refresh_mode=False) %}\n  {% do apply_grants(target_relation, grant_config, should_revoke=should_revoke) %}\n\n  {% do persist_docs(target_relation, model) %}\n\n  {% if not target_relation_exists %}\n    {% do create_indexes(target_relation) %}\n  {% endif %}\n\n  {{ run_hooks(post_hooks, inside_transaction=True) }}\n\n  {{ adapter.commit() }}\n\n  {% if staging_table is defined %}\n      {% do post_snapshot(staging_table) %}\n  {% endif %}\n\n  {{ run_hooks(post_hooks, inside_transaction=False) }}\n\n  {{ return({'relations': [target_relation]}) }}\n\n{% endmaterialization %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.get_or_create_relation", "macro.dbt.run_hooks", "macro.dbt.strategy_dispatch", "macro.dbt.build_snapshot_table", "macro.dbt.create_table_as", "macro.dbt.build_snapshot_staging_table", "macro.dbt.create_columns", "macro.dbt.snapshot_merge_sql", "macro.dbt.statement", "macro.dbt.should_revoke", "macro.dbt.apply_grants", "macro.dbt.persist_docs", "macro.dbt.create_indexes", "macro.dbt.post_snapshot"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1671050798.0230699}, "macro.dbt.snapshot_merge_sql": {"unique_id": "macro.dbt.snapshot_merge_sql", "package_name": "dbt", "root_path": "C:\\Python310\\lib\\site-packages\\dbt\\include\\global_project", "path": "macros\\materializations\\snapshots\\snapshot_merge.sql", "original_file_path": "macros\\materializations\\snapshots\\snapshot_merge.sql", "name": "snapshot_merge_sql", "macro_sql": "{% macro snapshot_merge_sql(target, source, insert_cols) -%}\n  {{ adapter.dispatch('snapshot_merge_sql', 'dbt')(target, source, insert_cols) }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_snowflake.snowflake__snapshot_merge_sql"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1671050798.0240695}, "macro.dbt.default__snapshot_merge_sql": {"unique_id": "macro.dbt.default__snapshot_merge_sql", "package_name": "dbt", "root_path": "C:\\Python310\\lib\\site-packages\\dbt\\include\\global_project", "path": "macros\\materializations\\snapshots\\snapshot_merge.sql", "original_file_path": "macros\\materializations\\snapshots\\snapshot_merge.sql", "name": "default__snapshot_merge_sql", "macro_sql": "{% macro default__snapshot_merge_sql(target, source, insert_cols) -%}\n    {%- set insert_cols_csv = insert_cols | join(', ') -%}\n\n    merge into {{ target }} as DBT_INTERNAL_DEST\n    using {{ source }} as DBT_INTERNAL_SOURCE\n    on DBT_INTERNAL_SOURCE.dbt_scd_id = DBT_INTERNAL_DEST.dbt_scd_id\n\n    when matched\n     and DBT_INTERNAL_DEST.dbt_valid_to is null\n     and DBT_INTERNAL_SOURCE.dbt_change_type in ('update', 'delete')\n        then update\n        set dbt_valid_to = DBT_INTERNAL_SOURCE.dbt_valid_to\n\n    when not matched\n     and DBT_INTERNAL_SOURCE.dbt_change_type = 'insert'\n        then insert ({{ insert_cols_csv }})\n        values ({{ insert_cols_csv }})\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1671050798.0250716}, "macro.dbt.strategy_dispatch": {"unique_id": "macro.dbt.strategy_dispatch", "package_name": "dbt", "root_path": "C:\\Python310\\lib\\site-packages\\dbt\\include\\global_project", "path": "macros\\materializations\\snapshots\\strategies.sql", "original_file_path": "macros\\materializations\\snapshots\\strategies.sql", "name": "strategy_dispatch", "macro_sql": "{% macro strategy_dispatch(name) -%}\n{% set original_name = name %}\n  {% if '.' in name %}\n    {% set package_name, name = name.split(\".\", 1) %}\n  {% else %}\n    {% set package_name = none %}\n  {% endif %}\n\n  {% if package_name is none %}\n    {% set package_context = context %}\n  {% elif package_name in context %}\n    {% set package_context = context[package_name] %}\n  {% else %}\n    {% set error_msg %}\n        Could not find package '{{package_name}}', called with '{{original_name}}'\n    {% endset %}\n    {{ exceptions.raise_compiler_error(error_msg | trim) }}\n  {% endif %}\n\n  {%- set search_name = 'snapshot_' ~ name ~ '_strategy' -%}\n\n  {% if search_name not in package_context %}\n    {% set error_msg %}\n        The specified strategy macro '{{name}}' was not found in package '{{ package_name }}'\n    {% endset %}\n    {{ exceptions.raise_compiler_error(error_msg | trim) }}\n  {% endif %}\n  {{ return(package_context[search_name]) }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1671050798.0300536}, "macro.dbt.snapshot_hash_arguments": {"unique_id": "macro.dbt.snapshot_hash_arguments", "package_name": "dbt", "root_path": "C:\\Python310\\lib\\site-packages\\dbt\\include\\global_project", "path": "macros\\materializations\\snapshots\\strategies.sql", "original_file_path": "macros\\materializations\\snapshots\\strategies.sql", "name": "snapshot_hash_arguments", "macro_sql": "{% macro snapshot_hash_arguments(args) -%}\n  {{ adapter.dispatch('snapshot_hash_arguments', 'dbt')(args) }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.default__snapshot_hash_arguments"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1671050798.0300536}, "macro.dbt.default__snapshot_hash_arguments": {"unique_id": "macro.dbt.default__snapshot_hash_arguments", "package_name": "dbt", "root_path": "C:\\Python310\\lib\\site-packages\\dbt\\include\\global_project", "path": "macros\\materializations\\snapshots\\strategies.sql", "original_file_path": "macros\\materializations\\snapshots\\strategies.sql", "name": "default__snapshot_hash_arguments", "macro_sql": "{% macro default__snapshot_hash_arguments(args) -%}\n    md5({%- for arg in args -%}\n        coalesce(cast({{ arg }} as varchar ), '')\n        {% if not loop.last %} || '|' || {% endif %}\n    {%- endfor -%})\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1671050798.0300536}, "macro.dbt.snapshot_get_time": {"unique_id": "macro.dbt.snapshot_get_time", "package_name": "dbt", "root_path": "C:\\Python310\\lib\\site-packages\\dbt\\include\\global_project", "path": "macros\\materializations\\snapshots\\strategies.sql", "original_file_path": "macros\\materializations\\snapshots\\strategies.sql", "name": "snapshot_get_time", "macro_sql": "{% macro snapshot_get_time() -%}\n  {{ adapter.dispatch('snapshot_get_time', 'dbt')() }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_snowflake.snowflake__snapshot_get_time"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1671050798.0300536}, "macro.dbt.default__snapshot_get_time": {"unique_id": "macro.dbt.default__snapshot_get_time", "package_name": "dbt", "root_path": "C:\\Python310\\lib\\site-packages\\dbt\\include\\global_project", "path": "macros\\materializations\\snapshots\\strategies.sql", "original_file_path": "macros\\materializations\\snapshots\\strategies.sql", "name": "default__snapshot_get_time", "macro_sql": "{% macro default__snapshot_get_time() -%}\n  {{ current_timestamp() }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.current_timestamp"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1671050798.0310721}, "macro.dbt.snapshot_timestamp_strategy": {"unique_id": "macro.dbt.snapshot_timestamp_strategy", "package_name": "dbt", "root_path": "C:\\Python310\\lib\\site-packages\\dbt\\include\\global_project", "path": "macros\\materializations\\snapshots\\strategies.sql", "original_file_path": "macros\\materializations\\snapshots\\strategies.sql", "name": "snapshot_timestamp_strategy", "macro_sql": "{% macro snapshot_timestamp_strategy(node, snapshotted_rel, current_rel, config, target_exists) %}\n    {% set primary_key = config['unique_key'] %}\n    {% set updated_at = config['updated_at'] %}\n    {% set invalidate_hard_deletes = config.get('invalidate_hard_deletes', false) %}\n\n    {#/*\n        The snapshot relation might not have an {{ updated_at }} value if the\n        snapshot strategy is changed from `check` to `timestamp`. We\n        should use a dbt-created column for the comparison in the snapshot\n        table instead of assuming that the user-supplied {{ updated_at }}\n        will be present in the historical data.\n\n        See https://github.com/dbt-labs/dbt-core/issues/2350\n    */ #}\n    {% set row_changed_expr -%}\n        ({{ snapshotted_rel }}.dbt_valid_from < {{ current_rel }}.{{ updated_at }})\n    {%- endset %}\n\n    {% set scd_id_expr = snapshot_hash_arguments([primary_key, updated_at]) %}\n\n    {% do return({\n        \"unique_key\": primary_key,\n        \"updated_at\": updated_at,\n        \"row_changed\": row_changed_expr,\n        \"scd_id\": scd_id_expr,\n        \"invalidate_hard_deletes\": invalidate_hard_deletes\n    }) %}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.snapshot_hash_arguments"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1671050798.0320532}, "macro.dbt.snapshot_string_as_time": {"unique_id": "macro.dbt.snapshot_string_as_time", "package_name": "dbt", "root_path": "C:\\Python310\\lib\\site-packages\\dbt\\include\\global_project", "path": "macros\\materializations\\snapshots\\strategies.sql", "original_file_path": "macros\\materializations\\snapshots\\strategies.sql", "name": "snapshot_string_as_time", "macro_sql": "{% macro snapshot_string_as_time(timestamp) -%}\n    {{ adapter.dispatch('snapshot_string_as_time', 'dbt')(timestamp) }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_snowflake.snowflake__snapshot_string_as_time"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1671050798.0320532}, "macro.dbt.default__snapshot_string_as_time": {"unique_id": "macro.dbt.default__snapshot_string_as_time", "package_name": "dbt", "root_path": "C:\\Python310\\lib\\site-packages\\dbt\\include\\global_project", "path": "macros\\materializations\\snapshots\\strategies.sql", "original_file_path": "macros\\materializations\\snapshots\\strategies.sql", "name": "default__snapshot_string_as_time", "macro_sql": "{% macro default__snapshot_string_as_time(timestamp) %}\n    {% do exceptions.raise_not_implemented(\n        'snapshot_string_as_time macro not implemented for adapter '+adapter.type()\n    ) %}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1671050798.0320532}, "macro.dbt.snapshot_check_all_get_existing_columns": {"unique_id": "macro.dbt.snapshot_check_all_get_existing_columns", "package_name": "dbt", "root_path": "C:\\Python310\\lib\\site-packages\\dbt\\include\\global_project", "path": "macros\\materializations\\snapshots\\strategies.sql", "original_file_path": "macros\\materializations\\snapshots\\strategies.sql", "name": "snapshot_check_all_get_existing_columns", "macro_sql": "{% macro snapshot_check_all_get_existing_columns(node, target_exists, check_cols_config) -%}\n    {%- if not target_exists -%}\n        {#-- no table yet -> return whatever the query does --#}\n        {{ return((false, query_columns)) }}\n    {%- endif -%}\n\n    {#-- handle any schema changes --#}\n    {%- set target_relation = adapter.get_relation(database=node.database, schema=node.schema, identifier=node.alias) -%}\n\n    {% if check_cols_config == 'all' %}\n        {%- set query_columns = get_columns_in_query(node['compiled_sql']) -%}\n\n    {% elif check_cols_config is iterable and (check_cols_config | length) > 0 %}\n        {#-- query for proper casing/quoting, to support comparison below --#}\n        {%- set select_check_cols_from_target -%}\n          select {{ check_cols_config | join(', ') }} from ({{ node['compiled_sql'] }}) subq\n        {%- endset -%}\n        {% set query_columns = get_columns_in_query(select_check_cols_from_target) %}\n\n    {% else %}\n        {% do exceptions.raise_compiler_error(\"Invalid value for 'check_cols': \" ~ check_cols_config) %}\n    {% endif %}\n\n    {%- set existing_cols = adapter.get_columns_in_relation(target_relation) | map(attribute = 'name') | list -%}\n    {%- set ns = namespace() -%} {#-- handle for-loop scoping with a namespace --#}\n    {%- set ns.column_added = false -%}\n\n    {%- set intersection = [] -%}\n    {%- for col in query_columns -%}\n        {%- if col in existing_cols -%}\n            {%- do intersection.append(adapter.quote(col)) -%}\n        {%- else -%}\n            {% set ns.column_added = true %}\n        {%- endif -%}\n    {%- endfor -%}\n    {{ return((ns.column_added, intersection)) }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.get_columns_in_query"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1671050798.03407}, "macro.dbt.snapshot_check_strategy": {"unique_id": "macro.dbt.snapshot_check_strategy", "package_name": "dbt", "root_path": "C:\\Python310\\lib\\site-packages\\dbt\\include\\global_project", "path": "macros\\materializations\\snapshots\\strategies.sql", "original_file_path": "macros\\materializations\\snapshots\\strategies.sql", "name": "snapshot_check_strategy", "macro_sql": "{% macro snapshot_check_strategy(node, snapshotted_rel, current_rel, config, target_exists) %}\n    {% set check_cols_config = config['check_cols'] %}\n    {% set primary_key = config['unique_key'] %}\n    {% set invalidate_hard_deletes = config.get('invalidate_hard_deletes', false) %}\n    {% set updated_at = config.get('updated_at', snapshot_get_time()) %}\n\n    {% set column_added = false %}\n\n    {% set column_added, check_cols = snapshot_check_all_get_existing_columns(node, target_exists, check_cols_config) %}\n\n    {%- set row_changed_expr -%}\n    (\n    {%- if column_added -%}\n        {{ get_true_sql() }}\n    {%- else -%}\n    {%- for col in check_cols -%}\n        {{ snapshotted_rel }}.{{ col }} != {{ current_rel }}.{{ col }}\n        or\n        (\n            (({{ snapshotted_rel }}.{{ col }} is null) and not ({{ current_rel }}.{{ col }} is null))\n            or\n            ((not {{ snapshotted_rel }}.{{ col }} is null) and ({{ current_rel }}.{{ col }} is null))\n        )\n        {%- if not loop.last %} or {% endif -%}\n    {%- endfor -%}\n    {%- endif -%}\n    )\n    {%- endset %}\n\n    {% set scd_id_expr = snapshot_hash_arguments([primary_key, updated_at]) %}\n\n    {% do return({\n        \"unique_key\": primary_key,\n        \"updated_at\": updated_at,\n        \"row_changed\": row_changed_expr,\n        \"scd_id\": scd_id_expr,\n        \"invalidate_hard_deletes\": invalidate_hard_deletes\n    }) %}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.snapshot_get_time", "macro.dbt.snapshot_check_all_get_existing_columns", "macro.dbt.get_true_sql", "macro.dbt.snapshot_hash_arguments"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1671050798.0370698}, "macro.dbt.get_test_sql": {"unique_id": "macro.dbt.get_test_sql", "package_name": "dbt", "root_path": "C:\\Python310\\lib\\site-packages\\dbt\\include\\global_project", "path": "macros\\materializations\\tests\\helpers.sql", "original_file_path": "macros\\materializations\\tests\\helpers.sql", "name": "get_test_sql", "macro_sql": "{% macro get_test_sql(main_sql, fail_calc, warn_if, error_if, limit) -%}\n  {{ adapter.dispatch('get_test_sql', 'dbt')(main_sql, fail_calc, warn_if, error_if, limit) }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.default__get_test_sql"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1671050798.0380793}, "macro.dbt.default__get_test_sql": {"unique_id": "macro.dbt.default__get_test_sql", "package_name": "dbt", "root_path": "C:\\Python310\\lib\\site-packages\\dbt\\include\\global_project", "path": "macros\\materializations\\tests\\helpers.sql", "original_file_path": "macros\\materializations\\tests\\helpers.sql", "name": "default__get_test_sql", "macro_sql": "{% macro default__get_test_sql(main_sql, fail_calc, warn_if, error_if, limit) -%}\n    select\n      {{ fail_calc }} as failures,\n      {{ fail_calc }} {{ warn_if }} as should_warn,\n      {{ fail_calc }} {{ error_if }} as should_error\n    from (\n      {{ main_sql }}\n      {{ \"limit \" ~ limit if limit != none }}\n    ) dbt_internal_test\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1671050798.0380793}, "macro.dbt.materialization_test_default": {"unique_id": "macro.dbt.materialization_test_default", "package_name": "dbt", "root_path": "C:\\Python310\\lib\\site-packages\\dbt\\include\\global_project", "path": "macros\\materializations\\tests\\test.sql", "original_file_path": "macros\\materializations\\tests\\test.sql", "name": "materialization_test_default", "macro_sql": "{%- materialization test, default -%}\n\n  {% set relations = [] %}\n\n  {% if should_store_failures() %}\n\n    {% set identifier = model['alias'] %}\n    {% set old_relation = adapter.get_relation(database=database, schema=schema, identifier=identifier) %}\n    {% set target_relation = api.Relation.create(\n        identifier=identifier, schema=schema, database=database, type='table') -%} %}\n\n    {% if old_relation %}\n        {% do adapter.drop_relation(old_relation) %}\n    {% endif %}\n\n    {% call statement(auto_begin=True) %}\n        {{ create_table_as(False, target_relation, sql) }}\n    {% endcall %}\n\n    {% do relations.append(target_relation) %}\n\n    {% set main_sql %}\n        select *\n        from {{ target_relation }}\n    {% endset %}\n\n    {{ adapter.commit() }}\n\n  {% else %}\n\n      {% set main_sql = sql %}\n\n  {% endif %}\n\n  {% set limit = config.get('limit') %}\n  {% set fail_calc = config.get('fail_calc') %}\n  {% set warn_if = config.get('warn_if') %}\n  {% set error_if = config.get('error_if') %}\n\n  {% call statement('main', fetch_result=True) -%}\n\n    {{ get_test_sql(main_sql, fail_calc, warn_if, error_if, limit)}}\n\n  {%- endcall %}\n\n  {{ return({'relations': relations}) }}\n\n{%- endmaterialization -%}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.should_store_failures", "macro.dbt.statement", "macro.dbt.create_table_as", "macro.dbt.get_test_sql"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1671050798.0410748}, "macro.dbt.get_where_subquery": {"unique_id": "macro.dbt.get_where_subquery", "package_name": "dbt", "root_path": "C:\\Python310\\lib\\site-packages\\dbt\\include\\global_project", "path": "macros\\materializations\\tests\\where_subquery.sql", "original_file_path": "macros\\materializations\\tests\\where_subquery.sql", "name": "get_where_subquery", "macro_sql": "{% macro get_where_subquery(relation) -%}\n    {% do return(adapter.dispatch('get_where_subquery', 'dbt')(relation)) %}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.default__get_where_subquery"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1671050798.0420659}, "macro.dbt.default__get_where_subquery": {"unique_id": "macro.dbt.default__get_where_subquery", "package_name": "dbt", "root_path": "C:\\Python310\\lib\\site-packages\\dbt\\include\\global_project", "path": "macros\\materializations\\tests\\where_subquery.sql", "original_file_path": "macros\\materializations\\tests\\where_subquery.sql", "name": "default__get_where_subquery", "macro_sql": "{% macro default__get_where_subquery(relation) -%}\n    {% set where = config.get('where', '') %}\n    {% if where %}\n        {%- set filtered -%}\n            (select * from {{ relation }} where {{ where }}) dbt_subquery\n        {%- endset -%}\n        {% do return(filtered) %}\n    {%- else -%}\n        {% do return(relation) %}\n    {%- endif -%}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1671050798.0430808}, "macro.dbt.any_value": {"unique_id": "macro.dbt.any_value", "package_name": "dbt", "root_path": "C:\\Python310\\lib\\site-packages\\dbt\\include\\global_project", "path": "macros\\utils\\any_value.sql", "original_file_path": "macros\\utils\\any_value.sql", "name": "any_value", "macro_sql": "{% macro any_value(expression) -%}\n    {{ return(adapter.dispatch('any_value', 'dbt') (expression)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__any_value"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1671050798.0430808}, "macro.dbt.default__any_value": {"unique_id": "macro.dbt.default__any_value", "package_name": "dbt", "root_path": "C:\\Python310\\lib\\site-packages\\dbt\\include\\global_project", "path": "macros\\utils\\any_value.sql", "original_file_path": "macros\\utils\\any_value.sql", "name": "default__any_value", "macro_sql": "{% macro default__any_value(expression) -%}\n\n    any_value({{ expression }})\n\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1671050798.0440805}, "macro.dbt.bool_or": {"unique_id": "macro.dbt.bool_or", "package_name": "dbt", "root_path": "C:\\Python310\\lib\\site-packages\\dbt\\include\\global_project", "path": "macros\\utils\\bool_or.sql", "original_file_path": "macros\\utils\\bool_or.sql", "name": "bool_or", "macro_sql": "{% macro bool_or(expression) -%}\n    {{ return(adapter.dispatch('bool_or', 'dbt') (expression)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_snowflake.snowflake__bool_or"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1671050798.0450804}, "macro.dbt.default__bool_or": {"unique_id": "macro.dbt.default__bool_or", "package_name": "dbt", "root_path": "C:\\Python310\\lib\\site-packages\\dbt\\include\\global_project", "path": "macros\\utils\\bool_or.sql", "original_file_path": "macros\\utils\\bool_or.sql", "name": "default__bool_or", "macro_sql": "{% macro default__bool_or(expression) -%}\n\n    bool_or({{ expression }})\n\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1671050798.0450804}, "macro.dbt.cast_bool_to_text": {"unique_id": "macro.dbt.cast_bool_to_text", "package_name": "dbt", "root_path": "C:\\Python310\\lib\\site-packages\\dbt\\include\\global_project", "path": "macros\\utils\\cast_bool_to_text.sql", "original_file_path": "macros\\utils\\cast_bool_to_text.sql", "name": "cast_bool_to_text", "macro_sql": "{% macro cast_bool_to_text(field) %}\n  {{ adapter.dispatch('cast_bool_to_text', 'dbt') (field) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__cast_bool_to_text"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1671050798.0450804}, "macro.dbt.default__cast_bool_to_text": {"unique_id": "macro.dbt.default__cast_bool_to_text", "package_name": "dbt", "root_path": "C:\\Python310\\lib\\site-packages\\dbt\\include\\global_project", "path": "macros\\utils\\cast_bool_to_text.sql", "original_file_path": "macros\\utils\\cast_bool_to_text.sql", "name": "default__cast_bool_to_text", "macro_sql": "{% macro default__cast_bool_to_text(field) %}\n    cast({{ field }} as {{ api.Column.translate_type('string') }})\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1671050798.046056}, "macro.dbt.concat": {"unique_id": "macro.dbt.concat", "package_name": "dbt", "root_path": "C:\\Python310\\lib\\site-packages\\dbt\\include\\global_project", "path": "macros\\utils\\concat.sql", "original_file_path": "macros\\utils\\concat.sql", "name": "concat", "macro_sql": "{% macro concat(fields) -%}\n  {{ return(adapter.dispatch('concat', 'dbt')(fields)) }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__concat"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1671050798.0470748}, "macro.dbt.default__concat": {"unique_id": "macro.dbt.default__concat", "package_name": "dbt", "root_path": "C:\\Python310\\lib\\site-packages\\dbt\\include\\global_project", "path": "macros\\utils\\concat.sql", "original_file_path": "macros\\utils\\concat.sql", "name": "default__concat", "macro_sql": "{% macro default__concat(fields) -%}\n    {{ fields|join(' || ') }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1671050798.0470748}, "macro.dbt.type_string": {"unique_id": "macro.dbt.type_string", "package_name": "dbt", "root_path": "C:\\Python310\\lib\\site-packages\\dbt\\include\\global_project", "path": "macros\\utils\\data_types.sql", "original_file_path": "macros\\utils\\data_types.sql", "name": "type_string", "macro_sql": "\n\n{%- macro type_string() -%}\n  {{ return(adapter.dispatch('type_string', 'dbt')()) }}\n{%- endmacro -%}\n\n", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__type_string"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1671050798.0490553}, "macro.dbt.default__type_string": {"unique_id": "macro.dbt.default__type_string", "package_name": "dbt", "root_path": "C:\\Python310\\lib\\site-packages\\dbt\\include\\global_project", "path": "macros\\utils\\data_types.sql", "original_file_path": "macros\\utils\\data_types.sql", "name": "default__type_string", "macro_sql": "{% macro default__type_string() %}\n    {{ return(api.Column.translate_type(\"string\")) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1671050798.0490553}, "macro.dbt.type_timestamp": {"unique_id": "macro.dbt.type_timestamp", "package_name": "dbt", "root_path": "C:\\Python310\\lib\\site-packages\\dbt\\include\\global_project", "path": "macros\\utils\\data_types.sql", "original_file_path": "macros\\utils\\data_types.sql", "name": "type_timestamp", "macro_sql": "\n\n{%- macro type_timestamp() -%}\n  {{ return(adapter.dispatch('type_timestamp', 'dbt')()) }}\n{%- endmacro -%}\n\n", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__type_timestamp"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1671050798.0501435}, "macro.dbt.default__type_timestamp": {"unique_id": "macro.dbt.default__type_timestamp", "package_name": "dbt", "root_path": "C:\\Python310\\lib\\site-packages\\dbt\\include\\global_project", "path": "macros\\utils\\data_types.sql", "original_file_path": "macros\\utils\\data_types.sql", "name": "default__type_timestamp", "macro_sql": "{% macro default__type_timestamp() %}\n    {{ return(api.Column.translate_type(\"timestamp\")) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1671050798.0501435}, "macro.dbt.type_float": {"unique_id": "macro.dbt.type_float", "package_name": "dbt", "root_path": "C:\\Python310\\lib\\site-packages\\dbt\\include\\global_project", "path": "macros\\utils\\data_types.sql", "original_file_path": "macros\\utils\\data_types.sql", "name": "type_float", "macro_sql": "\n\n{%- macro type_float() -%}\n  {{ return(adapter.dispatch('type_float', 'dbt')()) }}\n{%- endmacro -%}\n\n", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__type_float"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1671050798.0501435}, "macro.dbt.default__type_float": {"unique_id": "macro.dbt.default__type_float", "package_name": "dbt", "root_path": "C:\\Python310\\lib\\site-packages\\dbt\\include\\global_project", "path": "macros\\utils\\data_types.sql", "original_file_path": "macros\\utils\\data_types.sql", "name": "default__type_float", "macro_sql": "{% macro default__type_float() %}\n    {{ return(api.Column.translate_type(\"float\")) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1671050798.051147}, "macro.dbt.type_numeric": {"unique_id": "macro.dbt.type_numeric", "package_name": "dbt", "root_path": "C:\\Python310\\lib\\site-packages\\dbt\\include\\global_project", "path": "macros\\utils\\data_types.sql", "original_file_path": "macros\\utils\\data_types.sql", "name": "type_numeric", "macro_sql": "\n\n{%- macro type_numeric() -%}\n  {{ return(adapter.dispatch('type_numeric', 'dbt')()) }}\n{%- endmacro -%}\n\n", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__type_numeric"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1671050798.051147}, "macro.dbt.default__type_numeric": {"unique_id": "macro.dbt.default__type_numeric", "package_name": "dbt", "root_path": "C:\\Python310\\lib\\site-packages\\dbt\\include\\global_project", "path": "macros\\utils\\data_types.sql", "original_file_path": "macros\\utils\\data_types.sql", "name": "default__type_numeric", "macro_sql": "{% macro default__type_numeric() %}\n    {{ return(api.Column.numeric_type(\"numeric\", 28, 6)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1671050798.0521429}, "macro.dbt.type_bigint": {"unique_id": "macro.dbt.type_bigint", "package_name": "dbt", "root_path": "C:\\Python310\\lib\\site-packages\\dbt\\include\\global_project", "path": "macros\\utils\\data_types.sql", "original_file_path": "macros\\utils\\data_types.sql", "name": "type_bigint", "macro_sql": "\n\n{%- macro type_bigint() -%}\n  {{ return(adapter.dispatch('type_bigint', 'dbt')()) }}\n{%- endmacro -%}\n\n", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__type_bigint"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1671050798.0521429}, "macro.dbt.default__type_bigint": {"unique_id": "macro.dbt.default__type_bigint", "package_name": "dbt", "root_path": "C:\\Python310\\lib\\site-packages\\dbt\\include\\global_project", "path": "macros\\utils\\data_types.sql", "original_file_path": "macros\\utils\\data_types.sql", "name": "default__type_bigint", "macro_sql": "{% macro default__type_bigint() %}\n    {{ return(api.Column.translate_type(\"bigint\")) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1671050798.0521429}, "macro.dbt.type_int": {"unique_id": "macro.dbt.type_int", "package_name": "dbt", "root_path": "C:\\Python310\\lib\\site-packages\\dbt\\include\\global_project", "path": "macros\\utils\\data_types.sql", "original_file_path": "macros\\utils\\data_types.sql", "name": "type_int", "macro_sql": "\n\n{%- macro type_int() -%}\n  {{ return(adapter.dispatch('type_int', 'dbt')()) }}\n{%- endmacro -%}\n\n", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__type_int"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1671050798.0521429}, "macro.dbt.default__type_int": {"unique_id": "macro.dbt.default__type_int", "package_name": "dbt", "root_path": "C:\\Python310\\lib\\site-packages\\dbt\\include\\global_project", "path": "macros\\utils\\data_types.sql", "original_file_path": "macros\\utils\\data_types.sql", "name": "default__type_int", "macro_sql": "{%- macro default__type_int() -%}\n  {{ return(api.Column.translate_type(\"integer\")) }}\n{%- endmacro -%}\n\n", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1671050798.053165}, "macro.dbt.dateadd": {"unique_id": "macro.dbt.dateadd", "package_name": "dbt", "root_path": "C:\\Python310\\lib\\site-packages\\dbt\\include\\global_project", "path": "macros\\utils\\dateadd.sql", "original_file_path": "macros\\utils\\dateadd.sql", "name": "dateadd", "macro_sql": "{% macro dateadd(datepart, interval, from_date_or_timestamp) %}\n  {{ return(adapter.dispatch('dateadd', 'dbt')(datepart, interval, from_date_or_timestamp)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__dateadd"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1671050798.0540984}, "macro.dbt.default__dateadd": {"unique_id": "macro.dbt.default__dateadd", "package_name": "dbt", "root_path": "C:\\Python310\\lib\\site-packages\\dbt\\include\\global_project", "path": "macros\\utils\\dateadd.sql", "original_file_path": "macros\\utils\\dateadd.sql", "name": "default__dateadd", "macro_sql": "{% macro default__dateadd(datepart, interval, from_date_or_timestamp) %}\n\n    dateadd(\n        {{ datepart }},\n        {{ interval }},\n        {{ from_date_or_timestamp }}\n        )\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1671050798.0540984}, "macro.dbt.datediff": {"unique_id": "macro.dbt.datediff", "package_name": "dbt", "root_path": "C:\\Python310\\lib\\site-packages\\dbt\\include\\global_project", "path": "macros\\utils\\datediff.sql", "original_file_path": "macros\\utils\\datediff.sql", "name": "datediff", "macro_sql": "{% macro datediff(first_date, second_date, datepart) %}\n  {{ return(adapter.dispatch('datediff', 'dbt')(first_date, second_date, datepart)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__datediff"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1671050798.0551388}, "macro.dbt.default__datediff": {"unique_id": "macro.dbt.default__datediff", "package_name": "dbt", "root_path": "C:\\Python310\\lib\\site-packages\\dbt\\include\\global_project", "path": "macros\\utils\\datediff.sql", "original_file_path": "macros\\utils\\datediff.sql", "name": "default__datediff", "macro_sql": "{% macro default__datediff(first_date, second_date, datepart) -%}\n\n    datediff(\n        {{ datepart }},\n        {{ first_date }},\n        {{ second_date }}\n        )\n\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1671050798.0551388}, "macro.dbt.date_trunc": {"unique_id": "macro.dbt.date_trunc", "package_name": "dbt", "root_path": "C:\\Python310\\lib\\site-packages\\dbt\\include\\global_project", "path": "macros\\utils\\date_trunc.sql", "original_file_path": "macros\\utils\\date_trunc.sql", "name": "date_trunc", "macro_sql": "{% macro date_trunc(datepart, date) -%}\n  {{ return(adapter.dispatch('date_trunc', 'dbt') (datepart, date)) }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__date_trunc"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1671050798.056054}, "macro.dbt.default__date_trunc": {"unique_id": "macro.dbt.default__date_trunc", "package_name": "dbt", "root_path": "C:\\Python310\\lib\\site-packages\\dbt\\include\\global_project", "path": "macros\\utils\\date_trunc.sql", "original_file_path": "macros\\utils\\date_trunc.sql", "name": "default__date_trunc", "macro_sql": "{% macro default__date_trunc(datepart, date) -%}\n    date_trunc('{{datepart}}', {{date}})\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1671050798.056054}, "macro.dbt.escape_single_quotes": {"unique_id": "macro.dbt.escape_single_quotes", "package_name": "dbt", "root_path": "C:\\Python310\\lib\\site-packages\\dbt\\include\\global_project", "path": "macros\\utils\\escape_single_quotes.sql", "original_file_path": "macros\\utils\\escape_single_quotes.sql", "name": "escape_single_quotes", "macro_sql": "{% macro escape_single_quotes(expression) %}\n      {{ return(adapter.dispatch('escape_single_quotes', 'dbt') (expression)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_snowflake.snowflake__escape_single_quotes"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1671050798.0571387}, "macro.dbt.default__escape_single_quotes": {"unique_id": "macro.dbt.default__escape_single_quotes", "package_name": "dbt", "root_path": "C:\\Python310\\lib\\site-packages\\dbt\\include\\global_project", "path": "macros\\utils\\escape_single_quotes.sql", "original_file_path": "macros\\utils\\escape_single_quotes.sql", "name": "default__escape_single_quotes", "macro_sql": "{% macro default__escape_single_quotes(expression) -%}\n{{ expression | replace(\"'\",\"''\") }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1671050798.0571387}, "macro.dbt.except": {"unique_id": "macro.dbt.except", "package_name": "dbt", "root_path": "C:\\Python310\\lib\\site-packages\\dbt\\include\\global_project", "path": "macros\\utils\\except.sql", "original_file_path": "macros\\utils\\except.sql", "name": "except", "macro_sql": "{% macro except() %}\n  {{ return(adapter.dispatch('except', 'dbt')()) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__except"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1671050798.058055}, "macro.dbt.default__except": {"unique_id": "macro.dbt.default__except", "package_name": "dbt", "root_path": "C:\\Python310\\lib\\site-packages\\dbt\\include\\global_project", "path": "macros\\utils\\except.sql", "original_file_path": "macros\\utils\\except.sql", "name": "default__except", "macro_sql": "{% macro default__except() %}\n\n    except\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1671050798.058055}, "macro.dbt.hash": {"unique_id": "macro.dbt.hash", "package_name": "dbt", "root_path": "C:\\Python310\\lib\\site-packages\\dbt\\include\\global_project", "path": "macros\\utils\\hash.sql", "original_file_path": "macros\\utils\\hash.sql", "name": "hash", "macro_sql": "{% macro hash(field) -%}\n  {{ return(adapter.dispatch('hash', 'dbt') (field)) }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__hash"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1671050798.0591438}, "macro.dbt.default__hash": {"unique_id": "macro.dbt.default__hash", "package_name": "dbt", "root_path": "C:\\Python310\\lib\\site-packages\\dbt\\include\\global_project", "path": "macros\\utils\\hash.sql", "original_file_path": "macros\\utils\\hash.sql", "name": "default__hash", "macro_sql": "{% macro default__hash(field) -%}\n    md5(cast({{ field }} as {{ api.Column.translate_type('string') }}))\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1671050798.0591438}, "macro.dbt.intersect": {"unique_id": "macro.dbt.intersect", "package_name": "dbt", "root_path": "C:\\Python310\\lib\\site-packages\\dbt\\include\\global_project", "path": "macros\\utils\\intersect.sql", "original_file_path": "macros\\utils\\intersect.sql", "name": "intersect", "macro_sql": "{% macro intersect() %}\n  {{ return(adapter.dispatch('intersect', 'dbt')()) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__intersect"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1671050798.0600548}, "macro.dbt.default__intersect": {"unique_id": "macro.dbt.default__intersect", "package_name": "dbt", "root_path": "C:\\Python310\\lib\\site-packages\\dbt\\include\\global_project", "path": "macros\\utils\\intersect.sql", "original_file_path": "macros\\utils\\intersect.sql", "name": "default__intersect", "macro_sql": "{% macro default__intersect() %}\n\n    intersect\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1671050798.0600548}, "macro.dbt.last_day": {"unique_id": "macro.dbt.last_day", "package_name": "dbt", "root_path": "C:\\Python310\\lib\\site-packages\\dbt\\include\\global_project", "path": "macros\\utils\\last_day.sql", "original_file_path": "macros\\utils\\last_day.sql", "name": "last_day", "macro_sql": "{% macro last_day(date, datepart) %}\n  {{ return(adapter.dispatch('last_day', 'dbt') (date, datepart)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__last_day"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1671050798.0611393}, "macro.dbt.default_last_day": {"unique_id": "macro.dbt.default_last_day", "package_name": "dbt", "root_path": "C:\\Python310\\lib\\site-packages\\dbt\\include\\global_project", "path": "macros\\utils\\last_day.sql", "original_file_path": "macros\\utils\\last_day.sql", "name": "default_last_day", "macro_sql": "\n\n{%- macro default_last_day(date, datepart) -%}\n    cast(\n        {{dbt.dateadd('day', '-1',\n        dbt.dateadd(datepart, '1', dbt.date_trunc(datepart, date))\n        )}}\n        as date)\n{%- endmacro -%}\n\n", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.dateadd", "macro.dbt_utils.date_trunc"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1671050798.0611393}, "macro.dbt.default__last_day": {"unique_id": "macro.dbt.default__last_day", "package_name": "dbt", "root_path": "C:\\Python310\\lib\\site-packages\\dbt\\include\\global_project", "path": "macros\\utils\\last_day.sql", "original_file_path": "macros\\utils\\last_day.sql", "name": "default__last_day", "macro_sql": "{% macro default__last_day(date, datepart) -%}\n    {{dbt.default_last_day(date, datepart)}}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.default_last_day"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1671050798.0611393}, "macro.dbt.length": {"unique_id": "macro.dbt.length", "package_name": "dbt", "root_path": "C:\\Python310\\lib\\site-packages\\dbt\\include\\global_project", "path": "macros\\utils\\length.sql", "original_file_path": "macros\\utils\\length.sql", "name": "length", "macro_sql": "{% macro length(expression) -%}\n    {{ return(adapter.dispatch('length', 'dbt') (expression)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__length"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1671050798.0624547}, "macro.dbt.default__length": {"unique_id": "macro.dbt.default__length", "package_name": "dbt", "root_path": "C:\\Python310\\lib\\site-packages\\dbt\\include\\global_project", "path": "macros\\utils\\length.sql", "original_file_path": "macros\\utils\\length.sql", "name": "default__length", "macro_sql": "{% macro default__length(expression) %}\n\n    length(\n        {{ expression }}\n    )\n\n{%- endmacro -%}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1671050798.0629625}, "macro.dbt.listagg": {"unique_id": "macro.dbt.listagg", "package_name": "dbt", "root_path": "C:\\Python310\\lib\\site-packages\\dbt\\include\\global_project", "path": "macros\\utils\\listagg.sql", "original_file_path": "macros\\utils\\listagg.sql", "name": "listagg", "macro_sql": "{% macro listagg(measure, delimiter_text=\"','\", order_by_clause=none, limit_num=none) -%}\n    {{ return(adapter.dispatch('listagg', 'dbt') (measure, delimiter_text, order_by_clause, limit_num)) }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__listagg"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1671050798.0640388}, "macro.dbt.default__listagg": {"unique_id": "macro.dbt.default__listagg", "package_name": "dbt", "root_path": "C:\\Python310\\lib\\site-packages\\dbt\\include\\global_project", "path": "macros\\utils\\listagg.sql", "original_file_path": "macros\\utils\\listagg.sql", "name": "default__listagg", "macro_sql": "{% macro default__listagg(measure, delimiter_text, order_by_clause, limit_num) -%}\n\n    {% if limit_num -%}\n    array_to_string(\n        array_slice(\n            array_agg(\n                {{ measure }}\n            ){% if order_by_clause -%}\n            within group ({{ order_by_clause }})\n            {%- endif %}\n            ,0\n            ,{{ limit_num }}\n        ),\n        {{ delimiter_text }}\n        )\n    {%- else %}\n    listagg(\n        {{ measure }},\n        {{ delimiter_text }}\n        )\n        {% if order_by_clause -%}\n        within group ({{ order_by_clause }})\n        {%- endif %}\n    {%- endif %}\n\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1671050798.0649788}, "macro.dbt.string_literal": {"unique_id": "macro.dbt.string_literal", "package_name": "dbt", "root_path": "C:\\Python310\\lib\\site-packages\\dbt\\include\\global_project", "path": "macros\\utils\\literal.sql", "original_file_path": "macros\\utils\\literal.sql", "name": "string_literal", "macro_sql": "{%- macro string_literal(value) -%}\n  {{ return(adapter.dispatch('string_literal', 'dbt') (value)) }}\n{%- endmacro -%}\n\n", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__string_literal"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1671050798.066371}, "macro.dbt.default__string_literal": {"unique_id": "macro.dbt.default__string_literal", "package_name": "dbt", "root_path": "C:\\Python310\\lib\\site-packages\\dbt\\include\\global_project", "path": "macros\\utils\\literal.sql", "original_file_path": "macros\\utils\\literal.sql", "name": "default__string_literal", "macro_sql": "{% macro default__string_literal(value) -%}\n    '{{ value }}'\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1671050798.066371}, "macro.dbt.position": {"unique_id": "macro.dbt.position", "package_name": "dbt", "root_path": "C:\\Python310\\lib\\site-packages\\dbt\\include\\global_project", "path": "macros\\utils\\position.sql", "original_file_path": "macros\\utils\\position.sql", "name": "position", "macro_sql": "{% macro position(substring_text, string_text) -%}\n    {{ return(adapter.dispatch('position', 'dbt') (substring_text, string_text)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__position"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1671050798.0674696}, "macro.dbt.default__position": {"unique_id": "macro.dbt.default__position", "package_name": "dbt", "root_path": "C:\\Python310\\lib\\site-packages\\dbt\\include\\global_project", "path": "macros\\utils\\position.sql", "original_file_path": "macros\\utils\\position.sql", "name": "default__position", "macro_sql": "{% macro default__position(substring_text, string_text) %}\n\n    position(\n        {{ substring_text }} in {{ string_text }}\n    )\n\n{%- endmacro -%}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1671050798.0674696}, "macro.dbt.replace": {"unique_id": "macro.dbt.replace", "package_name": "dbt", "root_path": "C:\\Python310\\lib\\site-packages\\dbt\\include\\global_project", "path": "macros\\utils\\replace.sql", "original_file_path": "macros\\utils\\replace.sql", "name": "replace", "macro_sql": "{% macro replace(field, old_chars, new_chars) -%}\n    {{ return(adapter.dispatch('replace', 'dbt') (field, old_chars, new_chars)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__replace"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1671050798.068393}, "macro.dbt.default__replace": {"unique_id": "macro.dbt.default__replace", "package_name": "dbt", "root_path": "C:\\Python310\\lib\\site-packages\\dbt\\include\\global_project", "path": "macros\\utils\\replace.sql", "original_file_path": "macros\\utils\\replace.sql", "name": "default__replace", "macro_sql": "{% macro default__replace(field, old_chars, new_chars) %}\n\n    replace(\n        {{ field }},\n        {{ old_chars }},\n        {{ new_chars }}\n    )\n\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1671050798.068393}, "macro.dbt.right": {"unique_id": "macro.dbt.right", "package_name": "dbt", "root_path": "C:\\Python310\\lib\\site-packages\\dbt\\include\\global_project", "path": "macros\\utils\\right.sql", "original_file_path": "macros\\utils\\right.sql", "name": "right", "macro_sql": "{% macro right(string_text, length_expression) -%}\n    {{ return(adapter.dispatch('right', 'dbt') (string_text, length_expression)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_snowflake.snowflake__right"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1671050798.069474}, "macro.dbt.default__right": {"unique_id": "macro.dbt.default__right", "package_name": "dbt", "root_path": "C:\\Python310\\lib\\site-packages\\dbt\\include\\global_project", "path": "macros\\utils\\right.sql", "original_file_path": "macros\\utils\\right.sql", "name": "default__right", "macro_sql": "{% macro default__right(string_text, length_expression) %}\n\n    right(\n        {{ string_text }},\n        {{ length_expression }}\n    )\n\n{%- endmacro -%}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1671050798.069474}, "macro.dbt.safe_cast": {"unique_id": "macro.dbt.safe_cast", "package_name": "dbt", "root_path": "C:\\Python310\\lib\\site-packages\\dbt\\include\\global_project", "path": "macros\\utils\\safe_cast.sql", "original_file_path": "macros\\utils\\safe_cast.sql", "name": "safe_cast", "macro_sql": "{% macro safe_cast(field, type) %}\n  {{ return(adapter.dispatch('safe_cast', 'dbt') (field, type)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_snowflake.snowflake__safe_cast"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1671050798.070393}, "macro.dbt.default__safe_cast": {"unique_id": "macro.dbt.default__safe_cast", "package_name": "dbt", "root_path": "C:\\Python310\\lib\\site-packages\\dbt\\include\\global_project", "path": "macros\\utils\\safe_cast.sql", "original_file_path": "macros\\utils\\safe_cast.sql", "name": "default__safe_cast", "macro_sql": "{% macro default__safe_cast(field, type) %}\n    {# most databases don't support this function yet\n    so we just need to use cast #}\n    cast({{field}} as {{type}})\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1671050798.070393}, "macro.dbt.split_part": {"unique_id": "macro.dbt.split_part", "package_name": "dbt", "root_path": "C:\\Python310\\lib\\site-packages\\dbt\\include\\global_project", "path": "macros\\utils\\split_part.sql", "original_file_path": "macros\\utils\\split_part.sql", "name": "split_part", "macro_sql": "{% macro split_part(string_text, delimiter_text, part_number) %}\n  {{ return(adapter.dispatch('split_part', 'dbt') (string_text, delimiter_text, part_number)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__split_part"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1671050798.0714738}, "macro.dbt.default__split_part": {"unique_id": "macro.dbt.default__split_part", "package_name": "dbt", "root_path": "C:\\Python310\\lib\\site-packages\\dbt\\include\\global_project", "path": "macros\\utils\\split_part.sql", "original_file_path": "macros\\utils\\split_part.sql", "name": "default__split_part", "macro_sql": "{% macro default__split_part(string_text, delimiter_text, part_number) %}\n\n    split_part(\n        {{ string_text }},\n        {{ delimiter_text }},\n        {{ part_number }}\n        )\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1671050798.0714738}, "macro.dbt._split_part_negative": {"unique_id": "macro.dbt._split_part_negative", "package_name": "dbt", "root_path": "C:\\Python310\\lib\\site-packages\\dbt\\include\\global_project", "path": "macros\\utils\\split_part.sql", "original_file_path": "macros\\utils\\split_part.sql", "name": "_split_part_negative", "macro_sql": "{% macro _split_part_negative(string_text, delimiter_text, part_number) %}\n\n    split_part(\n        {{ string_text }},\n        {{ delimiter_text }},\n          length({{ string_text }})\n          - length(\n              replace({{ string_text }},  {{ delimiter_text }}, '')\n          ) + 2 {{ part_number }}\n        )\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1671050798.072397}, "macro.dbt.test_unique": {"unique_id": "macro.dbt.test_unique", "package_name": "dbt", "root_path": "C:\\Python310\\lib\\site-packages\\dbt\\include\\global_project", "path": "tests\\generic\\builtin.sql", "original_file_path": "tests\\generic\\builtin.sql", "name": "test_unique", "macro_sql": "{% test unique(model, column_name) %}\n    {% set macro = adapter.dispatch('test_unique', 'dbt') %}\n    {{ macro(model, column_name) }}\n{% endtest %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.default__test_unique"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1671050798.0734494}, "macro.dbt.test_not_null": {"unique_id": "macro.dbt.test_not_null", "package_name": "dbt", "root_path": "C:\\Python310\\lib\\site-packages\\dbt\\include\\global_project", "path": "tests\\generic\\builtin.sql", "original_file_path": "tests\\generic\\builtin.sql", "name": "test_not_null", "macro_sql": "{% test not_null(model, column_name) %}\n    {% set macro = adapter.dispatch('test_not_null', 'dbt') %}\n    {{ macro(model, column_name) }}\n{% endtest %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.default__test_not_null"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1671050798.0734494}, "macro.dbt.test_accepted_values": {"unique_id": "macro.dbt.test_accepted_values", "package_name": "dbt", "root_path": "C:\\Python310\\lib\\site-packages\\dbt\\include\\global_project", "path": "tests\\generic\\builtin.sql", "original_file_path": "tests\\generic\\builtin.sql", "name": "test_accepted_values", "macro_sql": "{% test accepted_values(model, column_name, values, quote=True) %}\n    {% set macro = adapter.dispatch('test_accepted_values', 'dbt') %}\n    {{ macro(model, column_name, values, quote) }}\n{% endtest %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.default__test_accepted_values"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1671050798.074471}, "macro.dbt.test_relationships": {"unique_id": "macro.dbt.test_relationships", "package_name": "dbt", "root_path": "C:\\Python310\\lib\\site-packages\\dbt\\include\\global_project", "path": "tests\\generic\\builtin.sql", "original_file_path": "tests\\generic\\builtin.sql", "name": "test_relationships", "macro_sql": "{% test relationships(model, column_name, to, field) %}\n    {% set macro = adapter.dispatch('test_relationships', 'dbt') %}\n    {{ macro(model, column_name, to, field) }}\n{% endtest %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.default__test_relationships"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1671050798.074471}, "macro.dbt_date.get_base_dates": {"unique_id": "macro.dbt_date.get_base_dates", "package_name": "dbt_date", "root_path": "C:\\Users\\jessi\\git\\axelar-models\\dbt_packages\\dbt_date", "path": "macros\\get_base_dates.sql", "original_file_path": "macros\\get_base_dates.sql", "name": "get_base_dates", "macro_sql": "{% macro get_base_dates(start_date=None, end_date=None, n_dateparts=None, datepart=\"day\") %}\n    {{ adapter.dispatch('get_base_dates', 'dbt_date') (start_date, end_date, n_dateparts, datepart) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_date.default__get_base_dates"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1671050798.0764697}, "macro.dbt_date.default__get_base_dates": {"unique_id": "macro.dbt_date.default__get_base_dates", "package_name": "dbt_date", "root_path": "C:\\Users\\jessi\\git\\axelar-models\\dbt_packages\\dbt_date", "path": "macros\\get_base_dates.sql", "original_file_path": "macros\\get_base_dates.sql", "name": "default__get_base_dates", "macro_sql": "{% macro default__get_base_dates(start_date, end_date, n_dateparts, datepart) %}\n\n{%- if start_date and end_date -%}\n{%- set start_date=\"cast('\" ~ start_date ~ \"' as \" ~ type_timestamp() ~ \")\" -%}\n{%- set end_date=\"cast('\" ~ end_date ~ \"' as \" ~ type_timestamp() ~ \")\"  -%}\n\n{%- elif n_dateparts and datepart -%}\n\n{%- set start_date = dateadd(datepart, -1 * n_dateparts, dbt_date.today()) -%}\n{%- set end_date = dbt_date.tomorrow() -%}\n{%- endif -%}\n\nwith date_spine as\n(\n\n    {{ dbt_date.date_spine(\n        datepart=datepart,\n        start_date=start_date,\n        end_date=end_date,\n       )\n    }}\n\n)\nselect\n    cast(d.date_{{ datepart }} as {{ type_timestamp() }}) as date_{{ datepart }}\nfrom\n    date_spine d\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.type_timestamp", "macro.dbt_utils.dateadd", "macro.dbt_date.today", "macro.dbt_date.tomorrow", "macro.dbt_date.date_spine"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1671050798.0774715}, "macro.dbt_date.bigquery__get_base_dates": {"unique_id": "macro.dbt_date.bigquery__get_base_dates", "package_name": "dbt_date", "root_path": "C:\\Users\\jessi\\git\\axelar-models\\dbt_packages\\dbt_date", "path": "macros\\get_base_dates.sql", "original_file_path": "macros\\get_base_dates.sql", "name": "bigquery__get_base_dates", "macro_sql": "{% macro bigquery__get_base_dates(start_date, end_date, n_dateparts, datepart) %}\n\n{%- if start_date and end_date -%}\n{%- set start_date=\"cast('\" ~ start_date ~ \"' as date )\" -%}\n{%- set end_date=\"cast('\" ~ end_date ~ \"' as date )\" -%}\n\n{%- elif n_dateparts and datepart -%}\n\n{%- set start_date = dateadd(datepart, -1 * n_dateparts, dbt_date.today()) -%}\n{%- set end_date = dbt_date.tomorrow() -%}\n{%- endif -%}\n\nwith date_spine as\n(\n\n    {{ dbt_date.date_spine(\n        datepart=datepart,\n        start_date=start_date,\n        end_date=end_date,\n       )\n    }}\n\n)\nselect\n    cast(d.date_{{ datepart }} as {{ type_timestamp() }}) as date_{{ datepart }}\nfrom\n    date_spine d\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.dateadd", "macro.dbt_date.today", "macro.dbt_date.tomorrow", "macro.dbt_date.date_spine", "macro.dbt_utils.type_timestamp"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1671050798.079394}, "macro.dbt_date.get_date_dimension": {"unique_id": "macro.dbt_date.get_date_dimension", "package_name": "dbt_date", "root_path": "C:\\Users\\jessi\\git\\axelar-models\\dbt_packages\\dbt_date", "path": "macros\\get_date_dimension.sql", "original_file_path": "macros\\get_date_dimension.sql", "name": "get_date_dimension", "macro_sql": "{% macro get_date_dimension(start_date, end_date) %}\n    {{ adapter.dispatch('get_date_dimension', 'dbt_date') (start_date, end_date) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_date.default__get_date_dimension"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1671050798.0915856}, "macro.dbt_date.default__get_date_dimension": {"unique_id": "macro.dbt_date.default__get_date_dimension", "package_name": "dbt_date", "root_path": "C:\\Users\\jessi\\git\\axelar-models\\dbt_packages\\dbt_date", "path": "macros\\get_date_dimension.sql", "original_file_path": "macros\\get_date_dimension.sql", "name": "default__get_date_dimension", "macro_sql": "{% macro default__get_date_dimension(start_date, end_date) %}\nwith base_dates as (\n    {{ dbt_date.get_base_dates(start_date, end_date) }}\n),\ndates_with_prior_year_dates as (\n\n    select\n        cast(d.date_day as date) as date_day,\n        cast({{ dateadd('year', -1 , 'd.date_day') }} as date) as prior_year_date_day,\n        cast({{ dateadd('day', -364 , 'd.date_day') }} as date) as prior_year_over_year_date_day\n    from\n    \tbase_dates d\n\n)\nselect\n    d.date_day,\n    {{ dbt_date.yesterday('d.date_day') }} as prior_date_day,\n    {{ dbt_date.tomorrow('d.date_day') }} as next_date_day,\n    d.prior_year_date_day as prior_year_date_day,\n    d.prior_year_over_year_date_day,\n    {{ dbt_date.day_of_week('d.date_day', isoweek=false) }} as day_of_week,\n    {{ dbt_date.day_of_week('d.date_day', isoweek=true) }} as day_of_week_iso,\n    {{ dbt_date.day_name('d.date_day', short=false) }} as day_of_week_name,\n    {{ dbt_date.day_name('d.date_day', short=true) }} as day_of_week_name_short,\n    {{ dbt_date.day_of_month('d.date_day') }} as day_of_month,\n    {{ dbt_date.day_of_year('d.date_day') }} as day_of_year,\n\n    {{ dbt_date.week_start('d.date_day') }} as week_start_date,\n    {{ dbt_date.week_end('d.date_day') }} as week_end_date,\n    {{ dbt_date.week_start('d.prior_year_over_year_date_day') }} as prior_year_week_start_date,\n    {{ dbt_date.week_end('d.prior_year_over_year_date_day') }} as prior_year_week_end_date,\n    {{ dbt_date.week_of_year('d.date_day') }} as week_of_year,\n\n    {{ dbt_date.iso_week_start('d.date_day') }} as iso_week_start_date,\n    {{ dbt_date.iso_week_end('d.date_day') }} as iso_week_end_date,\n    {{ dbt_date.iso_week_start('d.prior_year_over_year_date_day') }} as prior_year_iso_week_start_date,\n    {{ dbt_date.iso_week_end('d.prior_year_over_year_date_day') }} as prior_year_iso_week_end_date,\n    {{ dbt_date.iso_week_of_year('d.date_day') }} as iso_week_of_year,\n\n    {{ dbt_date.week_of_year('d.prior_year_over_year_date_day') }} as prior_year_week_of_year,\n    {{ dbt_date.iso_week_of_year('d.prior_year_over_year_date_day') }} as prior_year_iso_week_of_year,\n\n    cast({{ dbt_date.date_part('month', 'd.date_day') }} as {{ type_int() }}) as month_of_year,\n    {{ dbt_date.month_name('d.date_day', short=false) }}  as month_name,\n    {{ dbt_date.month_name('d.date_day', short=true) }}  as month_name_short,\n\n    cast({{ date_trunc('month', 'd.date_day') }} as date) as month_start_date,\n    cast({{ last_day('d.date_day', 'month') }} as date) as month_end_date,\n\n    cast({{ date_trunc('month', 'd.prior_year_date_day') }} as date) as prior_year_month_start_date,\n    cast({{ last_day('d.prior_year_date_day', 'month') }} as date) as prior_year_month_end_date,\n\n    cast({{ dbt_date.date_part('quarter', 'd.date_day') }} as {{ type_int() }}) as quarter_of_year,\n    cast({{ date_trunc('quarter', 'd.date_day') }} as date) as quarter_start_date,\n    cast({{ last_day('d.date_day', 'quarter') }} as date) as quarter_end_date,\n\n    cast({{ dbt_date.date_part('year', 'd.date_day') }} as {{ type_int() }}) as year_number,\n    cast({{ date_trunc('year', 'd.date_day') }} as date) as year_start_date,\n    cast({{ last_day('d.date_day', 'year') }} as date) as year_end_date\nfrom\n    dates_with_prior_year_dates d\norder by 1\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_date.get_base_dates", "macro.dbt_utils.dateadd", "macro.dbt_date.yesterday", "macro.dbt_date.tomorrow", "macro.dbt_date.day_of_week", "macro.dbt_date.day_name", "macro.dbt_date.day_of_month", "macro.dbt_date.day_of_year", "macro.dbt_date.week_start", "macro.dbt_date.week_end", "macro.dbt_date.week_of_year", "macro.dbt_date.iso_week_start", "macro.dbt_date.iso_week_end", "macro.dbt_date.iso_week_of_year", "macro.dbt_date.date_part", "macro.dbt_utils.type_int", "macro.dbt_date.month_name", "macro.dbt_utils.date_trunc", "macro.dbt_utils.last_day"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1671050798.0970702}, "macro.dbt_date.postgres__get_date_dimension": {"unique_id": "macro.dbt_date.postgres__get_date_dimension", "package_name": "dbt_date", "root_path": "C:\\Users\\jessi\\git\\axelar-models\\dbt_packages\\dbt_date", "path": "macros\\get_date_dimension.sql", "original_file_path": "macros\\get_date_dimension.sql", "name": "postgres__get_date_dimension", "macro_sql": "{% macro postgres__get_date_dimension(start_date, end_date) %}\nwith base_dates as (\n    {{ dbt_date.get_base_dates(start_date, end_date) }}\n),\ndates_with_prior_year_dates as (\n\n    select\n        cast(d.date_day as date) as date_day,\n        cast({{ dateadd('year', -1 , 'd.date_day') }} as date) as prior_year_date_day,\n        cast({{ dateadd('day', -364 , 'd.date_day') }} as date) as prior_year_over_year_date_day\n    from\n    \tbase_dates d\n\n)\nselect\n    d.date_day,\n    {{ dbt_date.yesterday('d.date_day') }} as prior_date_day,\n    {{ dbt_date.tomorrow('d.date_day') }} as next_date_day,\n    d.prior_year_date_day as prior_year_date_day,\n    d.prior_year_over_year_date_day,\n    {{ dbt_date.day_of_week('d.date_day', isoweek=true) }} as day_of_week,\n\n    {{ dbt_date.day_name('d.date_day', short=false) }} as day_of_week_name,\n    {{ dbt_date.day_name('d.date_day', short=true) }} as day_of_week_name_short,\n    {{ dbt_date.day_of_month('d.date_day') }} as day_of_month,\n    {{ dbt_date.day_of_year('d.date_day') }} as day_of_year,\n\n    {{ dbt_date.week_start('d.date_day') }} as week_start_date,\n    {{ dbt_date.week_end('d.date_day') }} as week_end_date,\n    {{ dbt_date.week_start('d.prior_year_over_year_date_day') }} as prior_year_week_start_date,\n    {{ dbt_date.week_end('d.prior_year_over_year_date_day') }} as prior_year_week_end_date,\n    {{ dbt_date.week_of_year('d.date_day') }} as week_of_year,\n\n    {{ dbt_date.iso_week_start('d.date_day') }} as iso_week_start_date,\n    {{ dbt_date.iso_week_end('d.date_day') }} as iso_week_end_date,\n    {{ dbt_date.iso_week_start('d.prior_year_over_year_date_day') }} as prior_year_iso_week_start_date,\n    {{ dbt_date.iso_week_end('d.prior_year_over_year_date_day') }} as prior_year_iso_week_end_date,\n    {{ dbt_date.iso_week_of_year('d.date_day') }} as iso_week_of_year,\n\n    {{ dbt_date.week_of_year('d.prior_year_over_year_date_day') }} as prior_year_week_of_year,\n    {{ dbt_date.iso_week_of_year('d.prior_year_over_year_date_day') }} as prior_year_iso_week_of_year,\n\n    cast({{ dbt_date.date_part('month', 'd.date_day') }} as {{ type_int() }}) as month_of_year,\n    {{ dbt_date.month_name('d.date_day', short=false) }}  as month_name,\n    {{ dbt_date.month_name('d.date_day', short=true) }}  as month_name_short,\n\n    cast({{ date_trunc('month', 'd.date_day') }} as date) as month_start_date,\n    cast({{ last_day('d.date_day', 'month') }} as date) as month_end_date,\n\n    cast({{ date_trunc('month', 'd.prior_year_date_day') }} as date) as prior_year_month_start_date,\n    cast({{ last_day('d.prior_year_date_day', 'month') }} as date) as prior_year_month_end_date,\n\n    cast({{ dbt_date.date_part('quarter', 'd.date_day') }} as {{ type_int() }}) as quarter_of_year,\n    cast({{ date_trunc('quarter', 'd.date_day') }} as date) as quarter_start_date,\n    {# last_day does not support quarter because postgresql does not support quarter interval. #}\n    cast({{dateadd('day', '-1', dateadd('month', '3', date_trunc('quarter', 'd.date_day')))}} as date) as quarter_end_date,\n\n    cast({{ dbt_date.date_part('year', 'd.date_day') }} as {{ type_int() }}) as year_number,\n    cast({{ date_trunc('year', 'd.date_day') }} as date) as year_start_date,\n    cast({{ last_day('d.date_day', 'year') }} as date) as year_end_date\nfrom\n    dates_with_prior_year_dates d\norder by 1\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_date.get_base_dates", "macro.dbt_utils.dateadd", "macro.dbt_date.yesterday", "macro.dbt_date.tomorrow", "macro.dbt_date.day_of_week", "macro.dbt_date.day_name", "macro.dbt_date.day_of_month", "macro.dbt_date.day_of_year", "macro.dbt_date.week_start", "macro.dbt_date.week_end", "macro.dbt_date.week_of_year", "macro.dbt_date.iso_week_start", "macro.dbt_date.iso_week_end", "macro.dbt_date.iso_week_of_year", "macro.dbt_date.date_part", "macro.dbt_utils.type_int", "macro.dbt_date.month_name", "macro.dbt_utils.date_trunc", "macro.dbt_utils.last_day"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1671050798.1031642}, "macro.dbt_date.convert_timezone": {"unique_id": "macro.dbt_date.convert_timezone", "package_name": "dbt_date", "root_path": "C:\\Users\\jessi\\git\\axelar-models\\dbt_packages\\dbt_date", "path": "macros\\calendar_date\\convert_timezone.sql", "original_file_path": "macros\\calendar_date\\convert_timezone.sql", "name": "convert_timezone", "macro_sql": "{%- macro convert_timezone(column, target_tz=None, source_tz=None) -%}\n{%- set source_tz = \"UTC\" if not source_tz else source_tz -%}\n{%- set target_tz = var(\"dbt_date:time_zone\") if not target_tz else target_tz -%}\n{{ adapter.dispatch('convert_timezone', 'dbt_date') (column, target_tz, source_tz) }}\n{%- endmacro -%}\n\n", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_date.default__convert_timezone"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1671050798.10515}, "macro.dbt_date.default__convert_timezone": {"unique_id": "macro.dbt_date.default__convert_timezone", "package_name": "dbt_date", "root_path": "C:\\Users\\jessi\\git\\axelar-models\\dbt_packages\\dbt_date", "path": "macros\\calendar_date\\convert_timezone.sql", "original_file_path": "macros\\calendar_date\\convert_timezone.sql", "name": "default__convert_timezone", "macro_sql": "{% macro default__convert_timezone(column, target_tz, source_tz) -%}\nconvert_timezone('{{ source_tz }}', '{{ target_tz }}',\n    cast({{ column }} as {{ type_timestamp() }})\n)\n{%- endmacro -%}\n\n", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.type_timestamp"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1671050798.10515}, "macro.dbt_date.bigquery__convert_timezone": {"unique_id": "macro.dbt_date.bigquery__convert_timezone", "package_name": "dbt_date", "root_path": "C:\\Users\\jessi\\git\\axelar-models\\dbt_packages\\dbt_date", "path": "macros\\calendar_date\\convert_timezone.sql", "original_file_path": "macros\\calendar_date\\convert_timezone.sql", "name": "bigquery__convert_timezone", "macro_sql": "{%- macro bigquery__convert_timezone(column, target_tz, source_tz=None) -%}\ntimestamp(datetime({{ column }}, '{{ target_tz}}'))\n{%- endmacro -%}\n\n", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1671050798.10515}, "macro.dbt_date.spark__convert_timezone": {"unique_id": "macro.dbt_date.spark__convert_timezone", "package_name": "dbt_date", "root_path": "C:\\Users\\jessi\\git\\axelar-models\\dbt_packages\\dbt_date", "path": "macros\\calendar_date\\convert_timezone.sql", "original_file_path": "macros\\calendar_date\\convert_timezone.sql", "name": "spark__convert_timezone", "macro_sql": "{%- macro spark__convert_timezone(column, target_tz, source_tz) -%}\nfrom_utc_timestamp(\n        to_utc_timestamp({{ column }}, '{{ source_tz }}'),\n        '{{ target_tz }}'\n        )\n{%- endmacro -%}\n\n", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1671050798.1061673}, "macro.dbt_date.postgres__convert_timezone": {"unique_id": "macro.dbt_date.postgres__convert_timezone", "package_name": "dbt_date", "root_path": "C:\\Users\\jessi\\git\\axelar-models\\dbt_packages\\dbt_date", "path": "macros\\calendar_date\\convert_timezone.sql", "original_file_path": "macros\\calendar_date\\convert_timezone.sql", "name": "postgres__convert_timezone", "macro_sql": "{% macro postgres__convert_timezone(column, target_tz, source_tz) -%}\ncast(\n    cast({{ column }} as {{ type_timestamp() }})\n        at time zone '{{ source_tz }}' at time zone '{{ target_tz }}' as {{ type_timestamp() }}\n)\n{%- endmacro -%}\n\n", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.type_timestamp"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1671050798.1061673}, "macro.dbt_date.redshift__convert_timezone": {"unique_id": "macro.dbt_date.redshift__convert_timezone", "package_name": "dbt_date", "root_path": "C:\\Users\\jessi\\git\\axelar-models\\dbt_packages\\dbt_date", "path": "macros\\calendar_date\\convert_timezone.sql", "original_file_path": "macros\\calendar_date\\convert_timezone.sql", "name": "redshift__convert_timezone", "macro_sql": "{%- macro redshift__convert_timezone(column, target_tz, source_tz) -%}\n{{ return(dbt_date.default__convert_timezone(column, target_tz, source_tz)) }}\n{%- endmacro -%}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_date.default__convert_timezone"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1671050798.1061673}, "macro.dbt_date.date_part": {"unique_id": "macro.dbt_date.date_part", "package_name": "dbt_date", "root_path": "C:\\Users\\jessi\\git\\axelar-models\\dbt_packages\\dbt_date", "path": "macros\\calendar_date\\date_part.sql", "original_file_path": "macros\\calendar_date\\date_part.sql", "name": "date_part", "macro_sql": "{% macro date_part(datepart, date) -%}\n    {{ adapter.dispatch('date_part', 'dbt_date') (datepart, date) }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_date.default__date_part"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1671050798.1071606}, "macro.dbt_date.default__date_part": {"unique_id": "macro.dbt_date.default__date_part", "package_name": "dbt_date", "root_path": "C:\\Users\\jessi\\git\\axelar-models\\dbt_packages\\dbt_date", "path": "macros\\calendar_date\\date_part.sql", "original_file_path": "macros\\calendar_date\\date_part.sql", "name": "default__date_part", "macro_sql": "{% macro default__date_part(datepart, date) -%}\n    date_part('{{ datepart }}', {{  date }})\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1671050798.1071606}, "macro.dbt_date.bigquery__date_part": {"unique_id": "macro.dbt_date.bigquery__date_part", "package_name": "dbt_date", "root_path": "C:\\Users\\jessi\\git\\axelar-models\\dbt_packages\\dbt_date", "path": "macros\\calendar_date\\date_part.sql", "original_file_path": "macros\\calendar_date\\date_part.sql", "name": "bigquery__date_part", "macro_sql": "{% macro bigquery__date_part(datepart, date) -%}\n    extract({{ datepart }} from {{ date }})\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1671050798.1071606}, "macro.dbt_date.day_name": {"unique_id": "macro.dbt_date.day_name", "package_name": "dbt_date", "root_path": "C:\\Users\\jessi\\git\\axelar-models\\dbt_packages\\dbt_date", "path": "macros\\calendar_date\\day_name.sql", "original_file_path": "macros\\calendar_date\\day_name.sql", "name": "day_name", "macro_sql": "{%- macro day_name(date, short=True) -%}\n    {{ adapter.dispatch('day_name', 'dbt_date') (date, short) }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_date.snowflake__day_name"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1671050798.1091473}, "macro.dbt_date.default__day_name": {"unique_id": "macro.dbt_date.default__day_name", "package_name": "dbt_date", "root_path": "C:\\Users\\jessi\\git\\axelar-models\\dbt_packages\\dbt_date", "path": "macros\\calendar_date\\day_name.sql", "original_file_path": "macros\\calendar_date\\day_name.sql", "name": "default__day_name", "macro_sql": "\n\n{%- macro default__day_name(date, short) -%}\n{%- set f = 'Dy' if short else 'Day' -%}\n    to_char({{ date }}, '{{ f }}')\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1671050798.1091473}, "macro.dbt_date.snowflake__day_name": {"unique_id": "macro.dbt_date.snowflake__day_name", "package_name": "dbt_date", "root_path": "C:\\Users\\jessi\\git\\axelar-models\\dbt_packages\\dbt_date", "path": "macros\\calendar_date\\day_name.sql", "original_file_path": "macros\\calendar_date\\day_name.sql", "name": "snowflake__day_name", "macro_sql": "\n\n{%- macro snowflake__day_name(date, short) -%}\n    {%- if short -%}\n    dayname({{ date }})\n    {%- else -%}\n    -- long version not implemented on Snowflake so we're doing it manually :/\n    case dayname({{ date }})\n        when 'Mon' then 'Monday'\n        when 'Tue' then 'Tuesday'\n        when 'Wed' then 'Wednesday'\n        when 'Thu' then 'Thursday'\n        when 'Fri' then 'Friday'\n        when 'Sat' then 'Saturday'\n        when 'Sun' then 'Sunday'\n    end\n    {%- endif -%}\n\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1671050798.1091473}, "macro.dbt_date.bigquery__day_name": {"unique_id": "macro.dbt_date.bigquery__day_name", "package_name": "dbt_date", "root_path": "C:\\Users\\jessi\\git\\axelar-models\\dbt_packages\\dbt_date", "path": "macros\\calendar_date\\day_name.sql", "original_file_path": "macros\\calendar_date\\day_name.sql", "name": "bigquery__day_name", "macro_sql": "\n\n{%- macro bigquery__day_name(date, short) -%}\n{%- set f = '%a' if short else '%A' -%}\n    format_date('{{ f }}', cast({{ date }} as date))\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1671050798.110155}, "macro.dbt_date.postgres__day_name": {"unique_id": "macro.dbt_date.postgres__day_name", "package_name": "dbt_date", "root_path": "C:\\Users\\jessi\\git\\axelar-models\\dbt_packages\\dbt_date", "path": "macros\\calendar_date\\day_name.sql", "original_file_path": "macros\\calendar_date\\day_name.sql", "name": "postgres__day_name", "macro_sql": "\n\n{%- macro postgres__day_name(date, short) -%}\n{# FM = Fill mode, which suppresses padding blanks #}\n{%- set f = 'FMDy' if short else 'FMDay' -%}\n    to_char({{ date }}, '{{ f }}')\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1671050798.110155}, "macro.dbt_date.day_of_month": {"unique_id": "macro.dbt_date.day_of_month", "package_name": "dbt_date", "root_path": "C:\\Users\\jessi\\git\\axelar-models\\dbt_packages\\dbt_date", "path": "macros\\calendar_date\\day_of_month.sql", "original_file_path": "macros\\calendar_date\\day_of_month.sql", "name": "day_of_month", "macro_sql": "{%- macro day_of_month(date) -%}\n{{ dbt_date.date_part('day', date) }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_date.date_part"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1671050798.1111588}, "macro.dbt_date.redshift__day_of_month": {"unique_id": "macro.dbt_date.redshift__day_of_month", "package_name": "dbt_date", "root_path": "C:\\Users\\jessi\\git\\axelar-models\\dbt_packages\\dbt_date", "path": "macros\\calendar_date\\day_of_month.sql", "original_file_path": "macros\\calendar_date\\day_of_month.sql", "name": "redshift__day_of_month", "macro_sql": "\n\n{%- macro redshift__day_of_month(date) -%}\ncast({{ dbt_date.date_part('day', date) }} as {{ type_bigint() }})\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_date.date_part", "macro.dbt_utils.type_bigint"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1671050798.1111588}, "macro.dbt_date.day_of_week": {"unique_id": "macro.dbt_date.day_of_week", "package_name": "dbt_date", "root_path": "C:\\Users\\jessi\\git\\axelar-models\\dbt_packages\\dbt_date", "path": "macros\\calendar_date\\day_of_week.sql", "original_file_path": "macros\\calendar_date\\day_of_week.sql", "name": "day_of_week", "macro_sql": "{%- macro day_of_week(date, isoweek=true) -%}\n{{ adapter.dispatch('day_of_week', 'dbt_date') (date, isoweek) }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_date.snowflake__day_of_week"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1671050798.115667}, "macro.dbt_date.default__day_of_week": {"unique_id": "macro.dbt_date.default__day_of_week", "package_name": "dbt_date", "root_path": "C:\\Users\\jessi\\git\\axelar-models\\dbt_packages\\dbt_date", "path": "macros\\calendar_date\\day_of_week.sql", "original_file_path": "macros\\calendar_date\\day_of_week.sql", "name": "default__day_of_week", "macro_sql": "\n\n{%- macro default__day_of_week(date, isoweek) -%}\n\n    {%- set dow = dbt_date.date_part('dayofweek', date) -%}\n\n    {%- if isoweek -%}\n    case\n        -- Shift start of week from Sunday (0) to Monday (1)\n        when {{ dow }} = 0 then 7\n        else {{ dow }}\n    end\n    {%- else -%}\n    {{ dow }} + 1\n    {%- endif -%}\n\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_date.date_part"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1671050798.1166334}, "macro.dbt_date.snowflake__day_of_week": {"unique_id": "macro.dbt_date.snowflake__day_of_week", "package_name": "dbt_date", "root_path": "C:\\Users\\jessi\\git\\axelar-models\\dbt_packages\\dbt_date", "path": "macros\\calendar_date\\day_of_week.sql", "original_file_path": "macros\\calendar_date\\day_of_week.sql", "name": "snowflake__day_of_week", "macro_sql": "\n\n{%- macro snowflake__day_of_week(date, isoweek) -%}\n\n    {%- if isoweek -%}\n        {%- set dow_part = 'dayofweekiso' -%}\n        {{ dbt_date.date_part(dow_part, date) }}\n    {%- else -%}\n        {%- set dow_part = 'dayofweek' -%}\n        case\n            when {{ dbt_date.date_part(dow_part, date) }} = 7 then 1\n            else {{ dbt_date.date_part(dow_part, date) }} + 1\n        end\n    {%- endif -%}\n\n\n\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_date.date_part"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1671050798.1176515}, "macro.dbt_date.bigquery__day_of_week": {"unique_id": "macro.dbt_date.bigquery__day_of_week", "package_name": "dbt_date", "root_path": "C:\\Users\\jessi\\git\\axelar-models\\dbt_packages\\dbt_date", "path": "macros\\calendar_date\\day_of_week.sql", "original_file_path": "macros\\calendar_date\\day_of_week.sql", "name": "bigquery__day_of_week", "macro_sql": "\n\n{%- macro bigquery__day_of_week(date, isoweek) -%}\n\n    {%- set dow = dbt_date.date_part('dayofweek', date) -%}\n\n    {%- if isoweek -%}\n    case\n        -- Shift start of week from Sunday (1) to Monday (2)\n        when {{ dow }} = 1 then 7\n        else {{ dow }} - 1\n    end\n    {%- else -%}\n    {{ dow }}\n    {%- endif -%}\n\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_date.date_part"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1671050798.1186583}, "macro.dbt_date.postgres__day_of_week": {"unique_id": "macro.dbt_date.postgres__day_of_week", "package_name": "dbt_date", "root_path": "C:\\Users\\jessi\\git\\axelar-models\\dbt_packages\\dbt_date", "path": "macros\\calendar_date\\day_of_week.sql", "original_file_path": "macros\\calendar_date\\day_of_week.sql", "name": "postgres__day_of_week", "macro_sql": "\n\n\n{%- macro postgres__day_of_week(date, isoweek) -%}\n\n    {%- if isoweek -%}\n        {%- set dow_part = 'isodow' -%}\n        -- Monday(1) to Sunday (7)\n        cast({{ dbt_date.date_part(dow_part, date) }} as {{ type_int() }})\n    {%- else -%}\n        {%- set dow_part = 'dow' -%}\n        -- Sunday(1) to Saturday (7)\n        cast({{ dbt_date.date_part(dow_part, date) }} + 1 as {{ type_int() }})\n    {%- endif -%}\n\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_date.date_part", "macro.dbt_utils.type_int"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1671050798.1196547}, "macro.dbt_date.redshift__day_of_week": {"unique_id": "macro.dbt_date.redshift__day_of_week", "package_name": "dbt_date", "root_path": "C:\\Users\\jessi\\git\\axelar-models\\dbt_packages\\dbt_date", "path": "macros\\calendar_date\\day_of_week.sql", "original_file_path": "macros\\calendar_date\\day_of_week.sql", "name": "redshift__day_of_week", "macro_sql": "\n\n\n{%- macro redshift__day_of_week(date, isoweek) -%}\n\n    {%- set dow = dbt_date.date_part('dayofweek', date) -%}\n\n    {%- if isoweek -%}\n    case\n        -- Shift start of week from Sunday (0) to Monday (1)\n        when {{ dow }} = 0 then 7\n        else cast({{ dow }} as {{ type_bigint() }})\n    end\n    {%- else -%}\n    cast({{ dow }} + 1 as {{ type_bigint() }})\n    {%- endif -%}\n\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_date.date_part", "macro.dbt_utils.type_bigint"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1671050798.1206536}, "macro.dbt_date.day_of_year": {"unique_id": "macro.dbt_date.day_of_year", "package_name": "dbt_date", "root_path": "C:\\Users\\jessi\\git\\axelar-models\\dbt_packages\\dbt_date", "path": "macros\\calendar_date\\day_of_year.sql", "original_file_path": "macros\\calendar_date\\day_of_year.sql", "name": "day_of_year", "macro_sql": "{%- macro day_of_year(date) -%}\n{{ adapter.dispatch('day_of_year', 'dbt_date') (date) }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_date.default__day_of_year"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1671050798.1216557}, "macro.dbt_date.default__day_of_year": {"unique_id": "macro.dbt_date.default__day_of_year", "package_name": "dbt_date", "root_path": "C:\\Users\\jessi\\git\\axelar-models\\dbt_packages\\dbt_date", "path": "macros\\calendar_date\\day_of_year.sql", "original_file_path": "macros\\calendar_date\\day_of_year.sql", "name": "default__day_of_year", "macro_sql": "\n\n{%- macro default__day_of_year(date) -%}\n    {{ dbt_date.date_part('dayofyear', date) }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_date.date_part"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1671050798.1216557}, "macro.dbt_date.postgres__day_of_year": {"unique_id": "macro.dbt_date.postgres__day_of_year", "package_name": "dbt_date", "root_path": "C:\\Users\\jessi\\git\\axelar-models\\dbt_packages\\dbt_date", "path": "macros\\calendar_date\\day_of_year.sql", "original_file_path": "macros\\calendar_date\\day_of_year.sql", "name": "postgres__day_of_year", "macro_sql": "\n\n{%- macro postgres__day_of_year(date) -%}\n    {{ dbt_date.date_part('doy', date) }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_date.date_part"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1671050798.1216557}, "macro.dbt_date.redshift__day_of_year": {"unique_id": "macro.dbt_date.redshift__day_of_year", "package_name": "dbt_date", "root_path": "C:\\Users\\jessi\\git\\axelar-models\\dbt_packages\\dbt_date", "path": "macros\\calendar_date\\day_of_year.sql", "original_file_path": "macros\\calendar_date\\day_of_year.sql", "name": "redshift__day_of_year", "macro_sql": "\n\n{%- macro redshift__day_of_year(date) -%}\n    cast({{ dbt_date.date_part('dayofyear', date) }} as {{ type_bigint() }})\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_date.date_part", "macro.dbt_utils.type_bigint"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1671050798.1216557}, "macro.dbt_date.from_unixtimestamp": {"unique_id": "macro.dbt_date.from_unixtimestamp", "package_name": "dbt_date", "root_path": "C:\\Users\\jessi\\git\\axelar-models\\dbt_packages\\dbt_date", "path": "macros\\calendar_date\\from_unixtimestamp.sql", "original_file_path": "macros\\calendar_date\\from_unixtimestamp.sql", "name": "from_unixtimestamp", "macro_sql": "{%- macro from_unixtimestamp(epochs, format=\"seconds\") -%}\n    {{ adapter.dispatch('from_unixtimestamp', 'dbt_date') (epochs, format) }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_date.snowflake__from_unixtimestamp"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1671050798.123654}, "macro.dbt_date.default__from_unixtimestamp": {"unique_id": "macro.dbt_date.default__from_unixtimestamp", "package_name": "dbt_date", "root_path": "C:\\Users\\jessi\\git\\axelar-models\\dbt_packages\\dbt_date", "path": "macros\\calendar_date\\from_unixtimestamp.sql", "original_file_path": "macros\\calendar_date\\from_unixtimestamp.sql", "name": "default__from_unixtimestamp", "macro_sql": "\n\n{%- macro default__from_unixtimestamp(epochs, format=\"seconds\") -%}\n    {%- if format != \"seconds\" -%}\n    {{ exceptions.raise_compiler_error(\n        \"value \" ~ format ~ \" for `format` for from_unixtimestamp is not supported.\"\n        )\n    }}\n    {% endif -%}\n    to_timestamp({{ epochs }})\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1671050798.1246545}, "macro.dbt_date.postgres__from_unixtimestamp": {"unique_id": "macro.dbt_date.postgres__from_unixtimestamp", "package_name": "dbt_date", "root_path": "C:\\Users\\jessi\\git\\axelar-models\\dbt_packages\\dbt_date", "path": "macros\\calendar_date\\from_unixtimestamp.sql", "original_file_path": "macros\\calendar_date\\from_unixtimestamp.sql", "name": "postgres__from_unixtimestamp", "macro_sql": "\n\n{%- macro postgres__from_unixtimestamp(epochs, format=\"seconds\") -%}\n    {%- if format != \"seconds\" -%}\n    {{ exceptions.raise_compiler_error(\n        \"value \" ~ format ~ \" for `format` for from_unixtimestamp is not supported.\"\n        )\n    }}\n    {% endif -%}\n    cast(to_timestamp({{ epochs }}) at time zone 'UTC' as timestamp)\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1671050798.1246545}, "macro.dbt_date.snowflake__from_unixtimestamp": {"unique_id": "macro.dbt_date.snowflake__from_unixtimestamp", "package_name": "dbt_date", "root_path": "C:\\Users\\jessi\\git\\axelar-models\\dbt_packages\\dbt_date", "path": "macros\\calendar_date\\from_unixtimestamp.sql", "original_file_path": "macros\\calendar_date\\from_unixtimestamp.sql", "name": "snowflake__from_unixtimestamp", "macro_sql": "\n\n{%- macro snowflake__from_unixtimestamp(epochs, format) -%}\n    {%- if format == \"seconds\" -%}\n    {%- set scale = 0 -%}\n    {%- elif format == \"milliseconds\" -%}\n    {%- set scale = 3 -%}\n    {%- elif format == \"microseconds\" -%}\n    {%- set scale = 6 -%}\n    {%- else -%}\n    {{ exceptions.raise_compiler_error(\n        \"value \" ~ format ~ \" for `format` for from_unixtimestamp is not supported.\"\n        )\n    }}\n    {% endif -%}\n    to_timestamp_ntz({{ epochs }}, {{ scale }})\n\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1671050798.125654}, "macro.dbt_date.bigquery__from_unixtimestamp": {"unique_id": "macro.dbt_date.bigquery__from_unixtimestamp", "package_name": "dbt_date", "root_path": "C:\\Users\\jessi\\git\\axelar-models\\dbt_packages\\dbt_date", "path": "macros\\calendar_date\\from_unixtimestamp.sql", "original_file_path": "macros\\calendar_date\\from_unixtimestamp.sql", "name": "bigquery__from_unixtimestamp", "macro_sql": "\n\n{%- macro bigquery__from_unixtimestamp(epochs, format) -%}\n    {%- if format == \"seconds\" -%}\n        timestamp_seconds({{ epochs }})\n    {%- elif format == \"milliseconds\" -%}\n        timestamp_millis({{ epochs }})\n    {%- elif format == \"microseconds\" -%}\n        timestamp_micros({{ epochs }})\n    {%- else -%}\n    {{ exceptions.raise_compiler_error(\n        \"value \" ~ format ~ \" for `format` for from_unixtimestamp is not supported.\"\n        )\n    }}\n    {% endif -%}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1671050798.1266532}, "macro.dbt_date.iso_week_end": {"unique_id": "macro.dbt_date.iso_week_end", "package_name": "dbt_date", "root_path": "C:\\Users\\jessi\\git\\axelar-models\\dbt_packages\\dbt_date", "path": "macros\\calendar_date\\iso_week_end.sql", "original_file_path": "macros\\calendar_date\\iso_week_end.sql", "name": "iso_week_end", "macro_sql": "{%- macro iso_week_end(date=None, tz=None) -%}\n{%-set dt = date if date else dbt_date.today(tz) -%}\n{{ adapter.dispatch('iso_week_end', 'dbt_date') (dt) }}\n{%- endmacro -%}\n\n", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_date.today", "macro.dbt_date.snowflake__iso_week_end"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1671050798.1276553}, "macro.dbt_date._iso_week_end": {"unique_id": "macro.dbt_date._iso_week_end", "package_name": "dbt_date", "root_path": "C:\\Users\\jessi\\git\\axelar-models\\dbt_packages\\dbt_date", "path": "macros\\calendar_date\\iso_week_end.sql", "original_file_path": "macros\\calendar_date\\iso_week_end.sql", "name": "_iso_week_end", "macro_sql": "{%- macro _iso_week_end(date, week_type) -%}\n{%- set dt = dbt_date.iso_week_start(date) -%}\n{{ dbt_date.n_days_away(6, dt) }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_date.iso_week_start", "macro.dbt_date.n_days_away"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1671050798.1276553}, "macro.dbt_date.default__iso_week_end": {"unique_id": "macro.dbt_date.default__iso_week_end", "package_name": "dbt_date", "root_path": "C:\\Users\\jessi\\git\\axelar-models\\dbt_packages\\dbt_date", "path": "macros\\calendar_date\\iso_week_end.sql", "original_file_path": "macros\\calendar_date\\iso_week_end.sql", "name": "default__iso_week_end", "macro_sql": "\n\n{%- macro default__iso_week_end(date) -%}\n{{ dbt_date._iso_week_end(date, 'isoweek') }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_date._iso_week_end"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1671050798.1276553}, "macro.dbt_date.snowflake__iso_week_end": {"unique_id": "macro.dbt_date.snowflake__iso_week_end", "package_name": "dbt_date", "root_path": "C:\\Users\\jessi\\git\\axelar-models\\dbt_packages\\dbt_date", "path": "macros\\calendar_date\\iso_week_end.sql", "original_file_path": "macros\\calendar_date\\iso_week_end.sql", "name": "snowflake__iso_week_end", "macro_sql": "\n\n{%- macro snowflake__iso_week_end(date) -%}\n{{ dbt_date._iso_week_end(date, 'weekiso') }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_date._iso_week_end"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1671050798.1286552}, "macro.dbt_date.iso_week_of_year": {"unique_id": "macro.dbt_date.iso_week_of_year", "package_name": "dbt_date", "root_path": "C:\\Users\\jessi\\git\\axelar-models\\dbt_packages\\dbt_date", "path": "macros\\calendar_date\\iso_week_of_year.sql", "original_file_path": "macros\\calendar_date\\iso_week_of_year.sql", "name": "iso_week_of_year", "macro_sql": "{%- macro iso_week_of_year(date=None, tz=None) -%}\n{%-set dt = date if date else dbt_date.today(tz) -%}\n{{ adapter.dispatch('iso_week_of_year', 'dbt_date') (dt) }}\n{%- endmacro -%}\n\n", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_date.today", "macro.dbt_date.snowflake__iso_week_of_year"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1671050798.1296606}, "macro.dbt_date._iso_week_of_year": {"unique_id": "macro.dbt_date._iso_week_of_year", "package_name": "dbt_date", "root_path": "C:\\Users\\jessi\\git\\axelar-models\\dbt_packages\\dbt_date", "path": "macros\\calendar_date\\iso_week_of_year.sql", "original_file_path": "macros\\calendar_date\\iso_week_of_year.sql", "name": "_iso_week_of_year", "macro_sql": "{%- macro _iso_week_of_year(date, week_type) -%}\ncast({{ dbt_date.date_part(week_type, date) }} as {{ type_int() }})\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_date.date_part", "macro.dbt_utils.type_int"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1671050798.1306577}, "macro.dbt_date.default__iso_week_of_year": {"unique_id": "macro.dbt_date.default__iso_week_of_year", "package_name": "dbt_date", "root_path": "C:\\Users\\jessi\\git\\axelar-models\\dbt_packages\\dbt_date", "path": "macros\\calendar_date\\iso_week_of_year.sql", "original_file_path": "macros\\calendar_date\\iso_week_of_year.sql", "name": "default__iso_week_of_year", "macro_sql": "\n\n{%- macro default__iso_week_of_year(date) -%}\n{{ dbt_date._iso_week_of_year(date, 'isoweek') }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_date._iso_week_of_year"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1671050798.1306577}, "macro.dbt_date.snowflake__iso_week_of_year": {"unique_id": "macro.dbt_date.snowflake__iso_week_of_year", "package_name": "dbt_date", "root_path": "C:\\Users\\jessi\\git\\axelar-models\\dbt_packages\\dbt_date", "path": "macros\\calendar_date\\iso_week_of_year.sql", "original_file_path": "macros\\calendar_date\\iso_week_of_year.sql", "name": "snowflake__iso_week_of_year", "macro_sql": "\n\n{%- macro snowflake__iso_week_of_year(date) -%}\n{{ dbt_date._iso_week_of_year(date, 'weekiso') }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_date._iso_week_of_year"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1671050798.131657}, "macro.dbt_date.postgres__iso_week_of_year": {"unique_id": "macro.dbt_date.postgres__iso_week_of_year", "package_name": "dbt_date", "root_path": "C:\\Users\\jessi\\git\\axelar-models\\dbt_packages\\dbt_date", "path": "macros\\calendar_date\\iso_week_of_year.sql", "original_file_path": "macros\\calendar_date\\iso_week_of_year.sql", "name": "postgres__iso_week_of_year", "macro_sql": "\n\n{%- macro postgres__iso_week_of_year(date) -%}\n-- postgresql week is isoweek, the first week of a year containing January 4 of that year.\n{{ dbt_date._iso_week_of_year(date, 'week') }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_date._iso_week_of_year"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1671050798.131657}, "macro.dbt_date.iso_week_start": {"unique_id": "macro.dbt_date.iso_week_start", "package_name": "dbt_date", "root_path": "C:\\Users\\jessi\\git\\axelar-models\\dbt_packages\\dbt_date", "path": "macros\\calendar_date\\iso_week_start.sql", "original_file_path": "macros\\calendar_date\\iso_week_start.sql", "name": "iso_week_start", "macro_sql": "{%- macro iso_week_start(date=None, tz=None) -%}\n{%-set dt = date if date else dbt_date.today(tz) -%}\n{{ adapter.dispatch('iso_week_start', 'dbt_date') (dt) }}\n{%- endmacro -%}\n\n", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_date.today", "macro.dbt_date.snowflake__iso_week_start"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1671050798.1326554}, "macro.dbt_date._iso_week_start": {"unique_id": "macro.dbt_date._iso_week_start", "package_name": "dbt_date", "root_path": "C:\\Users\\jessi\\git\\axelar-models\\dbt_packages\\dbt_date", "path": "macros\\calendar_date\\iso_week_start.sql", "original_file_path": "macros\\calendar_date\\iso_week_start.sql", "name": "_iso_week_start", "macro_sql": "{%- macro _iso_week_start(date, week_type) -%}\ncast({{ date_trunc(week_type, date) }} as date)\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.date_trunc"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1671050798.1336553}, "macro.dbt_date.default__iso_week_start": {"unique_id": "macro.dbt_date.default__iso_week_start", "package_name": "dbt_date", "root_path": "C:\\Users\\jessi\\git\\axelar-models\\dbt_packages\\dbt_date", "path": "macros\\calendar_date\\iso_week_start.sql", "original_file_path": "macros\\calendar_date\\iso_week_start.sql", "name": "default__iso_week_start", "macro_sql": "\n\n{%- macro default__iso_week_start(date) -%}\n{{ dbt_date._iso_week_start(date, 'isoweek') }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_date._iso_week_start"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1671050798.1336553}, "macro.dbt_date.snowflake__iso_week_start": {"unique_id": "macro.dbt_date.snowflake__iso_week_start", "package_name": "dbt_date", "root_path": "C:\\Users\\jessi\\git\\axelar-models\\dbt_packages\\dbt_date", "path": "macros\\calendar_date\\iso_week_start.sql", "original_file_path": "macros\\calendar_date\\iso_week_start.sql", "name": "snowflake__iso_week_start", "macro_sql": "\n\n{%- macro snowflake__iso_week_start(date) -%}\n{{ dbt_date._iso_week_start(date, 'week') }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_date._iso_week_start"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1671050798.1336553}, "macro.dbt_date.postgres__iso_week_start": {"unique_id": "macro.dbt_date.postgres__iso_week_start", "package_name": "dbt_date", "root_path": "C:\\Users\\jessi\\git\\axelar-models\\dbt_packages\\dbt_date", "path": "macros\\calendar_date\\iso_week_start.sql", "original_file_path": "macros\\calendar_date\\iso_week_start.sql", "name": "postgres__iso_week_start", "macro_sql": "\n\n{%- macro postgres__iso_week_start(date) -%}\n{{ dbt_date._iso_week_start(date, 'week') }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_date._iso_week_start"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1671050798.1336553}, "macro.dbt_date.last_month": {"unique_id": "macro.dbt_date.last_month", "package_name": "dbt_date", "root_path": "C:\\Users\\jessi\\git\\axelar-models\\dbt_packages\\dbt_date", "path": "macros\\calendar_date\\last_month.sql", "original_file_path": "macros\\calendar_date\\last_month.sql", "name": "last_month", "macro_sql": "{%- macro last_month(tz=None) -%}\n{{ dbt_date.n_months_ago(1, tz) }}\n{%- endmacro -%}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_date.n_months_ago"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1671050798.1346552}, "macro.dbt_date.last_month_name": {"unique_id": "macro.dbt_date.last_month_name", "package_name": "dbt_date", "root_path": "C:\\Users\\jessi\\git\\axelar-models\\dbt_packages\\dbt_date", "path": "macros\\calendar_date\\last_month_name.sql", "original_file_path": "macros\\calendar_date\\last_month_name.sql", "name": "last_month_name", "macro_sql": "{%- macro last_month_name(short=True, tz=None) -%}\n{{ dbt_date.month_name(dbt_date.last_month(1, tz), short=short) }}\n{%- endmacro -%}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_date.month_name", "macro.dbt_date.last_month"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1671050798.1356544}, "macro.dbt_date.last_month_number": {"unique_id": "macro.dbt_date.last_month_number", "package_name": "dbt_date", "root_path": "C:\\Users\\jessi\\git\\axelar-models\\dbt_packages\\dbt_date", "path": "macros\\calendar_date\\last_month_number.sql", "original_file_path": "macros\\calendar_date\\last_month_number.sql", "name": "last_month_number", "macro_sql": "{%- macro last_month_number(tz=None) -%}\n{{ dbt_date.date_part('month', dbt_date.last_month(1, tz)) }}\n{%- endmacro -%}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_date.date_part", "macro.dbt_date.last_month"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1671050798.1356544}, "macro.dbt_date.last_week": {"unique_id": "macro.dbt_date.last_week", "package_name": "dbt_date", "root_path": "C:\\Users\\jessi\\git\\axelar-models\\dbt_packages\\dbt_date", "path": "macros\\calendar_date\\last_week.sql", "original_file_path": "macros\\calendar_date\\last_week.sql", "name": "last_week", "macro_sql": "{%- macro last_week(tz=None) -%}\n{{ dbt_date.n_weeks_ago(1, tz) }}\n{%- endmacro -%}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_date.n_weeks_ago"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1671050798.1366549}, "macro.dbt_date.month_name": {"unique_id": "macro.dbt_date.month_name", "package_name": "dbt_date", "root_path": "C:\\Users\\jessi\\git\\axelar-models\\dbt_packages\\dbt_date", "path": "macros\\calendar_date\\month_name.sql", "original_file_path": "macros\\calendar_date\\month_name.sql", "name": "month_name", "macro_sql": "{%- macro month_name(date, short=True) -%}\n    {{ adapter.dispatch('month_name', 'dbt_date') (date, short) }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_date.snowflake__month_name"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1671050798.1366549}, "macro.dbt_date.default__month_name": {"unique_id": "macro.dbt_date.default__month_name", "package_name": "dbt_date", "root_path": "C:\\Users\\jessi\\git\\axelar-models\\dbt_packages\\dbt_date", "path": "macros\\calendar_date\\month_name.sql", "original_file_path": "macros\\calendar_date\\month_name.sql", "name": "default__month_name", "macro_sql": "\n\n{%- macro default__month_name(date, short) -%}\n{%- set f = 'MON' if short else 'MONTH' -%}\n    to_char({{ date }}, '{{ f }}')\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1671050798.1376543}, "macro.dbt_date.bigquery__month_name": {"unique_id": "macro.dbt_date.bigquery__month_name", "package_name": "dbt_date", "root_path": "C:\\Users\\jessi\\git\\axelar-models\\dbt_packages\\dbt_date", "path": "macros\\calendar_date\\month_name.sql", "original_file_path": "macros\\calendar_date\\month_name.sql", "name": "bigquery__month_name", "macro_sql": "\n\n{%- macro bigquery__month_name(date, short) -%}\n{%- set f = '%b' if short else '%B' -%}\n    format_date('{{ f }}', cast({{ date }} as date))\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1671050798.1376543}, "macro.dbt_date.snowflake__month_name": {"unique_id": "macro.dbt_date.snowflake__month_name", "package_name": "dbt_date", "root_path": "C:\\Users\\jessi\\git\\axelar-models\\dbt_packages\\dbt_date", "path": "macros\\calendar_date\\month_name.sql", "original_file_path": "macros\\calendar_date\\month_name.sql", "name": "snowflake__month_name", "macro_sql": "\n\n{%- macro snowflake__month_name(date, short) -%}\n{%- set f = 'MON' if short else 'MMMM' -%}\n    to_char({{ date }}, '{{ f }}')\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1671050798.1376543}, "macro.dbt_date.postgres__month_name": {"unique_id": "macro.dbt_date.postgres__month_name", "package_name": "dbt_date", "root_path": "C:\\Users\\jessi\\git\\axelar-models\\dbt_packages\\dbt_date", "path": "macros\\calendar_date\\month_name.sql", "original_file_path": "macros\\calendar_date\\month_name.sql", "name": "postgres__month_name", "macro_sql": "\n\n{%- macro postgres__month_name(date, short) -%}\n{# FM = Fill mode, which suppresses padding blanks #}\n{%- set f = 'FMMon' if short else 'FMMonth' -%}\n    to_char({{ date }}, '{{ f }}')\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1671050798.1386545}, "macro.dbt_date.next_month": {"unique_id": "macro.dbt_date.next_month", "package_name": "dbt_date", "root_path": "C:\\Users\\jessi\\git\\axelar-models\\dbt_packages\\dbt_date", "path": "macros\\calendar_date\\next_month.sql", "original_file_path": "macros\\calendar_date\\next_month.sql", "name": "next_month", "macro_sql": "{%- macro next_month(tz=None) -%}\n{{ dbt_date.n_months_away(1, tz) }}\n{%- endmacro -%}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_date.n_months_away"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1671050798.1386545}, "macro.dbt_date.next_month_name": {"unique_id": "macro.dbt_date.next_month_name", "package_name": "dbt_date", "root_path": "C:\\Users\\jessi\\git\\axelar-models\\dbt_packages\\dbt_date", "path": "macros\\calendar_date\\next_month_name.sql", "original_file_path": "macros\\calendar_date\\next_month_name.sql", "name": "next_month_name", "macro_sql": "{%- macro next_month_name(short=True, tz=None) -%}\n{{ dbt_date.month_name(dbt_date.next_month(1, tz), short=short) }}\n{%- endmacro -%}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_date.month_name", "macro.dbt_date.next_month"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1671050798.1396549}, "macro.dbt_date.next_month_number": {"unique_id": "macro.dbt_date.next_month_number", "package_name": "dbt_date", "root_path": "C:\\Users\\jessi\\git\\axelar-models\\dbt_packages\\dbt_date", "path": "macros\\calendar_date\\next_month_number.sql", "original_file_path": "macros\\calendar_date\\next_month_number.sql", "name": "next_month_number", "macro_sql": "{%- macro next_month_number(tz=None) -%}\n{{ dbt_date.date_part('month', dbt_date.next_month(1, tz)) }}\n{%- endmacro -%}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_date.date_part", "macro.dbt_date.next_month"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1671050798.1396549}, "macro.dbt_date.next_week": {"unique_id": "macro.dbt_date.next_week", "package_name": "dbt_date", "root_path": "C:\\Users\\jessi\\git\\axelar-models\\dbt_packages\\dbt_date", "path": "macros\\calendar_date\\next_week.sql", "original_file_path": "macros\\calendar_date\\next_week.sql", "name": "next_week", "macro_sql": "{%- macro next_week(tz=None) -%}\n{{ dbt_date.n_weeks_away(1, tz) }}\n{%- endmacro -%}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_date.n_weeks_away"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1671050798.1407387}, "macro.dbt_date.now": {"unique_id": "macro.dbt_date.now", "package_name": "dbt_date", "root_path": "C:\\Users\\jessi\\git\\axelar-models\\dbt_packages\\dbt_date", "path": "macros\\calendar_date\\now.sql", "original_file_path": "macros\\calendar_date\\now.sql", "name": "now", "macro_sql": "{%- macro now(tz=None) -%}\n{{ dbt_date.convert_timezone(current_timestamp(), tz) }}\n{%- endmacro -%}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_date.convert_timezone", "macro.dbt_utils.current_timestamp"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1671050798.1416538}, "macro.dbt_date.n_days_ago": {"unique_id": "macro.dbt_date.n_days_ago", "package_name": "dbt_date", "root_path": "C:\\Users\\jessi\\git\\axelar-models\\dbt_packages\\dbt_date", "path": "macros\\calendar_date\\n_days_ago.sql", "original_file_path": "macros\\calendar_date\\n_days_ago.sql", "name": "n_days_ago", "macro_sql": "{%- macro n_days_ago(n, date=None, tz=None) -%}\n{%-set dt = date if date else dbt_date.today(tz) -%}\n{%- set n = n|int -%}\ncast({{ dateadd('day', -1 * n, dt) }} as date)\n{%- endmacro -%}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_date.today", "macro.dbt_utils.dateadd"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1671050798.142711}, "macro.dbt_date.n_days_away": {"unique_id": "macro.dbt_date.n_days_away", "package_name": "dbt_date", "root_path": "C:\\Users\\jessi\\git\\axelar-models\\dbt_packages\\dbt_date", "path": "macros\\calendar_date\\n_days_away.sql", "original_file_path": "macros\\calendar_date\\n_days_away.sql", "name": "n_days_away", "macro_sql": "{%- macro n_days_away(n, date=None, tz=None) -%}\n{{ dbt_date.n_days_ago(-1 * n, date, tz) }}\n{%- endmacro -%}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_date.n_days_ago"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1671050798.142711}, "macro.dbt_date.n_months_ago": {"unique_id": "macro.dbt_date.n_months_ago", "package_name": "dbt_date", "root_path": "C:\\Users\\jessi\\git\\axelar-models\\dbt_packages\\dbt_date", "path": "macros\\calendar_date\\n_months_ago.sql", "original_file_path": "macros\\calendar_date\\n_months_ago.sql", "name": "n_months_ago", "macro_sql": "{%- macro n_months_ago(n, tz=None) -%}\n{%- set n = n|int -%}\n{{ date_trunc('month',\n    dateadd('month', -1 * n,\n        dbt_date.today(tz)\n        )\n    ) }}\n{%- endmacro -%}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.date_trunc", "macro.dbt_utils.dateadd", "macro.dbt_date.today"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1671050798.1437573}, "macro.dbt_date.n_months_away": {"unique_id": "macro.dbt_date.n_months_away", "package_name": "dbt_date", "root_path": "C:\\Users\\jessi\\git\\axelar-models\\dbt_packages\\dbt_date", "path": "macros\\calendar_date\\n_months_away.sql", "original_file_path": "macros\\calendar_date\\n_months_away.sql", "name": "n_months_away", "macro_sql": "{%- macro n_months_away(n, tz=None) -%}\n{%- set n = n|int -%}\n{{ date_trunc('month',\n    dateadd('month', n,\n        dbt_date.today(tz)\n        )\n    ) }}\n{%- endmacro -%}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.date_trunc", "macro.dbt_utils.dateadd", "macro.dbt_date.today"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1671050798.1446543}, "macro.dbt_date.n_weeks_ago": {"unique_id": "macro.dbt_date.n_weeks_ago", "package_name": "dbt_date", "root_path": "C:\\Users\\jessi\\git\\axelar-models\\dbt_packages\\dbt_date", "path": "macros\\calendar_date\\n_weeks_ago.sql", "original_file_path": "macros\\calendar_date\\n_weeks_ago.sql", "name": "n_weeks_ago", "macro_sql": "{%- macro n_weeks_ago(n, tz=None) -%}\n{%- set n = n|int -%}\n{{ date_trunc('week',\n    dateadd('week', -1 * n,\n        dbt_date.today(tz)\n        )\n    ) }}\n{%- endmacro -%}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.date_trunc", "macro.dbt_utils.dateadd", "macro.dbt_date.today"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1671050798.1456518}, "macro.dbt_date.n_weeks_away": {"unique_id": "macro.dbt_date.n_weeks_away", "package_name": "dbt_date", "root_path": "C:\\Users\\jessi\\git\\axelar-models\\dbt_packages\\dbt_date", "path": "macros\\calendar_date\\n_weeks_away.sql", "original_file_path": "macros\\calendar_date\\n_weeks_away.sql", "name": "n_weeks_away", "macro_sql": "{%- macro n_weeks_away(n, tz=None) -%}\n{%- set n = n|int -%}\n{{ date_trunc('week',\n    dateadd('week', n,\n        dbt_date.today(tz)\n        )\n    ) }}\n{%- endmacro -%}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.date_trunc", "macro.dbt_utils.dateadd", "macro.dbt_date.today"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1671050798.146189}, "macro.dbt_date.periods_since": {"unique_id": "macro.dbt_date.periods_since", "package_name": "dbt_date", "root_path": "C:\\Users\\jessi\\git\\axelar-models\\dbt_packages\\dbt_date", "path": "macros\\calendar_date\\periods_since.sql", "original_file_path": "macros\\calendar_date\\periods_since.sql", "name": "periods_since", "macro_sql": "{%- macro periods_since(date_col, period_name='day', tz=None) -%}\n{{ datediff(date_col, dbt_date.now(tz), period_name) }}\n{%- endmacro -%}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.datediff", "macro.dbt_date.now"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1671050798.1472902}, "macro.dbt_date.round_timestamp": {"unique_id": "macro.dbt_date.round_timestamp", "package_name": "dbt_date", "root_path": "C:\\Users\\jessi\\git\\axelar-models\\dbt_packages\\dbt_date", "path": "macros\\calendar_date\\round_timestamp.sql", "original_file_path": "macros\\calendar_date\\round_timestamp.sql", "name": "round_timestamp", "macro_sql": "{% macro round_timestamp(timestamp) %}\n    {{ date_trunc(\"day\", dateadd(\"hour\", 12, timestamp)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.date_trunc", "macro.dbt_utils.dateadd"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1671050798.1482658}, "macro.dbt_date.today": {"unique_id": "macro.dbt_date.today", "package_name": "dbt_date", "root_path": "C:\\Users\\jessi\\git\\axelar-models\\dbt_packages\\dbt_date", "path": "macros\\calendar_date\\today.sql", "original_file_path": "macros\\calendar_date\\today.sql", "name": "today", "macro_sql": "{%- macro today(tz=None) -%}\ncast({{ dbt_date.now(tz) }} as date)\n{%- endmacro -%}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_date.now"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1671050798.1482658}, "macro.dbt_date.tomorrow": {"unique_id": "macro.dbt_date.tomorrow", "package_name": "dbt_date", "root_path": "C:\\Users\\jessi\\git\\axelar-models\\dbt_packages\\dbt_date", "path": "macros\\calendar_date\\tomorrow.sql", "original_file_path": "macros\\calendar_date\\tomorrow.sql", "name": "tomorrow", "macro_sql": "{%- macro tomorrow(date=None, tz=None) -%}\n{{ dbt_date.n_days_away(1, date, tz) }}\n{%- endmacro -%}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_date.n_days_away"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1671050798.1492252}, "macro.dbt_date.to_unixtimestamp": {"unique_id": "macro.dbt_date.to_unixtimestamp", "package_name": "dbt_date", "root_path": "C:\\Users\\jessi\\git\\axelar-models\\dbt_packages\\dbt_date", "path": "macros\\calendar_date\\to_unixtimestamp.sql", "original_file_path": "macros\\calendar_date\\to_unixtimestamp.sql", "name": "to_unixtimestamp", "macro_sql": "{%- macro to_unixtimestamp(timestamp) -%}\n    {{ adapter.dispatch('to_unixtimestamp', 'dbt_date') (timestamp) }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_date.snowflake__to_unixtimestamp"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1671050798.1499202}, "macro.dbt_date.default__to_unixtimestamp": {"unique_id": "macro.dbt_date.default__to_unixtimestamp", "package_name": "dbt_date", "root_path": "C:\\Users\\jessi\\git\\axelar-models\\dbt_packages\\dbt_date", "path": "macros\\calendar_date\\to_unixtimestamp.sql", "original_file_path": "macros\\calendar_date\\to_unixtimestamp.sql", "name": "default__to_unixtimestamp", "macro_sql": "\n\n{%- macro default__to_unixtimestamp(timestamp) -%}\n    {{ dbt_date.date_part('epoch', timestamp) }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_date.date_part"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1671050798.1499202}, "macro.dbt_date.snowflake__to_unixtimestamp": {"unique_id": "macro.dbt_date.snowflake__to_unixtimestamp", "package_name": "dbt_date", "root_path": "C:\\Users\\jessi\\git\\axelar-models\\dbt_packages\\dbt_date", "path": "macros\\calendar_date\\to_unixtimestamp.sql", "original_file_path": "macros\\calendar_date\\to_unixtimestamp.sql", "name": "snowflake__to_unixtimestamp", "macro_sql": "\n\n{%- macro snowflake__to_unixtimestamp(timestamp) -%}\n    {{ dbt_date.date_part('epoch_seconds', timestamp) }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_date.date_part"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1671050798.1499202}, "macro.dbt_date.bigquery__to_unixtimestamp": {"unique_id": "macro.dbt_date.bigquery__to_unixtimestamp", "package_name": "dbt_date", "root_path": "C:\\Users\\jessi\\git\\axelar-models\\dbt_packages\\dbt_date", "path": "macros\\calendar_date\\to_unixtimestamp.sql", "original_file_path": "macros\\calendar_date\\to_unixtimestamp.sql", "name": "bigquery__to_unixtimestamp", "macro_sql": "\n\n{%- macro bigquery__to_unixtimestamp(timestamp) -%}\n    unix_seconds({{ timestamp }})\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1671050798.1499202}, "macro.dbt_date.week_end": {"unique_id": "macro.dbt_date.week_end", "package_name": "dbt_date", "root_path": "C:\\Users\\jessi\\git\\axelar-models\\dbt_packages\\dbt_date", "path": "macros\\calendar_date\\week_end.sql", "original_file_path": "macros\\calendar_date\\week_end.sql", "name": "week_end", "macro_sql": "{%- macro week_end(date=None, tz=None) -%}\n{%-set dt = date if date else dbt_date.today(tz) -%}\n{{ adapter.dispatch('week_end', 'dbt_date') (dt) }}\n{%- endmacro -%}\n\n", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_date.today", "macro.dbt_date.snowflake__week_end"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1671050798.1511014}, "macro.dbt_date.default__week_end": {"unique_id": "macro.dbt_date.default__week_end", "package_name": "dbt_date", "root_path": "C:\\Users\\jessi\\git\\axelar-models\\dbt_packages\\dbt_date", "path": "macros\\calendar_date\\week_end.sql", "original_file_path": "macros\\calendar_date\\week_end.sql", "name": "default__week_end", "macro_sql": "{%- macro default__week_end(date) -%}\n{{ last_day(date, 'week') }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.last_day"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1671050798.1511014}, "macro.dbt_date.snowflake__week_end": {"unique_id": "macro.dbt_date.snowflake__week_end", "package_name": "dbt_date", "root_path": "C:\\Users\\jessi\\git\\axelar-models\\dbt_packages\\dbt_date", "path": "macros\\calendar_date\\week_end.sql", "original_file_path": "macros\\calendar_date\\week_end.sql", "name": "snowflake__week_end", "macro_sql": "\n\n{%- macro snowflake__week_end(date) -%}\n{%- set dt = dbt_date.week_start(date) -%}\n{{ dbt_date.n_days_away(6, dt) }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_date.week_start", "macro.dbt_date.n_days_away"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1671050798.1520064}, "macro.dbt_date.postgres__week_end": {"unique_id": "macro.dbt_date.postgres__week_end", "package_name": "dbt_date", "root_path": "C:\\Users\\jessi\\git\\axelar-models\\dbt_packages\\dbt_date", "path": "macros\\calendar_date\\week_end.sql", "original_file_path": "macros\\calendar_date\\week_end.sql", "name": "postgres__week_end", "macro_sql": "\n\n{%- macro postgres__week_end(date) -%}\n{%- set dt = dbt_date.week_start(date) -%}\n{{ dbt_date.n_days_away(6, dt) }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_date.week_start", "macro.dbt_date.n_days_away"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1671050798.1520064}, "macro.dbt_date.week_of_year": {"unique_id": "macro.dbt_date.week_of_year", "package_name": "dbt_date", "root_path": "C:\\Users\\jessi\\git\\axelar-models\\dbt_packages\\dbt_date", "path": "macros\\calendar_date\\week_of_year.sql", "original_file_path": "macros\\calendar_date\\week_of_year.sql", "name": "week_of_year", "macro_sql": "{%- macro week_of_year(date=None, tz=None) -%}\n{%-set dt = date if date else dbt_date.today(tz) -%}\n{{ adapter.dispatch('week_of_year', 'dbt_date') (dt) }}\n{%- endmacro -%}\n\n", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_date.today", "macro.dbt_date.default__week_of_year"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1671050798.1532066}, "macro.dbt_date.default__week_of_year": {"unique_id": "macro.dbt_date.default__week_of_year", "package_name": "dbt_date", "root_path": "C:\\Users\\jessi\\git\\axelar-models\\dbt_packages\\dbt_date", "path": "macros\\calendar_date\\week_of_year.sql", "original_file_path": "macros\\calendar_date\\week_of_year.sql", "name": "default__week_of_year", "macro_sql": "{%- macro default__week_of_year(date) -%}\ncast({{ dbt_date.date_part('week', date) }} as {{ type_int() }})\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_date.date_part", "macro.dbt_utils.type_int"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1671050798.1532066}, "macro.dbt_date.postgres__week_of_year": {"unique_id": "macro.dbt_date.postgres__week_of_year", "package_name": "dbt_date", "root_path": "C:\\Users\\jessi\\git\\axelar-models\\dbt_packages\\dbt_date", "path": "macros\\calendar_date\\week_of_year.sql", "original_file_path": "macros\\calendar_date\\week_of_year.sql", "name": "postgres__week_of_year", "macro_sql": "\n\n{%- macro postgres__week_of_year(date) -%}\n{# postgresql 'week' returns isoweek. Use to_char instead.\n   WW = the first week starts on the first day of the year #}\ncast(to_char({{ date }}, 'WW') as {{ type_int() }})\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.type_int"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1671050798.1532066}, "macro.dbt_date.week_start": {"unique_id": "macro.dbt_date.week_start", "package_name": "dbt_date", "root_path": "C:\\Users\\jessi\\git\\axelar-models\\dbt_packages\\dbt_date", "path": "macros\\calendar_date\\week_start.sql", "original_file_path": "macros\\calendar_date\\week_start.sql", "name": "week_start", "macro_sql": "{%- macro week_start(date=None, tz=None) -%}\n{%-set dt = date if date else dbt_date.today(tz) -%}\n{{ adapter.dispatch('week_start', 'dbt_date') (dt) }}\n{%- endmacro -%}\n\n", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_date.today", "macro.dbt_date.snowflake__week_start"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1671050798.154378}, "macro.dbt_date.default__week_start": {"unique_id": "macro.dbt_date.default__week_start", "package_name": "dbt_date", "root_path": "C:\\Users\\jessi\\git\\axelar-models\\dbt_packages\\dbt_date", "path": "macros\\calendar_date\\week_start.sql", "original_file_path": "macros\\calendar_date\\week_start.sql", "name": "default__week_start", "macro_sql": "{%- macro default__week_start(date) -%}\ncast({{ date_trunc('week', date) }} as date)\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.date_trunc"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1671050798.154378}, "macro.dbt_date.snowflake__week_start": {"unique_id": "macro.dbt_date.snowflake__week_start", "package_name": "dbt_date", "root_path": "C:\\Users\\jessi\\git\\axelar-models\\dbt_packages\\dbt_date", "path": "macros\\calendar_date\\week_start.sql", "original_file_path": "macros\\calendar_date\\week_start.sql", "name": "snowflake__week_start", "macro_sql": "\n\n{%- macro snowflake__week_start(date) -%}\n    {#\n        Get the day of week offset: e.g. if the date is a Sunday,\n        dbt_date.day_of_week returns 1, so we subtract 1 to get a 0 offset\n    #}\n    {% set off_set = dbt_date.day_of_week(date, isoweek=False) ~ \" - 1\" %}\n    cast({{ dateadd(\"day\", \"-1 * (\" ~ off_set ~ \")\", date) }} as date)\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_date.day_of_week", "macro.dbt_utils.dateadd"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1671050798.155373}, "macro.dbt_date.postgres__week_start": {"unique_id": "macro.dbt_date.postgres__week_start", "package_name": "dbt_date", "root_path": "C:\\Users\\jessi\\git\\axelar-models\\dbt_packages\\dbt_date", "path": "macros\\calendar_date\\week_start.sql", "original_file_path": "macros\\calendar_date\\week_start.sql", "name": "postgres__week_start", "macro_sql": "\n\n{%- macro postgres__week_start(date) -%}\n-- Sunday as week start date\ncast({{ dateadd('day', -1, date_trunc('week', dateadd('day', 1, date))) }} as date)\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.dateadd", "macro.dbt_utils.date_trunc"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1671050798.155373}, "macro.dbt_date.yesterday": {"unique_id": "macro.dbt_date.yesterday", "package_name": "dbt_date", "root_path": "C:\\Users\\jessi\\git\\axelar-models\\dbt_packages\\dbt_date", "path": "macros\\calendar_date\\yesterday.sql", "original_file_path": "macros\\calendar_date\\yesterday.sql", "name": "yesterday", "macro_sql": "{%- macro yesterday(date=None, tz=None) -%}\n{{ dbt_date.n_days_ago(1, date, tz) }}\n{%- endmacro -%}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_date.n_days_ago"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1671050798.1562848}, "macro.dbt_date.get_fiscal_periods": {"unique_id": "macro.dbt_date.get_fiscal_periods", "package_name": "dbt_date", "root_path": "C:\\Users\\jessi\\git\\axelar-models\\dbt_packages\\dbt_date", "path": "macros\\fiscal_date\\get_fiscal_periods.sql", "original_file_path": "macros\\fiscal_date\\get_fiscal_periods.sql", "name": "get_fiscal_periods", "macro_sql": "{% macro get_fiscal_periods(dates, year_end_month, week_start_day, shift_year=1) %}\n{#\nThis macro requires you to pass in a ref to a date dimension, created via\ndbt_date.get_date_dimension()s\n#}\nwith fscl_year_dates_for_periods as (\n    {{ dbt_date.get_fiscal_year_dates(dates, year_end_month, week_start_day, shift_year) }}\n),\nfscl_year_w13 as (\n\n    select\n        f.*,\n        -- We count the weeks in a 13 week period\n        -- and separate the 4-5-4 week sequences\n        mod(cast(\n            (f.fiscal_week_of_year-1) as {{ type_int() }}\n            ), 13) as w13_number,\n        -- Chop weeks into 13 week merch quarters\n        cast(\n            least(\n                floor((f.fiscal_week_of_year-1)/13.0)\n                , 3)\n            as {{ type_int() }}) as quarter_number\n    from\n        fscl_year_dates_for_periods f\n\n),\nfscl_periods as (\n\n    select\n        f.date_day,\n        f.fiscal_year_number,\n        f.week_start_date,\n        f.week_end_date,\n        f.fiscal_week_of_year,\n        case\n            -- we move week 53 into the 3rd period of the quarter\n            when f.fiscal_week_of_year = 53 then 3\n            when f.w13_number between 0 and 3 then 1\n            when f.w13_number between 4 and 8 then 2\n            when f.w13_number between 9 and 12 then 3\n        end as period_of_quarter,\n        f.quarter_number\n    from\n        fscl_year_w13 f\n\n),\nfscl_periods_quarters as (\n\n    select\n        f.*,\n        cast((\n            (f.quarter_number * 3) + f.period_of_quarter\n         ) as {{ type_int() }}) as fiscal_period_number\n    from\n        fscl_periods f\n\n)\nselect\n    date_day,\n    fiscal_year_number,\n    week_start_date,\n    week_end_date,\n    fiscal_week_of_year,\n    dense_rank() over(partition by fiscal_period_number order by fiscal_week_of_year) as fiscal_week_of_period,\n    fiscal_period_number,\n    quarter_number+1 as fiscal_quarter_number,\n    period_of_quarter as fiscal_period_of_quarter\nfrom\n    fscl_periods_quarters\norder by 1,2\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_date.get_fiscal_year_dates", "macro.dbt_utils.type_int"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1671050798.1573696}, "macro.dbt_date.get_fiscal_year_dates": {"unique_id": "macro.dbt_date.get_fiscal_year_dates", "package_name": "dbt_date", "root_path": "C:\\Users\\jessi\\git\\axelar-models\\dbt_packages\\dbt_date", "path": "macros\\fiscal_date\\get_fiscal_year_dates.sql", "original_file_path": "macros\\fiscal_date\\get_fiscal_year_dates.sql", "name": "get_fiscal_year_dates", "macro_sql": "{% macro get_fiscal_year_dates(dates, year_end_month=12, week_start_day=1, shift_year=1) %}\n{{ adapter.dispatch('get_fiscal_year_dates', 'dbt_date') (dates, year_end_month, week_start_day, shift_year) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_date.default__get_fiscal_year_dates"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1671050798.1593723}, "macro.dbt_date.default__get_fiscal_year_dates": {"unique_id": "macro.dbt_date.default__get_fiscal_year_dates", "package_name": "dbt_date", "root_path": "C:\\Users\\jessi\\git\\axelar-models\\dbt_packages\\dbt_date", "path": "macros\\fiscal_date\\get_fiscal_year_dates.sql", "original_file_path": "macros\\fiscal_date\\get_fiscal_year_dates.sql", "name": "default__get_fiscal_year_dates", "macro_sql": "{% macro default__get_fiscal_year_dates(dates, year_end_month, week_start_day, shift_year) %}\n-- this gets all the dates within a fiscal year\n-- determined by the given year-end-month\n-- ending on the saturday closest to that month's end date\nwith date_dimension as (\n    select * from {{ dates }}\n),\nyear_month_end as (\n\n    select\n       d.year_number - {{ shift_year }} as fiscal_year_number,\n       d.month_end_date\n    from\n        date_dimension d\n    where\n        d.month_of_year = {{ year_end_month }}\n    group by 1,2\n\n),\nweeks as (\n\n    select\n        d.year_number,\n        d.month_of_year,\n        d.date_day as week_start_date,\n        cast({{ dateadd('day', 6, 'd.date_day') }} as date) as week_end_date\n    from\n        date_dimension d\n    where\n        d.day_of_week = {{ week_start_day }}\n\n),\n-- get all the weeks that start in the month the year ends\nyear_week_ends as (\n\n    select\n        d.year_number - {{ shift_year }} as fiscal_year_number,\n        d.week_end_date\n    from\n        weeks d\n    where\n        d.month_of_year = {{ year_end_month }}\n    group by\n        1,2\n\n),\n-- then calculate which Saturday is closest to month end\nweeks_at_month_end as (\n\n    select\n        d.fiscal_year_number,\n        d.week_end_date,\n        m.month_end_date,\n        rank() over\n            (partition by d.fiscal_year_number\n                order by\n                abs({{ datediff('d.week_end_date', 'm.month_end_date', 'day') }})\n\n            ) as closest_to_month_end\n    from\n        year_week_ends d\n        join\n        year_month_end m on d.fiscal_year_number = m.fiscal_year_number\n),\nfiscal_year_range as (\n\n    select\n        w.fiscal_year_number,\n        cast(\n            {{ dateadd('day', 1,\n            'lag(w.week_end_date) over(order by w.week_end_date)') }}\n            as date) as fiscal_year_start_date,\n        w.week_end_date as fiscal_year_end_date\n    from\n        weeks_at_month_end w\n    where\n        w.closest_to_month_end = 1\n\n),\nfiscal_year_dates as (\n\n    select\n        d.date_day,\n        m.fiscal_year_number,\n        m.fiscal_year_start_date,\n        m.fiscal_year_end_date,\n        w.week_start_date,\n        w.week_end_date,\n        -- we reset the weeks of the year starting with the merch year start date\n        dense_rank()\n            over(\n                partition by m.fiscal_year_number\n                order by w.week_start_date\n                ) as fiscal_week_of_year\n    from\n        date_dimension d\n        join\n        fiscal_year_range m on d.date_day between m.fiscal_year_start_date and m.fiscal_year_end_date\n        join\n        weeks w on d.date_day between w.week_start_date and w.week_end_date\n\n)\nselect * from fiscal_year_dates order by 1\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.dateadd", "macro.dbt_utils.datediff"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1671050798.1593723}, "macro.dbt_date.get_intervals_between": {"unique_id": "macro.dbt_date.get_intervals_between", "package_name": "dbt_date", "root_path": "C:\\Users\\jessi\\git\\axelar-models\\dbt_packages\\dbt_date", "path": "macros\\_utils\\date_spine.sql", "original_file_path": "macros\\_utils\\date_spine.sql", "name": "get_intervals_between", "macro_sql": "{% macro get_intervals_between(start_date, end_date, datepart) -%}\n    {{ return(adapter.dispatch('get_intervals_between', 'dbt_date')(start_date, end_date, datepart)) }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_date.default__get_intervals_between"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1671050798.160373}, "macro.dbt_date.default__get_intervals_between": {"unique_id": "macro.dbt_date.default__get_intervals_between", "package_name": "dbt_date", "root_path": "C:\\Users\\jessi\\git\\axelar-models\\dbt_packages\\dbt_date", "path": "macros\\_utils\\date_spine.sql", "original_file_path": "macros\\_utils\\date_spine.sql", "name": "default__get_intervals_between", "macro_sql": "{% macro default__get_intervals_between(start_date, end_date, datepart) -%}\n    {%- call statement('get_intervals_between', fetch_result=True) %}\n\n        select {{ datediff(start_date, end_date, datepart) }}\n\n    {%- endcall -%}\n\n    {%- set value_list = load_result('get_intervals_between') -%}\n\n    {%- if value_list and value_list['data'] -%}\n        {%- set values = value_list['data'] | map(attribute=0) | list %}\n        {{ return(values[0]) }}\n    {%- else -%}\n        {{ return(1) }}\n    {%- endif -%}\n\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.statement", "macro.dbt_utils.datediff"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1671050798.1613753}, "macro.dbt_date.date_spine": {"unique_id": "macro.dbt_date.date_spine", "package_name": "dbt_date", "root_path": "C:\\Users\\jessi\\git\\axelar-models\\dbt_packages\\dbt_date", "path": "macros\\_utils\\date_spine.sql", "original_file_path": "macros\\_utils\\date_spine.sql", "name": "date_spine", "macro_sql": "{% macro date_spine(datepart, start_date, end_date) %}\n    {{ return(adapter.dispatch('date_spine', 'dbt_date')(datepart, start_date, end_date)) }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_date.default__date_spine"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1671050798.1623034}, "macro.dbt_date.default__date_spine": {"unique_id": "macro.dbt_date.default__date_spine", "package_name": "dbt_date", "root_path": "C:\\Users\\jessi\\git\\axelar-models\\dbt_packages\\dbt_date", "path": "macros\\_utils\\date_spine.sql", "original_file_path": "macros\\_utils\\date_spine.sql", "name": "default__date_spine", "macro_sql": "{% macro default__date_spine(datepart, start_date, end_date) %}\n\n\n{# call as follows:\n\ndate_spine(\n    \"day\",\n    \"to_date('01/01/2016', 'mm/dd/yyyy')\",\n    \"dateadd(week, 1, current_date)\"\n) #}\n\n\nwith rawdata as (\n\n    {{\n        dbt_date.generate_series(\n            dbt_date.get_intervals_between(start_date, end_date, datepart)\n        )\n    }}\n\n),\n\nall_periods as (\n\n    select (\n        {{\n            dateadd(\n                datepart,\n                \"row_number() over (order by 1) - 1\",\n                start_date\n            )\n        }}\n    ) as date_{{datepart}}\n    from rawdata\n\n),\n\nfiltered as (\n\n    select *\n    from all_periods\n    where date_{{datepart}} <= {{ end_date }}\n\n)\n\nselect * from filtered\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_date.generate_series", "macro.dbt_date.get_intervals_between", "macro.dbt_utils.dateadd"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1671050798.1632876}, "macro.dbt_date.get_powers_of_two": {"unique_id": "macro.dbt_date.get_powers_of_two", "package_name": "dbt_date", "root_path": "C:\\Users\\jessi\\git\\axelar-models\\dbt_packages\\dbt_date", "path": "macros\\_utils\\generate_series.sql", "original_file_path": "macros\\_utils\\generate_series.sql", "name": "get_powers_of_two", "macro_sql": "{% macro get_powers_of_two(upper_bound) %}\n    {{ return(adapter.dispatch('get_powers_of_two', 'dbt_date')(upper_bound)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_date.default__get_powers_of_two"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1671050798.1653724}, "macro.dbt_date.default__get_powers_of_two": {"unique_id": "macro.dbt_date.default__get_powers_of_two", "package_name": "dbt_date", "root_path": "C:\\Users\\jessi\\git\\axelar-models\\dbt_packages\\dbt_date", "path": "macros\\_utils\\generate_series.sql", "original_file_path": "macros\\_utils\\generate_series.sql", "name": "default__get_powers_of_two", "macro_sql": "{% macro default__get_powers_of_two(upper_bound) %}\n\n    {% if upper_bound <= 0 %}\n    {{ exceptions.raise_compiler_error(\"upper bound must be positive\") }}\n    {% endif %}\n\n    {% for _ in range(1, 100) %}\n       {% if upper_bound <= 2 ** loop.index %}{{ return(loop.index) }}{% endif %}\n    {% endfor %}\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1671050798.1663702}, "macro.dbt_date.generate_series": {"unique_id": "macro.dbt_date.generate_series", "package_name": "dbt_date", "root_path": "C:\\Users\\jessi\\git\\axelar-models\\dbt_packages\\dbt_date", "path": "macros\\_utils\\generate_series.sql", "original_file_path": "macros\\_utils\\generate_series.sql", "name": "generate_series", "macro_sql": "{% macro generate_series(upper_bound) %}\n    {{ return(adapter.dispatch('generate_series', 'dbt_date')(upper_bound)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_date.default__generate_series"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1671050798.1663702}, "macro.dbt_date.default__generate_series": {"unique_id": "macro.dbt_date.default__generate_series", "package_name": "dbt_date", "root_path": "C:\\Users\\jessi\\git\\axelar-models\\dbt_packages\\dbt_date", "path": "macros\\_utils\\generate_series.sql", "original_file_path": "macros\\_utils\\generate_series.sql", "name": "default__generate_series", "macro_sql": "{% macro default__generate_series(upper_bound) %}\n\n    {% set n = dbt_date.get_powers_of_two(upper_bound) %}\n\n    with p as (\n        select 0 as generated_number union all select 1\n    ), unioned as (\n\n    select\n\n    {% for i in range(n) %}\n    p{{i}}.generated_number * power(2, {{i}})\n    {% if not loop.last %} + {% endif %}\n    {% endfor %}\n    + 1\n    as generated_number\n\n    from\n\n    {% for i in range(n) %}\n    p as p{{i}}\n    {% if not loop.last %} cross join {% endif %}\n    {% endfor %}\n\n    )\n\n    select *\n    from unioned\n    where generated_number <= {{upper_bound}}\n    order by generated_number\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_date.get_powers_of_two"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1671050798.1673756}, "macro.dbt_expectations.log_natural": {"unique_id": "macro.dbt_expectations.log_natural", "package_name": "dbt_expectations", "root_path": "C:\\Users\\jessi\\git\\axelar-models\\dbt_packages\\dbt_expectations", "path": "macros\\math\\log_natural.sql", "original_file_path": "macros\\math\\log_natural.sql", "name": "log_natural", "macro_sql": "{% macro log_natural(x) -%}\n    {{ adapter.dispatch('log_natural', 'dbt_expectations') (x) }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_expectations.snowflake__log_natural"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1671050798.168326}, "macro.dbt_expectations.default__log_natural": {"unique_id": "macro.dbt_expectations.default__log_natural", "package_name": "dbt_expectations", "root_path": "C:\\Users\\jessi\\git\\axelar-models\\dbt_packages\\dbt_expectations", "path": "macros\\math\\log_natural.sql", "original_file_path": "macros\\math\\log_natural.sql", "name": "default__log_natural", "macro_sql": "{% macro default__log_natural(x) -%}\n\n    ln({{ x }})\n\n{%- endmacro -%}\n\n", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1671050798.168326}, "macro.dbt_expectations.bigquery__log_natural": {"unique_id": "macro.dbt_expectations.bigquery__log_natural", "package_name": "dbt_expectations", "root_path": "C:\\Users\\jessi\\git\\axelar-models\\dbt_packages\\dbt_expectations", "path": "macros\\math\\log_natural.sql", "original_file_path": "macros\\math\\log_natural.sql", "name": "bigquery__log_natural", "macro_sql": "{% macro bigquery__log_natural(x) -%}\n\n    ln({{ x }})\n\n{%- endmacro -%}\n\n", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1671050798.168326}, "macro.dbt_expectations.snowflake__log_natural": {"unique_id": "macro.dbt_expectations.snowflake__log_natural", "package_name": "dbt_expectations", "root_path": "C:\\Users\\jessi\\git\\axelar-models\\dbt_packages\\dbt_expectations", "path": "macros\\math\\log_natural.sql", "original_file_path": "macros\\math\\log_natural.sql", "name": "snowflake__log_natural", "macro_sql": "{% macro snowflake__log_natural(x) -%}\n\n    ln({{ x }})\n\n{%- endmacro -%}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1671050798.168326}, "macro.dbt_expectations.median": {"unique_id": "macro.dbt_expectations.median", "package_name": "dbt_expectations", "root_path": "C:\\Users\\jessi\\git\\axelar-models\\dbt_packages\\dbt_expectations", "path": "macros\\math\\median.sql", "original_file_path": "macros\\math\\median.sql", "name": "median", "macro_sql": "{% macro median(field) %}\n{{ dbt_expectations.percentile_cont(field, 0.5) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_expectations.percentile_cont"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1671050798.168326}, "macro.dbt_expectations.percentile_cont": {"unique_id": "macro.dbt_expectations.percentile_cont", "package_name": "dbt_expectations", "root_path": "C:\\Users\\jessi\\git\\axelar-models\\dbt_packages\\dbt_expectations", "path": "macros\\math\\percentile_cont.sql", "original_file_path": "macros\\math\\percentile_cont.sql", "name": "percentile_cont", "macro_sql": "{% macro percentile_cont(field, quantile, partition=None) %}\n  {{ adapter.dispatch('quantile', 'dbt_expectations') (field, quantile, partition) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_expectations.default__quantile"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1671050798.169373}, "macro.dbt_expectations.default__quantile": {"unique_id": "macro.dbt_expectations.default__quantile", "package_name": "dbt_expectations", "root_path": "C:\\Users\\jessi\\git\\axelar-models\\dbt_packages\\dbt_expectations", "path": "macros\\math\\percentile_cont.sql", "original_file_path": "macros\\math\\percentile_cont.sql", "name": "default__quantile", "macro_sql": "{% macro default__quantile(field, quantile, partition)  -%}\n    percentile_cont({{ quantile }}) within group (order by {{ field }})\n    {%- if partition %}over(partition by {{ partition }}){% endif -%}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1671050798.170379}, "macro.dbt_expectations.bigquery__quantile": {"unique_id": "macro.dbt_expectations.bigquery__quantile", "package_name": "dbt_expectations", "root_path": "C:\\Users\\jessi\\git\\axelar-models\\dbt_packages\\dbt_expectations", "path": "macros\\math\\percentile_cont.sql", "original_file_path": "macros\\math\\percentile_cont.sql", "name": "bigquery__quantile", "macro_sql": "{% macro bigquery__quantile(field, quantile, partition) -%}\n    percentile_cont({{ field }}, {{ quantile }})\n    over({%- if partition %}partition by {{ partition }}{% endif -%})\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1671050798.170379}, "macro.dbt_expectations.rand": {"unique_id": "macro.dbt_expectations.rand", "package_name": "dbt_expectations", "root_path": "C:\\Users\\jessi\\git\\axelar-models\\dbt_packages\\dbt_expectations", "path": "macros\\math\\rand.sql", "original_file_path": "macros\\math\\rand.sql", "name": "rand", "macro_sql": "{% macro rand() -%}\n    {{ adapter.dispatch('rand', 'dbt_expectations') () }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_expectations.snowflake__rand"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1671050798.170379}, "macro.dbt_expectations.default__rand": {"unique_id": "macro.dbt_expectations.default__rand", "package_name": "dbt_expectations", "root_path": "C:\\Users\\jessi\\git\\axelar-models\\dbt_packages\\dbt_expectations", "path": "macros\\math\\rand.sql", "original_file_path": "macros\\math\\rand.sql", "name": "default__rand", "macro_sql": "{% macro default__rand() -%}\n\n    rand()\n\n{%- endmacro -%}\n\n", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1671050798.1713705}, "macro.dbt_expectations.bigquery__rand": {"unique_id": "macro.dbt_expectations.bigquery__rand", "package_name": "dbt_expectations", "root_path": "C:\\Users\\jessi\\git\\axelar-models\\dbt_packages\\dbt_expectations", "path": "macros\\math\\rand.sql", "original_file_path": "macros\\math\\rand.sql", "name": "bigquery__rand", "macro_sql": "{% macro bigquery__rand() -%}\n\n    rand()\n\n{%- endmacro -%}\n\n", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1671050798.1713705}, "macro.dbt_expectations.snowflake__rand": {"unique_id": "macro.dbt_expectations.snowflake__rand", "package_name": "dbt_expectations", "root_path": "C:\\Users\\jessi\\git\\axelar-models\\dbt_packages\\dbt_expectations", "path": "macros\\math\\rand.sql", "original_file_path": "macros\\math\\rand.sql", "name": "snowflake__rand", "macro_sql": "{% macro snowflake__rand(seed) -%}\n\n    uniform(0::float, 1::float, random())\n\n{%- endmacro -%}\n\n", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1671050798.1713705}, "macro.dbt_expectations.postgres__rand": {"unique_id": "macro.dbt_expectations.postgres__rand", "package_name": "dbt_expectations", "root_path": "C:\\Users\\jessi\\git\\axelar-models\\dbt_packages\\dbt_expectations", "path": "macros\\math\\rand.sql", "original_file_path": "macros\\math\\rand.sql", "name": "postgres__rand", "macro_sql": "{% macro postgres__rand() -%}\n\n    random()\n\n{%- endmacro -%}\n\n", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1671050798.1713705}, "macro.dbt_expectations.redshift__rand": {"unique_id": "macro.dbt_expectations.redshift__rand", "package_name": "dbt_expectations", "root_path": "C:\\Users\\jessi\\git\\axelar-models\\dbt_packages\\dbt_expectations", "path": "macros\\math\\rand.sql", "original_file_path": "macros\\math\\rand.sql", "name": "redshift__rand", "macro_sql": "{% macro redshift__rand() -%}\n\n    random()\n\n{%- endmacro -%}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1671050798.1713705}, "macro.dbt_expectations.regexp_instr": {"unique_id": "macro.dbt_expectations.regexp_instr", "package_name": "dbt_expectations", "root_path": "C:\\Users\\jessi\\git\\axelar-models\\dbt_packages\\dbt_expectations", "path": "macros\\regex\\regexp_instr.sql", "original_file_path": "macros\\regex\\regexp_instr.sql", "name": "regexp_instr", "macro_sql": "{% macro regexp_instr(source_value, regexp, position=1, occurrence=1, is_raw=False) %}\n\n    {{ adapter.dispatch('regexp_instr', 'dbt_expectations')(\n        source_value, regexp, position, occurrence, is_raw\n    ) }}\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_expectations.snowflake__regexp_instr"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1671050798.1723323}, "macro.dbt_expectations.default__regexp_instr": {"unique_id": "macro.dbt_expectations.default__regexp_instr", "package_name": "dbt_expectations", "root_path": "C:\\Users\\jessi\\git\\axelar-models\\dbt_packages\\dbt_expectations", "path": "macros\\regex\\regexp_instr.sql", "original_file_path": "macros\\regex\\regexp_instr.sql", "name": "default__regexp_instr", "macro_sql": "{% macro default__regexp_instr(source_value, regexp, position, occurrence, is_raw) %}\nregexp_instr({{ source_value }}, '{{ regexp }}', {{ position }}, {{ occurrence }})\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1671050798.1723323}, "macro.dbt_expectations.snowflake__regexp_instr": {"unique_id": "macro.dbt_expectations.snowflake__regexp_instr", "package_name": "dbt_expectations", "root_path": "C:\\Users\\jessi\\git\\axelar-models\\dbt_packages\\dbt_expectations", "path": "macros\\regex\\regexp_instr.sql", "original_file_path": "macros\\regex\\regexp_instr.sql", "name": "snowflake__regexp_instr", "macro_sql": "{% macro snowflake__regexp_instr(source_value, regexp, position, occurrence, is_raw) %}\n{%- set regexp = \"$$\" ~ regexp ~ \"$$\" if is_raw else \"'\" ~ regexp ~ \"'\" -%}\nregexp_instr({{ source_value }}, {{ regexp }}, {{ position }}, {{ occurrence }})\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1671050798.1733706}, "macro.dbt_expectations.bigquery__regexp_instr": {"unique_id": "macro.dbt_expectations.bigquery__regexp_instr", "package_name": "dbt_expectations", "root_path": "C:\\Users\\jessi\\git\\axelar-models\\dbt_packages\\dbt_expectations", "path": "macros\\regex\\regexp_instr.sql", "original_file_path": "macros\\regex\\regexp_instr.sql", "name": "bigquery__regexp_instr", "macro_sql": "{% macro bigquery__regexp_instr(source_value, regexp, position, occurrence, is_raw) %}\n{%- set regexp = \"r'\" ~ regexp ~ \"'\" if is_raw else \"'\" ~ regexp ~ \"'\" -%}\nregexp_instr({{ source_value }}, {{ regexp }}, {{ position }}, {{ occurrence }})\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1671050798.1733706}, "macro.dbt_expectations.postgres__regexp_instr": {"unique_id": "macro.dbt_expectations.postgres__regexp_instr", "package_name": "dbt_expectations", "root_path": "C:\\Users\\jessi\\git\\axelar-models\\dbt_packages\\dbt_expectations", "path": "macros\\regex\\regexp_instr.sql", "original_file_path": "macros\\regex\\regexp_instr.sql", "name": "postgres__regexp_instr", "macro_sql": "{% macro postgres__regexp_instr(source_value, regexp, position, occurrence, is_raw) %}\narray_length((select regexp_matches({{ source_value }}, '{{ regexp }}')), 1)\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1671050798.1733706}, "macro.dbt_expectations.redshift__regexp_instr": {"unique_id": "macro.dbt_expectations.redshift__regexp_instr", "package_name": "dbt_expectations", "root_path": "C:\\Users\\jessi\\git\\axelar-models\\dbt_packages\\dbt_expectations", "path": "macros\\regex\\regexp_instr.sql", "original_file_path": "macros\\regex\\regexp_instr.sql", "name": "redshift__regexp_instr", "macro_sql": "{% macro redshift__regexp_instr(source_value, regexp, position, occurrence, is_raw) %}\nregexp_instr({{ source_value }}, '{{ regexp }}', {{ position }}, {{ occurrence }})\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1671050798.1743777}, "macro.dbt_expectations.test_expect_column_distinct_count_to_be_greater_than": {"unique_id": "macro.dbt_expectations.test_expect_column_distinct_count_to_be_greater_than", "package_name": "dbt_expectations", "root_path": "C:\\Users\\jessi\\git\\axelar-models\\dbt_packages\\dbt_expectations", "path": "macros\\schema_tests\\aggregate_functions\\expect_column_distinct_count_to_be_greater_than.sql", "original_file_path": "macros\\schema_tests\\aggregate_functions\\expect_column_distinct_count_to_be_greater_than.sql", "name": "test_expect_column_distinct_count_to_be_greater_than", "macro_sql": "{% test expect_column_distinct_count_to_be_greater_than(model,\n                                                                column_name,\n                                                                value,\n                                                                quote_values=False,\n                                                                group_by=None,\n                                                                row_condition=None\n                                                                ) %}\n{% set expression %}\ncount(distinct {{ column_name }}) > {{ value }}\n{% endset %}\n{{ dbt_expectations.expression_is_true(model,\n                                        expression=expression,\n                                        group_by_columns=group_by,\n                                        row_condition=row_condition)\n                                        }}\n{%- endtest -%}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_expectations.expression_is_true"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1671050798.1753705}, "macro.dbt_expectations.test_expect_column_distinct_count_to_be_less_than": {"unique_id": "macro.dbt_expectations.test_expect_column_distinct_count_to_be_less_than", "package_name": "dbt_expectations", "root_path": "C:\\Users\\jessi\\git\\axelar-models\\dbt_packages\\dbt_expectations", "path": "macros\\schema_tests\\aggregate_functions\\expect_column_distinct_count_to_be_less_than.sql", "original_file_path": "macros\\schema_tests\\aggregate_functions\\expect_column_distinct_count_to_be_less_than.sql", "name": "test_expect_column_distinct_count_to_be_less_than", "macro_sql": "{% test expect_column_distinct_count_to_be_less_than(model,\n                                                                column_name,\n                                                                value,\n                                                                quote_values=False,\n                                                                group_by=None,\n                                                                row_condition=None\n                                                                ) %}\n{% set expression %}\ncount(distinct {{ column_name }}) < {{ value }}\n{% endset %}\n{{ dbt_expectations.expression_is_true(model,\n                                        expression=expression,\n                                        group_by_columns=group_by,\n                                        row_condition=row_condition)\n                                        }}\n{%- endtest -%}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_expectations.expression_is_true"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1671050798.17637}, "macro.dbt_expectations.test_expect_column_distinct_count_to_equal": {"unique_id": "macro.dbt_expectations.test_expect_column_distinct_count_to_equal", "package_name": "dbt_expectations", "root_path": "C:\\Users\\jessi\\git\\axelar-models\\dbt_packages\\dbt_expectations", "path": "macros\\schema_tests\\aggregate_functions\\expect_column_distinct_count_to_equal.sql", "original_file_path": "macros\\schema_tests\\aggregate_functions\\expect_column_distinct_count_to_equal.sql", "name": "test_expect_column_distinct_count_to_equal", "macro_sql": "{% test expect_column_distinct_count_to_equal(model,\n                                                    column_name,\n                                                    value,\n                                                    quote_values=False,\n                                                    group_by=None,\n                                                    row_condition=None\n                                                    ) %}\n{% set expression %}\ncount(distinct {{ column_name }}) = {{ value }}\n{% endset %}\n{{ dbt_expectations.expression_is_true(model,\n                                        expression=expression,\n                                        group_by_columns=group_by,\n                                        row_condition=row_condition)\n                                        }}\n{%- endtest -%}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_expectations.expression_is_true"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1671050798.1773798}, "macro.dbt_expectations.test_expect_column_distinct_count_to_equal_other_table": {"unique_id": "macro.dbt_expectations.test_expect_column_distinct_count_to_equal_other_table", "package_name": "dbt_expectations", "root_path": "C:\\Users\\jessi\\git\\axelar-models\\dbt_packages\\dbt_expectations", "path": "macros\\schema_tests\\aggregate_functions\\expect_column_distinct_count_to_equal_other_table.sql", "original_file_path": "macros\\schema_tests\\aggregate_functions\\expect_column_distinct_count_to_equal_other_table.sql", "name": "test_expect_column_distinct_count_to_equal_other_table", "macro_sql": "{% test expect_column_distinct_count_to_equal_other_table(model,\n                                                                compare_model,\n                                                                column_name,\n                                                                compare_column_name,\n                                                                row_condition=None,\n                                                                compare_row_condition=None\n                                                                ) %}\n{%- set expression -%}\ncount(distinct {{ column_name }})\n{%- endset -%}\n{%- set compare_expression -%}\n{%- if compare_column_name -%}\ncount(distinct {{ compare_column_name }})\n{%- else -%}\n{{ expression }}\n{%- endif -%}\n{%- endset -%}\n{{ dbt_expectations.test_equal_expression(\n    model,\n    expression=expression,\n    compare_model=compare_model,\n    compare_expression=compare_expression,\n    row_condition=row_condition,\n    compare_row_condition=compare_row_condition\n) }}\n{%- endtest -%}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_expectations.test_equal_expression"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1671050798.178373}, "macro.dbt_expectations.test_expect_column_distinct_values_to_be_in_set": {"unique_id": "macro.dbt_expectations.test_expect_column_distinct_values_to_be_in_set", "package_name": "dbt_expectations", "root_path": "C:\\Users\\jessi\\git\\axelar-models\\dbt_packages\\dbt_expectations", "path": "macros\\schema_tests\\aggregate_functions\\expect_column_distinct_values_to_be_in_set.sql", "original_file_path": "macros\\schema_tests\\aggregate_functions\\expect_column_distinct_values_to_be_in_set.sql", "name": "test_expect_column_distinct_values_to_be_in_set", "macro_sql": "{% test expect_column_distinct_values_to_be_in_set(model, column_name,\n                                                    value_set,\n                                                    quote_values=False,\n                                                    row_condition=None\n                                                    ) %}\n\nwith all_values as (\n\n    select distinct\n        {{ column_name }} as value_field\n\n    from {{ model }}\n    {% if row_condition %}\n    where {{ row_condition }}\n    {% endif %}\n\n),\nset_values as (\n\n    {% for value in value_set -%}\n    select\n        {% if quote_values -%}\n        '{{ value }}'\n        {%- else -%}\n        {{ value }}\n        {%- endif %} as value_field\n    {% if not loop.last %}union all{% endif %}\n    {% endfor %}\n\n),\nunique_set_values as (\n\n    select distinct value_field\n    from\n        set_values\n\n),\nvalidation_errors as (\n    -- values from the model that are not in the set\n    select\n        v.value_field\n    from\n        all_values v\n        left join\n        unique_set_values s on v.value_field = s.value_field\n    where\n        s.value_field is null\n\n)\n\nselect *\nfrom validation_errors\n\n{% endtest %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1671050798.179286}, "macro.dbt_expectations.test_expect_column_distinct_values_to_contain_set": {"unique_id": "macro.dbt_expectations.test_expect_column_distinct_values_to_contain_set", "package_name": "dbt_expectations", "root_path": "C:\\Users\\jessi\\git\\axelar-models\\dbt_packages\\dbt_expectations", "path": "macros\\schema_tests\\aggregate_functions\\expect_column_distinct_values_to_contain_set.sql", "original_file_path": "macros\\schema_tests\\aggregate_functions\\expect_column_distinct_values_to_contain_set.sql", "name": "test_expect_column_distinct_values_to_contain_set", "macro_sql": "{% test expect_column_distinct_values_to_contain_set(model, column_name,\n                                                            value_set,\n                                                            quote_values=True,\n                                                            row_condition=None\n                                                            ) %}\n\nwith all_values as (\n\n    select distinct\n        {{ column_name }} as value_field\n\n    from {{ model }}\n    {% if row_condition %}\n    where {{ row_condition }}\n    {% endif %}\n\n),\nset_values as (\n\n    {% for value in value_set -%}\n    select\n        {% if quote_values -%}\n        '{{ value }}'\n        {%- else -%}\n        {{ value }}\n        {%- endif %} as value_field\n    {% if not loop.last %}union all{% endif %}\n    {% endfor %}\n\n),\nunique_set_values as (\n\n    select distinct value_field\n    from\n        set_values\n\n),\nvalidation_errors as (\n    -- values in set that are not in the list of values from the model\n    select\n        s.value_field\n    from\n        unique_set_values s\n        left join\n        all_values v on s.value_field = v.value_field\n    where\n        v.value_field is null\n\n)\n\nselect *\nfrom validation_errors\n\n{% endtest %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1671050798.1824343}, "macro.dbt_expectations.test_expect_column_distinct_values_to_equal_set": {"unique_id": "macro.dbt_expectations.test_expect_column_distinct_values_to_equal_set", "package_name": "dbt_expectations", "root_path": "C:\\Users\\jessi\\git\\axelar-models\\dbt_packages\\dbt_expectations", "path": "macros\\schema_tests\\aggregate_functions\\expect_column_distinct_values_to_equal_set.sql", "original_file_path": "macros\\schema_tests\\aggregate_functions\\expect_column_distinct_values_to_equal_set.sql", "name": "test_expect_column_distinct_values_to_equal_set", "macro_sql": "{% test expect_column_distinct_values_to_equal_set(model, column_name,\n                                                            value_set,\n                                                            quote_values=True,\n                                                            row_condition=None\n                                                            ) %}\n\nwith all_values as (\n\n    select distinct\n        {{ column_name }} as column_value\n\n    from {{ model }}\n    {% if row_condition %}\n    where {{ row_condition }}\n    {% endif %}\n\n),\nset_values as (\n\n    {% for value in value_set -%}\n    select\n        {% if quote_values -%}\n        '{{ value }}'\n        {%- else -%}\n        {{ value }}\n        {%- endif %} as value_field\n    {% if not loop.last %}union all{% endif %}\n    {% endfor %}\n\n),\nunique_set_values as (\n\n    select distinct value_field\n    from\n        set_values\n\n),\nvalidation_errors as (\n\n    select\n        *\n    from\n        all_values v\n        full outer join\n        unique_set_values s on v.column_value = s.value_field\n    where\n        v.column_value is null or\n        s.value_field is null\n\n)\n\nselect *\nfrom validation_errors\n\n{% endtest %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1671050798.1834373}, "macro.dbt_expectations.test_expect_column_max_to_be_between": {"unique_id": "macro.dbt_expectations.test_expect_column_max_to_be_between", "package_name": "dbt_expectations", "root_path": "C:\\Users\\jessi\\git\\axelar-models\\dbt_packages\\dbt_expectations", "path": "macros\\schema_tests\\aggregate_functions\\expect_column_max_to_be_between.sql", "original_file_path": "macros\\schema_tests\\aggregate_functions\\expect_column_max_to_be_between.sql", "name": "test_expect_column_max_to_be_between", "macro_sql": "{% test expect_column_max_to_be_between(model, column_name,\n                                                min_value=None,\n                                                max_value=None,\n                                                group_by=None,\n                                                row_condition=None,\n                                                strictly=False\n                                                ) %}\n{% set expression %}\nmax({{ column_name }})\n{% endset %}\n{{ dbt_expectations.expression_between(model,\n                                        expression=expression,\n                                        min_value=min_value,\n                                        max_value=max_value,\n                                        group_by_columns=group_by,\n                                        row_condition=row_condition,\n                                        strictly=strictly\n                                        ) }}\n{% endtest %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_expectations.expression_between"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1671050798.1845284}, "macro.dbt_expectations.test_expect_column_mean_to_be_between": {"unique_id": "macro.dbt_expectations.test_expect_column_mean_to_be_between", "package_name": "dbt_expectations", "root_path": "C:\\Users\\jessi\\git\\axelar-models\\dbt_packages\\dbt_expectations", "path": "macros\\schema_tests\\aggregate_functions\\expect_column_mean_to_be_between.sql", "original_file_path": "macros\\schema_tests\\aggregate_functions\\expect_column_mean_to_be_between.sql", "name": "test_expect_column_mean_to_be_between", "macro_sql": "{% test expect_column_mean_to_be_between(model, column_name,\n                                                    min_value=None,\n                                                    max_value=None,\n                                                    group_by=None,\n                                                    row_condition=None,\n                                                    strictly=False\n                                                    ) %}\n{% set expression %}\navg({{ column_name }})\n{% endset %}\n{{ dbt_expectations.expression_between(model,\n                                        expression=expression,\n                                        min_value=min_value,\n                                        max_value=max_value,\n                                        group_by_columns=group_by,\n                                        row_condition=row_condition,\n                                        strictly=strictly\n                                        ) }}\n{% endtest %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_expectations.expression_between"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1671050798.1865275}, "macro.dbt_expectations.test_expect_column_median_to_be_between": {"unique_id": "macro.dbt_expectations.test_expect_column_median_to_be_between", "package_name": "dbt_expectations", "root_path": "C:\\Users\\jessi\\git\\axelar-models\\dbt_packages\\dbt_expectations", "path": "macros\\schema_tests\\aggregate_functions\\expect_column_median_to_be_between.sql", "original_file_path": "macros\\schema_tests\\aggregate_functions\\expect_column_median_to_be_between.sql", "name": "test_expect_column_median_to_be_between", "macro_sql": "{% test expect_column_median_to_be_between(model, column_name,\n                                                    min_value=None,\n                                                    max_value=None,\n                                                    group_by=None,\n                                                    row_condition=None,\n                                                    strictly=False\n                                                    ) %}\n\n{% set expression %}\n{{ dbt_expectations.median(column_name) }}\n{% endset %}\n{{ dbt_expectations.expression_between(model,\n                                        expression=expression,\n                                        min_value=min_value,\n                                        max_value=max_value,\n                                        group_by_columns=group_by,\n                                        row_condition=row_condition,\n                                        strictly=strictly\n                                        ) }}\n{% endtest %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_expectations.median", "macro.dbt_expectations.expression_between"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1671050798.18752}, "macro.dbt_expectations.test_expect_column_min_to_be_between": {"unique_id": "macro.dbt_expectations.test_expect_column_min_to_be_between", "package_name": "dbt_expectations", "root_path": "C:\\Users\\jessi\\git\\axelar-models\\dbt_packages\\dbt_expectations", "path": "macros\\schema_tests\\aggregate_functions\\expect_column_min_to_be_between.sql", "original_file_path": "macros\\schema_tests\\aggregate_functions\\expect_column_min_to_be_between.sql", "name": "test_expect_column_min_to_be_between", "macro_sql": "{% test expect_column_min_to_be_between(model, column_name,\n                                                    min_value=None,\n                                                    max_value=None,\n                                                    group_by=None,\n                                                    row_condition=None,\n                                                    strictly=False\n                                                    ) %}\n{% set expression %}\nmin({{ column_name }})\n{% endset %}\n{{ dbt_expectations.expression_between(model,\n                                        expression=expression,\n                                        min_value=min_value,\n                                        max_value=max_value,\n                                        group_by_columns=group_by,\n                                        row_condition=row_condition,\n                                        strictly=strictly\n                                        ) }}\n\n{% endtest %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_expectations.expression_between"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1671050798.1885202}, "macro.dbt_expectations.test_expect_column_most_common_value_to_be_in_set": {"unique_id": "macro.dbt_expectations.test_expect_column_most_common_value_to_be_in_set", "package_name": "dbt_expectations", "root_path": "C:\\Users\\jessi\\git\\axelar-models\\dbt_packages\\dbt_expectations", "path": "macros\\schema_tests\\aggregate_functions\\expect_column_most_common_value_to_be_in_set.sql", "original_file_path": "macros\\schema_tests\\aggregate_functions\\expect_column_most_common_value_to_be_in_set.sql", "name": "test_expect_column_most_common_value_to_be_in_set", "macro_sql": "{% test expect_column_most_common_value_to_be_in_set(model, column_name,\n                                                            value_set,\n                                                            top_n,\n                                                            quote_values=False,\n                                                            data_type=\"decimal\",\n                                                            row_condition=None\n                                                            ) -%}\n    {{ adapter.dispatch('test_expect_column_most_common_value_to_be_in_set', 'dbt_expectations') (model, column_name, value_set, top_n, quote_values, data_type, row_condition) }}\n{%- endtest %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_expectations.default__test_expect_column_most_common_value_to_be_in_set"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1671050798.1905346}, "macro.dbt_expectations.default__test_expect_column_most_common_value_to_be_in_set": {"unique_id": "macro.dbt_expectations.default__test_expect_column_most_common_value_to_be_in_set", "package_name": "dbt_expectations", "root_path": "C:\\Users\\jessi\\git\\axelar-models\\dbt_packages\\dbt_expectations", "path": "macros\\schema_tests\\aggregate_functions\\expect_column_most_common_value_to_be_in_set.sql", "original_file_path": "macros\\schema_tests\\aggregate_functions\\expect_column_most_common_value_to_be_in_set.sql", "name": "default__test_expect_column_most_common_value_to_be_in_set", "macro_sql": "{% macro default__test_expect_column_most_common_value_to_be_in_set(model, column_name,\n                                                            value_set,\n                                                            top_n,\n                                                            quote_values,\n                                                            data_type,\n                                                            row_condition\n                                                            ) %}\n\nwith value_counts as (\n\n    select\n        {% if quote_values -%}\n        {{ column_name }}\n        {%- else -%}\n        cast({{ column_name }} as {{ data_type }})\n        {%- endif %} as value_field,\n        count(*) as value_count\n\n    from {{ model }}\n    {% if row_condition %}\n    where {{ row_condition }}\n    {% endif %}\n\n    group by {% if quote_values -%}\n                {{ column_name }}\n            {%- else -%}\n                cast({{ column_name }} as {{ data_type }})\n            {%- endif %}\n\n),\nvalue_counts_ranked as (\n\n    select\n        *,\n        row_number() over(order by value_count desc) as value_count_rank\n    from\n        value_counts\n\n),\nvalue_count_top_n as (\n\n    select\n        value_field\n    from\n        value_counts_ranked\n    where\n        value_count_rank = {{ top_n }}\n\n),\nset_values as (\n\n    {% for value in value_set -%}\n    select\n        {% if quote_values -%}\n        '{{ value }}'\n        {%- else -%}\n        cast({{ value }} as {{ data_type }})\n        {%- endif %} as value_field\n    {% if not loop.last %}union all{% endif %}\n    {% endfor %}\n\n),\nunique_set_values as (\n\n    select distinct value_field\n    from\n        set_values\n\n),\nvalidation_errors as (\n    -- values from the model that are not in the set\n    select\n        value_field\n    from\n        value_count_top_n\n    where\n        value_field not in (select value_field from unique_set_values)\n\n)\n\nselect *\nfrom validation_errors\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1671050798.1915245}, "macro.dbt_expectations.test_expect_column_proportion_of_unique_values_to_be_between": {"unique_id": "macro.dbt_expectations.test_expect_column_proportion_of_unique_values_to_be_between", "package_name": "dbt_expectations", "root_path": "C:\\Users\\jessi\\git\\axelar-models\\dbt_packages\\dbt_expectations", "path": "macros\\schema_tests\\aggregate_functions\\expect_column_proportion_of_unique_values_to_be_between.sql", "original_file_path": "macros\\schema_tests\\aggregate_functions\\expect_column_proportion_of_unique_values_to_be_between.sql", "name": "test_expect_column_proportion_of_unique_values_to_be_between", "macro_sql": "{% test expect_column_proportion_of_unique_values_to_be_between(model, column_name,\n                                                            min_value=None,\n                                                            max_value=None,\n                                                            group_by=None,\n                                                            row_condition=None,\n                                                            strictly=False\n                                                            ) %}\n{% set expression %}\ncount(distinct {{ column_name }})/count({{ column_name }})\n{% endset %}\n{{ dbt_expectations.expression_between(model,\n                                        expression=expression,\n                                        min_value=min_value,\n                                        max_value=max_value,\n                                        group_by_columns=group_by,\n                                        row_condition=row_condition,\n                                        strictly=strictly\n                                        ) }}\n\n{% endtest %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_expectations.expression_between"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1671050798.1924784}, "macro.dbt_expectations.test_expect_column_quantile_values_to_be_between": {"unique_id": "macro.dbt_expectations.test_expect_column_quantile_values_to_be_between", "package_name": "dbt_expectations", "root_path": "C:\\Users\\jessi\\git\\axelar-models\\dbt_packages\\dbt_expectations", "path": "macros\\schema_tests\\aggregate_functions\\expect_column_quantile_values_to_be_between.sql", "original_file_path": "macros\\schema_tests\\aggregate_functions\\expect_column_quantile_values_to_be_between.sql", "name": "test_expect_column_quantile_values_to_be_between", "macro_sql": "{% test expect_column_quantile_values_to_be_between(model, column_name,\n                                                            quantile,\n                                                            min_value=None,\n                                                            max_value=None,\n                                                            group_by=None,\n                                                            row_condition=None,\n                                                            strictly=False\n                                                            ) %}\n\n{% set expression %}\n{{ dbt_expectations.percentile_cont(column_name, quantile) }}\n{% endset %}\n{{ dbt_expectations.expression_between(model,\n                                        expression=expression,\n                                        min_value=min_value,\n                                        max_value=max_value,\n                                        group_by_columns=group_by,\n                                        row_condition=row_condition,\n                                        strictly=strictly\n                                        ) }}\n{% endtest %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_expectations.percentile_cont", "macro.dbt_expectations.expression_between"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1671050798.1935043}, "macro.dbt_expectations.test_expect_column_stdev_to_be_between": {"unique_id": "macro.dbt_expectations.test_expect_column_stdev_to_be_between", "package_name": "dbt_expectations", "root_path": "C:\\Users\\jessi\\git\\axelar-models\\dbt_packages\\dbt_expectations", "path": "macros\\schema_tests\\aggregate_functions\\expect_column_stdev_to_be_between.sql", "original_file_path": "macros\\schema_tests\\aggregate_functions\\expect_column_stdev_to_be_between.sql", "name": "test_expect_column_stdev_to_be_between", "macro_sql": "{% test expect_column_stdev_to_be_between(model, column_name,\n                                                    min_value=None,\n                                                    max_value=None,\n                                                    group_by=None,\n                                                    row_condition=None,\n                                                    strictly=False\n                                                    ) -%}\n    {{ adapter.dispatch('test_expect_column_stdev_to_be_between', 'dbt_expectations') (\n                                                    model, column_name,\n                                                    min_value,\n                                                    max_value,\n                                                    group_by,\n                                                    row_condition,\n                                                    strictly\n                                                    ) }}\n{%- endtest %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_expectations.default__test_expect_column_stdev_to_be_between"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1671050798.1980922}, "macro.dbt_expectations.default__test_expect_column_stdev_to_be_between": {"unique_id": "macro.dbt_expectations.default__test_expect_column_stdev_to_be_between", "package_name": "dbt_expectations", "root_path": "C:\\Users\\jessi\\git\\axelar-models\\dbt_packages\\dbt_expectations", "path": "macros\\schema_tests\\aggregate_functions\\expect_column_stdev_to_be_between.sql", "original_file_path": "macros\\schema_tests\\aggregate_functions\\expect_column_stdev_to_be_between.sql", "name": "default__test_expect_column_stdev_to_be_between", "macro_sql": "{% macro default__test_expect_column_stdev_to_be_between(\n                                                    model, column_name,\n                                                    min_value,\n                                                    max_value,\n                                                    group_by,\n                                                    row_condition,\n                                                    strictly\n                                                    ) %}\n\n{% set expression %}\nstddev({{ column_name }})\n{% endset %}\n{{ dbt_expectations.expression_between(model,\n                                        expression=expression,\n                                        min_value=min_value,\n                                        max_value=max_value,\n                                        group_by_columns=group_by,\n                                        row_condition=row_condition,\n                                        strictly=strictly\n                                        ) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_expectations.expression_between"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1671050798.199088}, "macro.dbt_expectations.test_expect_column_sum_to_be_between": {"unique_id": "macro.dbt_expectations.test_expect_column_sum_to_be_between", "package_name": "dbt_expectations", "root_path": "C:\\Users\\jessi\\git\\axelar-models\\dbt_packages\\dbt_expectations", "path": "macros\\schema_tests\\aggregate_functions\\expect_column_sum_to_be_between.sql", "original_file_path": "macros\\schema_tests\\aggregate_functions\\expect_column_sum_to_be_between.sql", "name": "test_expect_column_sum_to_be_between", "macro_sql": "{% test expect_column_sum_to_be_between(model, column_name,\n                                                min_value=None,\n                                                max_value=None,\n                                                group_by=None,\n                                                row_condition=None,\n                                                strictly=False\n                                                ) %}\n{% set expression %}\nsum({{ column_name }})\n{% endset %}\n{{ dbt_expectations.expression_between(model,\n                                        expression=expression,\n                                        min_value=min_value,\n                                        max_value=max_value,\n                                        group_by_columns=group_by,\n                                        row_condition=row_condition,\n                                        strictly=strictly\n                                        ) }}\n{% endtest %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_expectations.expression_between"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1671050798.2004356}, "macro.dbt_expectations.test_expect_column_unique_value_count_to_be_between": {"unique_id": "macro.dbt_expectations.test_expect_column_unique_value_count_to_be_between", "package_name": "dbt_expectations", "root_path": "C:\\Users\\jessi\\git\\axelar-models\\dbt_packages\\dbt_expectations", "path": "macros\\schema_tests\\aggregate_functions\\expect_column_unique_value_count_to_be_between.sql", "original_file_path": "macros\\schema_tests\\aggregate_functions\\expect_column_unique_value_count_to_be_between.sql", "name": "test_expect_column_unique_value_count_to_be_between", "macro_sql": "{% test expect_column_unique_value_count_to_be_between(model, column_name,\n                                                            min_value=None,\n                                                            max_value=None,\n                                                            group_by=None,\n                                                            row_condition=None,\n                                                            strictly=False\n                                                            ) %}\n{% set expression %}\ncount(distinct {{ column_name }})\n{% endset %}\n{{ dbt_expectations.expression_between(model,\n                                        expression=expression,\n                                        min_value=min_value,\n                                        max_value=max_value,\n                                        group_by_columns=group_by,\n                                        row_condition=row_condition,\n                                        strictly=strictly\n                                        ) }}\n{% endtest %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_expectations.expression_between"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1671050798.202526}, "macro.dbt_expectations.test_expect_column_values_to_be_between": {"unique_id": "macro.dbt_expectations.test_expect_column_values_to_be_between", "package_name": "dbt_expectations", "root_path": "C:\\Users\\jessi\\git\\axelar-models\\dbt_packages\\dbt_expectations", "path": "macros\\schema_tests\\column_values_basic\\expect_column_values_to_be_between.sql", "original_file_path": "macros\\schema_tests\\column_values_basic\\expect_column_values_to_be_between.sql", "name": "test_expect_column_values_to_be_between", "macro_sql": "{% test expect_column_values_to_be_between(model, column_name,\n                                                   min_value=None,\n                                                   max_value=None,\n                                                   row_condition=None,\n                                                   strictly=False\n                                                   ) %}\n\n{% set expression %}\n{{ column_name }}\n{% endset %}\n\n{{ dbt_expectations.expression_between(model,\n                                        expression=expression,\n                                        min_value=min_value,\n                                        max_value=max_value,\n                                        group_by_columns=None,\n                                        row_condition=row_condition,\n                                        strictly=strictly\n                                        ) }}\n\n\n{% endtest %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_expectations.expression_between"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1671050798.2043514}, "macro.dbt_expectations.test_expect_column_values_to_be_decreasing": {"unique_id": "macro.dbt_expectations.test_expect_column_values_to_be_decreasing", "package_name": "dbt_expectations", "root_path": "C:\\Users\\jessi\\git\\axelar-models\\dbt_packages\\dbt_expectations", "path": "macros\\schema_tests\\column_values_basic\\expect_column_values_to_be_decreasing.sql", "original_file_path": "macros\\schema_tests\\column_values_basic\\expect_column_values_to_be_decreasing.sql", "name": "test_expect_column_values_to_be_decreasing", "macro_sql": "{% test expect_column_values_to_be_decreasing(model, column_name,\n                                                   sort_column=None,\n                                                   strictly=True,\n                                                   row_condition=None,\n                                                   group_by=None) %}\n\n{%- set sort_column = column_name if not sort_column else sort_column -%}\n{%- set operator = \"<\" if strictly else \"<=\" %}\nwith all_values as (\n\n    select\n        {{ sort_column }} as sort_column,\n        {%- if group_by -%}\n        {{ group_by | join(\", \") }},\n        {%- endif %}\n        {{ column_name }} as value_field\n    from {{ model }}\n    {% if row_condition %}\n    where {{ row_condition }}\n    {% endif %}\n\n),\nadd_lag_values as (\n\n    select\n        sort_column,\n        value_field,\n        lag(value_field) over\n            {%- if not group_by -%}\n                (order by sort_column)\n            {%- else -%}\n                (partition by {{ group_by | join(\", \") }} order by sort_column)\n            {%- endif  %} as value_field_lag\n    from\n        all_values\n\n),\nvalidation_errors as (\n\n    select\n        *\n    from\n        add_lag_values\n    where\n        value_field_lag is not null\n        and\n        not (value_field {{ operator }} value_field_lag)\n\n)\nselect *\nfrom validation_errors\n{% endtest %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1671050798.2057939}, "macro.dbt_expectations.test_expect_column_values_to_be_increasing": {"unique_id": "macro.dbt_expectations.test_expect_column_values_to_be_increasing", "package_name": "dbt_expectations", "root_path": "C:\\Users\\jessi\\git\\axelar-models\\dbt_packages\\dbt_expectations", "path": "macros\\schema_tests\\column_values_basic\\expect_column_values_to_be_increasing.sql", "original_file_path": "macros\\schema_tests\\column_values_basic\\expect_column_values_to_be_increasing.sql", "name": "test_expect_column_values_to_be_increasing", "macro_sql": "{% test expect_column_values_to_be_increasing(model, column_name,\n                                                   sort_column=None,\n                                                   strictly=True,\n                                                   row_condition=None,\n                                                   group_by=None) %}\n\n{%- set sort_column = column_name if not sort_column else sort_column -%}\n{%- set operator = \">\" if strictly else \">=\" -%}\nwith all_values as (\n\n    select\n        {{ sort_column }} as sort_column,\n        {%- if group_by -%}\n        {{ group_by | join(\", \") }},\n        {%- endif %}\n        {{ column_name }} as value_field\n    from {{ model }}\n    {% if row_condition %}\n    where {{ row_condition }}\n    {% endif %}\n\n),\nadd_lag_values as (\n\n    select\n        sort_column,\n        {%- if group_by -%}\n        {{ group_by | join(\", \") }},\n        {%- endif %}\n        value_field,\n        lag(value_field) over\n            {%- if not group_by -%}\n                (order by sort_column)\n            {%- else -%}\n                (partition by {{ group_by | join(\", \") }} order by sort_column)\n            {%- endif  %} as value_field_lag\n    from\n        all_values\n\n),\nvalidation_errors as (\n    select\n        *\n    from\n        add_lag_values\n    where\n        value_field_lag is not null\n        and\n        not (value_field {{ operator }} value_field_lag)\n\n)\nselect *\nfrom validation_errors\n{% endtest %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1671050798.2077837}, "macro.dbt_expectations.test_expect_column_values_to_be_in_set": {"unique_id": "macro.dbt_expectations.test_expect_column_values_to_be_in_set", "package_name": "dbt_expectations", "root_path": "C:\\Users\\jessi\\git\\axelar-models\\dbt_packages\\dbt_expectations", "path": "macros\\schema_tests\\column_values_basic\\expect_column_values_to_be_in_set.sql", "original_file_path": "macros\\schema_tests\\column_values_basic\\expect_column_values_to_be_in_set.sql", "name": "test_expect_column_values_to_be_in_set", "macro_sql": "{% test expect_column_values_to_be_in_set(model, column_name,\n                                                   value_set,\n                                                   quote_values=True,\n                                                   row_condition=None\n                                                   ) %}\n\nwith all_values as (\n\n    select\n        {{ column_name }} as value_field\n\n    from {{ model }}\n    {% if row_condition %}\n    where {{ row_condition }}\n    {% endif %}\n\n),\nset_values as (\n\n    {% for value in value_set -%}\n    select\n        {% if quote_values -%}\n        cast('{{ value }}' as {{ type_string() }})\n        {%- else -%}\n        {{ value }}\n        {%- endif %} as value_field\n    {% if not loop.last %}union all{% endif %}\n    {% endfor %}\n),\nvalidation_errors as (\n    -- values from the model that are not in the set\n    select\n        v.value_field\n    from\n        all_values v\n        left join\n        set_values s on v.value_field = s.value_field\n    where\n        s.value_field is null\n\n)\n\nselect *\nfrom validation_errors\n\n{% endtest %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.type_string"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1671050798.209703}, "macro.dbt_expectations.test_expect_column_values_to_be_in_type_list": {"unique_id": "macro.dbt_expectations.test_expect_column_values_to_be_in_type_list", "package_name": "dbt_expectations", "root_path": "C:\\Users\\jessi\\git\\axelar-models\\dbt_packages\\dbt_expectations", "path": "macros\\schema_tests\\column_values_basic\\expect_column_values_to_be_in_type_list.sql", "original_file_path": "macros\\schema_tests\\column_values_basic\\expect_column_values_to_be_in_type_list.sql", "name": "test_expect_column_values_to_be_in_type_list", "macro_sql": "{%- test expect_column_values_to_be_in_type_list(model, column_name, column_type_list) -%}\n{%- if execute -%}\n\n    {%- set column_name = column_name | upper -%}\n    {%- set columns_in_relation = adapter.get_columns_in_relation(model) -%}\n    {%- set column_type_list = column_type_list| map(\"upper\") | list -%}\n    with relation_columns as (\n\n        {% for column in columns_in_relation %}\n        select\n            cast('{{ column.name | upper }}' as {{ type_string() }}) as relation_column,\n            cast('{{ column.dtype | upper }}' as {{ type_string() }}) as relation_column_type\n        {% if not loop.last %}union all{% endif %}\n        {% endfor %}\n    ),\n    test_data as (\n\n        select\n            *\n        from\n            relation_columns\n        where\n            relation_column = '{{ column_name }}'\n            and\n            relation_column_type not in ('{{ column_type_list | join(\"', '\") }}')\n\n    )\n    select *\n    from test_data\n\n{%- endif -%}\n{%- endtest -%}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.type_string"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1671050798.2107022}, "macro.dbt_expectations.test_expect_column_values_to_be_null": {"unique_id": "macro.dbt_expectations.test_expect_column_values_to_be_null", "package_name": "dbt_expectations", "root_path": "C:\\Users\\jessi\\git\\axelar-models\\dbt_packages\\dbt_expectations", "path": "macros\\schema_tests\\column_values_basic\\expect_column_values_to_be_null.sql", "original_file_path": "macros\\schema_tests\\column_values_basic\\expect_column_values_to_be_null.sql", "name": "test_expect_column_values_to_be_null", "macro_sql": "{% test expect_column_values_to_be_null(model, column_name, row_condition=None) %}\n\n{% set expression = column_name ~ \" is null\" %}\n\n{{ dbt_expectations.expression_is_true(model,\n                                        expression=expression,\n                                        group_by_columns=None,\n                                        row_condition=row_condition\n                                        )\n                                        }}\n{% endtest %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_expectations.expression_is_true"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1671050798.212077}, "macro.dbt_expectations.test_expect_column_values_to_be_of_type": {"unique_id": "macro.dbt_expectations.test_expect_column_values_to_be_of_type", "package_name": "dbt_expectations", "root_path": "C:\\Users\\jessi\\git\\axelar-models\\dbt_packages\\dbt_expectations", "path": "macros\\schema_tests\\column_values_basic\\expect_column_values_to_be_of_type.sql", "original_file_path": "macros\\schema_tests\\column_values_basic\\expect_column_values_to_be_of_type.sql", "name": "test_expect_column_values_to_be_of_type", "macro_sql": "{%- test expect_column_values_to_be_of_type(model, column_name, column_type) -%}\n{{ dbt_expectations.test_expect_column_values_to_be_in_type_list(model, column_name, [column_type]) }}\n{%- endtest -%}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_expectations.test_expect_column_values_to_be_in_type_list"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1671050798.2128935}, "macro.dbt_expectations.test_expect_column_values_to_be_unique": {"unique_id": "macro.dbt_expectations.test_expect_column_values_to_be_unique", "package_name": "dbt_expectations", "root_path": "C:\\Users\\jessi\\git\\axelar-models\\dbt_packages\\dbt_expectations", "path": "macros\\schema_tests\\column_values_basic\\expect_column_values_to_be_unique.sql", "original_file_path": "macros\\schema_tests\\column_values_basic\\expect_column_values_to_be_unique.sql", "name": "test_expect_column_values_to_be_unique", "macro_sql": "{% test expect_column_values_to_be_unique(model, column_name, row_condition=None) %}\n{{ dbt_expectations.test_expect_compound_columns_to_be_unique(model, [column_name], row_condition=row_condition) }}\n{% endtest %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_expectations.test_expect_compound_columns_to_be_unique"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1671050798.2150018}, "macro.dbt_expectations.test_expect_column_values_to_have_consistent_casing": {"unique_id": "macro.dbt_expectations.test_expect_column_values_to_have_consistent_casing", "package_name": "dbt_expectations", "root_path": "C:\\Users\\jessi\\git\\axelar-models\\dbt_packages\\dbt_expectations", "path": "macros\\schema_tests\\column_values_basic\\expect_column_values_to_have_consistent_casing.sql", "original_file_path": "macros\\schema_tests\\column_values_basic\\expect_column_values_to_have_consistent_casing.sql", "name": "test_expect_column_values_to_have_consistent_casing", "macro_sql": "{% test expect_column_values_to_have_consistent_casing(model, column_name, display_inconsistent_columns=False) %}\n\nwith test_data as (\n\n    select\n        distinct {{ column_name }} as distinct_values\n    from\n        {{ model }}\n\n ),\n {% if display_inconsistent_columns %}\n validation_errors as (\n\n    select\n        lower(distinct_values) as inconsistent_columns,\n        count(distinct_values) as set_count_case_insensitive\n    from\n        test_data\n    group by 1\n    having\n        count(distinct_values) > 1\n\n )\n select * from validation_errors\n {% else %}\n validation_errors as (\n\n    select\n        count(1) as set_count,\n        count(distinct lower(distinct_values)) as set_count_case_insensitive\n    from\n        test_data\n\n )\n select *\n from\n    validation_errors\n where\n    set_count != set_count_case_insensitive\n {% endif %}\n {%- endtest -%}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1671050798.2160785}, "macro.dbt_expectations.test_expect_column_values_to_not_be_in_set": {"unique_id": "macro.dbt_expectations.test_expect_column_values_to_not_be_in_set", "package_name": "dbt_expectations", "root_path": "C:\\Users\\jessi\\git\\axelar-models\\dbt_packages\\dbt_expectations", "path": "macros\\schema_tests\\column_values_basic\\expect_column_values_to_not_be_in_set.sql", "original_file_path": "macros\\schema_tests\\column_values_basic\\expect_column_values_to_not_be_in_set.sql", "name": "test_expect_column_values_to_not_be_in_set", "macro_sql": "{% test expect_column_values_to_not_be_in_set(model, column_name,\n                                                   value_set,\n                                                   quote_values=True,\n                                                   row_condition=None\n                                                   ) %}\n\nwith all_values as (\n\n    select\n        {{ column_name }} as value_field\n\n    from {{ model }}\n    {% if row_condition %}\n    where {{ row_condition }}\n    {% endif %}\n\n),\nset_values as (\n\n    {% for value in value_set -%}\n    select\n        {% if quote_values -%}\n        cast('{{ value }}' as {{ type_string() }})\n        {%- else -%}\n        {{ value }}\n        {%- endif %} as value_field\n    {% if not loop.last %}union all{% endif %}\n    {% endfor %}\n),\nvalidation_errors as (\n    -- values from the model that match the set\n    select\n        v.value_field\n    from\n        all_values v\n        join\n        set_values s on v.value_field = s.value_field\n\n)\n\nselect *\nfrom validation_errors\n\n{% endtest %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.type_string"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1671050798.2180781}, "macro.dbt_expectations.test_expect_column_values_to_not_be_null": {"unique_id": "macro.dbt_expectations.test_expect_column_values_to_not_be_null", "package_name": "dbt_expectations", "root_path": "C:\\Users\\jessi\\git\\axelar-models\\dbt_packages\\dbt_expectations", "path": "macros\\schema_tests\\column_values_basic\\expect_column_values_to_not_be_null.sql", "original_file_path": "macros\\schema_tests\\column_values_basic\\expect_column_values_to_not_be_null.sql", "name": "test_expect_column_values_to_not_be_null", "macro_sql": "{% test expect_column_values_to_not_be_null(model, column_name, row_condition=None) %}\n\n{% set expression = column_name ~ \" is not null\" %}\n\n{{ dbt_expectations.expression_is_true(model,\n                                        expression=expression,\n                                        group_by_columns=None,\n                                        row_condition=row_condition\n                                        )\n                                        }}\n{% endtest %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_expectations.expression_is_true"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1671050798.2190776}, "macro.dbt_expectations._get_metric_expression": {"unique_id": "macro.dbt_expectations._get_metric_expression", "package_name": "dbt_expectations", "root_path": "C:\\Users\\jessi\\git\\axelar-models\\dbt_packages\\dbt_expectations", "path": "macros\\schema_tests\\distributional\\expect_column_values_to_be_within_n_moving_stdevs.sql", "original_file_path": "macros\\schema_tests\\distributional\\expect_column_values_to_be_within_n_moving_stdevs.sql", "name": "_get_metric_expression", "macro_sql": "{%- macro _get_metric_expression(metric_column, take_logs) -%}\n\n{%- if take_logs %}\n{%- set expr = \"nullif(\" ~ metric_column ~ \", 0)\" -%}\ncoalesce({{ dbt_expectations.log_natural(expr) }}, 0)\n{%- else -%}\ncoalesce({{ metric_column }}, 0)\n{%- endif %}\n\n{%- endmacro -%}\n\n", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_expectations.log_natural"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1671050798.2230778}, "macro.dbt_expectations.test_expect_column_values_to_be_within_n_moving_stdevs": {"unique_id": "macro.dbt_expectations.test_expect_column_values_to_be_within_n_moving_stdevs", "package_name": "dbt_expectations", "root_path": "C:\\Users\\jessi\\git\\axelar-models\\dbt_packages\\dbt_expectations", "path": "macros\\schema_tests\\distributional\\expect_column_values_to_be_within_n_moving_stdevs.sql", "original_file_path": "macros\\schema_tests\\distributional\\expect_column_values_to_be_within_n_moving_stdevs.sql", "name": "test_expect_column_values_to_be_within_n_moving_stdevs", "macro_sql": "{% test expect_column_values_to_be_within_n_moving_stdevs(model,\n                                  column_name,\n                                  date_column_name,\n                                  group_by=None,\n                                  period='day',\n                                  lookback_periods=1,\n                                  trend_periods=7,\n                                  test_periods=14,\n                                  sigma_threshold=3,\n                                  sigma_threshold_upper=None,\n                                  sigma_threshold_lower=None,\n                                  take_diffs=true,\n                                  take_logs=true\n                                ) -%}\n    {{ adapter.dispatch('test_expect_column_values_to_be_within_n_moving_stdevs', 'dbt_expectations') (model,\n                                  column_name,\n                                  date_column_name,\n                                  group_by,\n                                  period,\n                                  lookback_periods,\n                                  trend_periods,\n                                  test_periods,\n                                  sigma_threshold,\n                                  sigma_threshold_upper,\n                                  sigma_threshold_lower,\n                                  take_diffs,\n                                  take_logs\n                                ) }}\n{%- endtest %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_expectations.default__test_expect_column_values_to_be_within_n_moving_stdevs"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1671050798.224079}, "macro.dbt_expectations.default__test_expect_column_values_to_be_within_n_moving_stdevs": {"unique_id": "macro.dbt_expectations.default__test_expect_column_values_to_be_within_n_moving_stdevs", "package_name": "dbt_expectations", "root_path": "C:\\Users\\jessi\\git\\axelar-models\\dbt_packages\\dbt_expectations", "path": "macros\\schema_tests\\distributional\\expect_column_values_to_be_within_n_moving_stdevs.sql", "original_file_path": "macros\\schema_tests\\distributional\\expect_column_values_to_be_within_n_moving_stdevs.sql", "name": "default__test_expect_column_values_to_be_within_n_moving_stdevs", "macro_sql": "{% macro default__test_expect_column_values_to_be_within_n_moving_stdevs(model,\n                                  column_name,\n                                  date_column_name,\n                                  group_by,\n                                  period,\n                                  lookback_periods,\n                                  trend_periods,\n                                  test_periods,\n                                  sigma_threshold,\n                                  sigma_threshold_upper,\n                                  sigma_threshold_lower,\n                                  take_diffs,\n                                  take_logs\n                                ) %}\n\n{%- set sigma_threshold_upper = sigma_threshold_upper if sigma_threshold_upper else sigma_threshold -%}\n{%- set sigma_threshold_lower = sigma_threshold_lower if sigma_threshold_lower else -1 * sigma_threshold -%}\n{%- set partition_by = \"partition by \" ~ (group_by | join(\",\")) if group_by -%}\n{%- set group_by_length = (group_by | length ) if group_by else 0 -%}\n\nwith metric_values as (\n\n    with grouped_metric_values as (\n\n        select\n            {{ date_trunc(period, date_column_name) }} as metric_period,\n            {{ group_by | join(\",\") ~ \",\" if group_by }}\n            sum({{ column_name }}) as agg_metric_value\n        from\n            {{ model }}\n        {{  dbt_expectations.group_by(1 + group_by_length) }}\n\n    )\n    {%- if take_diffs %}\n    , grouped_metric_values_with_priors as (\n\n        select\n            *,\n            lag(agg_metric_value, {{ lookback_periods }}) over(\n                {{ partition_by }}\n                order by metric_period) as prior_agg_metric_value\n    from\n        grouped_metric_values d\n\n    )\n    select\n        *,\n        {{ dbt_expectations._get_metric_expression(\"agg_metric_value\", take_logs) }}\n        -\n        {{ dbt_expectations._get_metric_expression(\"prior_agg_metric_value\", take_logs) }}\n        as metric_test_value\n    from\n        grouped_metric_values_with_priors d\n\n    {%- else %}\n\n    select\n        *,\n        {{ dbt_expectations._get_metric_expression(\"agg_metric_value\", take_logs) }}\n        as metric_test_value\n    from\n        grouped_metric_values\n\n    {%- endif %}\n\n),\nmetric_moving_calcs as (\n\n    select\n        *,\n        avg(metric_test_value)\n            over({{ partition_by }}\n                    order by metric_period rows\n                    between {{ trend_periods }} preceding and 1 preceding) as metric_test_rolling_average,\n        stddev(metric_test_value)\n            over({{ partition_by }}\n                    order by metric_period rows\n                    between {{ trend_periods }} preceding and 1 preceding) as metric_test_rolling_stddev\n    from\n        metric_values\n\n),\nmetric_sigma as (\n\n    select\n        *,\n        (metric_test_value - metric_test_rolling_average) as metric_test_delta,\n        (metric_test_value - metric_test_rolling_average)/\n            nullif(metric_test_rolling_stddev, 0) as metric_test_sigma\n    from\n        metric_moving_calcs\n\n)\nselect\n    *\nfrom\n    metric_sigma\nwhere\n\n    metric_period >= cast(\n            {{ dateadd(period, -test_periods, date_trunc(period, dbt_date.now())) }}\n            as {{ type_timestamp() }})\n    and\n    metric_period < {{ date_trunc(period, dbt_date.now()) }}\n    and\n\n    not (\n        metric_test_sigma >= {{ sigma_threshold_lower }} and\n        metric_test_sigma <= {{ sigma_threshold_upper }}\n    )\n{%- endmacro -%}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.date_trunc", "macro.dbt_expectations.group_by", "macro.dbt_expectations._get_metric_expression", "macro.dbt_utils.dateadd", "macro.dbt_date.now", "macro.dbt_expectations.type_timestamp"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1671050798.2270784}, "macro.dbt_expectations.test_expect_column_values_to_be_within_n_stdevs": {"unique_id": "macro.dbt_expectations.test_expect_column_values_to_be_within_n_stdevs", "package_name": "dbt_expectations", "root_path": "C:\\Users\\jessi\\git\\axelar-models\\dbt_packages\\dbt_expectations", "path": "macros\\schema_tests\\distributional\\expect_column_values_to_be_within_n_stdevs.sql", "original_file_path": "macros\\schema_tests\\distributional\\expect_column_values_to_be_within_n_stdevs.sql", "name": "test_expect_column_values_to_be_within_n_stdevs", "macro_sql": "{% test expect_column_values_to_be_within_n_stdevs(model,\n                                  column_name,\n                                  group_by=None,\n                                  sigma_threshold=3\n                                ) -%}\n    {{\n        adapter.dispatch('test_expect_column_values_to_be_within_n_stdevs', 'dbt_expectations') (\n            model, column_name, group_by, sigma_threshold\n        )\n    }}\n{%- endtest %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_expectations.default__test_expect_column_values_to_be_within_n_stdevs"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1671050798.228727}, "macro.dbt_expectations.default__test_expect_column_values_to_be_within_n_stdevs": {"unique_id": "macro.dbt_expectations.default__test_expect_column_values_to_be_within_n_stdevs", "package_name": "dbt_expectations", "root_path": "C:\\Users\\jessi\\git\\axelar-models\\dbt_packages\\dbt_expectations", "path": "macros\\schema_tests\\distributional\\expect_column_values_to_be_within_n_stdevs.sql", "original_file_path": "macros\\schema_tests\\distributional\\expect_column_values_to_be_within_n_stdevs.sql", "name": "default__test_expect_column_values_to_be_within_n_stdevs", "macro_sql": "{% macro default__test_expect_column_values_to_be_within_n_stdevs(model,\n                                  column_name,\n                                  group_by,\n                                  sigma_threshold\n                                ) %}\n\nwith metric_values as (\n\n    select\n        {{ group_by | join(\",\") ~ \",\" if group_by }}\n        sum({{ column_name }}) as {{ column_name }}\n    from\n        {{ model }}\n    {% if group_by -%}\n    {{  dbt_expectations.group_by(group_by | length) }}\n    {%- endif %}\n\n),\nmetric_values_with_statistics as (\n\n    select\n        *,\n        avg({{ column_name }}) over() as {{ column_name }}_average,\n        stddev({{ column_name }}) over() as {{ column_name }}_stddev\n    from\n        metric_values\n\n),\nmetric_values_z_scores as (\n\n    select\n        *,\n        ({{ column_name }} - {{ column_name }}_average)/\n            nullif({{ column_name }}_stddev, 0) as {{ column_name }}_sigma\n    from\n        metric_values_with_statistics\n\n)\nselect\n    *\nfrom\n    metric_values_z_scores\nwhere\n    abs({{ column_name }}_sigma) > {{ sigma_threshold }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_expectations.group_by"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1671050798.2297733}, "macro.dbt_expectations.test_expect_row_values_to_have_data_for_every_n_datepart": {"unique_id": "macro.dbt_expectations.test_expect_row_values_to_have_data_for_every_n_datepart", "package_name": "dbt_expectations", "root_path": "C:\\Users\\jessi\\git\\axelar-models\\dbt_packages\\dbt_expectations", "path": "macros\\schema_tests\\distributional\\expect_row_values_to_have_data_for_every_n_datepart.sql", "original_file_path": "macros\\schema_tests\\distributional\\expect_row_values_to_have_data_for_every_n_datepart.sql", "name": "test_expect_row_values_to_have_data_for_every_n_datepart", "macro_sql": "{%- test expect_row_values_to_have_data_for_every_n_datepart(model,\n                                                            date_col,\n                                                            date_part=\"day\",\n                                                            interval=None,\n                                                            row_condition=None,\n                                                            exclusion_condition=None,\n                                                            test_start_date=None,\n                                                            test_end_date=None) -%}\n{% if not execute %}\n    {{ return('') }}\n{% endif %}\n\n{% if not test_start_date or not test_end_date %}\n    {% set sql %}\n\n        select\n            min({{ date_col }}) as start_{{ date_part }},\n            max({{ date_col }}) as end_{{ date_part }}\n        from {{ model }}\n        {% if row_condition %}\n        where {{ row_condition }}\n        {% endif %}\n\n    {% endset %}\n\n    {%- set dr = run_query(sql) -%}\n    {%- set db_start_date = dr.columns[0].values()[0].strftime('%Y-%m-%d') -%}\n    {%- set db_end_date = dr.columns[1].values()[0].strftime('%Y-%m-%d') -%}\n\n{% endif %}\n\n{% if not test_start_date %}\n{% set start_date = db_start_date %}\n{% else %}\n{% set start_date = test_start_date %}\n{% endif %}\n\n\n{% if not test_end_date %}\n{% set end_date = db_end_date %}\n{% else %}\n{% set end_date = test_end_date %}\n{% endif %}\nwith base_dates as (\n\n    {{ dbt_date.get_base_dates(start_date=start_date, end_date=end_date, datepart=date_part) }}\n    {% if interval %}\n    {#\n        Filter the date spine created above down to the interval granularity using a modulo operation.\n        The number of date_parts after the start_date divided by the integer interval will produce no remainder for the desired intervals,\n        e.g. for 2-day interval from a starting Jan 1, 2020:\n            params: start_date = '2020-01-01', date_part = 'day', interval = 2\n            date spine created above: [2020-01-01, 2020-01-02, 2020-01-03, 2020-01-04, 2020-01-05, ...]\n            The first parameter to the `mod` function would be the number of days between the start_date and the spine date, i.e. [0, 1, 2, 3, 4 ...]\n            The second parameter to the `mod` function would be the integer interval, i.e. 2\n            This modulo operation produces the following remainders: [0, 1, 0, 1, 0, ...]\n            Filtering the spine only where this remainder == 0 will return a spine with every other day as desired, i.e. [2020-01-01, 2020-01-03, 2020-01-05, ...]\n    #}\n    where mod(\n            cast({{ datediff(\"'\" ~ start_date ~ \"'\", 'date_' ~ date_part, date_part) }} as {{ type_int() }}),\n            cast({{interval}} as {{ type_int() }})\n        ) = 0\n    {% endif %}\n\n),\nmodel_data as (\n\n    select\n    {% if not interval %}\n\n        cast({{ date_trunc(date_part, date_col) }} as {{ dbt_expectations.type_datetime() }}) as date_{{ date_part }},\n\n    {% else %}\n        {#\n            Use a modulo operator to determine the number of intervals that a date_col is away from the interval-date spine\n            and subtracts that amount to effectively slice each date_col record into its corresponding spine bucket,\n            e.g. given a date_col of with records [2020-01-01, 2020-01-02, 2020-01-03, 2020-01-11, 2020-01-12]\n                if we want to slice these dates into their 2-day buckets starting Jan 1, 2020 (start_date = '2020-01-01', date_part='day', interval=2),\n                the modulo operation described above will produce these remainders: [0, 1, 0, 0, 1]\n                subtracting that number of days from the observations will produce records [2020-01-01, 2020-01-01, 2020-01-03, 2020-01-11, 2020-01-11],\n                all of which align with records from the interval-date spine\n        #}\n        {{dateadd(\n            date_part,\n            \"mod(\n                cast(\" ~ datediff(\"'\" ~ start_date ~ \"'\", date_col, date_part) ~ \" as \" ~ type_int() ~ \" ),\n                cast(\" ~ interval ~ \" as  \" ~ type_int() ~ \" )\n            ) * (-1)\",\n            \"cast( \" ~ date_trunc(date_part, date_col) ~ \" as  \" ~ dbt_expectations.type_datetime() ~ \")\"\n        )}} as date_{{ date_part }},\n\n    {% endif %}\n\n        count(*) as row_cnt\n    from\n        {{ model }} f\n    {% if row_condition %}\n    where {{ row_condition }}\n    {% endif %}\n    group by\n        date_{{date_part}}\n\n),\n\nfinal as (\n\n    select\n        cast(d.date_{{ date_part }} as {{ dbt_expectations.type_datetime() }}) as date_{{ date_part }},\n        case when f.date_{{ date_part }} is null then true else false end as is_missing,\n        coalesce(f.row_cnt, 0) as row_cnt\n    from\n        base_dates d\n        left join\n        model_data f on cast(d.date_{{ date_part }} as {{ dbt_expectations.type_datetime() }}) = f.date_{{ date_part }}\n)\nselect\n    *\nfrom final\nwhere row_cnt = 0\n{% if exclusion_condition %}\n  and {{ exclusion_condition }}\n{% endif %}\n{%- endtest -%}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.run_query", "macro.dbt_date.get_base_dates", "macro.dbt_utils.datediff", "macro.dbt_utils.type_int", "macro.dbt_utils.date_trunc", "macro.dbt_expectations.type_datetime", "macro.dbt_utils.dateadd"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1671050798.237441}, "macro.dbt_expectations.test_expect_column_pair_values_A_to_be_greater_than_B": {"unique_id": "macro.dbt_expectations.test_expect_column_pair_values_A_to_be_greater_than_B", "package_name": "dbt_expectations", "root_path": "C:\\Users\\jessi\\git\\axelar-models\\dbt_packages\\dbt_expectations", "path": "macros\\schema_tests\\multi-column\\expect_column_pair_values_A_to_be_greater_than_B.sql", "original_file_path": "macros\\schema_tests\\multi-column\\expect_column_pair_values_A_to_be_greater_than_B.sql", "name": "test_expect_column_pair_values_A_to_be_greater_than_B", "macro_sql": "{% test expect_column_pair_values_A_to_be_greater_than_B(model,\n                                                                column_A,\n                                                                column_B,\n                                                                or_equal=False,\n                                                                row_condition=None\n                                                                ) %}\n\n{% set operator = \">=\" if or_equal else \">\" %}\n{% set expression = column_A ~ \" \" ~ operator ~ \" \" ~ column_B %}\n\n{{ dbt_expectations.expression_is_true(model,\n                                        expression=expression,\n                                        group_by_columns=None,\n                                        row_condition=row_condition\n                                        )\n                                        }}\n\n{% endtest %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_expectations.expression_is_true"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1671050798.2380402}, "macro.dbt_expectations.test_expect_column_pair_values_to_be_equal": {"unique_id": "macro.dbt_expectations.test_expect_column_pair_values_to_be_equal", "package_name": "dbt_expectations", "root_path": "C:\\Users\\jessi\\git\\axelar-models\\dbt_packages\\dbt_expectations", "path": "macros\\schema_tests\\multi-column\\expect_column_pair_values_to_be_equal.sql", "original_file_path": "macros\\schema_tests\\multi-column\\expect_column_pair_values_to_be_equal.sql", "name": "test_expect_column_pair_values_to_be_equal", "macro_sql": "{% test expect_column_pair_values_to_be_equal(model,\n                                                        column_A,\n                                                        column_B,\n                                                        row_condition=None\n                                                        ) %}\n\n{% set operator = \"=\" %}\n{% set expression = column_A ~ \" \" ~ operator ~ \" \" ~ column_B %}\n\n{{ dbt_expectations.expression_is_true(model,\n                                        expression=expression,\n                                        group_by_columns=None,\n                                        row_condition=row_condition\n                                        )\n                                        }}\n\n{% endtest %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_expectations.expression_is_true"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1671050798.2401254}, "macro.dbt_expectations.test_expect_column_pair_values_to_be_in_set": {"unique_id": "macro.dbt_expectations.test_expect_column_pair_values_to_be_in_set", "package_name": "dbt_expectations", "root_path": "C:\\Users\\jessi\\git\\axelar-models\\dbt_packages\\dbt_expectations", "path": "macros\\schema_tests\\multi-column\\expect_column_pair_values_to_be_in_set.sql", "original_file_path": "macros\\schema_tests\\multi-column\\expect_column_pair_values_to_be_in_set.sql", "name": "test_expect_column_pair_values_to_be_in_set", "macro_sql": "{% test expect_column_pair_values_to_be_in_set(model,\n                                                        column_A,\n                                                        column_B,\n                                                        value_pairs_set,\n                                                        row_condition=None\n                                                        ) %}\n\n{% set expression %}\n{% for pair in value_pairs_set %}\n{%- if (pair | length) == 2 %}\n({{ column_A }} = {{ pair[0] }} and {{ column_B }} = {{ pair[1] }}){% if not loop.last %} or {% endif %}\n{% else %}\n{{ exceptions.raise_compiler_error(\n        \"`value_pairs_set` argument for expect_column_pair_values_to_be_in_set test cannot have more than 2 item per element.\n        Got: '\" ~ pair ~ \"'.'\"\n    ) }}\n{% endif %}\n{% endfor %}\n{% endset %}\n{{ dbt_expectations.expression_is_true(model,\n                                        expression=expression,\n                                        group_by_columns=None,\n                                        row_condition=row_condition\n                                        )\n                                        }}\n\n{% endtest %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_expectations.expression_is_true"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1671050798.2421205}, "macro.dbt_expectations.test_expect_compound_columns_to_be_unique": {"unique_id": "macro.dbt_expectations.test_expect_compound_columns_to_be_unique", "package_name": "dbt_expectations", "root_path": "C:\\Users\\jessi\\git\\axelar-models\\dbt_packages\\dbt_expectations", "path": "macros\\schema_tests\\multi-column\\expect_compound_columns_to_be_unique.sql", "original_file_path": "macros\\schema_tests\\multi-column\\expect_compound_columns_to_be_unique.sql", "name": "test_expect_compound_columns_to_be_unique", "macro_sql": "{% test expect_compound_columns_to_be_unique(model,\n                                                column_list,\n                                                quote_columns=False,\n                                                ignore_row_if=\"all_values_are_missing\",\n                                                row_condition=None\n                                                ) %}\n{% if not column_list %}\n    {{ exceptions.raise_compiler_error(\n        \"`column_list` must be specified as a list of columns. Got: '\" ~ column_list ~\"'.'\"\n    ) }}\n{% endif %}\n\n{% if not quote_columns %}\n    {%- set columns=column_list %}\n{% elif quote_columns %}\n    {%- set columns=[] %}\n        {% for column in column_list -%}\n            {% set columns = columns.append( adapter.quote(column) ) %}\n        {%- endfor %}\n{% else %}\n    {{ exceptions.raise_compiler_error(\n        \"`quote_columns` argument for expect_compound_columns_to_be_unique test must be one of [True, False] Got: '\" ~ quote_columns ~\"'.'\"\n    ) }}\n{% endif %}\n\n{%- set row_condition_ext -%}\n\n    {%- if row_condition  %}\n    {{ row_condition }} and\n    {% endif -%}\n\n    {{ dbt_expectations.ignore_row_if_expression(ignore_row_if, columns) }}\n\n{%- endset -%}\n\nwith validation_errors as (\n\n    select\n        {% for column in columns -%}\n        {{ column }}{% if not loop.last %},{% endif %}\n        {%- endfor %}\n    from {{ model }}\n    where\n        1=1\n    {%- if row_condition_ext %}\n        and {{ row_condition_ext }}\n    {% endif %}\n    group by\n        {% for column in columns -%}\n        {{ column }}{% if not loop.last %},{% endif %}\n        {%- endfor %}\n    having count(*) > 1\n\n)\nselect * from validation_errors\n{% endtest %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_expectations.ignore_row_if_expression"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1671050798.2461207}, "macro.dbt_expectations.test_expect_multicolumn_sum_to_equal": {"unique_id": "macro.dbt_expectations.test_expect_multicolumn_sum_to_equal", "package_name": "dbt_expectations", "root_path": "C:\\Users\\jessi\\git\\axelar-models\\dbt_packages\\dbt_expectations", "path": "macros\\schema_tests\\multi-column\\expect_multicolumn_sum_to_equal.sql", "original_file_path": "macros\\schema_tests\\multi-column\\expect_multicolumn_sum_to_equal.sql", "name": "test_expect_multicolumn_sum_to_equal", "macro_sql": "{% test expect_multicolumn_sum_to_equal(model,\n                                                column_list,\n                                                sum_total,\n                                                group_by=None,\n                                                row_condition=None\n                                                ) %}\n\n{% set expression %}\n{% for column in column_list %}\nsum({{ column }}){% if not loop.last %} + {% endif %}\n{% endfor %} = {{ sum_total }}\n{% endset %}\n\n{{ dbt_expectations.expression_is_true(model,\n                                        expression=expression,\n                                        group_by_columns=group_by,\n                                        row_condition=row_condition\n                                        )\n                                        }}\n\n{% endtest %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_expectations.expression_is_true"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1671050798.2471206}, "macro.dbt_expectations.test_expect_select_column_values_to_be_unique_within_record": {"unique_id": "macro.dbt_expectations.test_expect_select_column_values_to_be_unique_within_record", "package_name": "dbt_expectations", "root_path": "C:\\Users\\jessi\\git\\axelar-models\\dbt_packages\\dbt_expectations", "path": "macros\\schema_tests\\multi-column\\expect_select_column_values_to_be_unique_within_record.sql", "original_file_path": "macros\\schema_tests\\multi-column\\expect_select_column_values_to_be_unique_within_record.sql", "name": "test_expect_select_column_values_to_be_unique_within_record", "macro_sql": "{% test expect_select_column_values_to_be_unique_within_record(model,\n                                                    column_list,\n                                                    quote_columns=False,\n                                                    ignore_row_if=\"all_values_are_missing\",\n                                                    row_condition=None\n                                                    )  -%}\n    {{ adapter.dispatch('test_expect_select_column_values_to_be_unique_within_record', 'dbt_expectations') (model, column_list, quote_columns, ignore_row_if, row_condition) }}\n{%- endtest %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_expectations.default__test_expect_select_column_values_to_be_unique_within_record"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1671050798.250121}, "macro.dbt_expectations.default__test_expect_select_column_values_to_be_unique_within_record": {"unique_id": "macro.dbt_expectations.default__test_expect_select_column_values_to_be_unique_within_record", "package_name": "dbt_expectations", "root_path": "C:\\Users\\jessi\\git\\axelar-models\\dbt_packages\\dbt_expectations", "path": "macros\\schema_tests\\multi-column\\expect_select_column_values_to_be_unique_within_record.sql", "original_file_path": "macros\\schema_tests\\multi-column\\expect_select_column_values_to_be_unique_within_record.sql", "name": "default__test_expect_select_column_values_to_be_unique_within_record", "macro_sql": "{% macro default__test_expect_select_column_values_to_be_unique_within_record(model,\n                                                    column_list,\n                                                    quote_columns,\n                                                    ignore_row_if,\n                                                    row_condition\n                                                    ) %}\n\n{% if not quote_columns %}\n    {%- set columns=column_list %}\n{% elif quote_columns %}\n    {%- set columns=[] %}\n        {% for column in column_list -%}\n            {% set columns = columns.append( adapter.quote(column) ) %}\n        {%- endfor %}\n{% else %}\n    {{ exceptions.raise_compiler_error(\n        \"`quote_columns` argument for unique_combination_of_columns test must be one of [True, False] Got: '\" ~ quote_columns ~\"'.'\"\n    ) }}\n{% endif %}\n\n{%- set row_condition_ext -%}\n\n    {%- if row_condition  %}\n    {{ row_condition }} and\n    {% endif -%}\n\n    {{ dbt_expectations.ignore_row_if_expression(ignore_row_if, columns) }}\n\n{%- endset -%}\n\nwith column_values as (\n\n    select\n        row_number() over(order by 1) as row_index,\n        {% for column in columns -%}\n        {{ column }}{% if not loop.last %},{% endif %}\n        {%- endfor %}\n    from {{ model }}\n    where\n        1=1\n    {%- if row_condition_ext %}\n        and {{ row_condition_ext }}\n    {% endif %}\n\n),\nunpivot_columns as (\n\n    {% for column in columns %}\n    select row_index, '{{ column }}' as column_name, {{ column }} as column_value from column_values\n    {% if not loop.last %}union all{% endif %}\n    {% endfor %}\n),\nvalidation_errors as (\n\n    select\n        row_index,\n        count(distinct column_value) as column_values\n    from unpivot_columns\n    group by 1\n    having count(distinct column_value) < {{ columns | length }}\n\n)\nselect * from validation_errors\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_expectations.ignore_row_if_expression"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1671050798.2521203}, "macro.dbt_expectations.test_expect_column_values_to_match_like_pattern": {"unique_id": "macro.dbt_expectations.test_expect_column_values_to_match_like_pattern", "package_name": "dbt_expectations", "root_path": "C:\\Users\\jessi\\git\\axelar-models\\dbt_packages\\dbt_expectations", "path": "macros\\schema_tests\\string_matching\\expect_column_values_to_match_like_pattern.sql", "original_file_path": "macros\\schema_tests\\string_matching\\expect_column_values_to_match_like_pattern.sql", "name": "test_expect_column_values_to_match_like_pattern", "macro_sql": "{% test expect_column_values_to_match_like_pattern(model, column_name,\n                                                    like_pattern,\n                                                    row_condition=None\n                                                    ) %}\n\n{% set expression = dbt_expectations._get_like_pattern_expression(column_name, like_pattern, positive=True) %}\n\n{{ dbt_expectations.expression_is_true(model,\n                                        expression=expression,\n                                        group_by_columns=None,\n                                        row_condition=row_condition\n                                        )\n                                        }}\n\n{% endtest %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_expectations._get_like_pattern_expression", "macro.dbt_expectations.expression_is_true"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1671050798.2531211}, "macro.dbt_expectations.test_expect_column_values_to_match_like_pattern_list": {"unique_id": "macro.dbt_expectations.test_expect_column_values_to_match_like_pattern_list", "package_name": "dbt_expectations", "root_path": "C:\\Users\\jessi\\git\\axelar-models\\dbt_packages\\dbt_expectations", "path": "macros\\schema_tests\\string_matching\\expect_column_values_to_match_like_pattern_list.sql", "original_file_path": "macros\\schema_tests\\string_matching\\expect_column_values_to_match_like_pattern_list.sql", "name": "test_expect_column_values_to_match_like_pattern_list", "macro_sql": "{% test expect_column_values_to_match_like_pattern_list(model, column_name,\n                                                    like_pattern_list,\n                                                    match_on=\"any\",\n                                                    row_condition=None\n                                                    ) %}\n\n{% set expression %}\n    {% for like_pattern in like_pattern_list %}\n    {{ dbt_expectations._get_like_pattern_expression(column_name, like_pattern, positive=True) }}\n    {%- if not loop.last %}\n    {{ \" and \" if match_on == \"all\" else \" or \"}}\n    {% endif -%}\n    {% endfor %}\n{% endset %}\n\n{{ dbt_expectations.expression_is_true(model,\n                                        expression=expression,\n                                        group_by_columns=None,\n                                        row_condition=row_condition\n                                        )\n                                        }}\n\n{% endtest %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_expectations._get_like_pattern_expression", "macro.dbt_expectations.expression_is_true"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1671050798.2551215}, "macro.dbt_expectations.test_expect_column_values_to_match_regex": {"unique_id": "macro.dbt_expectations.test_expect_column_values_to_match_regex", "package_name": "dbt_expectations", "root_path": "C:\\Users\\jessi\\git\\axelar-models\\dbt_packages\\dbt_expectations", "path": "macros\\schema_tests\\string_matching\\expect_column_values_to_match_regex.sql", "original_file_path": "macros\\schema_tests\\string_matching\\expect_column_values_to_match_regex.sql", "name": "test_expect_column_values_to_match_regex", "macro_sql": "{% test expect_column_values_to_match_regex(model, column_name,\n                                                    regex,\n                                                    row_condition=None,\n                                                    is_raw=False\n                                                    ) %}\n\n{% set expression %}\n{{ dbt_expectations.regexp_instr(column_name, regex, is_raw=is_raw) }} > 0\n{% endset %}\n\n{{ dbt_expectations.expression_is_true(model,\n                                        expression=expression,\n                                        group_by_columns=None,\n                                        row_condition=row_condition\n                                        )\n                                        }}\n\n{% endtest %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_expectations.regexp_instr", "macro.dbt_expectations.expression_is_true"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1671050798.2561207}, "macro.dbt_expectations.test_expect_column_values_to_match_regex_list": {"unique_id": "macro.dbt_expectations.test_expect_column_values_to_match_regex_list", "package_name": "dbt_expectations", "root_path": "C:\\Users\\jessi\\git\\axelar-models\\dbt_packages\\dbt_expectations", "path": "macros\\schema_tests\\string_matching\\expect_column_values_to_match_regex_list.sql", "original_file_path": "macros\\schema_tests\\string_matching\\expect_column_values_to_match_regex_list.sql", "name": "test_expect_column_values_to_match_regex_list", "macro_sql": "{% test expect_column_values_to_match_regex_list(model, column_name,\n                                                    regex_list,\n                                                    match_on=\"any\",\n                                                    row_condition=None,\n                                                    is_raw=False\n                                                    ) %}\n\n{% set expression %}\n    {% for regex in regex_list %}\n    {{ dbt_expectations.regexp_instr(column_name, regex, is_raw=is_raw) }} > 0\n    {%- if not loop.last %}\n    {{ \" and \" if match_on == \"all\" else \" or \"}}\n    {% endif -%}\n    {% endfor %}\n{% endset %}\n\n{{ dbt_expectations.expression_is_true(model,\n                                        expression=expression,\n                                        group_by_columns=None,\n                                        row_condition=row_condition\n                                        )\n                                        }}\n\n{% endtest %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_expectations.regexp_instr", "macro.dbt_expectations.expression_is_true"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1671050798.2581203}, "macro.dbt_expectations.test_expect_column_values_to_not_match_like_pattern": {"unique_id": "macro.dbt_expectations.test_expect_column_values_to_not_match_like_pattern", "package_name": "dbt_expectations", "root_path": "C:\\Users\\jessi\\git\\axelar-models\\dbt_packages\\dbt_expectations", "path": "macros\\schema_tests\\string_matching\\expect_column_values_to_not_match_like_pattern.sql", "original_file_path": "macros\\schema_tests\\string_matching\\expect_column_values_to_not_match_like_pattern.sql", "name": "test_expect_column_values_to_not_match_like_pattern", "macro_sql": "{% test expect_column_values_to_not_match_like_pattern(model, column_name,\n                                                    like_pattern,\n                                                    row_condition=None\n                                                    ) %}\n\n{% set expression = dbt_expectations._get_like_pattern_expression(column_name, like_pattern, positive=False) %}\n\n{{ dbt_expectations.expression_is_true(model,\n                                        expression=expression,\n                                        group_by_columns=None,\n                                        row_condition=row_condition\n                                        )\n                                        }}\n\n{% endtest %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_expectations._get_like_pattern_expression", "macro.dbt_expectations.expression_is_true"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1671050798.2591205}, "macro.dbt_expectations.test_expect_column_values_to_not_match_like_pattern_list": {"unique_id": "macro.dbt_expectations.test_expect_column_values_to_not_match_like_pattern_list", "package_name": "dbt_expectations", "root_path": "C:\\Users\\jessi\\git\\axelar-models\\dbt_packages\\dbt_expectations", "path": "macros\\schema_tests\\string_matching\\expect_column_values_to_not_match_like_pattern_list.sql", "original_file_path": "macros\\schema_tests\\string_matching\\expect_column_values_to_not_match_like_pattern_list.sql", "name": "test_expect_column_values_to_not_match_like_pattern_list", "macro_sql": "{% test expect_column_values_to_not_match_like_pattern_list(model, column_name,\n                                                    like_pattern_list,\n                                                    match_on=\"any\",\n                                                    row_condition=None\n                                                    ) %}\n\n{% set expression %}\n    {% for like_pattern in like_pattern_list %}\n    {{ dbt_expectations._get_like_pattern_expression(column_name, like_pattern, positive=False) }}\n    {%- if not loop.last %}\n    {{ \" and \" if match_on == \"all\" else \" or \"}}\n    {% endif -%}\n    {% endfor %}\n{% endset %}\n\n{{ dbt_expectations.expression_is_true(model,\n                                        expression=expression,\n                                        group_by_columns=None,\n                                        row_condition=row_condition\n                                        )\n                                        }}\n\n{% endtest %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_expectations._get_like_pattern_expression", "macro.dbt_expectations.expression_is_true"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1671050798.2611206}, "macro.dbt_expectations.test_expect_column_values_to_not_match_regex": {"unique_id": "macro.dbt_expectations.test_expect_column_values_to_not_match_regex", "package_name": "dbt_expectations", "root_path": "C:\\Users\\jessi\\git\\axelar-models\\dbt_packages\\dbt_expectations", "path": "macros\\schema_tests\\string_matching\\expect_column_values_to_not_match_regex.sql", "original_file_path": "macros\\schema_tests\\string_matching\\expect_column_values_to_not_match_regex.sql", "name": "test_expect_column_values_to_not_match_regex", "macro_sql": "{% test expect_column_values_to_not_match_regex(model, column_name,\n                                                    regex,\n                                                    row_condition=None,\n                                                    is_raw=False\n                                                    ) %}\n\n{% set expression %}\n{{ dbt_expectations.regexp_instr(column_name, regex, is_raw=is_raw) }} = 0\n{% endset %}\n\n{{ dbt_expectations.expression_is_true(model,\n                                        expression=expression,\n                                        group_by_columns=None,\n                                        row_condition=row_condition\n                                        )\n                                        }}\n\n{% endtest %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_expectations.regexp_instr", "macro.dbt_expectations.expression_is_true"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1671050798.2623532}, "macro.dbt_expectations.test_expect_column_values_to_not_match_regex_list": {"unique_id": "macro.dbt_expectations.test_expect_column_values_to_not_match_regex_list", "package_name": "dbt_expectations", "root_path": "C:\\Users\\jessi\\git\\axelar-models\\dbt_packages\\dbt_expectations", "path": "macros\\schema_tests\\string_matching\\expect_column_values_to_not_match_regex_list.sql", "original_file_path": "macros\\schema_tests\\string_matching\\expect_column_values_to_not_match_regex_list.sql", "name": "test_expect_column_values_to_not_match_regex_list", "macro_sql": "{% test expect_column_values_to_not_match_regex_list(model, column_name,\n                                                    regex_list,\n                                                    match_on=\"any\",\n                                                    row_condition=None,\n                                                    is_raw=False\n                                                    ) %}\n\n{% set expression %}\n{% for regex in regex_list %}\n{{ dbt_expectations.regexp_instr(column_name, regex, is_raw=is_raw) }} = 0\n{%- if not loop.last %}\n{{ \" and \" if match_on == \"all\" else \" or \"}}\n{% endif -%}\n{% endfor %}\n{% endset %}\n\n{{ dbt_expectations.expression_is_true(model,\n                                        expression=expression,\n                                        group_by_columns=None,\n                                        row_condition=row_condition\n                                        )\n                                        }}\n\n{% endtest %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_expectations.regexp_instr", "macro.dbt_expectations.expression_is_true"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1671050798.2645924}, "macro.dbt_expectations.test_expect_column_value_lengths_to_be_between": {"unique_id": "macro.dbt_expectations.test_expect_column_value_lengths_to_be_between", "package_name": "dbt_expectations", "root_path": "C:\\Users\\jessi\\git\\axelar-models\\dbt_packages\\dbt_expectations", "path": "macros\\schema_tests\\string_matching\\expect_column_value_lengths_to_be_between.sql", "original_file_path": "macros\\schema_tests\\string_matching\\expect_column_value_lengths_to_be_between.sql", "name": "test_expect_column_value_lengths_to_be_between", "macro_sql": "{% test expect_column_value_lengths_to_be_between(model, column_name,\n                                                         min_value=None,\n                                                         max_value=None,\n                                                         row_condition=None,\n                                                         strictly=False\n                                                      ) %}\n{% set expression %}\n{{ length(column_name) }}\n{% endset %}\n\n{{ dbt_expectations.expression_between(model,\n                                        expression=expression,\n                                        min_value=min_value,\n                                        max_value=max_value,\n                                        group_by_columns=None,\n                                        row_condition=row_condition,\n                                        strictly=strictly\n                                        ) }}\n\n{% endtest %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.length", "macro.dbt_expectations.expression_between"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1671050798.2655692}, "macro.dbt_expectations.test_expect_column_value_lengths_to_equal": {"unique_id": "macro.dbt_expectations.test_expect_column_value_lengths_to_equal", "package_name": "dbt_expectations", "root_path": "C:\\Users\\jessi\\git\\axelar-models\\dbt_packages\\dbt_expectations", "path": "macros\\schema_tests\\string_matching\\expect_column_value_lengths_to_equal.sql", "original_file_path": "macros\\schema_tests\\string_matching\\expect_column_value_lengths_to_equal.sql", "name": "test_expect_column_value_lengths_to_equal", "macro_sql": "{% test expect_column_value_lengths_to_equal(model, column_name,\n                                                    value,\n                                                    row_condition=None\n                                                    ) %}\n\n{% set expression = length(column_name) ~ \" = \" ~ value %}\n\n{{ dbt_expectations.expression_is_true(model,\n                                        expression=expression,\n                                        group_by_columns=None,\n                                        row_condition=row_condition\n                                        )\n                                        }}\n\n{% endtest %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.length", "macro.dbt_expectations.expression_is_true"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1671050798.2665894}, "macro.dbt_expectations._get_like_pattern_expression": {"unique_id": "macro.dbt_expectations._get_like_pattern_expression", "package_name": "dbt_expectations", "root_path": "C:\\Users\\jessi\\git\\axelar-models\\dbt_packages\\dbt_expectations", "path": "macros\\schema_tests\\string_matching\\_get_like_pattern_expression.sql", "original_file_path": "macros\\schema_tests\\string_matching\\_get_like_pattern_expression.sql", "name": "_get_like_pattern_expression", "macro_sql": "{% macro _get_like_pattern_expression(column_name, like_pattern, positive) %}\n{{ column_name }} {{ \"not\" if not positive else \"\" }} like '{{ like_pattern }}'\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1671050798.2675607}, "macro.dbt_expectations.test_expect_column_to_exist": {"unique_id": "macro.dbt_expectations.test_expect_column_to_exist", "package_name": "dbt_expectations", "root_path": "C:\\Users\\jessi\\git\\axelar-models\\dbt_packages\\dbt_expectations", "path": "macros\\schema_tests\\table_shape\\expect_column_to_exist.sql", "original_file_path": "macros\\schema_tests\\table_shape\\expect_column_to_exist.sql", "name": "test_expect_column_to_exist", "macro_sql": "{%- test expect_column_to_exist(model, column_name, column_index=None, transform=\"upper\") -%}\n{%- if execute -%}\n\n    {%- set column_name = column_name | map(transform) | join -%}\n    {%- set relation_column_names = dbt_expectations._get_column_list(model, transform) -%}\n\n    {%- set matching_column_index = relation_column_names.index(column_name) if column_name in relation_column_names else -1 %}\n\n    {%- if column_index -%}\n\n        {%- set column_index_0 = column_index - 1 if column_index > 0 else 0 -%}\n\n        {%- set column_index_matches = true if matching_column_index == column_index_0 else false %}\n\n    {%- else -%}\n\n        {%- set column_index_matches = true -%}\n\n    {%- endif %}\n\n    with test_data as (\n\n        select\n            cast('{{ column_name }}' as {{ type_string() }}) as column_name,\n            {{ matching_column_index }} as matching_column_index,\n            {{ column_index_matches }} as column_index_matches\n\n    )\n    select *\n    from test_data\n    where\n        not(matching_column_index >= 0 and column_index_matches)\n\n{%- endif -%}\n{%- endtest -%}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_expectations._get_column_list", "macro.dbt_utils.type_string"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1671050798.270588}, "macro.dbt_expectations.test_expect_grouped_row_values_to_have_recent_data": {"unique_id": "macro.dbt_expectations.test_expect_grouped_row_values_to_have_recent_data", "package_name": "dbt_expectations", "root_path": "C:\\Users\\jessi\\git\\axelar-models\\dbt_packages\\dbt_expectations", "path": "macros\\schema_tests\\table_shape\\expect_grouped_row_values_to_have_recent_data.sql", "original_file_path": "macros\\schema_tests\\table_shape\\expect_grouped_row_values_to_have_recent_data.sql", "name": "test_expect_grouped_row_values_to_have_recent_data", "macro_sql": "{% test expect_grouped_row_values_to_have_recent_data(model,\n                                                        group_by,\n                                                        timestamp_column,\n                                                        datepart,\n                                                        interval,\n                                                        row_condition=None) %}\n\n {{ adapter.dispatch('test_expect_grouped_row_values_to_have_recent_data', 'dbt_expectations') (model,\n                                                                                                group_by,\n                                                                                                timestamp_column,\n                                                                                                datepart,\n                                                                                                interval,\n                                                                                                row_condition) }}\n\n{% endtest %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_expectations.default__test_expect_grouped_row_values_to_have_recent_data"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1671050798.2726278}, "macro.dbt_expectations.default__test_expect_grouped_row_values_to_have_recent_data": {"unique_id": "macro.dbt_expectations.default__test_expect_grouped_row_values_to_have_recent_data", "package_name": "dbt_expectations", "root_path": "C:\\Users\\jessi\\git\\axelar-models\\dbt_packages\\dbt_expectations", "path": "macros\\schema_tests\\table_shape\\expect_grouped_row_values_to_have_recent_data.sql", "original_file_path": "macros\\schema_tests\\table_shape\\expect_grouped_row_values_to_have_recent_data.sql", "name": "default__test_expect_grouped_row_values_to_have_recent_data", "macro_sql": "{% macro default__test_expect_grouped_row_values_to_have_recent_data(model,\n                                                                        group_by,\n                                                                        timestamp_column,\n                                                                        datepart,\n                                                                        interval,\n                                                                        row_condition) %}\nwith latest_grouped_timestamps as (\n\n    select\n        {{ group_by | join(\",\") ~ \",\" if group_by }}\n        max(1) as join_key,\n        max(cast({{ timestamp_column }} as {{ type_timestamp() }})) as latest_timestamp_column\n    from\n        {{ model }}\n    where\n        -- to exclude erroneous future dates\n        cast({{ timestamp_column }} as {{ type_timestamp() }}) <= {{ dbt_date.now() }}\n        {% if row_condition %}\n        and {{ row_condition }}\n        {% endif %}\n\n    {% if group_by -%}\n    {{  dbt_expectations.group_by(group_by | length) }}\n    {%- endif %}\n),\ntotal_row_counts as (\n\n    select\n        {{ group_by | join(\",\") ~ \",\" if group_by }}\n        max(1) as join_key,\n        count(*) as row_count\n    from\n        latest_grouped_timestamps\n    {% if group_by -%}\n    {{  dbt_expectations.group_by(group_by | length) }}\n    {%- endif %}\n\n\n),\noutdated_grouped_timestamps as (\n\n    select *\n    from\n        latest_grouped_timestamps\n    where\n        -- are the max timestamps per group older than the specified cutoff?\n        latest_timestamp_column <\n            cast(\n                {{ dateadd(datepart, interval * -1, dbt_date.now()) }}\n                as {{ type_timestamp() }}\n            )\n\n),\nvalidation_errors as (\n\n    select\n        r.row_count,\n        t.*\n    from\n        total_row_counts r\n        left join\n        outdated_grouped_timestamps t\n        on\n            {% for g in group_by %}\n            r.{{ g }} = t.{{ g }} and\n            {% endfor %}\n            r.join_key = t.join_key\n    where\n        -- fail if either no rows were returned due to row_condition,\n        -- or the recency test returned failed rows\n        r.row_count = 0\n        or\n        t.join_key is not null\n\n)\nselect * from validation_errors\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_expectations.type_timestamp", "macro.dbt_date.now", "macro.dbt_expectations.group_by", "macro.dbt_utils.dateadd"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1671050798.2746294}, "macro.dbt_expectations.test_expect_row_values_to_have_recent_data": {"unique_id": "macro.dbt_expectations.test_expect_row_values_to_have_recent_data", "package_name": "dbt_expectations", "root_path": "C:\\Users\\jessi\\git\\axelar-models\\dbt_packages\\dbt_expectations", "path": "macros\\schema_tests\\table_shape\\expect_row_values_to_have_recent_data.sql", "original_file_path": "macros\\schema_tests\\table_shape\\expect_row_values_to_have_recent_data.sql", "name": "test_expect_row_values_to_have_recent_data", "macro_sql": "{% test expect_row_values_to_have_recent_data(model,\n                                                column_name,\n                                                datepart,\n                                                interval,\n                                                row_condition=None) %}\n\n {{ adapter.dispatch('test_expect_row_values_to_have_recent_data', 'dbt_expectations') (model,\n                                                                                        column_name,\n                                                                                        datepart,\n                                                                                        interval,\n                                                                                        row_condition) }}\n\n{% endtest %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_expectations.default__test_expect_row_values_to_have_recent_data"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1671050798.2765503}, "macro.dbt_expectations.default__test_expect_row_values_to_have_recent_data": {"unique_id": "macro.dbt_expectations.default__test_expect_row_values_to_have_recent_data", "package_name": "dbt_expectations", "root_path": "C:\\Users\\jessi\\git\\axelar-models\\dbt_packages\\dbt_expectations", "path": "macros\\schema_tests\\table_shape\\expect_row_values_to_have_recent_data.sql", "original_file_path": "macros\\schema_tests\\table_shape\\expect_row_values_to_have_recent_data.sql", "name": "default__test_expect_row_values_to_have_recent_data", "macro_sql": "{% macro default__test_expect_row_values_to_have_recent_data(model, column_name, datepart, interval, row_condition) %}\n{%- set default_start_date = '1970-01-01' -%}\nwith max_recency as (\n\n    select max(cast({{ column_name }} as {{ type_timestamp() }})) as max_timestamp\n    from\n        {{ model }}\n    where\n        -- to exclude erroneous future dates\n        cast({{ column_name }} as {{ type_timestamp() }}) <= {{ dbt_date.now() }}\n        {% if row_condition %}\n        and {{ row_condition }}\n        {% endif %}\n)\nselect\n    *\nfrom\n    max_recency\nwhere\n    -- if the row_condition excludes all rows, we need to compare against a default date\n    -- to avoid false negatives\n    coalesce(max_timestamp, cast('{{ default_start_date }}' as {{ type_timestamp() }}))\n        <\n        cast({{ dateadd(datepart, interval * -1, dbt_date.now()) }} as {{ type_timestamp() }})\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_expectations.type_timestamp", "macro.dbt_date.now", "macro.dbt_utils.dateadd"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1671050798.2776318}, "macro.dbt_expectations.test_expect_table_columns_to_contain_set": {"unique_id": "macro.dbt_expectations.test_expect_table_columns_to_contain_set", "package_name": "dbt_expectations", "root_path": "C:\\Users\\jessi\\git\\axelar-models\\dbt_packages\\dbt_expectations", "path": "macros\\schema_tests\\table_shape\\expect_table_columns_to_contain_set.sql", "original_file_path": "macros\\schema_tests\\table_shape\\expect_table_columns_to_contain_set.sql", "name": "test_expect_table_columns_to_contain_set", "macro_sql": "{%- test expect_table_columns_to_contain_set(model, column_list, transform=\"upper\") -%}\n{%- if execute -%}\n    {%- set column_list = column_list | map(transform) | list -%}\n    {%- set relation_column_names = dbt_expectations._get_column_list(model, transform) -%}\n    {%- set matching_columns = dbt_expectations._list_intersect(column_list, relation_column_names) -%}\n    with relation_columns as (\n\n        {% for col_name in relation_column_names %}\n        select cast('{{ col_name }}' as {{ type_string() }}) as relation_column\n        {% if not loop.last %}union all{% endif %}\n        {% endfor %}\n    ),\n    input_columns as (\n\n        {% for col_name in column_list %}\n        select cast('{{ col_name }}' as {{ type_string() }}) as input_column\n        {% if not loop.last %}union all{% endif %}\n        {% endfor %}\n    )\n    select *\n    from\n        input_columns i\n        left join\n        relation_columns r on r.relation_column = i.input_column\n    where\n        -- catch any column in input list that is not in the list of table columns\n        r.relation_column is null\n{%- endif -%}\n{%- endtest -%}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_expectations._get_column_list", "macro.dbt_expectations._list_intersect", "macro.dbt_utils.type_string"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1671050798.2809334}, "macro.dbt_expectations.test_expect_table_columns_to_match_ordered_list": {"unique_id": "macro.dbt_expectations.test_expect_table_columns_to_match_ordered_list", "package_name": "dbt_expectations", "root_path": "C:\\Users\\jessi\\git\\axelar-models\\dbt_packages\\dbt_expectations", "path": "macros\\schema_tests\\table_shape\\expect_table_columns_to_match_ordered_list.sql", "original_file_path": "macros\\schema_tests\\table_shape\\expect_table_columns_to_match_ordered_list.sql", "name": "test_expect_table_columns_to_match_ordered_list", "macro_sql": "{%- test expect_table_columns_to_match_ordered_list(model, column_list, transform=\"upper\") -%}\n{%- if execute -%}\n    {%- set column_list = column_list | map(transform) | list -%}\n    {%- set relation_column_names = dbt_expectations._get_column_list(model, transform) -%}\n    {%- set matching_columns = dbt_expectations._list_intersect(column_list, relation_column_names) -%}\n    with relation_columns as (\n\n        {% for col_name in relation_column_names %}\n        select\n            {{ loop.index }} as relation_column_idx,\n            cast('{{ col_name }}' as {{ type_string() }}) as relation_column\n        {% if not loop.last %}union all{% endif %}\n        {% endfor %}\n    ),\n    input_columns as (\n\n        {% for col_name in column_list %}\n        select\n            {{ loop.index }} as input_column_idx,\n            cast('{{ col_name }}' as {{ type_string() }}) as input_column\n        {% if not loop.last %}union all{% endif %}\n        {% endfor %}\n    )\n    select *\n    from\n        relation_columns r\n        full outer join\n        input_columns i on r.relation_column = i.input_column and r.relation_column_idx = i.input_column_idx\n    where\n        -- catch any column in input list that is not in the sequence of table columns\n        -- or any table column that is not in the input sequence\n        r.relation_column is null or\n        i.input_column is null\n\n{%- endif -%}\n{%- endtest -%}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_expectations._get_column_list", "macro.dbt_expectations._list_intersect", "macro.dbt_utils.type_string"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1671050798.282934}, "macro.dbt_expectations.test_expect_table_columns_to_match_set": {"unique_id": "macro.dbt_expectations.test_expect_table_columns_to_match_set", "package_name": "dbt_expectations", "root_path": "C:\\Users\\jessi\\git\\axelar-models\\dbt_packages\\dbt_expectations", "path": "macros\\schema_tests\\table_shape\\expect_table_columns_to_match_set.sql", "original_file_path": "macros\\schema_tests\\table_shape\\expect_table_columns_to_match_set.sql", "name": "test_expect_table_columns_to_match_set", "macro_sql": "{%- test expect_table_columns_to_match_set(model, column_list, transform=\"upper\") -%}\n{%- if execute -%}\n    {%- set column_list = column_list | map(transform) | list -%}\n    {%- set relation_column_names = dbt_expectations._get_column_list(model, transform) -%}\n    {%- set matching_columns = dbt_expectations._list_intersect(column_list, relation_column_names) -%}\n    with relation_columns as (\n\n        {% for col_name in relation_column_names %}\n        select cast('{{ col_name }}' as {{ type_string() }}) as relation_column\n        {% if not loop.last %}union all{% endif %}\n        {% endfor %}\n    ),\n    input_columns as (\n\n        {% for col_name in column_list %}\n        select cast('{{ col_name }}' as {{ type_string() }}) as input_column\n        {% if not loop.last %}union all{% endif %}\n        {% endfor %}\n    )\n    select *\n    from\n        relation_columns r\n        full outer join\n        input_columns i on r.relation_column = i.input_column\n    where\n        -- catch any column in input list that is not in the list of table columns\n        -- or any table column that is not in the input list\n        r.relation_column is null or\n        i.input_column is null\n\n{%- endif -%}\n{%- endtest -%}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_expectations._get_column_list", "macro.dbt_expectations._list_intersect", "macro.dbt_utils.type_string"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1671050798.290255}, "macro.dbt_expectations.test_expect_table_columns_to_not_contain_set": {"unique_id": "macro.dbt_expectations.test_expect_table_columns_to_not_contain_set", "package_name": "dbt_expectations", "root_path": "C:\\Users\\jessi\\git\\axelar-models\\dbt_packages\\dbt_expectations", "path": "macros\\schema_tests\\table_shape\\expect_table_columns_to_not_contain_set.sql", "original_file_path": "macros\\schema_tests\\table_shape\\expect_table_columns_to_not_contain_set.sql", "name": "test_expect_table_columns_to_not_contain_set", "macro_sql": "{%- test expect_table_columns_to_not_contain_set(model, column_list, transform=\"upper\") -%}\n{%- if execute -%}\n    {%- set column_list = column_list | map(transform) | list -%}\n    {%- set relation_column_names = dbt_expectations._get_column_list(model, transform) -%}\n    {%- set matching_columns = dbt_expectations._list_intersect(column_list, relation_column_names) -%}\n    with relation_columns as (\n\n        {% for col_name in relation_column_names %}\n        select cast('{{ col_name }}' as {{ type_string() }}) as relation_column\n        {% if not loop.last %}union all{% endif %}\n        {% endfor %}\n    ),\n    input_columns as (\n\n        {% for col_name in column_list %}\n        select cast('{{ col_name }}' as {{ type_string() }}) as input_column\n        {% if not loop.last %}union all{% endif %}\n        {% endfor %}\n    )\n    -- catch any column in input list that is in the list of table columns\n    select *\n    from\n        input_columns i\n        inner join\n        relation_columns r on r.relation_column = i.input_column\n\n{%- endif -%}\n{%- endtest -%}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_expectations._get_column_list", "macro.dbt_expectations._list_intersect", "macro.dbt_utils.type_string"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1671050798.2932568}, "macro.dbt_expectations.test_expect_table_column_count_to_be_between": {"unique_id": "macro.dbt_expectations.test_expect_table_column_count_to_be_between", "package_name": "dbt_expectations", "root_path": "C:\\Users\\jessi\\git\\axelar-models\\dbt_packages\\dbt_expectations", "path": "macros\\schema_tests\\table_shape\\expect_table_column_count_to_be_between.sql", "original_file_path": "macros\\schema_tests\\table_shape\\expect_table_column_count_to_be_between.sql", "name": "test_expect_table_column_count_to_be_between", "macro_sql": "{%- test expect_table_column_count_to_be_between(model,\n                                                        min_value=None,\n                                                        max_value=None\n                                                        ) -%}\n{%- if min_value is none and max_value is none -%}\n{{ exceptions.raise_compiler_error(\n    \"You have to provide either a min_value, max_value or both.\"\n) }}\n{%- endif -%}\n{%- if execute -%}\n{%- set number_actual_columns = (adapter.get_columns_in_relation(model) | length) -%}\n\n{%- set expression %}\n( 1=1\n{%- if min_value %} and number_actual_columns >= min_value{% endif %}\n{%- if max_value %} and number_actual_columns <= max_value{% endif %}\n)\n{% endset -%}\n\nwith test_data as (\n\n    select\n        {{ number_actual_columns }} as number_actual_columns,\n        {{ min_value if min_value else 0 }} as min_value,\n        {{ max_value if max_value else 0 }} as max_value\n\n)\nselect *\nfrom test_data\nwhere\n    not {{ expression }}\n{%- endif -%}\n{%- endtest -%}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1671050798.2952476}, "macro.dbt_expectations.test_expect_table_column_count_to_equal": {"unique_id": "macro.dbt_expectations.test_expect_table_column_count_to_equal", "package_name": "dbt_expectations", "root_path": "C:\\Users\\jessi\\git\\axelar-models\\dbt_packages\\dbt_expectations", "path": "macros\\schema_tests\\table_shape\\expect_table_column_count_to_equal.sql", "original_file_path": "macros\\schema_tests\\table_shape\\expect_table_column_count_to_equal.sql", "name": "test_expect_table_column_count_to_equal", "macro_sql": "{%- test expect_table_column_count_to_equal(model, value) -%}\n{%- if execute -%}\n{%- set number_actual_columns = (adapter.get_columns_in_relation(model) | length) -%}\nwith test_data as (\n\n    select\n        {{ number_actual_columns }} as number_actual_columns,\n        {{ value }} as value\n\n)\nselect *\nfrom test_data\nwhere\n    number_actual_columns != value\n{%- endif -%}\n{%- endtest -%}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1671050798.296406}, "macro.dbt_expectations.test_expect_table_column_count_to_equal_other_table": {"unique_id": "macro.dbt_expectations.test_expect_table_column_count_to_equal_other_table", "package_name": "dbt_expectations", "root_path": "C:\\Users\\jessi\\git\\axelar-models\\dbt_packages\\dbt_expectations", "path": "macros\\schema_tests\\table_shape\\expect_table_column_count_to_equal_other_table.sql", "original_file_path": "macros\\schema_tests\\table_shape\\expect_table_column_count_to_equal_other_table.sql", "name": "test_expect_table_column_count_to_equal_other_table", "macro_sql": "{%- test expect_table_column_count_to_equal_other_table(model, compare_model) -%}\n{%- if execute -%}\n{%- set number_columns = (adapter.get_columns_in_relation(model) | length) -%}\n{%- set compare_number_columns = (adapter.get_columns_in_relation(compare_model) | length) -%}\nwith test_data as (\n\n    select\n        {{ number_columns }} as number_columns,\n        {{ compare_number_columns }} as compare_number_columns\n\n)\nselect *\nfrom test_data\nwhere\n    number_columns != compare_number_columns\n{%- endif -%}\n{%- endtest -%}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1671050798.2975142}, "macro.dbt_expectations.test_expect_table_row_count_to_be_between": {"unique_id": "macro.dbt_expectations.test_expect_table_row_count_to_be_between", "package_name": "dbt_expectations", "root_path": "C:\\Users\\jessi\\git\\axelar-models\\dbt_packages\\dbt_expectations", "path": "macros\\schema_tests\\table_shape\\expect_table_row_count_to_be_between.sql", "original_file_path": "macros\\schema_tests\\table_shape\\expect_table_row_count_to_be_between.sql", "name": "test_expect_table_row_count_to_be_between", "macro_sql": "{%- test expect_table_row_count_to_be_between(model,\n                                                    min_value=None,\n                                                    max_value=None,\n                                                    group_by=None,\n                                                    row_condition=None,\n                                                    strictly=False\n                                                    ) -%}\n{% set expression %}\ncount(*)\n{% endset %}\n{{ dbt_expectations.expression_between(model,\n                                        expression=expression,\n                                        min_value=min_value,\n                                        max_value=max_value,\n                                        group_by_columns=group_by,\n                                        row_condition=row_condition,\n                                        strictly=strictly\n                                        ) }}\n{%- endtest -%}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_expectations.expression_between"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1671050798.2995229}, "macro.dbt_expectations.test_expect_table_row_count_to_equal": {"unique_id": "macro.dbt_expectations.test_expect_table_row_count_to_equal", "package_name": "dbt_expectations", "root_path": "C:\\Users\\jessi\\git\\axelar-models\\dbt_packages\\dbt_expectations", "path": "macros\\schema_tests\\table_shape\\expect_table_row_count_to_equal.sql", "original_file_path": "macros\\schema_tests\\table_shape\\expect_table_row_count_to_equal.sql", "name": "test_expect_table_row_count_to_equal", "macro_sql": "{%- test expect_table_row_count_to_equal(model,\n                                                value,\n                                                group_by=None,\n                                                row_condition=None\n                                                ) -%}\n    {{ adapter.dispatch('test_expect_table_row_count_to_equal',\n                        'dbt_expectations') (model,\n                                                                        value,\n                                                                        group_by,\n                                                                        row_condition\n                                                                        ) }}\n{% endtest %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_expectations.default__test_expect_table_row_count_to_equal"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1671050798.3004327}, "macro.dbt_expectations.default__test_expect_table_row_count_to_equal": {"unique_id": "macro.dbt_expectations.default__test_expect_table_row_count_to_equal", "package_name": "dbt_expectations", "root_path": "C:\\Users\\jessi\\git\\axelar-models\\dbt_packages\\dbt_expectations", "path": "macros\\schema_tests\\table_shape\\expect_table_row_count_to_equal.sql", "original_file_path": "macros\\schema_tests\\table_shape\\expect_table_row_count_to_equal.sql", "name": "default__test_expect_table_row_count_to_equal", "macro_sql": "\n\n\n\n{%- macro default__test_expect_table_row_count_to_equal(model,\n                                                value,\n                                                group_by,\n                                                row_condition\n                                                ) -%}\n{% set expression %}\ncount(*) = {{ value }}\n{% endset %}\n{{ dbt_expectations.expression_is_true(model,\n                                        expression=expression,\n                                        group_by_columns=group_by,\n                                        row_condition=row_condition)\n                                        }}\n{%- endmacro -%}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_expectations.expression_is_true"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1671050798.3416395}, "macro.dbt_expectations.test_expect_table_row_count_to_equal_other_table": {"unique_id": "macro.dbt_expectations.test_expect_table_row_count_to_equal_other_table", "package_name": "dbt_expectations", "root_path": "C:\\Users\\jessi\\git\\axelar-models\\dbt_packages\\dbt_expectations", "path": "macros\\schema_tests\\table_shape\\expect_table_row_count_to_equal_other_table.sql", "original_file_path": "macros\\schema_tests\\table_shape\\expect_table_row_count_to_equal_other_table.sql", "name": "test_expect_table_row_count_to_equal_other_table", "macro_sql": "{%- test expect_table_row_count_to_equal_other_table(model, compare_model, factor=1, row_condition=None, compare_row_condition=None) -%}\n{{ dbt_expectations.test_equal_expression(model, \"count(*)\",\n    compare_model=compare_model,\n    compare_expression=\"count(*) * \" + factor|string,\n    row_condition=row_condition,\n    compare_row_condition=compare_row_condition\n) }}\n{%- endtest -%}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_expectations.test_equal_expression"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1671050798.3425543}, "macro.dbt_expectations.test_expect_table_row_count_to_equal_other_table_times_factor": {"unique_id": "macro.dbt_expectations.test_expect_table_row_count_to_equal_other_table_times_factor", "package_name": "dbt_expectations", "root_path": "C:\\Users\\jessi\\git\\axelar-models\\dbt_packages\\dbt_expectations", "path": "macros\\schema_tests\\table_shape\\expect_table_row_count_to_equal_other_table_times_factor.sql", "original_file_path": "macros\\schema_tests\\table_shape\\expect_table_row_count_to_equal_other_table_times_factor.sql", "name": "test_expect_table_row_count_to_equal_other_table_times_factor", "macro_sql": "{%- test expect_table_row_count_to_equal_other_table_times_factor(model, compare_model, factor, row_condition=None, compare_row_condition=None) -%}\n{{ dbt_expectations.test_expect_table_row_count_to_equal_other_table(model, compare_model,\n    factor=factor,\n    row_condition=row_condition,\n    compare_row_condition=compare_row_condition\n) }}\n{%- endtest -%}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_expectations.test_expect_table_row_count_to_equal_other_table"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1671050798.3436372}, "macro.dbt_expectations._get_column_list": {"unique_id": "macro.dbt_expectations._get_column_list", "package_name": "dbt_expectations", "root_path": "C:\\Users\\jessi\\git\\axelar-models\\dbt_packages\\dbt_expectations", "path": "macros\\schema_tests\\table_shape\\_get_column_list.sql", "original_file_path": "macros\\schema_tests\\table_shape\\_get_column_list.sql", "name": "_get_column_list", "macro_sql": "{%- macro _get_column_list(model, transform=\"upper\") -%}\n{%- set relation_columns = adapter.get_columns_in_relation(model) -%}\n{%- set relation_column_names = relation_columns | map(attribute=\"name\") | map(transform) | list -%}\n{%- do return(relation_column_names) -%}\n{%- endmacro -%}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1671050798.3446407}, "macro.dbt_expectations._list_intersect": {"unique_id": "macro.dbt_expectations._list_intersect", "package_name": "dbt_expectations", "root_path": "C:\\Users\\jessi\\git\\axelar-models\\dbt_packages\\dbt_expectations", "path": "macros\\schema_tests\\table_shape\\_list_intersect.sql", "original_file_path": "macros\\schema_tests\\table_shape\\_list_intersect.sql", "name": "_list_intersect", "macro_sql": "{%- macro _list_intersect(list1, list2) -%}\n{%- set matching_items = [] -%}\n{%- for itm in list1 -%}\n    {%- if itm in list2 -%}\n        {%- do matching_items.append(itm) -%}\n    {%- endif -%}\n{%- endfor -%}\n{%- do return(matching_items) -%}\n{%- endmacro -%}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1671050798.3459258}, "macro.dbt_expectations.get_select": {"unique_id": "macro.dbt_expectations.get_select", "package_name": "dbt_expectations", "root_path": "C:\\Users\\jessi\\git\\axelar-models\\dbt_packages\\dbt_expectations", "path": "macros\\schema_tests\\_generalized\\equal_expression.sql", "original_file_path": "macros\\schema_tests\\_generalized\\equal_expression.sql", "name": "get_select", "macro_sql": "{% macro get_select(model, expression, row_condition, group_by) -%}\n    {{ adapter.dispatch('get_select', 'dbt_expectations') (model, expression, row_condition, group_by) }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_expectations.default__get_select"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1671050798.3523095}, "macro.dbt_expectations.default__get_select": {"unique_id": "macro.dbt_expectations.default__get_select", "package_name": "dbt_expectations", "root_path": "C:\\Users\\jessi\\git\\axelar-models\\dbt_packages\\dbt_expectations", "path": "macros\\schema_tests\\_generalized\\equal_expression.sql", "original_file_path": "macros\\schema_tests\\_generalized\\equal_expression.sql", "name": "default__get_select", "macro_sql": "\n\n{%- macro default__get_select(model, expression, row_condition, group_by) %}\n    select\n        {% if group_by %}\n        {% for g in group_by -%}\n            {{ g }} as col_{{ loop.index }},\n        {% endfor -%}\n        {% endif %}\n        {{ expression }} as expression\n    from\n        {{ model }}\n    {%- if row_condition %}\n    where\n        {{ row_condition }}\n    {% endif %}\n    {% if group_by %}\n    group by\n        {% for g in group_by -%}\n            {{ loop.index }}{% if not loop.last %},{% endif %}\n        {% endfor %}\n    {% endif %}\n{% endmacro -%}\n\n\n", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1671050798.3533092}, "macro.dbt_expectations.test_equal_expression": {"unique_id": "macro.dbt_expectations.test_equal_expression", "package_name": "dbt_expectations", "root_path": "C:\\Users\\jessi\\git\\axelar-models\\dbt_packages\\dbt_expectations", "path": "macros\\schema_tests\\_generalized\\equal_expression.sql", "original_file_path": "macros\\schema_tests\\_generalized\\equal_expression.sql", "name": "test_equal_expression", "macro_sql": "{% test equal_expression(model, expression,\n                                compare_model=None,\n                                compare_expression=None,\n                                group_by=None,\n                                compare_group_by=None,\n                                row_condition=None,\n                                compare_row_condition=None,\n                                tolerance=0.0,\n                                tolerance_percent=None\n                                ) -%}\n\n    {{ adapter.dispatch('test_equal_expression', 'dbt_expectations') (\n                                model,\n                                expression,\n                                compare_model,\n                                compare_expression,\n                                group_by,\n                                compare_group_by,\n                                row_condition,\n                                compare_row_condition,\n                                tolerance,\n                                tolerance_percent) }}\n{%- endtest %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_expectations.default__test_equal_expression"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1671050798.3543084}, "macro.dbt_expectations.default__test_equal_expression": {"unique_id": "macro.dbt_expectations.default__test_equal_expression", "package_name": "dbt_expectations", "root_path": "C:\\Users\\jessi\\git\\axelar-models\\dbt_packages\\dbt_expectations", "path": "macros\\schema_tests\\_generalized\\equal_expression.sql", "original_file_path": "macros\\schema_tests\\_generalized\\equal_expression.sql", "name": "default__test_equal_expression", "macro_sql": "\n\n{%- macro default__test_equal_expression(\n                                model,\n                                expression,\n                                compare_model,\n                                compare_expression,\n                                group_by,\n                                compare_group_by,\n                                row_condition,\n                                compare_row_condition,\n                                tolerance,\n                                tolerance_percent) -%}\n\n    {%- set compare_model = model if not compare_model else compare_model -%}\n    {%- set compare_expression = expression if not compare_expression else compare_expression -%}\n    {%- set compare_row_condition = row_condition if not compare_row_condition else compare_row_condition -%}\n    {%- set compare_group_by = group_by if not compare_group_by else compare_group_by -%}\n\n    {%- set n_cols = (group_by|length) if group_by else 0 %}\n    with a as (\n        {{ dbt_expectations.get_select(model, expression, row_condition, group_by) }}\n    ),\n    b as (\n        {{ dbt_expectations.get_select(compare_model, compare_expression, compare_row_condition, compare_group_by) }}\n    ),\n    final as (\n\n        select\n            {% for i in range(1, n_cols + 1) -%}\n            coalesce(a.col_{{ i }}, b.col_{{ i }}) as col_{{ i }},\n            {% endfor %}\n            a.expression,\n            b.expression as compare_expression,\n            abs(coalesce(a.expression, 0) - coalesce(b.expression, 0)) as expression_difference,\n            abs(coalesce(a.expression, 0) - coalesce(b.expression, 0))/\n                nullif(a.expression * 1.0, 0) as expression_difference_percent\n        from\n        {% if n_cols > 0 %}\n            a\n            full outer join\n            b on\n            {% for i in range(1, n_cols + 1) -%}\n                a.col_{{ i }} = b.col_{{ i }} {% if not loop.last %}and{% endif %}\n            {% endfor -%}\n        {% else %}\n            a cross join b\n        {% endif %}\n    )\n    -- DEBUG:\n    -- select * from final\n    select\n        *\n    from final\n    where\n        {% if tolerance_percent %}\n        expression_difference_percent > {{ tolerance_percent }}\n        {% else %}\n        expression_difference > {{ tolerance }}\n        {% endif %}\n{%- endmacro -%}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_expectations.get_select"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1671050798.3573158}, "macro.dbt_expectations.test_expression_between": {"unique_id": "macro.dbt_expectations.test_expression_between", "package_name": "dbt_expectations", "root_path": "C:\\Users\\jessi\\git\\axelar-models\\dbt_packages\\dbt_expectations", "path": "macros\\schema_tests\\_generalized\\expression_between.sql", "original_file_path": "macros\\schema_tests\\_generalized\\expression_between.sql", "name": "test_expression_between", "macro_sql": "{% test expression_between(model,\n                                 expression,\n                                 min_value=None,\n                                 max_value=None,\n                                 group_by_columns=None,\n                                 row_condition=None,\n                                 strictly=False\n                                 ) %}\n\n    {{ dbt_expectations.expression_between(model, expression, min_value, max_value, group_by_columns, row_condition, strictly) }}\n\n{% endtest %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_expectations.expression_between"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1671050798.3593066}, "macro.dbt_expectations.expression_between": {"unique_id": "macro.dbt_expectations.expression_between", "package_name": "dbt_expectations", "root_path": "C:\\Users\\jessi\\git\\axelar-models\\dbt_packages\\dbt_expectations", "path": "macros\\schema_tests\\_generalized\\expression_between.sql", "original_file_path": "macros\\schema_tests\\_generalized\\expression_between.sql", "name": "expression_between", "macro_sql": "{% macro expression_between(model,\n                            expression,\n                            min_value,\n                            max_value,\n                            group_by_columns,\n                            row_condition,\n                            strictly\n                            ) %}\n\n{%- if min_value is none and max_value is none -%}\n{{ exceptions.raise_compiler_error(\n    \"You have to provide either a min_value, max_value or both.\"\n) }}\n{%- endif -%}\n\n{%- set strict_operator = \"\" if strictly else \"=\" -%}\n\n{% set expression_min_max %}\n( 1=1\n{%- if min_value is not none %} and {{ expression | trim }} >{{ strict_operator }} {{ min_value }}{% endif %}\n{%- if max_value is not none %} and {{ expression | trim }} <{{ strict_operator }} {{ max_value }}{% endif %}\n)\n{% endset %}\n\n{{ dbt_expectations.expression_is_true(model,\n                                        expression=expression_min_max,\n                                        group_by_columns=group_by_columns,\n                                        row_condition=row_condition)\n                                        }}\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_expectations.expression_is_true"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1671050798.361306}, "macro.dbt_expectations.test_expression_is_true": {"unique_id": "macro.dbt_expectations.test_expression_is_true", "package_name": "dbt_expectations", "root_path": "C:\\Users\\jessi\\git\\axelar-models\\dbt_packages\\dbt_expectations", "path": "macros\\schema_tests\\_generalized\\expression_is_true.sql", "original_file_path": "macros\\schema_tests\\_generalized\\expression_is_true.sql", "name": "test_expression_is_true", "macro_sql": "{% test expression_is_true(model,\n                                 expression,\n                                 test_condition=\"= true\",\n                                 group_by_columns=None,\n                                 row_condition=None\n                                 ) %}\n\n    {{ dbt_expectations.expression_is_true(model, expression, test_condition, group_by_columns, row_condition) }}\n\n{% endtest %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_expectations.expression_is_true"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1671050798.3642929}, "macro.dbt_expectations.expression_is_true": {"unique_id": "macro.dbt_expectations.expression_is_true", "package_name": "dbt_expectations", "root_path": "C:\\Users\\jessi\\git\\axelar-models\\dbt_packages\\dbt_expectations", "path": "macros\\schema_tests\\_generalized\\expression_is_true.sql", "original_file_path": "macros\\schema_tests\\_generalized\\expression_is_true.sql", "name": "expression_is_true", "macro_sql": "{% macro expression_is_true(model,\n                                 expression,\n                                 test_condition=\"= true\",\n                                 group_by_columns=None,\n                                 row_condition=None\n                                 ) %}\n    {{ adapter.dispatch('expression_is_true', 'dbt_expectations') (model, expression, test_condition, group_by_columns, row_condition) }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_expectations.default__expression_is_true"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1671050798.3653893}, "macro.dbt_expectations.default__expression_is_true": {"unique_id": "macro.dbt_expectations.default__expression_is_true", "package_name": "dbt_expectations", "root_path": "C:\\Users\\jessi\\git\\axelar-models\\dbt_packages\\dbt_expectations", "path": "macros\\schema_tests\\_generalized\\expression_is_true.sql", "original_file_path": "macros\\schema_tests\\_generalized\\expression_is_true.sql", "name": "default__expression_is_true", "macro_sql": "{% macro default__expression_is_true(model, expression, test_condition, group_by_columns, row_condition) -%}\nwith grouped_expression as (\n    select\n        {% if group_by_columns %}\n        {% for group_by_column in group_by_columns -%}\n        {{ group_by_column }} as col_{{ loop.index }},\n        {% endfor -%}\n        {% endif %}\n        {{ dbt_expectations.truth_expression(expression) }}\n    from {{ model }}\n     {%- if row_condition %}\n    where\n        {{ row_condition }}\n    {% endif %}\n    {% if group_by_columns %}\n    group by\n    {% for group_by_column in group_by_columns -%}\n        {{ group_by_column }}{% if not loop.last %},{% endif %}\n    {% endfor %}\n    {% endif %}\n\n),\nvalidation_errors as (\n\n    select\n        *\n    from\n        grouped_expression\n    where\n        not(expression {{ test_condition }})\n\n)\n\nselect *\nfrom validation_errors\n\n\n{% endmacro -%}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_expectations.truth_expression"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1671050798.3668573}, "macro.dbt_expectations.ignore_row_if_expression": {"unique_id": "macro.dbt_expectations.ignore_row_if_expression", "package_name": "dbt_expectations", "root_path": "C:\\Users\\jessi\\git\\axelar-models\\dbt_packages\\dbt_expectations", "path": "macros\\schema_tests\\_generalized\\_ignore_row_if_expression.sql", "original_file_path": "macros\\schema_tests\\_generalized\\_ignore_row_if_expression.sql", "name": "ignore_row_if_expression", "macro_sql": "{% macro ignore_row_if_expression(ignore_row_if, columns) %}\n    {{ adapter.dispatch('ignore_row_if_expression', 'dbt_expectations') (ignore_row_if, columns) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_expectations.default__ignore_row_if_expression"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1671050798.3688564}, "macro.dbt_expectations.default__ignore_row_if_expression": {"unique_id": "macro.dbt_expectations.default__ignore_row_if_expression", "package_name": "dbt_expectations", "root_path": "C:\\Users\\jessi\\git\\axelar-models\\dbt_packages\\dbt_expectations", "path": "macros\\schema_tests\\_generalized\\_ignore_row_if_expression.sql", "original_file_path": "macros\\schema_tests\\_generalized\\_ignore_row_if_expression.sql", "name": "default__ignore_row_if_expression", "macro_sql": "{% macro default__ignore_row_if_expression(ignore_row_if, columns) %}\n  {%- set ignore_row_if_values = [\"all_values_are_missing\", \"any_value_is_missing\"] -%}\n    {% if ignore_row_if not in ignore_row_if_values %}\n        {{ exceptions.raise_compiler_error(\n            \"`ignore_row_if` must be one of \" ~ (ignore_row_if_values | join(\", \")) ~ \". Got: '\" ~ ignore_row_if ~\"'.'\"\n        ) }}\n    {% endif %}\n\n    {%- set op = \"and\" if ignore_row_if == \"all_values_are_missing\" else \"or\" -%}\n    not (\n        {% for column in columns -%}\n        {{ column }} is null{% if not loop.last %} {{ op }} {% endif %}\n        {% endfor %}\n    )\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1671050798.3699987}, "macro.dbt_expectations.truth_expression": {"unique_id": "macro.dbt_expectations.truth_expression", "package_name": "dbt_expectations", "root_path": "C:\\Users\\jessi\\git\\axelar-models\\dbt_packages\\dbt_expectations", "path": "macros\\schema_tests\\_generalized\\_truth_expression.sql", "original_file_path": "macros\\schema_tests\\_generalized\\_truth_expression.sql", "name": "truth_expression", "macro_sql": "{% macro truth_expression(expression) %}\n    {{ adapter.dispatch('truth_expression', 'dbt_expectations') (expression) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_expectations.default__truth_expression"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1671050798.3711832}, "macro.dbt_expectations.default__truth_expression": {"unique_id": "macro.dbt_expectations.default__truth_expression", "package_name": "dbt_expectations", "root_path": "C:\\Users\\jessi\\git\\axelar-models\\dbt_packages\\dbt_expectations", "path": "macros\\schema_tests\\_generalized\\_truth_expression.sql", "original_file_path": "macros\\schema_tests\\_generalized\\_truth_expression.sql", "name": "default__truth_expression", "macro_sql": "{% macro default__truth_expression(expression) %}\n  {{ expression }} as expression\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1671050798.3711832}, "macro.dbt_expectations.type_timestamp": {"unique_id": "macro.dbt_expectations.type_timestamp", "package_name": "dbt_expectations", "root_path": "C:\\Users\\jessi\\git\\axelar-models\\dbt_packages\\dbt_expectations", "path": "macros\\utils\\datatypes.sql", "original_file_path": "macros\\utils\\datatypes.sql", "name": "type_timestamp", "macro_sql": "\n{%- macro type_timestamp() -%}\n  {{ return(adapter.dispatch('type_timestamp', 'dbt_expectations')()) }}\n{%- endmacro -%}\n\n", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_expectations.snowflake__type_timestamp"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1671050798.372199}, "macro.dbt_expectations.default__type_timestamp": {"unique_id": "macro.dbt_expectations.default__type_timestamp", "package_name": "dbt_expectations", "root_path": "C:\\Users\\jessi\\git\\axelar-models\\dbt_packages\\dbt_expectations", "path": "macros\\utils\\datatypes.sql", "original_file_path": "macros\\utils\\datatypes.sql", "name": "default__type_timestamp", "macro_sql": "{% macro default__type_timestamp() -%}\n    timestamp\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1671050798.372199}, "macro.dbt_expectations.snowflake__type_timestamp": {"unique_id": "macro.dbt_expectations.snowflake__type_timestamp", "package_name": "dbt_expectations", "root_path": "C:\\Users\\jessi\\git\\axelar-models\\dbt_packages\\dbt_expectations", "path": "macros\\utils\\datatypes.sql", "original_file_path": "macros\\utils\\datatypes.sql", "name": "snowflake__type_timestamp", "macro_sql": "{% macro snowflake__type_timestamp() -%}\n    timestamp_ntz\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1671050798.3732533}, "macro.dbt_expectations.postgres__type_timestamp": {"unique_id": "macro.dbt_expectations.postgres__type_timestamp", "package_name": "dbt_expectations", "root_path": "C:\\Users\\jessi\\git\\axelar-models\\dbt_packages\\dbt_expectations", "path": "macros\\utils\\datatypes.sql", "original_file_path": "macros\\utils\\datatypes.sql", "name": "postgres__type_timestamp", "macro_sql": "{% macro postgres__type_timestamp() -%}\n    timestamp without time zone\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1671050798.3732533}, "macro.dbt_expectations.type_datetime": {"unique_id": "macro.dbt_expectations.type_datetime", "package_name": "dbt_expectations", "root_path": "C:\\Users\\jessi\\git\\axelar-models\\dbt_packages\\dbt_expectations", "path": "macros\\utils\\datatypes.sql", "original_file_path": "macros\\utils\\datatypes.sql", "name": "type_datetime", "macro_sql": "{% macro type_datetime() -%}\n  {{ return(adapter.dispatch('type_datetime', 'dbt_expectations')()) }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_expectations.snowflake__type_datetime"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1671050798.3732533}, "macro.dbt_expectations.default__type_datetime": {"unique_id": "macro.dbt_expectations.default__type_datetime", "package_name": "dbt_expectations", "root_path": "C:\\Users\\jessi\\git\\axelar-models\\dbt_packages\\dbt_expectations", "path": "macros\\utils\\datatypes.sql", "original_file_path": "macros\\utils\\datatypes.sql", "name": "default__type_datetime", "macro_sql": "{% macro default__type_datetime() -%}\n    datetime\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1671050798.3732533}, "macro.dbt_expectations.snowflake__type_datetime": {"unique_id": "macro.dbt_expectations.snowflake__type_datetime", "package_name": "dbt_expectations", "root_path": "C:\\Users\\jessi\\git\\axelar-models\\dbt_packages\\dbt_expectations", "path": "macros\\utils\\datatypes.sql", "original_file_path": "macros\\utils\\datatypes.sql", "name": "snowflake__type_datetime", "macro_sql": "{% macro snowflake__type_datetime() -%}\n    timestamp_ntz\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1671050798.374198}, "macro.dbt_expectations.postgres__type_datetime": {"unique_id": "macro.dbt_expectations.postgres__type_datetime", "package_name": "dbt_expectations", "root_path": "C:\\Users\\jessi\\git\\axelar-models\\dbt_packages\\dbt_expectations", "path": "macros\\utils\\datatypes.sql", "original_file_path": "macros\\utils\\datatypes.sql", "name": "postgres__type_datetime", "macro_sql": "{% macro postgres__type_datetime() -%}\n    timestamp without time zone\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1671050798.374198}, "macro.dbt_expectations.group_by": {"unique_id": "macro.dbt_expectations.group_by", "package_name": "dbt_expectations", "root_path": "C:\\Users\\jessi\\git\\axelar-models\\dbt_packages\\dbt_expectations", "path": "macros\\utils\\groupby.sql", "original_file_path": "macros\\utils\\groupby.sql", "name": "group_by", "macro_sql": "{%- macro group_by(n) -%}\n    {{ return(adapter.dispatch('group_by', 'dbt_expectations')(n)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_expectations.default__group_by"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1671050798.3751981}, "macro.dbt_expectations.default__group_by": {"unique_id": "macro.dbt_expectations.default__group_by", "package_name": "dbt_expectations", "root_path": "C:\\Users\\jessi\\git\\axelar-models\\dbt_packages\\dbt_expectations", "path": "macros\\utils\\groupby.sql", "original_file_path": "macros\\utils\\groupby.sql", "name": "default__group_by", "macro_sql": "\n\n{%- macro default__group_by(n) -%}\n\n  group by {% for i in range(1, n + 1) -%}\n      {{ i }}{{ ',' if not loop.last }}\n   {%- endfor -%}\n\n{%- endmacro -%}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1671050798.3751981}, "macro.dbt_external_tables.create_external_table": {"unique_id": "macro.dbt_external_tables.create_external_table", "package_name": "dbt_external_tables", "root_path": "C:\\Users\\jessi\\git\\axelar-models\\dbt_packages\\dbt_external_tables", "path": "macros\\common\\create_external_table.sql", "original_file_path": "macros\\common\\create_external_table.sql", "name": "create_external_table", "macro_sql": "{% macro create_external_table(source_node) %}\n    {{ adapter.dispatch('create_external_table', 'dbt_external_tables')(source_node) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_external_tables.snowflake__create_external_table"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1671050798.3761973}, "macro.dbt_external_tables.default__create_external_table": {"unique_id": "macro.dbt_external_tables.default__create_external_table", "package_name": "dbt_external_tables", "root_path": "C:\\Users\\jessi\\git\\axelar-models\\dbt_packages\\dbt_external_tables", "path": "macros\\common\\create_external_table.sql", "original_file_path": "macros\\common\\create_external_table.sql", "name": "default__create_external_table", "macro_sql": "{% macro default__create_external_table(source_node) %}\n    {{ exceptions.raise_compiler_error(\"External table creation is not implemented for the default adapter\") }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1671050798.3761973}, "macro.dbt_external_tables.get_external_build_plan": {"unique_id": "macro.dbt_external_tables.get_external_build_plan", "package_name": "dbt_external_tables", "root_path": "C:\\Users\\jessi\\git\\axelar-models\\dbt_packages\\dbt_external_tables", "path": "macros\\common\\get_external_build_plan.sql", "original_file_path": "macros\\common\\get_external_build_plan.sql", "name": "get_external_build_plan", "macro_sql": "{% macro get_external_build_plan(source_node) %}\n    {{ return(adapter.dispatch('get_external_build_plan', 'dbt_external_tables')(source_node)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_external_tables.snowflake__get_external_build_plan"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1671050798.3771975}, "macro.dbt_external_tables.default__get_external_build_plan": {"unique_id": "macro.dbt_external_tables.default__get_external_build_plan", "package_name": "dbt_external_tables", "root_path": "C:\\Users\\jessi\\git\\axelar-models\\dbt_packages\\dbt_external_tables", "path": "macros\\common\\get_external_build_plan.sql", "original_file_path": "macros\\common\\get_external_build_plan.sql", "name": "default__get_external_build_plan", "macro_sql": "{% macro default__get_external_build_plan(source_node) %}\n    {{ exceptions.raise_compiler_error(\"Staging external sources is not implemented for the default adapter\") }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1671050798.3771975}, "macro.dbt_external_tables.refresh_external_table": {"unique_id": "macro.dbt_external_tables.refresh_external_table", "package_name": "dbt_external_tables", "root_path": "C:\\Users\\jessi\\git\\axelar-models\\dbt_packages\\dbt_external_tables", "path": "macros\\common\\refresh_external_table.sql", "original_file_path": "macros\\common\\refresh_external_table.sql", "name": "refresh_external_table", "macro_sql": "{% macro refresh_external_table(source_node) %}\n    {{ return(adapter.dispatch('refresh_external_table', 'dbt_external_tables')(source_node)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_external_tables.snowflake__refresh_external_table"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1671050798.3781965}, "macro.dbt_external_tables.default__refresh_external_table": {"unique_id": "macro.dbt_external_tables.default__refresh_external_table", "package_name": "dbt_external_tables", "root_path": "C:\\Users\\jessi\\git\\axelar-models\\dbt_packages\\dbt_external_tables", "path": "macros\\common\\refresh_external_table.sql", "original_file_path": "macros\\common\\refresh_external_table.sql", "name": "default__refresh_external_table", "macro_sql": "{% macro default__refresh_external_table(source_node) %}\n    {% do return([]) %}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1671050798.3792048}, "macro.dbt_external_tables.stage_external_sources": {"unique_id": "macro.dbt_external_tables.stage_external_sources", "package_name": "dbt_external_tables", "root_path": "C:\\Users\\jessi\\git\\axelar-models\\dbt_packages\\dbt_external_tables", "path": "macros\\common\\stage_external_sources.sql", "original_file_path": "macros\\common\\stage_external_sources.sql", "name": "stage_external_sources", "macro_sql": "{% macro stage_external_sources(select=none) %}\n\n    {% set sources_to_stage = [] %}\n    \n    {% set source_nodes = graph.sources.values() if graph.sources else [] %}\n    \n    {% for node in source_nodes %}\n        {% if node.external %}\n            \n            {% if select %}\n            \n                {% for src in select.split(' ') %}\n                \n                    {% if '.' in src %}\n                        {% set src_s = src.split('.') %}\n                        {% if src_s[0] == node.source_name and src_s[1] == node.name %}\n                            {% do sources_to_stage.append(node) %}\n                        {% endif %}\n                    {% else %}\n                        {% if src == node.source_name %}\n                            {% do sources_to_stage.append(node) %}\n                        {% endif %}\n                    {% endif %}\n                    \n                {% endfor %}\n                        \n            {% else %}\n            \n                {% do sources_to_stage.append(node) %}\n                \n            {% endif %}\n        {% endif %}\n        \n    {% endfor %}\n    \n    {% if sources_to_stage|length == 0 %}\n        {% do log('No external sources selected', info = true) %}\n    {% endif %}\n            \n    {% for node in sources_to_stage %}\n\n        {% set loop_label = loop.index ~ ' of ' ~ loop.length %}\n\n        {% do log(loop_label ~ ' START external source ' ~ node.schema ~ '.' ~ node.identifier, info = true) -%}\n        \n        {% set run_queue = dbt_external_tables.get_external_build_plan(node) %}\n        \n        {% do log(loop_label ~ ' SKIP', info = true) if run_queue == [] %}\n        {% set width = flags.PRINTER_WIDTH %}\n        \n        {% for q in run_queue %}\n        \n            {% set q_msg = q|replace('\\n','')|replace('begin;','')|trim %}\n            {% set q_log = q_msg[:width] ~ '...  ' if q_msg|length > width else q_msg %}\n        \n            {% do log(loop_label ~ ' (' ~ loop.index ~ ') ' ~ q_log, info = true) %}\n            {% set exit_txn = dbt_external_tables.exit_transaction() %}\n        \n            {% call statement('runner', fetch_result = True, auto_begin = False) %}\n                {{ exit_txn }} {{ q }}\n            {% endcall %}\n            \n            {% set runner = load_result('runner') %}\n            {% set log_msg = runner['response'] if 'response' in runner.keys() else runner['status'] %}\n            {% do log(loop_label ~ ' (' ~ loop.index ~ ') ' ~ log_msg, info = true) %}\n            \n        {% endfor %}\n        \n    {% endfor %}\n    \n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_external_tables.get_external_build_plan", "macro.dbt_external_tables.exit_transaction", "macro.dbt.statement"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1671050798.3896556}, "macro.dbt_external_tables.dropif": {"unique_id": "macro.dbt_external_tables.dropif", "package_name": "dbt_external_tables", "root_path": "C:\\Users\\jessi\\git\\axelar-models\\dbt_packages\\dbt_external_tables", "path": "macros\\common\\helpers\\dropif.sql", "original_file_path": "macros\\common\\helpers\\dropif.sql", "name": "dropif", "macro_sql": "{% macro dropif(node) %}\n    {{ adapter.dispatch('dropif', 'dbt_external_tables')(node) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_external_tables.default__dropif"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1671050798.3907356}, "macro.dbt_external_tables.default__dropif": {"unique_id": "macro.dbt_external_tables.default__dropif", "package_name": "dbt_external_tables", "root_path": "C:\\Users\\jessi\\git\\axelar-models\\dbt_packages\\dbt_external_tables", "path": "macros\\common\\helpers\\dropif.sql", "original_file_path": "macros\\common\\helpers\\dropif.sql", "name": "default__dropif", "macro_sql": "{% macro default__dropif() %}\n    {{ exceptions.raise_compiler_error(\n        \"Dropping external tables is not implemented for the default adapter\"\n    ) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1671050798.3907356}, "macro.dbt_external_tables.exit_transaction": {"unique_id": "macro.dbt_external_tables.exit_transaction", "package_name": "dbt_external_tables", "root_path": "C:\\Users\\jessi\\git\\axelar-models\\dbt_packages\\dbt_external_tables", "path": "macros\\common\\helpers\\transaction.sql", "original_file_path": "macros\\common\\helpers\\transaction.sql", "name": "exit_transaction", "macro_sql": "{% macro exit_transaction() %}\n    {{ return(adapter.dispatch('exit_transaction', 'dbt_external_tables')()) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_external_tables.default__exit_transaction"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1671050798.391237}, "macro.dbt_external_tables.default__exit_transaction": {"unique_id": "macro.dbt_external_tables.default__exit_transaction", "package_name": "dbt_external_tables", "root_path": "C:\\Users\\jessi\\git\\axelar-models\\dbt_packages\\dbt_external_tables", "path": "macros\\common\\helpers\\transaction.sql", "original_file_path": "macros\\common\\helpers\\transaction.sql", "name": "default__exit_transaction", "macro_sql": "{% macro default__exit_transaction() %}\n    {{ return('') }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1671050798.391237}, "macro.dbt_external_tables.bigquery__create_external_table": {"unique_id": "macro.dbt_external_tables.bigquery__create_external_table", "package_name": "dbt_external_tables", "root_path": "C:\\Users\\jessi\\git\\axelar-models\\dbt_packages\\dbt_external_tables", "path": "macros\\plugins\\bigquery\\create_external_table.sql", "original_file_path": "macros\\plugins\\bigquery\\create_external_table.sql", "name": "bigquery__create_external_table", "macro_sql": "{% macro bigquery__create_external_table(source_node) %}\n\n    {%- set columns = source_node.columns.values() -%}\n    {%- set external = source_node.external -%}\n    {%- set partitions = external.partitions -%}\n    {%- set options = external.options -%}\n    \n    {%- set uris = [] -%}\n    {%- if options is mapping and options.get('uris', none) -%}\n        {%- set uris = external.options.get('uris') -%}\n    {%- else -%}\n        {%- set uris = [external.location] -%}\n    {%- endif -%}\n\n    create or replace external table {{source(source_node.source_name, source_node.name)}}\n        {%- if columns -%}(\n            {% for column in columns %}\n                {%- set column_quoted = adapter.quote(column.name) if column.quote else column.name %}\n                {{column_quoted}} {{column.data_type}} {{- ',' if not loop.last -}}\n            {%- endfor -%}\n        )\n        {% endif %}\n        {% if options and options.get('hive_partition_uri_prefix', none) %}\n        with partition columns {%- if partitions %} (\n            {%- for partition in partitions %}\n                {{partition.name}} {{partition.data_type}}{{',' if not loop.last}}\n            {%- endfor -%}\n        ) {% endif -%}\n        {% endif %}\n        options (\n            uris = [{%- for uri in uris -%} '{{uri}}' {{- \",\" if not loop.last}} {%- endfor -%}]\n            {%- if options is mapping -%}\n            {%- for key, value in options.items() if key != 'uris' %}\n                {%- if value is string -%}\n                , {{key}} = '{{value}}'\n                {%- else -%}\n                , {{key}} = {{value}}\n                {%- endif -%}\n            {%- endfor -%}\n            {%- endif -%}\n        )\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1671050798.3956063}, "macro.dbt_external_tables.bigquery__get_external_build_plan": {"unique_id": "macro.dbt_external_tables.bigquery__get_external_build_plan", "package_name": "dbt_external_tables", "root_path": "C:\\Users\\jessi\\git\\axelar-models\\dbt_packages\\dbt_external_tables", "path": "macros\\plugins\\bigquery\\get_external_build_plan.sql", "original_file_path": "macros\\plugins\\bigquery\\get_external_build_plan.sql", "name": "bigquery__get_external_build_plan", "macro_sql": "{% macro bigquery__get_external_build_plan(source_node) %}\n\n    {% set build_plan = [] %}\n    \n    {% set old_relation = adapter.get_relation(\n        database = source_node.database,\n        schema = source_node.schema,\n        identifier = source_node.identifier\n    ) %}\n    \n    {% set create_or_replace = (old_relation is none or var('ext_full_refresh', false)) %}\n\n    {% if create_or_replace %}\n        {% set build_plan = build_plan + [dbt_external_tables.create_external_table(source_node)] %}\n    {% else %}\n        {% set build_plan = build_plan + dbt_external_tables.refresh_external_table(source_node) %}\n    {% endif %}\n\n    {% do return(build_plan) %}\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_external_tables.create_external_table", "macro.dbt_external_tables.refresh_external_table"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1671050798.397628}, "macro.dbt_external_tables.redshift__create_external_table": {"unique_id": "macro.dbt_external_tables.redshift__create_external_table", "package_name": "dbt_external_tables", "root_path": "C:\\Users\\jessi\\git\\axelar-models\\dbt_packages\\dbt_external_tables", "path": "macros\\plugins\\redshift\\create_external_table.sql", "original_file_path": "macros\\plugins\\redshift\\create_external_table.sql", "name": "redshift__create_external_table", "macro_sql": "{% macro redshift__create_external_table(source_node) %}\n\n    {%- set columns = source_node.columns.values() -%}\n    {%- set external = source_node.external -%}\n    {%- set partitions = external.partitions -%}\n\n{# https://docs.aws.amazon.com/redshift/latest/dg/r_CREATE_EXTERNAL_TABLE.html #}\n{# This assumes you have already created an external schema #}\n\n    create external table {{source(source_node.source_name, source_node.name)}} (\n        {% for column in columns %}\n            {{adapter.quote(column.name)}} {{column.data_type}}\n            {{- ',' if not loop.last -}}\n        {% endfor %}\n    )\n    {% if partitions -%} partitioned by (\n        {%- for partition in partitions -%}\n            {{adapter.quote(partition.name)}} {{partition.data_type}}{{', ' if not loop.last}}\n        {%- endfor -%}\n    ) {%- endif %}\n    {% if external.row_format -%} row format {{external.row_format}} {%- endif %}\n    {% if external.file_format -%} stored as {{external.file_format}} {%- endif %}\n    {% if external.location -%} location '{{external.location}}' {%- endif %}\n    {% if external.table_properties -%} table properties {{external.table_properties}} {%- endif %}\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1671050798.400424}, "macro.dbt_external_tables.redshift__get_external_build_plan": {"unique_id": "macro.dbt_external_tables.redshift__get_external_build_plan", "package_name": "dbt_external_tables", "root_path": "C:\\Users\\jessi\\git\\axelar-models\\dbt_packages\\dbt_external_tables", "path": "macros\\plugins\\redshift\\get_external_build_plan.sql", "original_file_path": "macros\\plugins\\redshift\\get_external_build_plan.sql", "name": "redshift__get_external_build_plan", "macro_sql": "{% macro redshift__get_external_build_plan(source_node) %}\n\n    {% set build_plan = [] %}\n    \n    {% set create_or_replace = (var('ext_full_refresh', false) or not redshift_is_ext_tbl(source_node)) %}\n    \n    {% if create_or_replace %}\n\n        {% set build_plan = [\n                dbt_external_tables.dropif(source_node),\n                dbt_external_tables.create_external_table(source_node)\n            ] + dbt_external_tables.refresh_external_table(source_node) \n        %}\n        \n    {% else %}\n    \n        {% set build_plan = dbt_external_tables.refresh_external_table(source_node) %}\n        \n    {% endif %}\n    \n    {% do return(build_plan) %}\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_external_tables.redshift_is_ext_tbl", "macro.dbt_external_tables.dropif", "macro.dbt_external_tables.create_external_table", "macro.dbt_external_tables.refresh_external_table"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1671050798.403419}, "macro.dbt_external_tables.redshift__refresh_external_table": {"unique_id": "macro.dbt_external_tables.redshift__refresh_external_table", "package_name": "dbt_external_tables", "root_path": "C:\\Users\\jessi\\git\\axelar-models\\dbt_packages\\dbt_external_tables", "path": "macros\\plugins\\redshift\\refresh_external_table.sql", "original_file_path": "macros\\plugins\\redshift\\refresh_external_table.sql", "name": "redshift__refresh_external_table", "macro_sql": "{% macro redshift__refresh_external_table(source_node) %}\n\n    {%- set partitions = source_node.external.get('partitions',[]) -%}\n\n    {%- if partitions -%}\n    \n        {%- set part_len = partitions|length -%}\n    \n        {%- set get_partitions_sql -%}\n        \n        select * from\n        \n        {%- for partition in partitions %} (\n        \n            {%- set part_num = loop.index -%}\n            \n            {%- if partition.vals.macro -%}\n                {%- set vals = dbt_external_tables.render_from_context(partition.vals.macro, **partition.vals.args) -%}\n            {%- elif partition.vals is string -%}\n                {%- set vals = [partition.vals] -%}\n            {%- else -%}\n                {%- set vals = partition.vals -%}\n            {%- endif -%}\n        \n            {%- for val in vals %}\n            \n                select\n                    '\"{{ partition.name }}\"' as name_{{ part_num }},\n                    '\"{{ val }}\"' as val_{{ part_num }},\n                    '\"{{ dbt_external_tables.render_from_context(partition.path_macro, partition.name, val) }}\"' as path_{{ part_num }}\n                \n                {{ 'union all' if not loop.last else ') ' }}\n            \n            {%- endfor -%}\n            \n            {{ 'cross join' if not loop.last }}\n            \n        {%- endfor -%}\n        \n        {%- endset -%}\n        \n        {%- set finals = [] -%}\n        \n        {%- if execute -%}\n            {%- set results = run_query(get_partitions_sql) -%}\n            {%- for row in results -%}\n                \n                {%- set partition_parts = [] -%}\n                {%- set path_parts = [] -%}\n                \n                {%- for i in range(0, part_len) -%}\n                    {%- do partition_parts.append({\n                        'name': row[i * 3][1:-1],\n                        'value': row[i * 3 + 1][1:-1]\n                    }) -%}\n                    {%- do path_parts.append(row[i * 3 + 2][1:-1]) -%}\n                {%- endfor -%}\n                \n                {%- set construct = {\n                    'partition_by': partition_parts,\n                    'path': path_parts | join('/')\n                }  -%}\n                \n                {% do finals.append(construct) %}\n            {%- endfor -%}\n        {%- endif -%}\n    \n        {%- set ddl = dbt_external_tables.redshift_alter_table_add_partitions(source_node, finals) -%}\n        {{ return(ddl) }}\n    \n    {% else %}\n    \n        {% do return([]) %}\n    \n    {% endif %}\n    \n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_external_tables.render_from_context", "macro.dbt.run_query", "macro.dbt_external_tables.redshift_alter_table_add_partitions"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1671050798.4094617}, "macro.dbt_external_tables.redshift_alter_table_add_partitions": {"unique_id": "macro.dbt_external_tables.redshift_alter_table_add_partitions", "package_name": "dbt_external_tables", "root_path": "C:\\Users\\jessi\\git\\axelar-models\\dbt_packages\\dbt_external_tables", "path": "macros\\plugins\\redshift\\helpers\\add_partitions.sql", "original_file_path": "macros\\plugins\\redshift\\helpers\\add_partitions.sql", "name": "redshift_alter_table_add_partitions", "macro_sql": "{% macro redshift_alter_table_add_partitions(source_node, partitions) %}\n\n  {{ log(\"Generating ADD PARTITION statement for partition set between \" \n         ~ partitions[0]['path'] ~ \" and \" ~ (partitions|last)['path']) }}\n\n  {% set ddl = [] %}\n  \n  {% if partitions|length > 0 %}\n  \n    {% set alter_table_add %}\n        alter table {{source(source_node.source_name, source_node.name)}} add if not exists \n    {% endset %}\n  \n    {%- set alters -%}\n\n      {{ alter_table_add }}\n\n    {%- for partition in partitions -%}\n\n      {%- if loop.index0 != 0 and loop.index0 % 100 == 0 -%}\n\n        ; {{ alter_table_add }}\n\n      {%- endif -%}\n\n        partition ({%- for part in partition.partition_by -%}{{ part.name }}='{{ part.value }}'{{', ' if not loop.last}}{%- endfor -%})\n        location '{{ source_node.external.location }}/{{ partition.path }}/'\n\n    {% endfor -%}\n    \n    {%- endset -%}\n    \n    {% set ddl = ddl + alters.split(';') %}\n\n  {% else %}\n\n    {{ log(\"No partitions to be added\") }}\n\n  {% endif %}\n  \n  {% do return(ddl) %}\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1671050798.4124618}, "macro.dbt_external_tables.redshift__dropif": {"unique_id": "macro.dbt_external_tables.redshift__dropif", "package_name": "dbt_external_tables", "root_path": "C:\\Users\\jessi\\git\\axelar-models\\dbt_packages\\dbt_external_tables", "path": "macros\\plugins\\redshift\\helpers\\dropif.sql", "original_file_path": "macros\\plugins\\redshift\\helpers\\dropif.sql", "name": "redshift__dropif", "macro_sql": "{% macro redshift__dropif(node) %}\n    \n    {% set ddl %}\n        drop table if exists {{source(node.source_name, node.name)}} cascade\n    {% endset %}\n    \n    {{return(ddl)}}\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1671050798.414864}, "macro.dbt_external_tables.redshift_is_ext_tbl": {"unique_id": "macro.dbt_external_tables.redshift_is_ext_tbl", "package_name": "dbt_external_tables", "root_path": "C:\\Users\\jessi\\git\\axelar-models\\dbt_packages\\dbt_external_tables", "path": "macros\\plugins\\redshift\\helpers\\is_ext_tbl.sql", "original_file_path": "macros\\plugins\\redshift\\helpers\\is_ext_tbl.sql", "name": "redshift_is_ext_tbl", "macro_sql": "{% macro redshift_is_ext_tbl(node) %}\n\n    {% set existing_relation = load_relation(node) %}\n    \n    {#  external tables don't appear in information_schema.tables,\n        so dbt doesn't cache them #}\n    {% if existing_relation is none %}\n\n        {% set find_ext_tbl %}\n        \n            select count(*) from svv_external_tables\n            where schemaname = '{{node.schema}}'\n            and tablename = '{{node.identifier}}'\n        \n        {% endset %}\n        \n        {% if execute %}\n            {% set result = run_query(find_ext_tbl)[0][0] %}\n        {% else %}\n            {% set result = 0 %}\n        {% endif %}\n\n        {% set is_ext_tbl = (result > 0) %}\n        {% do return(is_ext_tbl) %}\n        \n    {% else %}\n    \n        {% do return(false) %}\n        \n    {% endif %}\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.load_relation", "macro.dbt.run_query"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1671050798.417127}, "macro.dbt_external_tables.year_month_day": {"unique_id": "macro.dbt_external_tables.year_month_day", "package_name": "dbt_external_tables", "root_path": "C:\\Users\\jessi\\git\\axelar-models\\dbt_packages\\dbt_external_tables", "path": "macros\\plugins\\redshift\\helpers\\paths.sql", "original_file_path": "macros\\plugins\\redshift\\helpers\\paths.sql", "name": "year_month_day", "macro_sql": "{% macro year_month_day(name, value) %}\n    {% set path = value.replace('-','/') %}\n    {{return(path)}}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.replace"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1671050798.41823}, "macro.dbt_external_tables.key_value": {"unique_id": "macro.dbt_external_tables.key_value", "package_name": "dbt_external_tables", "root_path": "C:\\Users\\jessi\\git\\axelar-models\\dbt_packages\\dbt_external_tables", "path": "macros\\plugins\\redshift\\helpers\\paths.sql", "original_file_path": "macros\\plugins\\redshift\\helpers\\paths.sql", "name": "key_value", "macro_sql": "{% macro key_value(name, value) %}\n    {% set path = name ~ '=' ~ value %}\n    {{return(path)}}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1671050798.41823}, "macro.dbt_external_tables.value_only": {"unique_id": "macro.dbt_external_tables.value_only", "package_name": "dbt_external_tables", "root_path": "C:\\Users\\jessi\\git\\axelar-models\\dbt_packages\\dbt_external_tables", "path": "macros\\plugins\\redshift\\helpers\\paths.sql", "original_file_path": "macros\\plugins\\redshift\\helpers\\paths.sql", "name": "value_only", "macro_sql": "{% macro value_only(name, value) %}\n    {% set path = value %}\n    {{return(path)}}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1671050798.41823}, "macro.dbt_external_tables.render_from_context": {"unique_id": "macro.dbt_external_tables.render_from_context", "package_name": "dbt_external_tables", "root_path": "C:\\Users\\jessi\\git\\axelar-models\\dbt_packages\\dbt_external_tables", "path": "macros\\plugins\\redshift\\helpers\\render_macro.sql", "original_file_path": "macros\\plugins\\redshift\\helpers\\render_macro.sql", "name": "render_from_context", "macro_sql": "{% macro render_from_context(name) -%}\n{% set original_name = name %}\n  {% if '.' in name %}\n    {% set package_name, name = name.split(\".\", 1) %}\n  {% else %}\n    {% set package_name = none %}\n  {% endif %}\n\n  {% if package_name is none %}\n    {% set package_context = context %}\n  {% elif package_name in context %}\n    {% set package_context = context[package_name] %}\n  {% else %}\n    {% set error_msg %}\n        Could not find package '{{package_name}}', called by macro '{{original_name}}'\n    {% endset %}\n    {{ exceptions.raise_compiler_error(error_msg | trim) }}\n  {% endif %}\n  \n    {{ return(package_context[name](*varargs, **kwargs)) }}\n\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1671050798.4203353}, "macro.dbt_external_tables.redshift__exit_transaction": {"unique_id": "macro.dbt_external_tables.redshift__exit_transaction", "package_name": "dbt_external_tables", "root_path": "C:\\Users\\jessi\\git\\axelar-models\\dbt_packages\\dbt_external_tables", "path": "macros\\plugins\\redshift\\helpers\\transaction.sql", "original_file_path": "macros\\plugins\\redshift\\helpers\\transaction.sql", "name": "redshift__exit_transaction", "macro_sql": "{% macro redshift__exit_transaction() %}\n    {{ return('begin; commit;') }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1671050798.4212408}, "macro.dbt_external_tables.snowflake__create_external_table": {"unique_id": "macro.dbt_external_tables.snowflake__create_external_table", "package_name": "dbt_external_tables", "root_path": "C:\\Users\\jessi\\git\\axelar-models\\dbt_packages\\dbt_external_tables", "path": "macros\\plugins\\snowflake\\create_external_table.sql", "original_file_path": "macros\\plugins\\snowflake\\create_external_table.sql", "name": "snowflake__create_external_table", "macro_sql": "{% macro snowflake__create_external_table(source_node) %}\n\n    {%- set columns = source_node.columns.values() -%}\n    {%- set external = source_node.external -%}\n    {%- set partitions = external.partitions -%}\n\n    {%- set is_csv = dbt_external_tables.is_csv(external.file_format) -%}\n\n{# https://docs.snowflake.net/manuals/sql-reference/sql/create-external-table.html #}\n{# This assumes you have already created an external stage #}\n    create or replace external table {{source(source_node.source_name, source_node.name)}}\n    {%- if columns or partitions -%}\n    (\n        {%- if partitions -%}{%- for partition in partitions %}\n            {{partition.name}} {{partition.data_type}} as {{partition.expression}}{{- ',' if not loop.last or columns|length > 0 -}}\n        {%- endfor -%}{%- endif -%}\n        {%- for column in columns %}\n            {%- set column_quoted = adapter.quote(column.name) if column.quote else column.name %}\n            {%- set col_expression -%}\n                {%- set col_id = 'value:c' ~ loop.index if is_csv else 'value:' ~ column_quoted -%}\n                (case when is_null_value({{col_id}}) or lower({{col_id}}) = 'null' then null else {{col_id}} end)\n            {%- endset %}\n            {{column_quoted}} {{column.data_type}} as ({{col_expression}}::{{column.data_type}})\n            {{- ',' if not loop.last -}}\n        {% endfor %}\n    )\n    {%- endif -%}\n    {% if partitions %} partition by ({{partitions|map(attribute='name')|join(', ')}}) {% endif %}\n    location = {{external.location}} {# stage #}\n    {% if external.auto_refresh in (true, false) -%}\n      auto_refresh = {{external.auto_refresh}}\n    {%- endif %}\n    {% if external.pattern -%} pattern = '{{external.pattern}}' {%- endif %}\n    {% if external.integration -%} integration = '{{external.integration}}' {%- endif %}\n    file_format = {{external.file_format}}\n    {% if external.table_format -%} table_format = '{{external.table_format}}' {%- endif %}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_external_tables.is_csv"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1671050798.424342}, "macro.dbt_external_tables.snowflake__get_external_build_plan": {"unique_id": "macro.dbt_external_tables.snowflake__get_external_build_plan", "package_name": "dbt_external_tables", "root_path": "C:\\Users\\jessi\\git\\axelar-models\\dbt_packages\\dbt_external_tables", "path": "macros\\plugins\\snowflake\\get_external_build_plan.sql", "original_file_path": "macros\\plugins\\snowflake\\get_external_build_plan.sql", "name": "snowflake__get_external_build_plan", "macro_sql": "{% macro snowflake__get_external_build_plan(source_node) %}\n\n    {% set build_plan = [] %}\n    \n    {% set old_relation = adapter.get_relation(\n        database = source_node.database,\n        schema = source_node.schema,\n        identifier = source_node.identifier\n    ) %}\n    \n    {% set create_or_replace = (old_relation is none or var('ext_full_refresh', false)) %}\n\n    {% if source_node.external.get('snowpipe', none) is not none %}\n    \n        {% if create_or_replace %}\n            {% set build_plan = build_plan + [\n                dbt_external_tables.snowflake_create_empty_table(source_node),\n                dbt_external_tables.snowflake_get_copy_sql(source_node, explicit_transaction=true),\n                dbt_external_tables.snowflake_create_snowpipe(source_node)\n            ] %}\n        {% else %}\n            {% set build_plan = build_plan + dbt_external_tables.snowflake_refresh_snowpipe(source_node) %}\n        {% endif %}\n            \n    {% else %}\n    \n        {% if create_or_replace %}\n            {% set build_plan = build_plan + [dbt_external_tables.create_external_table(source_node)] %}\n        {% else %}\n            {% set build_plan = build_plan + dbt_external_tables.refresh_external_table(source_node) %}\n        {% endif %}\n        \n    {% endif %}\n\n    {% do return(build_plan) %}\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_external_tables.snowflake_create_empty_table", "macro.dbt_external_tables.snowflake_get_copy_sql", "macro.dbt_external_tables.snowflake_create_snowpipe", "macro.dbt_external_tables.snowflake_refresh_snowpipe", "macro.dbt_external_tables.create_external_table", "macro.dbt_external_tables.refresh_external_table"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1671050798.4263258}, "macro.dbt_external_tables.snowflake__refresh_external_table": {"unique_id": "macro.dbt_external_tables.snowflake__refresh_external_table", "package_name": "dbt_external_tables", "root_path": "C:\\Users\\jessi\\git\\axelar-models\\dbt_packages\\dbt_external_tables", "path": "macros\\plugins\\snowflake\\refresh_external_table.sql", "original_file_path": "macros\\plugins\\snowflake\\refresh_external_table.sql", "name": "snowflake__refresh_external_table", "macro_sql": "{% macro snowflake__refresh_external_table(source_node) %}\n\n    {% set external = source_node.external %}\n    {% set snowpipe = source_node.external.get('snowpipe', none) %}\n    \n    {% set auto_refresh = external.get('auto_refresh', false) %}\n    {% set partitions = external.get('partitions', none) %}\n    \n    {% set manual_refresh = (partitions and not auto_refresh) %}\n    \n    {% if manual_refresh %}\n\n        {% set ddl %}\n        begin;\n        alter external table {{source(source_node.source_name, source_node.name)}} refresh;\n        commit;\n        {% endset %}\n        \n        {% do return([ddl]) %}\n    \n    {% else %}\n    \n        {% do return([]) %}\n    \n    {% endif %}\n    \n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1671050798.4283264}, "macro.dbt_external_tables.is_csv": {"unique_id": "macro.dbt_external_tables.is_csv", "package_name": "dbt_external_tables", "root_path": "C:\\Users\\jessi\\git\\axelar-models\\dbt_packages\\dbt_external_tables", "path": "macros\\plugins\\snowflake\\helpers\\is_csv.sql", "original_file_path": "macros\\plugins\\snowflake\\helpers\\is_csv.sql", "name": "is_csv", "macro_sql": "{% macro is_csv(file_format) %}\n\n{# From https://docs.snowflake.net/manuals/sql-reference/sql/create-external-table.html:\n\nImportant: The external table does not inherit the file format, if any, in the \nstage definition. You must explicitly specify any file format options for the \nexternal table using the FILE_FORMAT parameter.\n\nNote: FORMAT_NAME and TYPE are mutually exclusive; to avoid unintended behavior, \nyou should only specify one or the other when creating an external table.\n\n#}\n\n    {% set ff_ltrimmed = file_format|lower|replace(' ','') %}\n\n    {% if 'type=' in ff_ltrimmed %}\n    \n        {% if 'type=csv' in ff_ltrimmed %}\n\n            {{return(true)}}\n\n        {% else %}\n\n            {{return(false)}}\n            \n        {% endif %}\n        \n    {% else %}\n    \n        {% set ff_standardized = ff_ltrimmed\n            | replace('(','') | replace(')','')\n            | replace('format_name=','') %}\n        {% set fqn = ff_standardized.split('.') %}\n        \n        {% if fqn | length == 3 %}\n            {% set ff_database, ff_schema, ff_identifier = fqn[0], fqn[1], fqn[2] %}\n        {% elif fqn | length == 2 %}\n            {% set ff_database, ff_schema, ff_identifier = target.database, fqn[0], fqn[1] %}\n        {% else %}\n            {% set ff_database, ff_schema, ff_identifier = target.database, target.schema, fqn[0] %}\n        {% endif %}\n    \n        {% call statement('get_file_format', fetch_result = True) %}\n            show file formats in {{ff_database}}.{{ff_schema}}\n        {% endcall %}\n        \n        {% set ffs = load_result('get_file_format').table %}\n        \n        {% for ff in ffs %}\n            \n            {% if ff['name']|lower == ff_identifier and ff['type']|lower == 'csv' %}\n            \n                {{return(true)}}\n            \n            {% endif %}\n        \n        {% endfor %}\n        \n        {{return(false)}}        \n    \n    {% endif %}\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.statement"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1671050798.4329042}, "macro.dbt_external_tables.snowflake_create_empty_table": {"unique_id": "macro.dbt_external_tables.snowflake_create_empty_table", "package_name": "dbt_external_tables", "root_path": "C:\\Users\\jessi\\git\\axelar-models\\dbt_packages\\dbt_external_tables", "path": "macros\\plugins\\snowflake\\snowpipe\\create_empty_table.sql", "original_file_path": "macros\\plugins\\snowflake\\snowpipe\\create_empty_table.sql", "name": "snowflake_create_empty_table", "macro_sql": "{% macro snowflake_create_empty_table(source_node) %}\n\n    {%- set columns = source_node.columns.values() %}\n\n    create or replace table {{source(source_node.source_name, source_node.name)}} (\n        {% if columns|length == 0 %}\n            value variant,\n        {% else -%}\n        {%- for column in columns -%}\n            {{column.name}} {{column.data_type}},\n        {% endfor -%}\n        {% endif %}\n            metadata_filename varchar,\n            metadata_file_row_number bigint,\n            _dbt_copied_at timestamp\n    );\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1671050798.4349825}, "macro.dbt_external_tables.snowflake_create_snowpipe": {"unique_id": "macro.dbt_external_tables.snowflake_create_snowpipe", "package_name": "dbt_external_tables", "root_path": "C:\\Users\\jessi\\git\\axelar-models\\dbt_packages\\dbt_external_tables", "path": "macros\\plugins\\snowflake\\snowpipe\\create_snowpipe.sql", "original_file_path": "macros\\plugins\\snowflake\\snowpipe\\create_snowpipe.sql", "name": "snowflake_create_snowpipe", "macro_sql": "{% macro snowflake_create_snowpipe(source_node) %}\n\n    {%- set external = source_node.external -%}\n    {%- set snowpipe = external.snowpipe -%}\n\n{# https://docs.snowflake.com/en/sql-reference/sql/create-pipe.html #}\n    create or replace pipe {{source(source_node.source_name, source_node.name)}}\n        {% if snowpipe.auto_ingest -%} auto_ingest = {{snowpipe.auto_ingest}} {%- endif %}\n        {% if snowpipe.aws_sns_topic -%} aws_sns_topic = '{{snowpipe.aws_sns_topic}}' {%- endif %}\n        {% if snowpipe.integration -%} integration = '{{snowpipe.integration}}' {%- endif %}\n        {% if snowpipe.error_integration -%} error_integration = '{{snowpipe.error_integration}}' {%- endif %}\n        as {{ dbt_external_tables.snowflake_get_copy_sql(source_node) }}\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_external_tables.snowflake_get_copy_sql"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1671050798.4359891}, "macro.dbt_external_tables.snowflake_get_copy_sql": {"unique_id": "macro.dbt_external_tables.snowflake_get_copy_sql", "package_name": "dbt_external_tables", "root_path": "C:\\Users\\jessi\\git\\axelar-models\\dbt_packages\\dbt_external_tables", "path": "macros\\plugins\\snowflake\\snowpipe\\get_copy_sql.sql", "original_file_path": "macros\\plugins\\snowflake\\snowpipe\\get_copy_sql.sql", "name": "snowflake_get_copy_sql", "macro_sql": "{% macro snowflake_get_copy_sql(source_node, explicit_transaction=false) %}\n{# This assumes you have already created an external stage #}\n\n    {%- set columns = source_node.columns.values() -%}\n    {%- set external = source_node.external -%}\n    {%- set is_csv = dbt_external_tables.is_csv(external.file_format) %}\n    {%- set copy_options = external.snowpipe.get('copy_options', none) -%}\n   \n    {%- if explicit_transaction -%} begin; {%- endif %}\n    \n    copy into {{source(source_node.source_name, source_node.name)}}\n    from ( \n        select\n        {% if columns|length == 0 %}\n            $1::variant as value,\n        {% else -%}\n        {%- for column in columns -%}\n            {%- set col_expression -%}\n                {%- if is_csv -%}nullif(${{loop.index}},''){# special case: get columns by ordinal position #}\n                {%- else -%}nullif($1:{{column.name}},''){# standard behavior: get columns by name #}\n                {%- endif -%}\n            {%- endset -%}\n            {{col_expression}}::{{column.data_type}} as {{column.name}},\n        {% endfor -%}\n        {% endif %}\n            metadata$filename::varchar as metadata_filename,\n            metadata$file_row_number::bigint as metadata_file_row_number,\n            current_timestamp::timestamp as _dbt_copied_at\n        from {{external.location}} {# stage #}\n    )\n    file_format = {{external.file_format}}\n    {% if external.pattern -%} pattern = '{{external.pattern}}' {%- endif %}\n    {% if copy_options %} {{copy_options}} {% endif %};\n    \n    {% if explicit_transaction -%} commit; {%- endif -%}\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_external_tables.is_csv"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1671050798.4389062}, "macro.dbt_external_tables.snowflake_refresh_snowpipe": {"unique_id": "macro.dbt_external_tables.snowflake_refresh_snowpipe", "package_name": "dbt_external_tables", "root_path": "C:\\Users\\jessi\\git\\axelar-models\\dbt_packages\\dbt_external_tables", "path": "macros\\plugins\\snowflake\\snowpipe\\refresh_snowpipe.sql", "original_file_path": "macros\\plugins\\snowflake\\snowpipe\\refresh_snowpipe.sql", "name": "snowflake_refresh_snowpipe", "macro_sql": "{% macro snowflake_refresh_snowpipe(source_node) %}\n\n    {% set snowpipe = source_node.external.snowpipe %}\n    {% set auto_ingest = snowpipe.get('auto_ingest', false) if snowpipe is mapping %}\n    \n    {% if auto_ingest is true %}\n    \n        {% do return([]) %}\n    \n    {% else %}\n    \n        {% set ddl %}\n        alter pipe {{source(source_node.source_name, source_node.name)}} refresh\n        {% endset %}\n        \n        {{ return([ddl]) }}\n    \n    {% endif %}\n    \n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1671050798.4399836}, "macro.dbt_external_tables.spark__create_external_table": {"unique_id": "macro.dbt_external_tables.spark__create_external_table", "package_name": "dbt_external_tables", "root_path": "C:\\Users\\jessi\\git\\axelar-models\\dbt_packages\\dbt_external_tables", "path": "macros\\plugins\\spark\\create_external_table.sql", "original_file_path": "macros\\plugins\\spark\\create_external_table.sql", "name": "spark__create_external_table", "macro_sql": "{% macro spark__create_external_table(source_node) %}\n\n    {%- set columns = source_node.columns.values() -%}\n    {%- set external = source_node.external -%}\n    {%- set partitions = external.partitions -%}\n    {%- set options = external.options -%}\n\n{# https://spark.apache.org/docs/latest/sql-data-sources-hive-tables.html #}\n    create table {{source(source_node.source_name, source_node.name)}} \n    {%- if columns|length > 0 %} (\n        {% for column in columns %}\n            {{column.name}} {{column.data_type}}\n            {{- ',' if not loop.last -}}\n        {% endfor %}\n    ) {% endif -%}\n    {% if external.using %} using {{external.using}} {%- endif %}\n    {% if options -%} options (\n        {%- for key, value in options.items() -%}\n            '{{ key }}' = '{{value}}' {{- ', \\n' if not loop.last -}}\n        {%- endfor -%}\n    ) {%- endif %}\n    {% if partitions -%} partitioned by (\n        {%- for partition in partitions -%}\n            {{partition.name}} {{partition.data_type}}{{', ' if not loop.last}}\n        {%- endfor -%}\n    ) {%- endif %}\n    {% if external.row_format -%} row format {{external.row_format}} {%- endif %}\n    {% if external.file_format -%} stored as {{external.file_format}} {%- endif %}\n    {% if external.location -%} location '{{external.location}}' {%- endif %}\n    {% if external.table_properties -%} tblproperties {{ external.table_properties }} {%- endif -%}\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1671050798.4430075}, "macro.dbt_external_tables.spark__get_external_build_plan": {"unique_id": "macro.dbt_external_tables.spark__get_external_build_plan", "package_name": "dbt_external_tables", "root_path": "C:\\Users\\jessi\\git\\axelar-models\\dbt_packages\\dbt_external_tables", "path": "macros\\plugins\\spark\\get_external_build_plan.sql", "original_file_path": "macros\\plugins\\spark\\get_external_build_plan.sql", "name": "spark__get_external_build_plan", "macro_sql": "{% macro spark__get_external_build_plan(source_node) %}\n\n    {% set build_plan = [] %}\n\n    {% set old_relation = adapter.get_relation(\n        database = none,\n        schema = source_node.schema,\n        identifier = source_node.identifier\n    ) %}\n\n    {% set create_or_replace = (old_relation is none or var('ext_full_refresh', false)) %}\n\n    {% if create_or_replace %}\n        {% set build_plan = build_plan + [\n            dbt_external_tables.dropif(source_node), \n            dbt_external_tables.create_external_table(source_node)\n        ] %}\n    {% else %}\n        {% set build_plan = build_plan + dbt_external_tables.refresh_external_table(source_node) %}\n    {% endif %}\n\n    {% set recover_partitions = dbt_external_tables.recover_partitions(source_node) %}\n    {% if recover_partitions %}\n    {% set build_plan = build_plan + [\n        recover_partitions\n    ] %}\n    {% endif %}\n\n    {% do return(build_plan) %}\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_external_tables.dropif", "macro.dbt_external_tables.create_external_table", "macro.dbt_external_tables.refresh_external_table", "macro.dbt_external_tables.recover_partitions"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1671050798.4439893}, "macro.dbt_external_tables.spark__refresh_external_table": {"unique_id": "macro.dbt_external_tables.spark__refresh_external_table", "package_name": "dbt_external_tables", "root_path": "C:\\Users\\jessi\\git\\axelar-models\\dbt_packages\\dbt_external_tables", "path": "macros\\plugins\\spark\\refresh_external_table.sql", "original_file_path": "macros\\plugins\\spark\\refresh_external_table.sql", "name": "spark__refresh_external_table", "macro_sql": "{% macro spark__refresh_external_table(source_node) %}\n    \n    {% set refresh %}\n        refresh table {{source(source_node.source_name, source_node.name)}}\n    {% endset %}\n    \n    {% do return([refresh]) %}\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1671050798.4449866}, "macro.dbt_external_tables.spark__dropif": {"unique_id": "macro.dbt_external_tables.spark__dropif", "package_name": "dbt_external_tables", "root_path": "C:\\Users\\jessi\\git\\axelar-models\\dbt_packages\\dbt_external_tables", "path": "macros\\plugins\\spark\\helpers\\dropif.sql", "original_file_path": "macros\\plugins\\spark\\helpers\\dropif.sql", "name": "spark__dropif", "macro_sql": "{% macro spark__dropif(node) %}\n    \n    {% set ddl %}\n        drop table if exists {{source(node.source_name, node.name)}}\n    {% endset %}\n    \n    {{return(ddl)}}\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1671050798.4459057}, "macro.dbt_external_tables.spark__recover_partitions": {"unique_id": "macro.dbt_external_tables.spark__recover_partitions", "package_name": "dbt_external_tables", "root_path": "C:\\Users\\jessi\\git\\axelar-models\\dbt_packages\\dbt_external_tables", "path": "macros\\plugins\\spark\\helpers\\recover_partitions.sql", "original_file_path": "macros\\plugins\\spark\\helpers\\recover_partitions.sql", "name": "spark__recover_partitions", "macro_sql": "{% macro spark__recover_partitions(source_node) %}\n    {# https://docs.databricks.com/sql/language-manual/sql-ref-syntax-ddl-alter-table.html #}\n\n    {%- if source_node.external.partitions and source_node.external.using and source_node.external.using|lower != 'delta' -%}\n        {% set ddl %}\n            ALTER TABLE {{ source(source_node.source_name, source_node.name) }} RECOVER PARTITIONS\n        {% endset %}\n    {%- else -%}\n        {% set ddl = none %}\n    {%- endif -%}\n\n    {{return(ddl)}}\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1671050798.4479015}, "macro.dbt_external_tables.recover_partitions": {"unique_id": "macro.dbt_external_tables.recover_partitions", "package_name": "dbt_external_tables", "root_path": "C:\\Users\\jessi\\git\\axelar-models\\dbt_packages\\dbt_external_tables", "path": "macros\\plugins\\spark\\helpers\\recover_partitions.sql", "original_file_path": "macros\\plugins\\spark\\helpers\\recover_partitions.sql", "name": "recover_partitions", "macro_sql": "{% macro recover_partitions(source_node) %}\n    {{ return(adapter.dispatch('recover_partitions', 'dbt_external_tables')(source_node)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_external_tables.default__recover_partitions"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1671050798.4479015}, "macro.dbt_external_tables.default__recover_partitions": {"unique_id": "macro.dbt_external_tables.default__recover_partitions", "package_name": "dbt_external_tables", "root_path": "C:\\Users\\jessi\\git\\axelar-models\\dbt_packages\\dbt_external_tables", "path": "macros\\plugins\\spark\\helpers\\recover_partitions.sql", "original_file_path": "macros\\plugins\\spark\\helpers\\recover_partitions.sql", "name": "default__recover_partitions", "macro_sql": "{% macro default__recover_partitions(source_node) %}\n    /*{# \n        We're dispatching this macro so that users can override it if required on other adapters\n        but this will work for spark/databricks. \n    #}*/\n\n    {{ exceptions.raise_not_implemented('recover_partitions macro not implemented for adapter ' + adapter.type()) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1671050798.4479015}, "macro.dbt_external_tables.sqlserver__create_external_table": {"unique_id": "macro.dbt_external_tables.sqlserver__create_external_table", "package_name": "dbt_external_tables", "root_path": "C:\\Users\\jessi\\git\\axelar-models\\dbt_packages\\dbt_external_tables", "path": "macros\\plugins\\sqlserver\\create_external_table.sql", "original_file_path": "macros\\plugins\\sqlserver\\create_external_table.sql", "name": "sqlserver__create_external_table", "macro_sql": "{% macro sqlserver__create_external_table(source_node) %}\n\n    {%- set columns = source_node.columns.values() -%}\n    {%- set external = source_node.external -%}\n\n    {% if external.ansi_nulls is true -%} SET ANSI_NULLS ON; {%- endif %}\n    {% if external.quoted_identifier is true -%} SET QUOTED_IDENTIFIER ON; {%- endif %}\n\n    create external table {{source(source_node.source_name, source_node.name)}} (\n        {% for column in columns %}\n            {# TODO set nullity based on schema tests?? #}\n            {%- set nullity = 'NOT NULL' if 'not_null' in columns.tests else 'NULL'-%}\n            {{adapter.quote(column.name)}} {{column.data_type}} {{nullity}}\n            {{- ',' if not loop.last -}}\n        {% endfor %}\n    )\n    WITH (\n        {# remove keys that are None (i.e. not defined for a given source) #}\n        {%- for key, value in external.items() if value is not none and key not in ['ansi_nulls', 'quoted_identifier'] -%}\n            {{key}} = \n                {%- if key in [\"location\", \"schema_name\", \"object_name\"] -%}\n                    '{{value}}'\n                {% elif key in [\"data_source\",\"file_format\"] -%}\n                    [{{value}}]\n                {% else -%}\n                    {{value}}\n                {%- endif -%}\n            {{- ',' if not loop.last -}}\n            {%- endfor -%}\n    )\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1671050798.4513247}, "macro.dbt_external_tables.sqlserver__get_external_build_plan": {"unique_id": "macro.dbt_external_tables.sqlserver__get_external_build_plan", "package_name": "dbt_external_tables", "root_path": "C:\\Users\\jessi\\git\\axelar-models\\dbt_packages\\dbt_external_tables", "path": "macros\\plugins\\sqlserver\\get_external_build_plan.sql", "original_file_path": "macros\\plugins\\sqlserver\\get_external_build_plan.sql", "name": "sqlserver__get_external_build_plan", "macro_sql": "{% macro sqlserver__get_external_build_plan(source_node) %}\n\n    {% set build_plan = [] %}\n\n    {% set old_relation = adapter.get_relation(\n        database = source_node.database,\n        schema = source_node.schema,\n        identifier = source_node.identifier\n    ) %}\n\n    {% set create_or_replace = (old_relation is none or var('ext_full_refresh', false)) %}\n\n    {% if create_or_replace %}\n        {% set build_plan = build_plan + [ \n            dbt_external_tables.dropif(source_node), \n            dbt_external_tables.create_external_table(source_node)\n        ] %}\n    {% else %}\n        {% set build_plan = build_plan + dbt_external_tables.refresh_external_table(source_node) %}\n    {% endif %}\n    {% do return(build_plan) %}\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_external_tables.dropif", "macro.dbt_external_tables.create_external_table", "macro.dbt_external_tables.refresh_external_table"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1671050798.4533248}, "macro.dbt_external_tables.sqlserver__dropif": {"unique_id": "macro.dbt_external_tables.sqlserver__dropif", "package_name": "dbt_external_tables", "root_path": "C:\\Users\\jessi\\git\\axelar-models\\dbt_packages\\dbt_external_tables", "path": "macros\\plugins\\sqlserver\\helpers\\dropif.sql", "original_file_path": "macros\\plugins\\sqlserver\\helpers\\dropif.sql", "name": "sqlserver__dropif", "macro_sql": "{% macro sqlserver__dropif(node) %}\n    \n    {% set ddl %}\n      if object_id ('{{source(node.source_name, node.name)}}') is not null\n        begin\n        drop external table {{source(node.source_name, node.name)}}\n        end\n    {% endset %}\n    \n    {{return(ddl)}}\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1671050798.455329}, "macro.dbt_utils.array_append": {"unique_id": "macro.dbt_utils.array_append", "package_name": "dbt_utils", "root_path": "C:\\Users\\jessi\\git\\axelar-models\\dbt_packages\\dbt_utils", "path": "macros\\cross_db_utils\\array_append.sql", "original_file_path": "macros\\cross_db_utils\\array_append.sql", "name": "array_append", "macro_sql": "{% macro array_append(array, new_element) -%}\n  {% do dbt_utils.xdb_deprecation_warning_without_replacement('array_append', model.package_name, model.name) %}\n  {{ return(adapter.dispatch('array_append', 'dbt_utils')(array, new_element)) }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.xdb_deprecation_warning_without_replacement", "macro.dbt_utils.default__array_append"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1671050798.4563308}, "macro.dbt_utils.default__array_append": {"unique_id": "macro.dbt_utils.default__array_append", "package_name": "dbt_utils", "root_path": "C:\\Users\\jessi\\git\\axelar-models\\dbt_packages\\dbt_utils", "path": "macros\\cross_db_utils\\array_append.sql", "original_file_path": "macros\\cross_db_utils\\array_append.sql", "name": "default__array_append", "macro_sql": "{% macro default__array_append(array, new_element) -%}\n    array_append({{ array }}, {{ new_element }})\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1671050798.4563308}, "macro.dbt_utils.bigquery__array_append": {"unique_id": "macro.dbt_utils.bigquery__array_append", "package_name": "dbt_utils", "root_path": "C:\\Users\\jessi\\git\\axelar-models\\dbt_packages\\dbt_utils", "path": "macros\\cross_db_utils\\array_append.sql", "original_file_path": "macros\\cross_db_utils\\array_append.sql", "name": "bigquery__array_append", "macro_sql": "{% macro bigquery__array_append(array, new_element) -%}\n    {{ dbt_utils.array_concat(array, dbt_utils.array_construct([new_element])) }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.array_concat", "macro.dbt_utils.array_construct"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1671050798.4573271}, "macro.dbt_utils.redshift__array_append": {"unique_id": "macro.dbt_utils.redshift__array_append", "package_name": "dbt_utils", "root_path": "C:\\Users\\jessi\\git\\axelar-models\\dbt_packages\\dbt_utils", "path": "macros\\cross_db_utils\\array_append.sql", "original_file_path": "macros\\cross_db_utils\\array_append.sql", "name": "redshift__array_append", "macro_sql": "{% macro redshift__array_append(array, new_element) -%}\n    {{ dbt_utils.array_concat(array, dbt_utils.array_construct([new_element])) }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.array_concat", "macro.dbt_utils.array_construct"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1671050798.4573271}, "macro.dbt_utils.array_concat": {"unique_id": "macro.dbt_utils.array_concat", "package_name": "dbt_utils", "root_path": "C:\\Users\\jessi\\git\\axelar-models\\dbt_packages\\dbt_utils", "path": "macros\\cross_db_utils\\array_concat.sql", "original_file_path": "macros\\cross_db_utils\\array_concat.sql", "name": "array_concat", "macro_sql": "{% macro array_concat(array_1, array_2) -%}\n  {% do dbt_utils.xdb_deprecation_warning_without_replacement('array_concat', model.package_name, model.name) %}\n  {{ return(adapter.dispatch('array_concat', 'dbt_utils')(array_1, array_2)) }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.xdb_deprecation_warning_without_replacement", "macro.dbt_utils.default__array_concat"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1671050798.4583278}, "macro.dbt_utils.default__array_concat": {"unique_id": "macro.dbt_utils.default__array_concat", "package_name": "dbt_utils", "root_path": "C:\\Users\\jessi\\git\\axelar-models\\dbt_packages\\dbt_utils", "path": "macros\\cross_db_utils\\array_concat.sql", "original_file_path": "macros\\cross_db_utils\\array_concat.sql", "name": "default__array_concat", "macro_sql": "{% macro default__array_concat(array_1, array_2) -%}\n    array_cat({{ array_1 }}, {{ array_2 }})\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1671050798.4583278}, "macro.dbt_utils.bigquery__array_concat": {"unique_id": "macro.dbt_utils.bigquery__array_concat", "package_name": "dbt_utils", "root_path": "C:\\Users\\jessi\\git\\axelar-models\\dbt_packages\\dbt_utils", "path": "macros\\cross_db_utils\\array_concat.sql", "original_file_path": "macros\\cross_db_utils\\array_concat.sql", "name": "bigquery__array_concat", "macro_sql": "{% macro bigquery__array_concat(array_1, array_2) -%}\n    array_concat({{ array_1 }}, {{ array_2 }})\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1671050798.4583278}, "macro.dbt_utils.redshift__array_concat": {"unique_id": "macro.dbt_utils.redshift__array_concat", "package_name": "dbt_utils", "root_path": "C:\\Users\\jessi\\git\\axelar-models\\dbt_packages\\dbt_utils", "path": "macros\\cross_db_utils\\array_concat.sql", "original_file_path": "macros\\cross_db_utils\\array_concat.sql", "name": "redshift__array_concat", "macro_sql": "{% macro redshift__array_concat(array_1, array_2) -%}\n    array_concat({{ array_1 }}, {{ array_2 }})\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1671050798.4593272}, "macro.dbt_utils.array_construct": {"unique_id": "macro.dbt_utils.array_construct", "package_name": "dbt_utils", "root_path": "C:\\Users\\jessi\\git\\axelar-models\\dbt_packages\\dbt_utils", "path": "macros\\cross_db_utils\\array_construct.sql", "original_file_path": "macros\\cross_db_utils\\array_construct.sql", "name": "array_construct", "macro_sql": "{% macro array_construct(inputs = [], data_type = api.Column.translate_type('integer')) -%}\n  {% do dbt_utils.xdb_deprecation_warning_without_replacement('array_construct', model.package_name, model.name) %}\n  {{ return(adapter.dispatch('array_construct', 'dbt_utils')(inputs, data_type)) }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.xdb_deprecation_warning_without_replacement", "macro.dbt_utils.snowflake__array_construct"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1671050798.4603271}, "macro.dbt_utils.default__array_construct": {"unique_id": "macro.dbt_utils.default__array_construct", "package_name": "dbt_utils", "root_path": "C:\\Users\\jessi\\git\\axelar-models\\dbt_packages\\dbt_utils", "path": "macros\\cross_db_utils\\array_construct.sql", "original_file_path": "macros\\cross_db_utils\\array_construct.sql", "name": "default__array_construct", "macro_sql": "{% macro default__array_construct(inputs, data_type) -%}\n    {% if inputs|length > 0 %}\n    array[ {{ inputs|join(' , ') }} ]\n    {% else %}\n    array[]::{{data_type}}[]\n    {% endif %}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1671050798.4603271}, "macro.dbt_utils.snowflake__array_construct": {"unique_id": "macro.dbt_utils.snowflake__array_construct", "package_name": "dbt_utils", "root_path": "C:\\Users\\jessi\\git\\axelar-models\\dbt_packages\\dbt_utils", "path": "macros\\cross_db_utils\\array_construct.sql", "original_file_path": "macros\\cross_db_utils\\array_construct.sql", "name": "snowflake__array_construct", "macro_sql": "{% macro snowflake__array_construct(inputs, data_type) -%}\n    array_construct( {{ inputs|join(' , ') }} )\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1671050798.4613268}, "macro.dbt_utils.redshift__array_construct": {"unique_id": "macro.dbt_utils.redshift__array_construct", "package_name": "dbt_utils", "root_path": "C:\\Users\\jessi\\git\\axelar-models\\dbt_packages\\dbt_utils", "path": "macros\\cross_db_utils\\array_construct.sql", "original_file_path": "macros\\cross_db_utils\\array_construct.sql", "name": "redshift__array_construct", "macro_sql": "{% macro redshift__array_construct(inputs, data_type) -%}\n    array( {{ inputs|join(' , ') }} )\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1671050798.4613268}, "macro.dbt_utils.bigquery__array_construct": {"unique_id": "macro.dbt_utils.bigquery__array_construct", "package_name": "dbt_utils", "root_path": "C:\\Users\\jessi\\git\\axelar-models\\dbt_packages\\dbt_utils", "path": "macros\\cross_db_utils\\array_construct.sql", "original_file_path": "macros\\cross_db_utils\\array_construct.sql", "name": "bigquery__array_construct", "macro_sql": "{% macro bigquery__array_construct(inputs, data_type) -%}\n    [ {{ inputs|join(' , ') }} ]\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1671050798.4613268}, "macro.dbt_utils.cast_array_to_string": {"unique_id": "macro.dbt_utils.cast_array_to_string", "package_name": "dbt_utils", "root_path": "C:\\Users\\jessi\\git\\axelar-models\\dbt_packages\\dbt_utils", "path": "macros\\cross_db_utils\\cast_array_to_string.sql", "original_file_path": "macros\\cross_db_utils\\cast_array_to_string.sql", "name": "cast_array_to_string", "macro_sql": "{% macro cast_array_to_string(array) %}\n  {% do dbt_utils.xdb_deprecation_warning_without_replacement('cast_array_to_string', model.package_name, model.name) %}\n  {{ adapter.dispatch('cast_array_to_string', 'dbt_utils') (array) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.xdb_deprecation_warning_without_replacement", "macro.dbt_utils.default__cast_array_to_string"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1671050798.4625843}, "macro.dbt_utils.default__cast_array_to_string": {"unique_id": "macro.dbt_utils.default__cast_array_to_string", "package_name": "dbt_utils", "root_path": "C:\\Users\\jessi\\git\\axelar-models\\dbt_packages\\dbt_utils", "path": "macros\\cross_db_utils\\cast_array_to_string.sql", "original_file_path": "macros\\cross_db_utils\\cast_array_to_string.sql", "name": "default__cast_array_to_string", "macro_sql": "{% macro default__cast_array_to_string(array) %}\n    cast({{ array }} as {{ type_string() }})\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.type_string"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1671050798.4636576}, "macro.dbt_utils.postgres__cast_array_to_string": {"unique_id": "macro.dbt_utils.postgres__cast_array_to_string", "package_name": "dbt_utils", "root_path": "C:\\Users\\jessi\\git\\axelar-models\\dbt_packages\\dbt_utils", "path": "macros\\cross_db_utils\\cast_array_to_string.sql", "original_file_path": "macros\\cross_db_utils\\cast_array_to_string.sql", "name": "postgres__cast_array_to_string", "macro_sql": "{% macro postgres__cast_array_to_string(array) %}\n    {%- set array_as_string -%}cast({{ array }} as {{ type_string() }}){%- endset -%}\n    {{ replace(replace(array_as_string,\"'}'\",\"']'\"),\"'{'\",\"'['\") }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.type_string", "macro.dbt_utils.replace"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1671050798.4636576}, "macro.dbt_utils.redshift__cast_array_to_string": {"unique_id": "macro.dbt_utils.redshift__cast_array_to_string", "package_name": "dbt_utils", "root_path": "C:\\Users\\jessi\\git\\axelar-models\\dbt_packages\\dbt_utils", "path": "macros\\cross_db_utils\\cast_array_to_string.sql", "original_file_path": "macros\\cross_db_utils\\cast_array_to_string.sql", "name": "redshift__cast_array_to_string", "macro_sql": "{% macro redshift__cast_array_to_string(array) %}\n    cast({{ array }} as {{ type_string() }})\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.type_string"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1671050798.4636576}, "macro.dbt_utils.bigquery__cast_array_to_string": {"unique_id": "macro.dbt_utils.bigquery__cast_array_to_string", "package_name": "dbt_utils", "root_path": "C:\\Users\\jessi\\git\\axelar-models\\dbt_packages\\dbt_utils", "path": "macros\\cross_db_utils\\cast_array_to_string.sql", "original_file_path": "macros\\cross_db_utils\\cast_array_to_string.sql", "name": "bigquery__cast_array_to_string", "macro_sql": "{% macro bigquery__cast_array_to_string(array) %}\n    '['||(select string_agg(cast(element as string), ',') from unnest({{ array }}) element)||']'\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1671050798.4646654}, "macro.dbt_utils.current_timestamp": {"unique_id": "macro.dbt_utils.current_timestamp", "package_name": "dbt_utils", "root_path": "C:\\Users\\jessi\\git\\axelar-models\\dbt_packages\\dbt_utils", "path": "macros\\cross_db_utils\\current_timestamp.sql", "original_file_path": "macros\\cross_db_utils\\current_timestamp.sql", "name": "current_timestamp", "macro_sql": "{% macro current_timestamp() -%}\n  {% do dbt_utils.xdb_deprecation_warning_without_replacement('current_timestamp', model.package_name, model.name) %}\n  {{ return(adapter.dispatch('current_timestamp', 'dbt_utils')()) }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.xdb_deprecation_warning_without_replacement", "macro.dbt_utils.default__current_timestamp"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1671050798.4660876}, "macro.dbt_utils.default__current_timestamp": {"unique_id": "macro.dbt_utils.default__current_timestamp", "package_name": "dbt_utils", "root_path": "C:\\Users\\jessi\\git\\axelar-models\\dbt_packages\\dbt_utils", "path": "macros\\cross_db_utils\\current_timestamp.sql", "original_file_path": "macros\\cross_db_utils\\current_timestamp.sql", "name": "default__current_timestamp", "macro_sql": "{% macro default__current_timestamp() %}\n    current_timestamp::{{ type_timestamp() }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.type_timestamp"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1671050798.4660876}, "macro.dbt_utils.redshift__current_timestamp": {"unique_id": "macro.dbt_utils.redshift__current_timestamp", "package_name": "dbt_utils", "root_path": "C:\\Users\\jessi\\git\\axelar-models\\dbt_packages\\dbt_utils", "path": "macros\\cross_db_utils\\current_timestamp.sql", "original_file_path": "macros\\cross_db_utils\\current_timestamp.sql", "name": "redshift__current_timestamp", "macro_sql": "{% macro redshift__current_timestamp() %}\n    getdate()\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1671050798.4660876}, "macro.dbt_utils.bigquery__current_timestamp": {"unique_id": "macro.dbt_utils.bigquery__current_timestamp", "package_name": "dbt_utils", "root_path": "C:\\Users\\jessi\\git\\axelar-models\\dbt_packages\\dbt_utils", "path": "macros\\cross_db_utils\\current_timestamp.sql", "original_file_path": "macros\\cross_db_utils\\current_timestamp.sql", "name": "bigquery__current_timestamp", "macro_sql": "{% macro bigquery__current_timestamp() %}\n    current_timestamp\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1671050798.4660876}, "macro.dbt_utils.current_timestamp_in_utc": {"unique_id": "macro.dbt_utils.current_timestamp_in_utc", "package_name": "dbt_utils", "root_path": "C:\\Users\\jessi\\git\\axelar-models\\dbt_packages\\dbt_utils", "path": "macros\\cross_db_utils\\current_timestamp.sql", "original_file_path": "macros\\cross_db_utils\\current_timestamp.sql", "name": "current_timestamp_in_utc", "macro_sql": "{% macro current_timestamp_in_utc() -%}\n  {% do dbt_utils.xdb_deprecation_warning_without_replacement('current_timestamp_in_utc', model.package_name, model.name) %}\n  {{ return(adapter.dispatch('current_timestamp_in_utc', 'dbt_utils')()) }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.xdb_deprecation_warning_without_replacement", "macro.dbt_utils.snowflake__current_timestamp_in_utc"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1671050798.4670901}, "macro.dbt_utils.default__current_timestamp_in_utc": {"unique_id": "macro.dbt_utils.default__current_timestamp_in_utc", "package_name": "dbt_utils", "root_path": "C:\\Users\\jessi\\git\\axelar-models\\dbt_packages\\dbt_utils", "path": "macros\\cross_db_utils\\current_timestamp.sql", "original_file_path": "macros\\cross_db_utils\\current_timestamp.sql", "name": "default__current_timestamp_in_utc", "macro_sql": "{% macro default__current_timestamp_in_utc() %}\n    {{ dbt_utils.current_timestamp() }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.current_timestamp"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1671050798.4670901}, "macro.dbt_utils.snowflake__current_timestamp_in_utc": {"unique_id": "macro.dbt_utils.snowflake__current_timestamp_in_utc", "package_name": "dbt_utils", "root_path": "C:\\Users\\jessi\\git\\axelar-models\\dbt_packages\\dbt_utils", "path": "macros\\cross_db_utils\\current_timestamp.sql", "original_file_path": "macros\\cross_db_utils\\current_timestamp.sql", "name": "snowflake__current_timestamp_in_utc", "macro_sql": "{% macro snowflake__current_timestamp_in_utc() %}\n    convert_timezone('UTC', {{ dbt_utils.current_timestamp() }})::{{ type_timestamp() }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.current_timestamp", "macro.dbt_utils.type_timestamp"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1671050798.46809}, "macro.dbt_utils.postgres__current_timestamp_in_utc": {"unique_id": "macro.dbt_utils.postgres__current_timestamp_in_utc", "package_name": "dbt_utils", "root_path": "C:\\Users\\jessi\\git\\axelar-models\\dbt_packages\\dbt_utils", "path": "macros\\cross_db_utils\\current_timestamp.sql", "original_file_path": "macros\\cross_db_utils\\current_timestamp.sql", "name": "postgres__current_timestamp_in_utc", "macro_sql": "{% macro postgres__current_timestamp_in_utc() %}\n    (current_timestamp at time zone 'utc')::{{ type_timestamp() }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.type_timestamp"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1671050798.4691026}, "macro.dbt_utils.redshift__current_timestamp_in_utc": {"unique_id": "macro.dbt_utils.redshift__current_timestamp_in_utc", "package_name": "dbt_utils", "root_path": "C:\\Users\\jessi\\git\\axelar-models\\dbt_packages\\dbt_utils", "path": "macros\\cross_db_utils\\current_timestamp.sql", "original_file_path": "macros\\cross_db_utils\\current_timestamp.sql", "name": "redshift__current_timestamp_in_utc", "macro_sql": "{% macro redshift__current_timestamp_in_utc() %}\n    {{ return(dbt_utils.default__current_timestamp_in_utc()) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__current_timestamp_in_utc"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1671050798.4691026}, "macro.dbt_utils.any_value": {"unique_id": "macro.dbt_utils.any_value", "package_name": "dbt_utils", "root_path": "C:\\Users\\jessi\\git\\axelar-models\\dbt_packages\\dbt_utils", "path": "macros\\cross_db_utils\\deprecated\\any_value.sql", "original_file_path": "macros\\cross_db_utils\\deprecated\\any_value.sql", "name": "any_value", "macro_sql": "{% macro any_value(expression) -%}\n    {{ return(adapter.dispatch('any_value', 'dbt_utils') (expression)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__any_value"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1671050798.4700878}, "macro.dbt_utils.default__any_value": {"unique_id": "macro.dbt_utils.default__any_value", "package_name": "dbt_utils", "root_path": "C:\\Users\\jessi\\git\\axelar-models\\dbt_packages\\dbt_utils", "path": "macros\\cross_db_utils\\deprecated\\any_value.sql", "original_file_path": "macros\\cross_db_utils\\deprecated\\any_value.sql", "name": "default__any_value", "macro_sql": "{% macro default__any_value(expression) -%}\n    {% do dbt_utils.xdb_deprecation_warning('any_value', model.package_name, model.name) %}\n    {{ return(adapter.dispatch('any_value', 'dbt') (expression)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.xdb_deprecation_warning", "macro.dbt_utils.any_value", "macro.dbt_utils.default__any_value"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1671050798.4700878}, "macro.dbt_utils.bool_or": {"unique_id": "macro.dbt_utils.bool_or", "package_name": "dbt_utils", "root_path": "C:\\Users\\jessi\\git\\axelar-models\\dbt_packages\\dbt_utils", "path": "macros\\cross_db_utils\\deprecated\\bool_or.sql", "original_file_path": "macros\\cross_db_utils\\deprecated\\bool_or.sql", "name": "bool_or", "macro_sql": "{% macro bool_or(expression) -%}\n    {{ return(adapter.dispatch('bool_or', 'dbt_utils') (expression)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__bool_or"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1671050798.4711576}, "macro.dbt_utils.default__bool_or": {"unique_id": "macro.dbt_utils.default__bool_or", "package_name": "dbt_utils", "root_path": "C:\\Users\\jessi\\git\\axelar-models\\dbt_packages\\dbt_utils", "path": "macros\\cross_db_utils\\deprecated\\bool_or.sql", "original_file_path": "macros\\cross_db_utils\\deprecated\\bool_or.sql", "name": "default__bool_or", "macro_sql": "{% macro default__bool_or(expression) -%}\n    {% do dbt_utils.xdb_deprecation_warning('bool_or', model.package_name, model.name) %}\n    {{ return(adapter.dispatch('bool_or', 'dbt') (expression)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.xdb_deprecation_warning", "macro.dbt_utils.bool_or", "macro.dbt_snowflake.snowflake__bool_or"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1671050798.4711576}, "macro.dbt_utils.cast_bool_to_text": {"unique_id": "macro.dbt_utils.cast_bool_to_text", "package_name": "dbt_utils", "root_path": "C:\\Users\\jessi\\git\\axelar-models\\dbt_packages\\dbt_utils", "path": "macros\\cross_db_utils\\deprecated\\cast_bool_to_text.sql", "original_file_path": "macros\\cross_db_utils\\deprecated\\cast_bool_to_text.sql", "name": "cast_bool_to_text", "macro_sql": "{% macro cast_bool_to_text(field) %}\n  {{ adapter.dispatch('cast_bool_to_text', 'dbt_utils') (field) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__cast_bool_to_text"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1671050798.4726617}, "macro.dbt_utils.default__cast_bool_to_text": {"unique_id": "macro.dbt_utils.default__cast_bool_to_text", "package_name": "dbt_utils", "root_path": "C:\\Users\\jessi\\git\\axelar-models\\dbt_packages\\dbt_utils", "path": "macros\\cross_db_utils\\deprecated\\cast_bool_to_text.sql", "original_file_path": "macros\\cross_db_utils\\deprecated\\cast_bool_to_text.sql", "name": "default__cast_bool_to_text", "macro_sql": "{% macro default__cast_bool_to_text(field) %}\n  {% do dbt_utils.xdb_deprecation_warning('cast_bool_to_text', model.package_name, model.name) %}\n  {{ adapter.dispatch('cast_bool_to_text', 'dbt') (field) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.xdb_deprecation_warning", "macro.dbt_utils.cast_bool_to_text", "macro.dbt_utils.default__cast_bool_to_text"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1671050798.4726617}, "macro.dbt_utils.concat": {"unique_id": "macro.dbt_utils.concat", "package_name": "dbt_utils", "root_path": "C:\\Users\\jessi\\git\\axelar-models\\dbt_packages\\dbt_utils", "path": "macros\\cross_db_utils\\deprecated\\concat.sql", "original_file_path": "macros\\cross_db_utils\\deprecated\\concat.sql", "name": "concat", "macro_sql": "{% macro concat(fields) -%}\n  {{ return(adapter.dispatch('concat', 'dbt_utils')(fields)) }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__concat"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1671050798.4736772}, "macro.dbt_utils.default__concat": {"unique_id": "macro.dbt_utils.default__concat", "package_name": "dbt_utils", "root_path": "C:\\Users\\jessi\\git\\axelar-models\\dbt_packages\\dbt_utils", "path": "macros\\cross_db_utils\\deprecated\\concat.sql", "original_file_path": "macros\\cross_db_utils\\deprecated\\concat.sql", "name": "default__concat", "macro_sql": "{% macro default__concat(fields) -%}\n  {% do dbt_utils.xdb_deprecation_warning('concat', model.package_name, model.name) %}\n  {{ return(adapter.dispatch('concat', 'dbt')(fields)) }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.xdb_deprecation_warning", "macro.dbt_utils.concat", "macro.dbt_utils.default__concat"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1671050798.4736772}, "macro.dbt_utils.type_string": {"unique_id": "macro.dbt_utils.type_string", "package_name": "dbt_utils", "root_path": "C:\\Users\\jessi\\git\\axelar-models\\dbt_packages\\dbt_utils", "path": "macros\\cross_db_utils\\deprecated\\datatypes.sql", "original_file_path": "macros\\cross_db_utils\\deprecated\\datatypes.sql", "name": "type_string", "macro_sql": "\n\n{%- macro type_string() -%}\n    {{ return(adapter.dispatch('type_string', 'dbt_utils')()) }}\n{%- endmacro -%}\n\n", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__type_string"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1671050798.4746947}, "macro.dbt_utils.default__type_string": {"unique_id": "macro.dbt_utils.default__type_string", "package_name": "dbt_utils", "root_path": "C:\\Users\\jessi\\git\\axelar-models\\dbt_packages\\dbt_utils", "path": "macros\\cross_db_utils\\deprecated\\datatypes.sql", "original_file_path": "macros\\cross_db_utils\\deprecated\\datatypes.sql", "name": "default__type_string", "macro_sql": "{% macro default__type_string() %}\n    {% do dbt_utils.xdb_deprecation_warning('type_string', model.package_name, model.name) %}\n    {{ return(adapter.dispatch('type_string', 'dbt')()) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.xdb_deprecation_warning", "macro.dbt_utils.type_string", "macro.dbt_utils.default__type_string"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1671050798.4756947}, "macro.dbt_utils.type_timestamp": {"unique_id": "macro.dbt_utils.type_timestamp", "package_name": "dbt_utils", "root_path": "C:\\Users\\jessi\\git\\axelar-models\\dbt_packages\\dbt_utils", "path": "macros\\cross_db_utils\\deprecated\\datatypes.sql", "original_file_path": "macros\\cross_db_utils\\deprecated\\datatypes.sql", "name": "type_timestamp", "macro_sql": "\n\n{%- macro type_timestamp() -%}\n    {{ return(adapter.dispatch('type_timestamp', 'dbt_utils')()) }}\n{%- endmacro -%}\n\n", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__type_timestamp"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1671050798.4756947}, "macro.dbt_utils.default__type_timestamp": {"unique_id": "macro.dbt_utils.default__type_timestamp", "package_name": "dbt_utils", "root_path": "C:\\Users\\jessi\\git\\axelar-models\\dbt_packages\\dbt_utils", "path": "macros\\cross_db_utils\\deprecated\\datatypes.sql", "original_file_path": "macros\\cross_db_utils\\deprecated\\datatypes.sql", "name": "default__type_timestamp", "macro_sql": "{% macro default__type_timestamp() %}\n    {% do dbt_utils.xdb_deprecation_warning('type_timestamp', model.package_name, model.name) %}\n    {{ return(adapter.dispatch('type_timestamp', 'dbt')()) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.xdb_deprecation_warning", "macro.dbt_utils.type_timestamp", "macro.dbt_utils.default__type_timestamp"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1671050798.4756947}, "macro.dbt_utils.type_float": {"unique_id": "macro.dbt_utils.type_float", "package_name": "dbt_utils", "root_path": "C:\\Users\\jessi\\git\\axelar-models\\dbt_packages\\dbt_utils", "path": "macros\\cross_db_utils\\deprecated\\datatypes.sql", "original_file_path": "macros\\cross_db_utils\\deprecated\\datatypes.sql", "name": "type_float", "macro_sql": "\n\n{%- macro type_float() -%}\n    {{ return(adapter.dispatch('type_float', 'dbt_utils')()) }}\n{%- endmacro -%}\n\n", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__type_float"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1671050798.4766948}, "macro.dbt_utils.default__type_float": {"unique_id": "macro.dbt_utils.default__type_float", "package_name": "dbt_utils", "root_path": "C:\\Users\\jessi\\git\\axelar-models\\dbt_packages\\dbt_utils", "path": "macros\\cross_db_utils\\deprecated\\datatypes.sql", "original_file_path": "macros\\cross_db_utils\\deprecated\\datatypes.sql", "name": "default__type_float", "macro_sql": "{% macro default__type_float() %}\n    {% do dbt_utils.xdb_deprecation_warning('type_float', model.package_name, model.name) %}\n    {{ return(adapter.dispatch('type_float', 'dbt')()) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.xdb_deprecation_warning", "macro.dbt_utils.type_float", "macro.dbt_utils.default__type_float"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1671050798.4766948}, "macro.dbt_utils.type_numeric": {"unique_id": "macro.dbt_utils.type_numeric", "package_name": "dbt_utils", "root_path": "C:\\Users\\jessi\\git\\axelar-models\\dbt_packages\\dbt_utils", "path": "macros\\cross_db_utils\\deprecated\\datatypes.sql", "original_file_path": "macros\\cross_db_utils\\deprecated\\datatypes.sql", "name": "type_numeric", "macro_sql": "\n\n{%- macro type_numeric() -%}\n    {{ return(adapter.dispatch('type_numeric', 'dbt_utils')()) }}\n{%- endmacro -%}\n\n", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__type_numeric"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1671050798.4766948}, "macro.dbt_utils.default__type_numeric": {"unique_id": "macro.dbt_utils.default__type_numeric", "package_name": "dbt_utils", "root_path": "C:\\Users\\jessi\\git\\axelar-models\\dbt_packages\\dbt_utils", "path": "macros\\cross_db_utils\\deprecated\\datatypes.sql", "original_file_path": "macros\\cross_db_utils\\deprecated\\datatypes.sql", "name": "default__type_numeric", "macro_sql": "{% macro default__type_numeric() %}\n    {% do dbt_utils.xdb_deprecation_warning('type_numeric', model.package_name, model.name) %}\n    {{ return(adapter.dispatch('type_numeric', 'dbt')()) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.xdb_deprecation_warning", "macro.dbt_utils.type_numeric", "macro.dbt_utils.default__type_numeric"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1671050798.4776945}, "macro.dbt_utils.type_bigint": {"unique_id": "macro.dbt_utils.type_bigint", "package_name": "dbt_utils", "root_path": "C:\\Users\\jessi\\git\\axelar-models\\dbt_packages\\dbt_utils", "path": "macros\\cross_db_utils\\deprecated\\datatypes.sql", "original_file_path": "macros\\cross_db_utils\\deprecated\\datatypes.sql", "name": "type_bigint", "macro_sql": "\n\n{%- macro type_bigint() -%}\n    {{ return(adapter.dispatch('type_bigint', 'dbt_utils')()) }}\n{%- endmacro -%}\n\n", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__type_bigint"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1671050798.4776945}, "macro.dbt_utils.default__type_bigint": {"unique_id": "macro.dbt_utils.default__type_bigint", "package_name": "dbt_utils", "root_path": "C:\\Users\\jessi\\git\\axelar-models\\dbt_packages\\dbt_utils", "path": "macros\\cross_db_utils\\deprecated\\datatypes.sql", "original_file_path": "macros\\cross_db_utils\\deprecated\\datatypes.sql", "name": "default__type_bigint", "macro_sql": "{% macro default__type_bigint() %}\n    {% do dbt_utils.xdb_deprecation_warning('type_bigint', model.package_name, model.name) %}\n    {{ return(adapter.dispatch('type_bigint', 'dbt')()) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.xdb_deprecation_warning", "macro.dbt_utils.type_bigint", "macro.dbt_utils.default__type_bigint"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1671050798.4776945}, "macro.dbt_utils.type_int": {"unique_id": "macro.dbt_utils.type_int", "package_name": "dbt_utils", "root_path": "C:\\Users\\jessi\\git\\axelar-models\\dbt_packages\\dbt_utils", "path": "macros\\cross_db_utils\\deprecated\\datatypes.sql", "original_file_path": "macros\\cross_db_utils\\deprecated\\datatypes.sql", "name": "type_int", "macro_sql": "\n\n{%- macro type_int() -%}\n    {{ return(adapter.dispatch('type_int', 'dbt_utils')()) }}\n{%- endmacro -%}\n\n", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__type_int"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1671050798.4786851}, "macro.dbt_utils.default__type_int": {"unique_id": "macro.dbt_utils.default__type_int", "package_name": "dbt_utils", "root_path": "C:\\Users\\jessi\\git\\axelar-models\\dbt_packages\\dbt_utils", "path": "macros\\cross_db_utils\\deprecated\\datatypes.sql", "original_file_path": "macros\\cross_db_utils\\deprecated\\datatypes.sql", "name": "default__type_int", "macro_sql": "{% macro default__type_int() %}\n    {% do dbt_utils.xdb_deprecation_warning('type_int', model.package_name, model.name) %}\n    {{ return(adapter.dispatch('type_int', 'dbt')()) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.xdb_deprecation_warning", "macro.dbt_utils.type_int", "macro.dbt_utils.default__type_int"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1671050798.4786851}, "macro.dbt_utils.dateadd": {"unique_id": "macro.dbt_utils.dateadd", "package_name": "dbt_utils", "root_path": "C:\\Users\\jessi\\git\\axelar-models\\dbt_packages\\dbt_utils", "path": "macros\\cross_db_utils\\deprecated\\dateadd.sql", "original_file_path": "macros\\cross_db_utils\\deprecated\\dateadd.sql", "name": "dateadd", "macro_sql": "{% macro dateadd(datepart, interval, from_date_or_timestamp) %}\n  {{ return(adapter.dispatch('dateadd', 'dbt_utils')(datepart, interval, from_date_or_timestamp)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__dateadd"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1671050798.4797707}, "macro.dbt_utils.default__dateadd": {"unique_id": "macro.dbt_utils.default__dateadd", "package_name": "dbt_utils", "root_path": "C:\\Users\\jessi\\git\\axelar-models\\dbt_packages\\dbt_utils", "path": "macros\\cross_db_utils\\deprecated\\dateadd.sql", "original_file_path": "macros\\cross_db_utils\\deprecated\\dateadd.sql", "name": "default__dateadd", "macro_sql": "{% macro default__dateadd(datepart, interval, from_date_or_timestamp) %}\n  {% do dbt_utils.xdb_deprecation_warning('dateadd', model.package_name, model.name) %}\n  {{ return(adapter.dispatch('dateadd', 'dbt')(datepart, interval, from_date_or_timestamp)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.xdb_deprecation_warning", "macro.dbt_utils.dateadd", "macro.dbt_utils.default__dateadd"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1671050798.480521}, "macro.dbt_utils.datediff": {"unique_id": "macro.dbt_utils.datediff", "package_name": "dbt_utils", "root_path": "C:\\Users\\jessi\\git\\axelar-models\\dbt_packages\\dbt_utils", "path": "macros\\cross_db_utils\\deprecated\\datediff.sql", "original_file_path": "macros\\cross_db_utils\\deprecated\\datediff.sql", "name": "datediff", "macro_sql": "{% macro datediff(first_date, second_date, datepart) %}\n  {{ return(adapter.dispatch('datediff', 'dbt_utils')(first_date, second_date, datepart)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__datediff"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1671050798.4826791}, "macro.dbt_utils.default__datediff": {"unique_id": "macro.dbt_utils.default__datediff", "package_name": "dbt_utils", "root_path": "C:\\Users\\jessi\\git\\axelar-models\\dbt_packages\\dbt_utils", "path": "macros\\cross_db_utils\\deprecated\\datediff.sql", "original_file_path": "macros\\cross_db_utils\\deprecated\\datediff.sql", "name": "default__datediff", "macro_sql": "{% macro default__datediff(first_date, second_date, datepart) %}\n  {% do dbt_utils.xdb_deprecation_warning('datediff', model.package_name, model.name) %}\n  {{ return(adapter.dispatch('datediff', 'dbt')(first_date, second_date, datepart)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.xdb_deprecation_warning", "macro.dbt_utils.datediff", "macro.dbt_utils.default__datediff"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1671050798.4826791}, "macro.dbt_utils.date_trunc": {"unique_id": "macro.dbt_utils.date_trunc", "package_name": "dbt_utils", "root_path": "C:\\Users\\jessi\\git\\axelar-models\\dbt_packages\\dbt_utils", "path": "macros\\cross_db_utils\\deprecated\\date_trunc.sql", "original_file_path": "macros\\cross_db_utils\\deprecated\\date_trunc.sql", "name": "date_trunc", "macro_sql": "{% macro date_trunc(datepart, date) -%}\n  {{ return(adapter.dispatch('date_trunc', 'dbt_utils') (datepart, date)) }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__date_trunc"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1671050798.4841473}, "macro.dbt_utils.default__date_trunc": {"unique_id": "macro.dbt_utils.default__date_trunc", "package_name": "dbt_utils", "root_path": "C:\\Users\\jessi\\git\\axelar-models\\dbt_packages\\dbt_utils", "path": "macros\\cross_db_utils\\deprecated\\date_trunc.sql", "original_file_path": "macros\\cross_db_utils\\deprecated\\date_trunc.sql", "name": "default__date_trunc", "macro_sql": "{% macro default__date_trunc(datepart, date) -%}\n  {% do dbt_utils.xdb_deprecation_warning('date_trunc', model.package_name, model.name) %}\n  {{ return(adapter.dispatch('date_trunc', 'dbt') (datepart, date)) }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.xdb_deprecation_warning", "macro.dbt_utils.date_trunc", "macro.dbt_utils.default__date_trunc"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1671050798.4841473}, "macro.dbt_utils.escape_single_quotes": {"unique_id": "macro.dbt_utils.escape_single_quotes", "package_name": "dbt_utils", "root_path": "C:\\Users\\jessi\\git\\axelar-models\\dbt_packages\\dbt_utils", "path": "macros\\cross_db_utils\\deprecated\\escape_single_quotes.sql", "original_file_path": "macros\\cross_db_utils\\deprecated\\escape_single_quotes.sql", "name": "escape_single_quotes", "macro_sql": "{% macro escape_single_quotes(expression) %}\n      {{ return(adapter.dispatch('escape_single_quotes', 'dbt_utils') (expression)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__escape_single_quotes"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1671050798.4851933}, "macro.dbt_utils.default__escape_single_quotes": {"unique_id": "macro.dbt_utils.default__escape_single_quotes", "package_name": "dbt_utils", "root_path": "C:\\Users\\jessi\\git\\axelar-models\\dbt_packages\\dbt_utils", "path": "macros\\cross_db_utils\\deprecated\\escape_single_quotes.sql", "original_file_path": "macros\\cross_db_utils\\deprecated\\escape_single_quotes.sql", "name": "default__escape_single_quotes", "macro_sql": "{% macro default__escape_single_quotes(expression) %}\n      {% do dbt_utils.xdb_deprecation_warning('escape_single_quotes', model.package_name, model.name) %}\n      {{ return(adapter.dispatch('escape_single_quotes', 'dbt') (expression)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.xdb_deprecation_warning", "macro.dbt_utils.escape_single_quotes", "macro.dbt_snowflake.snowflake__escape_single_quotes"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1671050798.4861739}, "macro.dbt_utils.except": {"unique_id": "macro.dbt_utils.except", "package_name": "dbt_utils", "root_path": "C:\\Users\\jessi\\git\\axelar-models\\dbt_packages\\dbt_utils", "path": "macros\\cross_db_utils\\deprecated\\except.sql", "original_file_path": "macros\\cross_db_utils\\deprecated\\except.sql", "name": "except", "macro_sql": "{% macro except() %}\n  {{ return(adapter.dispatch('except', 'dbt_utils')()) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__except"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1671050798.4861739}, "macro.dbt_utils.default__except": {"unique_id": "macro.dbt_utils.default__except", "package_name": "dbt_utils", "root_path": "C:\\Users\\jessi\\git\\axelar-models\\dbt_packages\\dbt_utils", "path": "macros\\cross_db_utils\\deprecated\\except.sql", "original_file_path": "macros\\cross_db_utils\\deprecated\\except.sql", "name": "default__except", "macro_sql": "{% macro default__except() %}\n  {% do dbt_utils.xdb_deprecation_warning('except', model.package_name, model.name) %}\n  {{ return(adapter.dispatch('except', 'dbt')()) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.xdb_deprecation_warning", "macro.dbt_utils.except", "macro.dbt_utils.default__except"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1671050798.4871967}, "macro.dbt_utils.hash": {"unique_id": "macro.dbt_utils.hash", "package_name": "dbt_utils", "root_path": "C:\\Users\\jessi\\git\\axelar-models\\dbt_packages\\dbt_utils", "path": "macros\\cross_db_utils\\deprecated\\hash.sql", "original_file_path": "macros\\cross_db_utils\\deprecated\\hash.sql", "name": "hash", "macro_sql": "{% macro hash(field) -%}\n  {{ return(adapter.dispatch('hash', 'dbt_utils') (field)) }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__hash"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1671050798.4871967}, "macro.dbt_utils.default__hash": {"unique_id": "macro.dbt_utils.default__hash", "package_name": "dbt_utils", "root_path": "C:\\Users\\jessi\\git\\axelar-models\\dbt_packages\\dbt_utils", "path": "macros\\cross_db_utils\\deprecated\\hash.sql", "original_file_path": "macros\\cross_db_utils\\deprecated\\hash.sql", "name": "default__hash", "macro_sql": "{% macro default__hash(field) -%}\n  {% do dbt_utils.xdb_deprecation_warning('hash', model.package_name, model.name) %}\n  {{ return(adapter.dispatch('hash', 'dbt') (field)) }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.xdb_deprecation_warning", "macro.dbt_utils.hash", "macro.dbt_utils.default__hash"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1671050798.4881985}, "macro.dbt_utils.identifier": {"unique_id": "macro.dbt_utils.identifier", "package_name": "dbt_utils", "root_path": "C:\\Users\\jessi\\git\\axelar-models\\dbt_packages\\dbt_utils", "path": "macros\\cross_db_utils\\deprecated\\identifier.sql", "original_file_path": "macros\\cross_db_utils\\deprecated\\identifier.sql", "name": "identifier", "macro_sql": "{% macro identifier(value) %}\t\n  {%- set error_message = '\n    Warning: the `identifier` macro is no longer supported and will be deprecated in a future release of dbt-utils. \\\n    Use `adapter.quote` instead. The {}.{} model triggered this warning. \\\n    '.format(model.package_name, model.name) -%}\n  {%- do exceptions.warn(error_message) -%}\n  {{ return(adapter.dispatch('identifier', 'dbt_utils') (value)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__identifier"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1671050798.4891915}, "macro.dbt_utils.default__identifier": {"unique_id": "macro.dbt_utils.default__identifier", "package_name": "dbt_utils", "root_path": "C:\\Users\\jessi\\git\\axelar-models\\dbt_packages\\dbt_utils", "path": "macros\\cross_db_utils\\deprecated\\identifier.sql", "original_file_path": "macros\\cross_db_utils\\deprecated\\identifier.sql", "name": "default__identifier", "macro_sql": "{% macro default__identifier(value) -%}\t\n    \"{{ value }}\"\t\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1671050798.4891915}, "macro.dbt_utils.bigquery__identifier": {"unique_id": "macro.dbt_utils.bigquery__identifier", "package_name": "dbt_utils", "root_path": "C:\\Users\\jessi\\git\\axelar-models\\dbt_packages\\dbt_utils", "path": "macros\\cross_db_utils\\deprecated\\identifier.sql", "original_file_path": "macros\\cross_db_utils\\deprecated\\identifier.sql", "name": "bigquery__identifier", "macro_sql": "{% macro bigquery__identifier(value) -%}\t\n    `{{ value }}`\t\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1671050798.4891915}, "macro.dbt_utils.intersect": {"unique_id": "macro.dbt_utils.intersect", "package_name": "dbt_utils", "root_path": "C:\\Users\\jessi\\git\\axelar-models\\dbt_packages\\dbt_utils", "path": "macros\\cross_db_utils\\deprecated\\intersect.sql", "original_file_path": "macros\\cross_db_utils\\deprecated\\intersect.sql", "name": "intersect", "macro_sql": "{% macro intersect() %}\n  {{ return(adapter.dispatch('intersect', 'dbt_utils')()) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__intersect"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1671050798.4901733}, "macro.dbt_utils.default__intersect": {"unique_id": "macro.dbt_utils.default__intersect", "package_name": "dbt_utils", "root_path": "C:\\Users\\jessi\\git\\axelar-models\\dbt_packages\\dbt_utils", "path": "macros\\cross_db_utils\\deprecated\\intersect.sql", "original_file_path": "macros\\cross_db_utils\\deprecated\\intersect.sql", "name": "default__intersect", "macro_sql": "{% macro default__intersect() %}\n  {% do dbt_utils.xdb_deprecation_warning('intersect', model.package_name, model.name) %}\n  {{ return(adapter.dispatch('intersect', 'dbt')()) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.xdb_deprecation_warning", "macro.dbt_utils.intersect", "macro.dbt_utils.default__intersect"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1671050798.4901733}, "macro.dbt_utils.last_day": {"unique_id": "macro.dbt_utils.last_day", "package_name": "dbt_utils", "root_path": "C:\\Users\\jessi\\git\\axelar-models\\dbt_packages\\dbt_utils", "path": "macros\\cross_db_utils\\deprecated\\last_day.sql", "original_file_path": "macros\\cross_db_utils\\deprecated\\last_day.sql", "name": "last_day", "macro_sql": "{% macro last_day(date, datepart) %}\n  {{ return(adapter.dispatch('last_day', 'dbt_utils') (date, datepart)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__last_day"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1671050798.4911904}, "macro.dbt_utils.default__last_day": {"unique_id": "macro.dbt_utils.default__last_day", "package_name": "dbt_utils", "root_path": "C:\\Users\\jessi\\git\\axelar-models\\dbt_packages\\dbt_utils", "path": "macros\\cross_db_utils\\deprecated\\last_day.sql", "original_file_path": "macros\\cross_db_utils\\deprecated\\last_day.sql", "name": "default__last_day", "macro_sql": "{% macro default__last_day(date, datepart) %}\n  {% do dbt_utils.xdb_deprecation_warning('last_day', model.package_name, model.name) %}\n  {{ return(adapter.dispatch('last_day', 'dbt') (date, datepart)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.xdb_deprecation_warning", "macro.dbt_utils.last_day", "macro.dbt_utils.default__last_day"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1671050798.4911904}, "macro.dbt_utils.length": {"unique_id": "macro.dbt_utils.length", "package_name": "dbt_utils", "root_path": "C:\\Users\\jessi\\git\\axelar-models\\dbt_packages\\dbt_utils", "path": "macros\\cross_db_utils\\deprecated\\length.sql", "original_file_path": "macros\\cross_db_utils\\deprecated\\length.sql", "name": "length", "macro_sql": "{% macro length(expression) -%}\n    {{ return(adapter.dispatch('length', 'dbt_utils') (expression)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__length"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1671050798.4921918}, "macro.dbt_utils.default__length": {"unique_id": "macro.dbt_utils.default__length", "package_name": "dbt_utils", "root_path": "C:\\Users\\jessi\\git\\axelar-models\\dbt_packages\\dbt_utils", "path": "macros\\cross_db_utils\\deprecated\\length.sql", "original_file_path": "macros\\cross_db_utils\\deprecated\\length.sql", "name": "default__length", "macro_sql": "{% macro default__length(expression) -%}\n    {% do dbt_utils.xdb_deprecation_warning('length', model.package_name, model.name) %}\n    {{ return(adapter.dispatch('length', 'dbt') (expression)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.xdb_deprecation_warning", "macro.dbt_utils.length", "macro.dbt_utils.default__length"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1671050798.4921918}, "macro.dbt_utils.listagg": {"unique_id": "macro.dbt_utils.listagg", "package_name": "dbt_utils", "root_path": "C:\\Users\\jessi\\git\\axelar-models\\dbt_packages\\dbt_utils", "path": "macros\\cross_db_utils\\deprecated\\listagg.sql", "original_file_path": "macros\\cross_db_utils\\deprecated\\listagg.sql", "name": "listagg", "macro_sql": "{% macro listagg(measure, delimiter_text=\"','\", order_by_clause=none, limit_num=none) -%}\n    {{ return(adapter.dispatch('listagg', 'dbt_utils') (measure, delimiter_text, order_by_clause, limit_num)) }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__listagg"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1671050798.4931939}, "macro.dbt_utils.default__listagg": {"unique_id": "macro.dbt_utils.default__listagg", "package_name": "dbt_utils", "root_path": "C:\\Users\\jessi\\git\\axelar-models\\dbt_packages\\dbt_utils", "path": "macros\\cross_db_utils\\deprecated\\listagg.sql", "original_file_path": "macros\\cross_db_utils\\deprecated\\listagg.sql", "name": "default__listagg", "macro_sql": "{% macro default__listagg(measure, delimiter_text=\"','\", order_by_clause=none, limit_num=none) -%}\n    {% do dbt_utils.xdb_deprecation_warning('listagg', model.package_name, model.name) %}\n    {{ return(adapter.dispatch('listagg', 'dbt') (measure, delimiter_text, order_by_clause, limit_num)) }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.xdb_deprecation_warning", "macro.dbt_utils.listagg", "macro.dbt_utils.default__listagg"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1671050798.4941807}, "macro.dbt_utils.string_literal": {"unique_id": "macro.dbt_utils.string_literal", "package_name": "dbt_utils", "root_path": "C:\\Users\\jessi\\git\\axelar-models\\dbt_packages\\dbt_utils", "path": "macros\\cross_db_utils\\deprecated\\literal.sql", "original_file_path": "macros\\cross_db_utils\\deprecated\\literal.sql", "name": "string_literal", "macro_sql": "{%- macro string_literal(value) -%}\n  {{ return(adapter.dispatch('string_literal', 'dbt_utils') (value)) }}\n{%- endmacro -%}\n\n", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__string_literal"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1671050798.4941807}, "macro.dbt_utils.default__string_literal": {"unique_id": "macro.dbt_utils.default__string_literal", "package_name": "dbt_utils", "root_path": "C:\\Users\\jessi\\git\\axelar-models\\dbt_packages\\dbt_utils", "path": "macros\\cross_db_utils\\deprecated\\literal.sql", "original_file_path": "macros\\cross_db_utils\\deprecated\\literal.sql", "name": "default__string_literal", "macro_sql": "{%- macro default__string_literal(value) -%}\n  {% do dbt_utils.xdb_deprecation_warning('string_literal', model.package_name, model.name) %}\n  {{ return(adapter.dispatch('string_literal', 'dbt') (value)) }}\n{%- endmacro -%}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.xdb_deprecation_warning", "macro.dbt_utils.string_literal", "macro.dbt_utils.default__string_literal"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1671050798.495198}, "macro.dbt_utils.position": {"unique_id": "macro.dbt_utils.position", "package_name": "dbt_utils", "root_path": "C:\\Users\\jessi\\git\\axelar-models\\dbt_packages\\dbt_utils", "path": "macros\\cross_db_utils\\deprecated\\position.sql", "original_file_path": "macros\\cross_db_utils\\deprecated\\position.sql", "name": "position", "macro_sql": "{% macro position(substring_text, string_text) -%}\n    {{ return(adapter.dispatch('position', 'dbt_utils') (substring_text, string_text)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__position"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1671050798.4961782}, "macro.dbt_utils.default__position": {"unique_id": "macro.dbt_utils.default__position", "package_name": "dbt_utils", "root_path": "C:\\Users\\jessi\\git\\axelar-models\\dbt_packages\\dbt_utils", "path": "macros\\cross_db_utils\\deprecated\\position.sql", "original_file_path": "macros\\cross_db_utils\\deprecated\\position.sql", "name": "default__position", "macro_sql": "{% macro default__position(substring_text, string_text) -%}\n    {% do dbt_utils.xdb_deprecation_warning('position', model.package_name, model.name) %}\n    {{ return(adapter.dispatch('position', 'dbt') (substring_text, string_text)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.xdb_deprecation_warning", "macro.dbt_utils.position", "macro.dbt_utils.default__position"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1671050798.4965923}, "macro.dbt_utils.replace": {"unique_id": "macro.dbt_utils.replace", "package_name": "dbt_utils", "root_path": "C:\\Users\\jessi\\git\\axelar-models\\dbt_packages\\dbt_utils", "path": "macros\\cross_db_utils\\deprecated\\replace.sql", "original_file_path": "macros\\cross_db_utils\\deprecated\\replace.sql", "name": "replace", "macro_sql": "{% macro replace(field, old_chars, new_chars) -%}\n    {{ return(adapter.dispatch('replace', 'dbt_utils') (field, old_chars, new_chars)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__replace"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1671050798.4971647}, "macro.dbt_utils.default__replace": {"unique_id": "macro.dbt_utils.default__replace", "package_name": "dbt_utils", "root_path": "C:\\Users\\jessi\\git\\axelar-models\\dbt_packages\\dbt_utils", "path": "macros\\cross_db_utils\\deprecated\\replace.sql", "original_file_path": "macros\\cross_db_utils\\deprecated\\replace.sql", "name": "default__replace", "macro_sql": "{% macro default__replace(field, old_chars, new_chars) -%}\n  {% do dbt_utils.xdb_deprecation_warning('replace', model.package_name, model.name) %}\n    {{ return(adapter.dispatch('replace', 'dbt') (field, old_chars, new_chars)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.xdb_deprecation_warning", "macro.dbt_utils.replace", "macro.dbt_utils.default__replace"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1671050798.4971647}, "macro.dbt_utils.right": {"unique_id": "macro.dbt_utils.right", "package_name": "dbt_utils", "root_path": "C:\\Users\\jessi\\git\\axelar-models\\dbt_packages\\dbt_utils", "path": "macros\\cross_db_utils\\deprecated\\right.sql", "original_file_path": "macros\\cross_db_utils\\deprecated\\right.sql", "name": "right", "macro_sql": "{% macro right(string_text, length_expression) -%}\n    {{ return(adapter.dispatch('right', 'dbt_utils') (string_text, length_expression)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__right"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1671050798.4982038}, "macro.dbt_utils.default__right": {"unique_id": "macro.dbt_utils.default__right", "package_name": "dbt_utils", "root_path": "C:\\Users\\jessi\\git\\axelar-models\\dbt_packages\\dbt_utils", "path": "macros\\cross_db_utils\\deprecated\\right.sql", "original_file_path": "macros\\cross_db_utils\\deprecated\\right.sql", "name": "default__right", "macro_sql": "{% macro default__right(string_text, length_expression) -%}\n    {% do dbt_utils.xdb_deprecation_warning('right', model.package_name, model.name) %}\n    {{ return(adapter.dispatch('right', 'dbt') (string_text, length_expression)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.xdb_deprecation_warning", "macro.dbt_utils.right", "macro.dbt_snowflake.snowflake__right"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1671050798.4992}, "macro.dbt_utils.safe_cast": {"unique_id": "macro.dbt_utils.safe_cast", "package_name": "dbt_utils", "root_path": "C:\\Users\\jessi\\git\\axelar-models\\dbt_packages\\dbt_utils", "path": "macros\\cross_db_utils\\deprecated\\safe_cast.sql", "original_file_path": "macros\\cross_db_utils\\deprecated\\safe_cast.sql", "name": "safe_cast", "macro_sql": "{% macro safe_cast(field, type) %}\n  {{ return(adapter.dispatch('safe_cast', 'dbt_utils') (field, type)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__safe_cast"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1671050798.4992}, "macro.dbt_utils.default__safe_cast": {"unique_id": "macro.dbt_utils.default__safe_cast", "package_name": "dbt_utils", "root_path": "C:\\Users\\jessi\\git\\axelar-models\\dbt_packages\\dbt_utils", "path": "macros\\cross_db_utils\\deprecated\\safe_cast.sql", "original_file_path": "macros\\cross_db_utils\\deprecated\\safe_cast.sql", "name": "default__safe_cast", "macro_sql": "{% macro default__safe_cast(field, type) %}\n  {% do dbt_utils.xdb_deprecation_warning('safe_cast', model.package_name, model.name) %}\n  {{ return(adapter.dispatch('safe_cast', 'dbt') (field, type)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.xdb_deprecation_warning", "macro.dbt_utils.safe_cast", "macro.dbt_snowflake.snowflake__safe_cast"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1671050798.5002015}, "macro.dbt_utils.split_part": {"unique_id": "macro.dbt_utils.split_part", "package_name": "dbt_utils", "root_path": "C:\\Users\\jessi\\git\\axelar-models\\dbt_packages\\dbt_utils", "path": "macros\\cross_db_utils\\deprecated\\split_part.sql", "original_file_path": "macros\\cross_db_utils\\deprecated\\split_part.sql", "name": "split_part", "macro_sql": "{% macro split_part(string_text, delimiter_text, part_number) %}\n  {{ return(adapter.dispatch('split_part', 'dbt_utils') (string_text, delimiter_text, part_number)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__split_part"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1671050798.5002015}, "macro.dbt_utils.default__split_part": {"unique_id": "macro.dbt_utils.default__split_part", "package_name": "dbt_utils", "root_path": "C:\\Users\\jessi\\git\\axelar-models\\dbt_packages\\dbt_utils", "path": "macros\\cross_db_utils\\deprecated\\split_part.sql", "original_file_path": "macros\\cross_db_utils\\deprecated\\split_part.sql", "name": "default__split_part", "macro_sql": "{% macro default__split_part(string_text, delimiter_text, part_number) %}\n  {% do dbt_utils.xdb_deprecation_warning('split_part', model.package_name, model.name) %}\n  {{ return(adapter.dispatch('split_part', 'dbt') (string_text, delimiter_text, part_number)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.xdb_deprecation_warning", "macro.dbt_utils.split_part", "macro.dbt_utils.default__split_part"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1671050798.5011992}, "macro.dbt_utils.xdb_deprecation_warning": {"unique_id": "macro.dbt_utils.xdb_deprecation_warning", "package_name": "dbt_utils", "root_path": "C:\\Users\\jessi\\git\\axelar-models\\dbt_packages\\dbt_utils", "path": "macros\\cross_db_utils\\deprecated\\xdb_deprecation_warning.sql", "original_file_path": "macros\\cross_db_utils\\deprecated\\xdb_deprecation_warning.sql", "name": "xdb_deprecation_warning", "macro_sql": "{% macro xdb_deprecation_warning(macro, package, model) %}\n    {%- set error_message = \"Warning: the `\" ~ macro ~\"` macro is now provided in dbt Core. It is no longer available in dbt_utils and backwards compatibility will be removed in a future version of the package. Use `\" ~ macro ~ \"` (no prefix) instead. The \" ~ package ~ \".\" ~ model ~ \" model triggered this warning.\" -%}\n    {%- do exceptions.warn(error_message) -%}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1671050798.5021813}, "macro.dbt_utils.xdb_deprecation_warning_without_replacement": {"unique_id": "macro.dbt_utils.xdb_deprecation_warning_without_replacement", "package_name": "dbt_utils", "root_path": "C:\\Users\\jessi\\git\\axelar-models\\dbt_packages\\dbt_utils", "path": "macros\\cross_db_utils\\deprecated\\xdb_deprecation_warning.sql", "original_file_path": "macros\\cross_db_utils\\deprecated\\xdb_deprecation_warning.sql", "name": "xdb_deprecation_warning_without_replacement", "macro_sql": "{% macro xdb_deprecation_warning_without_replacement(macro, package, model) %}\n    {%- set error_message = \"Warning: the `\" ~ macro ~\"` macro is deprecated and will be removed in a future version of the package, once equivalent functionality is implemented in dbt Core. The \" ~ package ~ \".\" ~ model ~ \" model triggered this warning.\" -%}\n    {%- do exceptions.warn(error_message) -%}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1671050798.5021813}, "macro.dbt_utils.test_accepted_range": {"unique_id": "macro.dbt_utils.test_accepted_range", "package_name": "dbt_utils", "root_path": "C:\\Users\\jessi\\git\\axelar-models\\dbt_packages\\dbt_utils", "path": "macros\\generic_tests\\accepted_range.sql", "original_file_path": "macros\\generic_tests\\accepted_range.sql", "name": "test_accepted_range", "macro_sql": "{% test accepted_range(model, column_name, min_value=none, max_value=none, inclusive=true) %}\n  {{ return(adapter.dispatch('test_accepted_range', 'dbt_utils')(model, column_name, min_value, max_value, inclusive)) }}\n{% endtest %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__test_accepted_range"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1671050798.5032034}, "macro.dbt_utils.default__test_accepted_range": {"unique_id": "macro.dbt_utils.default__test_accepted_range", "package_name": "dbt_utils", "root_path": "C:\\Users\\jessi\\git\\axelar-models\\dbt_packages\\dbt_utils", "path": "macros\\generic_tests\\accepted_range.sql", "original_file_path": "macros\\generic_tests\\accepted_range.sql", "name": "default__test_accepted_range", "macro_sql": "{% macro default__test_accepted_range(model, column_name, min_value=none, max_value=none, inclusive=true) %}\n\nwith meet_condition as(\n  select *\n  from {{ model }}\n),\n\nvalidation_errors as (\n  select *\n  from meet_condition\n  where\n    -- never true, defaults to an empty result set. Exists to ensure any combo of the `or` clauses below succeeds\n    1 = 2\n\n  {%- if min_value is not none %}\n    -- records with a value >= min_value are permitted. The `not` flips this to find records that don't meet the rule.\n    or not {{ column_name }} > {{- \"=\" if inclusive }} {{ min_value }}\n  {%- endif %}\n\n  {%- if max_value is not none %}\n    -- records with a value <= max_value are permitted. The `not` flips this to find records that don't meet the rule.\n    or not {{ column_name }} < {{- \"=\" if inclusive }} {{ max_value }}\n  {%- endif %}\n)\n\nselect *\nfrom validation_errors\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1671050798.5041993}, "macro.dbt_utils.test_at_least_one": {"unique_id": "macro.dbt_utils.test_at_least_one", "package_name": "dbt_utils", "root_path": "C:\\Users\\jessi\\git\\axelar-models\\dbt_packages\\dbt_utils", "path": "macros\\generic_tests\\at_least_one.sql", "original_file_path": "macros\\generic_tests\\at_least_one.sql", "name": "test_at_least_one", "macro_sql": "{% test at_least_one(model, column_name) %}\n  {{ return(adapter.dispatch('test_at_least_one', 'dbt_utils')(model, column_name)) }}\n{% endtest %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__test_at_least_one"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1671050798.505184}, "macro.dbt_utils.default__test_at_least_one": {"unique_id": "macro.dbt_utils.default__test_at_least_one", "package_name": "dbt_utils", "root_path": "C:\\Users\\jessi\\git\\axelar-models\\dbt_packages\\dbt_utils", "path": "macros\\generic_tests\\at_least_one.sql", "original_file_path": "macros\\generic_tests\\at_least_one.sql", "name": "default__test_at_least_one", "macro_sql": "{% macro default__test_at_least_one(model, column_name) %}\n\nselect *\nfrom (\n    select\n        {# In TSQL, subquery aggregate columns need aliases #}\n        {# thus: a filler col name, 'filler_column' #}\n      count({{ column_name }}) as filler_column\n\n    from {{ model }}\n\n    having count({{ column_name }}) = 0\n\n) validation_errors\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1671050798.505184}, "macro.dbt_utils.test_cardinality_equality": {"unique_id": "macro.dbt_utils.test_cardinality_equality", "package_name": "dbt_utils", "root_path": "C:\\Users\\jessi\\git\\axelar-models\\dbt_packages\\dbt_utils", "path": "macros\\generic_tests\\cardinality_equality.sql", "original_file_path": "macros\\generic_tests\\cardinality_equality.sql", "name": "test_cardinality_equality", "macro_sql": "{% test cardinality_equality(model, column_name, to, field) %}\n    {{ return(adapter.dispatch('test_cardinality_equality', 'dbt_utils')(model, column_name, to, field)) }}\n{% endtest %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__test_cardinality_equality"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1671050798.5062647}, "macro.dbt_utils.default__test_cardinality_equality": {"unique_id": "macro.dbt_utils.default__test_cardinality_equality", "package_name": "dbt_utils", "root_path": "C:\\Users\\jessi\\git\\axelar-models\\dbt_packages\\dbt_utils", "path": "macros\\generic_tests\\cardinality_equality.sql", "original_file_path": "macros\\generic_tests\\cardinality_equality.sql", "name": "default__test_cardinality_equality", "macro_sql": "{% macro default__test_cardinality_equality(model, column_name, to, field) %}\n\n{# T-SQL does not let you use numbers as aliases for columns #}\n{# Thus, no \"GROUP BY 1\" #}\n\nwith table_a as (\nselect\n  {{ column_name }},\n  count(*) as num_rows\nfrom {{ model }}\ngroup by {{ column_name }}\n),\n\ntable_b as (\nselect\n  {{ field }},\n  count(*) as num_rows\nfrom {{ to }}\ngroup by {{ field }}\n),\n\nexcept_a as (\n  select *\n  from table_a\n  {{ except() }}\n  select *\n  from table_b\n),\n\nexcept_b as (\n  select *\n  from table_b\n  {{ except() }}\n  select *\n  from table_a\n),\n\nunioned as (\n  select *\n  from except_a\n  union all\n  select *\n  from except_b\n)\n\nselect *\nfrom unioned\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.except"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1671050798.5062647}, "macro.dbt_utils.test_equality": {"unique_id": "macro.dbt_utils.test_equality", "package_name": "dbt_utils", "root_path": "C:\\Users\\jessi\\git\\axelar-models\\dbt_packages\\dbt_utils", "path": "macros\\generic_tests\\equality.sql", "original_file_path": "macros\\generic_tests\\equality.sql", "name": "test_equality", "macro_sql": "{% test equality(model, compare_model, compare_columns=None) %}\n  {{ return(adapter.dispatch('test_equality', 'dbt_utils')(model, compare_model, compare_columns)) }}\n{% endtest %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__test_equality"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1671050798.5072837}, "macro.dbt_utils.default__test_equality": {"unique_id": "macro.dbt_utils.default__test_equality", "package_name": "dbt_utils", "root_path": "C:\\Users\\jessi\\git\\axelar-models\\dbt_packages\\dbt_utils", "path": "macros\\generic_tests\\equality.sql", "original_file_path": "macros\\generic_tests\\equality.sql", "name": "default__test_equality", "macro_sql": "{% macro default__test_equality(model, compare_model, compare_columns=None) %}\n\n{% set set_diff %}\n    count(*) + coalesce(abs(\n        sum(case when which_diff = 'a_minus_b' then 1 else 0 end) -\n        sum(case when which_diff = 'b_minus_a' then 1 else 0 end)\n    ), 0)\n{% endset %}\n\n{#-- Needs to be set at parse time, before we return '' below --#}\n{{ config(fail_calc = set_diff) }}\n\n{#-- Prevent querying of db in parsing mode. This works because this macro does not create any new refs. #}\n{%- if not execute -%}\n    {{ return('') }}\n{% endif %}\n\n-- setup\n{%- do dbt_utils._is_relation(model, 'test_equality') -%}\n\n{#-\nIf the compare_cols arg is provided, we can run this test without querying the\ninformation schema\u00a0\u2014 this allows the model to be an ephemeral model\n-#}\n\n{%- if not compare_columns -%}\n    {%- do dbt_utils._is_ephemeral(model, 'test_equality') -%}\n    {%- set compare_columns = adapter.get_columns_in_relation(model) | map(attribute='quoted') -%}\n{%- endif -%}\n\n{% set compare_cols_csv = compare_columns | join(', ') %}\n\nwith a as (\n\n    select * from {{ model }}\n\n),\n\nb as (\n\n    select * from {{ compare_model }}\n\n),\n\na_minus_b as (\n\n    select {{compare_cols_csv}} from a\n    {{ except() }}\n    select {{compare_cols_csv}} from b\n\n),\n\nb_minus_a as (\n\n    select {{compare_cols_csv}} from b\n    {{ except() }}\n    select {{compare_cols_csv}} from a\n\n),\n\nunioned as (\n\n    select 'a_minus_b' as which_diff, a_minus_b.* from a_minus_b\n    union all\n    select 'b_minus_a' as which_diff, b_minus_a.* from b_minus_a\n\n)\n\nselect * from unioned\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils._is_relation", "macro.dbt_utils._is_ephemeral", "macro.dbt_utils.except"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1671050798.509268}, "macro.dbt_utils.test_equal_rowcount": {"unique_id": "macro.dbt_utils.test_equal_rowcount", "package_name": "dbt_utils", "root_path": "C:\\Users\\jessi\\git\\axelar-models\\dbt_packages\\dbt_utils", "path": "macros\\generic_tests\\equal_rowcount.sql", "original_file_path": "macros\\generic_tests\\equal_rowcount.sql", "name": "test_equal_rowcount", "macro_sql": "{% test equal_rowcount(model, compare_model) %}\n  {{ return(adapter.dispatch('test_equal_rowcount', 'dbt_utils')(model, compare_model)) }}\n{% endtest %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__test_equal_rowcount"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1671050798.509268}, "macro.dbt_utils.default__test_equal_rowcount": {"unique_id": "macro.dbt_utils.default__test_equal_rowcount", "package_name": "dbt_utils", "root_path": "C:\\Users\\jessi\\git\\axelar-models\\dbt_packages\\dbt_utils", "path": "macros\\generic_tests\\equal_rowcount.sql", "original_file_path": "macros\\generic_tests\\equal_rowcount.sql", "name": "default__test_equal_rowcount", "macro_sql": "{% macro default__test_equal_rowcount(model, compare_model) %}\n\n{#-- Needs to be set at parse time, before we return '' below --#}\n{{ config(fail_calc = 'coalesce(diff_count, 0)') }}\n\n{#-- Prevent querying of db in parsing mode. This works because this macro does not create any new refs. #}\n{%- if not execute -%}\n    {{ return('') }}\n{% endif %}\n\nwith a as (\n\n    select count(*) as count_a from {{ model }}\n\n),\nb as (\n\n    select count(*) as count_b from {{ compare_model }}\n\n),\nfinal as (\n\n    select\n        count_a,\n        count_b,\n        abs(count_a - count_b) as diff_count\n    from a\n    cross join b\n\n)\n\nselect * from final\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1671050798.5101883}, "macro.dbt_utils.test_expression_is_true": {"unique_id": "macro.dbt_utils.test_expression_is_true", "package_name": "dbt_utils", "root_path": "C:\\Users\\jessi\\git\\axelar-models\\dbt_packages\\dbt_utils", "path": "macros\\generic_tests\\expression_is_true.sql", "original_file_path": "macros\\generic_tests\\expression_is_true.sql", "name": "test_expression_is_true", "macro_sql": "{% test expression_is_true(model, expression, column_name=None, condition='1=1') %}\n{# T-SQL has no boolean data type so we use 1=1 which returns TRUE #}\n{# ref https://stackoverflow.com/a/7170753/3842610 #}\n  {{ return(adapter.dispatch('test_expression_is_true', 'dbt_utils')(model, expression, column_name, condition)) }}\n{% endtest %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__test_expression_is_true"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1671050798.5112643}, "macro.dbt_utils.default__test_expression_is_true": {"unique_id": "macro.dbt_utils.default__test_expression_is_true", "package_name": "dbt_utils", "root_path": "C:\\Users\\jessi\\git\\axelar-models\\dbt_packages\\dbt_utils", "path": "macros\\generic_tests\\expression_is_true.sql", "original_file_path": "macros\\generic_tests\\expression_is_true.sql", "name": "default__test_expression_is_true", "macro_sql": "{% macro default__test_expression_is_true(model, expression, column_name, condition) %}\n\nwith meet_condition as (\n    select * from {{ model }} where {{ condition }}\n)\n\nselect\n    *\nfrom meet_condition\n{% if column_name is none %}\nwhere not({{ expression }})\n{%- else %}\nwhere not({{ column_name }} {{ expression }})\n{%- endif %}\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1671050798.5112643}, "macro.dbt_utils.test_fewer_rows_than": {"unique_id": "macro.dbt_utils.test_fewer_rows_than", "package_name": "dbt_utils", "root_path": "C:\\Users\\jessi\\git\\axelar-models\\dbt_packages\\dbt_utils", "path": "macros\\generic_tests\\fewer_rows_than.sql", "original_file_path": "macros\\generic_tests\\fewer_rows_than.sql", "name": "test_fewer_rows_than", "macro_sql": "{% test fewer_rows_than(model, compare_model) %}\n  {{ return(adapter.dispatch('test_fewer_rows_than', 'dbt_utils')(model, compare_model)) }}\n{% endtest %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__test_fewer_rows_than"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1671050798.5122666}, "macro.dbt_utils.default__test_fewer_rows_than": {"unique_id": "macro.dbt_utils.default__test_fewer_rows_than", "package_name": "dbt_utils", "root_path": "C:\\Users\\jessi\\git\\axelar-models\\dbt_packages\\dbt_utils", "path": "macros\\generic_tests\\fewer_rows_than.sql", "original_file_path": "macros\\generic_tests\\fewer_rows_than.sql", "name": "default__test_fewer_rows_than", "macro_sql": "{% macro default__test_fewer_rows_than(model, compare_model) %}\n\n{{ config(fail_calc = 'coalesce(row_count_delta, 0)') }}\n\nwith a as (\n\n    select count(*) as count_our_model from {{ model }}\n\n),\nb as (\n\n    select count(*) as count_comparison_model from {{ compare_model }}\n\n),\ncounts as (\n\n    select\n        count_our_model,\n        count_comparison_model\n    from a\n    cross join b\n\n),\nfinal as (\n\n    select *,\n        case\n            -- fail the test if we have more rows than the reference model and return the row count delta\n            when count_our_model > count_comparison_model then (count_our_model - count_comparison_model)\n            -- fail the test if they are the same number\n            when count_our_model = count_comparison_model then 1\n            -- pass the test if the delta is positive (i.e. return the number 0)\n            else 0\n    end as row_count_delta\n    from counts\n\n)\n\nselect * from final\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1671050798.5122666}, "macro.dbt_utils.test_mutually_exclusive_ranges": {"unique_id": "macro.dbt_utils.test_mutually_exclusive_ranges", "package_name": "dbt_utils", "root_path": "C:\\Users\\jessi\\git\\axelar-models\\dbt_packages\\dbt_utils", "path": "macros\\generic_tests\\mutually_exclusive_ranges.sql", "original_file_path": "macros\\generic_tests\\mutually_exclusive_ranges.sql", "name": "test_mutually_exclusive_ranges", "macro_sql": "{% test mutually_exclusive_ranges(model, lower_bound_column, upper_bound_column, partition_by=None, gaps='allowed', zero_length_range_allowed=False) %}\n  {{ return(adapter.dispatch('test_mutually_exclusive_ranges', 'dbt_utils')(model, lower_bound_column, upper_bound_column, partition_by, gaps, zero_length_range_allowed)) }}\n{% endtest %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__test_mutually_exclusive_ranges"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1671050798.51659}, "macro.dbt_utils.default__test_mutually_exclusive_ranges": {"unique_id": "macro.dbt_utils.default__test_mutually_exclusive_ranges", "package_name": "dbt_utils", "root_path": "C:\\Users\\jessi\\git\\axelar-models\\dbt_packages\\dbt_utils", "path": "macros\\generic_tests\\mutually_exclusive_ranges.sql", "original_file_path": "macros\\generic_tests\\mutually_exclusive_ranges.sql", "name": "default__test_mutually_exclusive_ranges", "macro_sql": "{% macro default__test_mutually_exclusive_ranges(model, lower_bound_column, upper_bound_column, partition_by=None, gaps='allowed', zero_length_range_allowed=False) %}\n{% if gaps == 'not_allowed' %}\n    {% set allow_gaps_operator='=' %}\n    {% set allow_gaps_operator_in_words='equal_to' %}\n{% elif gaps == 'allowed' %}\n    {% set allow_gaps_operator='<=' %}\n    {% set allow_gaps_operator_in_words='less_than_or_equal_to' %}\n{% elif gaps == 'required' %}\n    {% set allow_gaps_operator='<' %}\n    {% set allow_gaps_operator_in_words='less_than' %}\n{% else %}\n    {{ exceptions.raise_compiler_error(\n        \"`gaps` argument for mutually_exclusive_ranges test must be one of ['not_allowed', 'allowed', 'required'] Got: '\" ~ gaps ~\"'.'\"\n    ) }}\n{% endif %}\n{% if not zero_length_range_allowed %}\n    {% set allow_zero_length_operator='<' %}\n    {% set allow_zero_length_operator_in_words='less_than' %}\n{% elif zero_length_range_allowed %}\n    {% set allow_zero_length_operator='<=' %}\n    {% set allow_zero_length_operator_in_words='less_than_or_equal_to' %}\n{% else %}\n    {{ exceptions.raise_compiler_error(\n        \"`zero_length_range_allowed` argument for mutually_exclusive_ranges test must be one of [true, false] Got: '\" ~ zero_length_range_allowed ~\"'.'\"\n    ) }}\n{% endif %}\n\n{% set partition_clause=\"partition by \" ~ partition_by if partition_by else '' %}\n\nwith window_functions as (\n\n    select\n        {% if partition_by %}\n        {{ partition_by }} as partition_by_col,\n        {% endif %}\n        {{ lower_bound_column }} as lower_bound,\n        {{ upper_bound_column }} as upper_bound,\n\n        lead({{ lower_bound_column }}) over (\n            {{ partition_clause }}\n            order by {{ lower_bound_column }}, {{ upper_bound_column }}\n        ) as next_lower_bound,\n\n        row_number() over (\n            {{ partition_clause }}\n            order by {{ lower_bound_column }} desc, {{ upper_bound_column }} desc\n        ) = 1 as is_last_record\n\n    from {{ model }}\n\n),\n\ncalc as (\n    -- We want to return records where one of our assumptions fails, so we'll use\n    -- the `not` function with `and` statements so we can write our assumptions nore cleanly\n    select\n        *,\n\n        -- For each record: lower_bound should be < upper_bound.\n        -- Coalesce it to return an error on the null case (implicit assumption\n        -- these columns are not_null)\n        coalesce(\n            lower_bound {{ allow_zero_length_operator }} upper_bound,\n            false\n        ) as lower_bound_{{ allow_zero_length_operator_in_words }}_upper_bound,\n\n        -- For each record: upper_bound {{ allow_gaps_operator }} the next lower_bound.\n        -- Coalesce it to handle null cases for the last record.\n        coalesce(\n            upper_bound {{ allow_gaps_operator }} next_lower_bound,\n            is_last_record,\n            false\n        ) as upper_bound_{{ allow_gaps_operator_in_words }}_next_lower_bound\n\n    from window_functions\n\n),\n\nvalidation_errors as (\n\n    select\n        *\n    from calc\n\n    where not(\n        -- THE FOLLOWING SHOULD BE TRUE --\n        lower_bound_{{ allow_zero_length_operator_in_words }}_upper_bound\n        and upper_bound_{{ allow_gaps_operator_in_words }}_next_lower_bound\n    )\n)\n\nselect * from validation_errors\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1671050798.518573}, "macro.dbt_utils.test_not_accepted_values": {"unique_id": "macro.dbt_utils.test_not_accepted_values", "package_name": "dbt_utils", "root_path": "C:\\Users\\jessi\\git\\axelar-models\\dbt_packages\\dbt_utils", "path": "macros\\generic_tests\\not_accepted_values.sql", "original_file_path": "macros\\generic_tests\\not_accepted_values.sql", "name": "test_not_accepted_values", "macro_sql": "{% test not_accepted_values(model, column_name, values, quote=True) %}\n  {{ return(adapter.dispatch('test_not_accepted_values', 'dbt_utils')(model, column_name, values, quote)) }}\n{% endtest %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__test_not_accepted_values"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1671050798.5195699}, "macro.dbt_utils.default__test_not_accepted_values": {"unique_id": "macro.dbt_utils.default__test_not_accepted_values", "package_name": "dbt_utils", "root_path": "C:\\Users\\jessi\\git\\axelar-models\\dbt_packages\\dbt_utils", "path": "macros\\generic_tests\\not_accepted_values.sql", "original_file_path": "macros\\generic_tests\\not_accepted_values.sql", "name": "default__test_not_accepted_values", "macro_sql": "{% macro default__test_not_accepted_values(model, column_name, values, quote=True) %}\nwith all_values as (\n\n    select distinct\n        {{ column_name }} as value_field\n\n    from {{ model }}\n\n),\n\nvalidation_errors as (\n\n    select\n        value_field\n\n    from all_values\n    where value_field in (\n        {% for value in values -%}\n            {% if quote -%}\n            '{{ value }}'\n            {%- else -%}\n            {{ value }}\n            {%- endif -%}\n            {%- if not loop.last -%},{%- endif %}\n        {%- endfor %}\n        )\n\n)\n\nselect *\nfrom validation_errors\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1671050798.5195699}, "macro.dbt_utils.test_not_constant": {"unique_id": "macro.dbt_utils.test_not_constant", "package_name": "dbt_utils", "root_path": "C:\\Users\\jessi\\git\\axelar-models\\dbt_packages\\dbt_utils", "path": "macros\\generic_tests\\not_constant.sql", "original_file_path": "macros\\generic_tests\\not_constant.sql", "name": "test_not_constant", "macro_sql": "{% test not_constant(model, column_name) %}\n  {{ return(adapter.dispatch('test_not_constant', 'dbt_utils')(model, column_name)) }}\n{% endtest %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__test_not_constant"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1671050798.5204923}, "macro.dbt_utils.default__test_not_constant": {"unique_id": "macro.dbt_utils.default__test_not_constant", "package_name": "dbt_utils", "root_path": "C:\\Users\\jessi\\git\\axelar-models\\dbt_packages\\dbt_utils", "path": "macros\\generic_tests\\not_constant.sql", "original_file_path": "macros\\generic_tests\\not_constant.sql", "name": "default__test_not_constant", "macro_sql": "{% macro default__test_not_constant(model, column_name) %}\n\n\nselect\n    {# In TSQL, subquery aggregate columns need aliases #}\n    {# thus: a filler col name, 'filler_column' #}\n    count(distinct {{ column_name }}) as filler_column\n\nfrom {{ model }}\n\nhaving count(distinct {{ column_name }}) = 1\n\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1671050798.5204923}, "macro.dbt_utils.test_not_null_proportion": {"unique_id": "macro.dbt_utils.test_not_null_proportion", "package_name": "dbt_utils", "root_path": "C:\\Users\\jessi\\git\\axelar-models\\dbt_packages\\dbt_utils", "path": "macros\\generic_tests\\not_null_proportion.sql", "original_file_path": "macros\\generic_tests\\not_null_proportion.sql", "name": "test_not_null_proportion", "macro_sql": "{% macro test_not_null_proportion(model) %}\n  {{ return(adapter.dispatch('test_not_null_proportion', 'dbt_utils')(model, **kwargs)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__test_not_null_proportion"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1671050798.5215683}, "macro.dbt_utils.default__test_not_null_proportion": {"unique_id": "macro.dbt_utils.default__test_not_null_proportion", "package_name": "dbt_utils", "root_path": "C:\\Users\\jessi\\git\\axelar-models\\dbt_packages\\dbt_utils", "path": "macros\\generic_tests\\not_null_proportion.sql", "original_file_path": "macros\\generic_tests\\not_null_proportion.sql", "name": "default__test_not_null_proportion", "macro_sql": "{% macro default__test_not_null_proportion(model) %}\n\n{% set column_name = kwargs.get('column_name', kwargs.get('arg')) %}\n{% set at_least = kwargs.get('at_least', kwargs.get('arg')) %}\n{% set at_most = kwargs.get('at_most', kwargs.get('arg', 1)) %}\n\nwith validation as (\n  select\n    sum(case when {{ column_name }} is null then 0 else 1 end) / cast(count(*) as numeric) as not_null_proportion\n  from {{ model }}\n),\nvalidation_errors as (\n  select\n    not_null_proportion\n  from validation\n  where not_null_proportion < {{ at_least }} or not_null_proportion > {{ at_most }}\n)\nselect\n  *\nfrom validation_errors\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1671050798.5215683}, "macro.dbt_utils.test_recency": {"unique_id": "macro.dbt_utils.test_recency", "package_name": "dbt_utils", "root_path": "C:\\Users\\jessi\\git\\axelar-models\\dbt_packages\\dbt_utils", "path": "macros\\generic_tests\\recency.sql", "original_file_path": "macros\\generic_tests\\recency.sql", "name": "test_recency", "macro_sql": "{% test recency(model, field, datepart, interval) %}\n  {{ return(adapter.dispatch('test_recency', 'dbt_utils')(model, field, datepart, interval)) }}\n{% endtest %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__test_recency"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1671050798.5225718}, "macro.dbt_utils.default__test_recency": {"unique_id": "macro.dbt_utils.default__test_recency", "package_name": "dbt_utils", "root_path": "C:\\Users\\jessi\\git\\axelar-models\\dbt_packages\\dbt_utils", "path": "macros\\generic_tests\\recency.sql", "original_file_path": "macros\\generic_tests\\recency.sql", "name": "default__test_recency", "macro_sql": "{% macro default__test_recency(model, field, datepart, interval) %}\n\n{% set threshold = dateadd(datepart, interval * -1, current_timestamp()) %}\n\nwith recency as (\n\n    select max({{field}}) as most_recent\n    from {{ model }}\n\n)\n\nselect\n\n    most_recent,\n    {{ threshold }} as threshold\n\nfrom recency\nwhere most_recent < {{ threshold }}\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.dateadd", "macro.dbt_utils.current_timestamp"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1671050798.5235674}, "macro.dbt_utils.test_relationships_where": {"unique_id": "macro.dbt_utils.test_relationships_where", "package_name": "dbt_utils", "root_path": "C:\\Users\\jessi\\git\\axelar-models\\dbt_packages\\dbt_utils", "path": "macros\\generic_tests\\relationships_where.sql", "original_file_path": "macros\\generic_tests\\relationships_where.sql", "name": "test_relationships_where", "macro_sql": "{% test relationships_where(model, column_name, to, field, from_condition=\"1=1\", to_condition=\"1=1\") %}\n  {{ return(adapter.dispatch('test_relationships_where', 'dbt_utils')(model, column_name, to, field, from_condition, to_condition)) }}\n{% endtest %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__test_relationships_where"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1671050798.5245652}, "macro.dbt_utils.default__test_relationships_where": {"unique_id": "macro.dbt_utils.default__test_relationships_where", "package_name": "dbt_utils", "root_path": "C:\\Users\\jessi\\git\\axelar-models\\dbt_packages\\dbt_utils", "path": "macros\\generic_tests\\relationships_where.sql", "original_file_path": "macros\\generic_tests\\relationships_where.sql", "name": "default__test_relationships_where", "macro_sql": "{% macro default__test_relationships_where(model, column_name, to, field, from_condition=\"1=1\", to_condition=\"1=1\") %}\n\n{# T-SQL has no boolean data type so we use 1=1 which returns TRUE #}\n{# ref https://stackoverflow.com/a/7170753/3842610 #}\n\nwith left_table as (\n\n  select\n    {{column_name}} as id\n\n  from {{model}}\n\n  where {{column_name}} is not null\n    and {{from_condition}}\n\n),\n\nright_table as (\n\n  select\n    {{field}} as id\n\n  from {{to}}\n\n  where {{field}} is not null\n    and {{to_condition}}\n\n),\n\nexceptions as (\n\n  select\n    left_table.id,\n    right_table.id as right_id\n\n  from left_table\n\n  left join right_table\n         on left_table.id = right_table.id\n\n  where right_table.id is null\n\n)\n\nselect * from exceptions\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1671050798.5245652}, "macro.dbt_utils.test_sequential_values": {"unique_id": "macro.dbt_utils.test_sequential_values", "package_name": "dbt_utils", "root_path": "C:\\Users\\jessi\\git\\axelar-models\\dbt_packages\\dbt_utils", "path": "macros\\generic_tests\\sequential_values.sql", "original_file_path": "macros\\generic_tests\\sequential_values.sql", "name": "test_sequential_values", "macro_sql": "{% test sequential_values(model, column_name, interval=1, datepart=None) %}\n\n  {{ return(adapter.dispatch('test_sequential_values', 'dbt_utils')(model, column_name, interval, datepart)) }}\n\n{% endtest %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__test_sequential_values"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1671050798.5254962}, "macro.dbt_utils.default__test_sequential_values": {"unique_id": "macro.dbt_utils.default__test_sequential_values", "package_name": "dbt_utils", "root_path": "C:\\Users\\jessi\\git\\axelar-models\\dbt_packages\\dbt_utils", "path": "macros\\generic_tests\\sequential_values.sql", "original_file_path": "macros\\generic_tests\\sequential_values.sql", "name": "default__test_sequential_values", "macro_sql": "{% macro default__test_sequential_values(model, column_name, interval=1, datepart=None) %}\n\n{% set previous_column_name = \"previous_\" ~ dbt_utils.slugify(column_name) %}\n\nwith windowed as (\n\n    select\n        {{ column_name }},\n        lag({{ column_name }}) over (\n            order by {{ column_name }}\n        ) as {{ previous_column_name }}\n    from {{ model }}\n),\n\nvalidation_errors as (\n    select\n        *\n    from windowed\n    {% if datepart %}\n    where not(cast({{ column_name }} as {{ type_timestamp() }})= cast({{ dateadd(datepart, interval, previous_column_name) }} as {{ type_timestamp() }}))\n    {% else %}\n    where not({{ column_name }} = {{ previous_column_name }} + {{ interval }})\n    {% endif %}\n)\n\nselect *\nfrom validation_errors\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.slugify", "macro.dbt_utils.type_timestamp", "macro.dbt_utils.dateadd"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1671050798.5265625}, "macro.dbt_utils.test_not_null_where": {"unique_id": "macro.dbt_utils.test_not_null_where", "package_name": "dbt_utils", "root_path": "C:\\Users\\jessi\\git\\axelar-models\\dbt_packages\\dbt_utils", "path": "macros\\generic_tests\\test_not_null_where.sql", "original_file_path": "macros\\generic_tests\\test_not_null_where.sql", "name": "test_not_null_where", "macro_sql": "{% test not_null_where(model, column_name) %}\r\n  {%- set deprecation_warning = '\r\n    Warning: `dbt_utils.not_null_where` is no longer supported.\r\n    Starting in dbt v0.20.0, the built-in `not_null` test supports a `where` config.\r\n    ' -%}\r\n  {%- do exceptions.warn(deprecation_warning) -%}\r\n  {{ return(adapter.dispatch('test_not_null_where', 'dbt_utils')(model, column_name)) }}\r\n{% endtest %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__test_not_null_where"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1671050798.5274796}, "macro.dbt_utils.default__test_not_null_where": {"unique_id": "macro.dbt_utils.default__test_not_null_where", "package_name": "dbt_utils", "root_path": "C:\\Users\\jessi\\git\\axelar-models\\dbt_packages\\dbt_utils", "path": "macros\\generic_tests\\test_not_null_where.sql", "original_file_path": "macros\\generic_tests\\test_not_null_where.sql", "name": "default__test_not_null_where", "macro_sql": "{% macro default__test_not_null_where(model, column_name) %}\r\n  {{ return(test_not_null(model, column_name)) }}\r\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.test_not_null"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1671050798.5274796}, "macro.dbt_utils.test_unique_where": {"unique_id": "macro.dbt_utils.test_unique_where", "package_name": "dbt_utils", "root_path": "C:\\Users\\jessi\\git\\axelar-models\\dbt_packages\\dbt_utils", "path": "macros\\generic_tests\\test_unique_where.sql", "original_file_path": "macros\\generic_tests\\test_unique_where.sql", "name": "test_unique_where", "macro_sql": "{% test unique_where(model, column_name) %}\r\n  {%- set deprecation_warning = '\r\n    Warning: `dbt_utils.unique_where` is no longer supported.\r\n    Starting in dbt v0.20.0, the built-in `unique` test supports a `where` config.\r\n    ' -%}\r\n  {%- do exceptions.warn(deprecation_warning) -%}\r\n  {{ return(adapter.dispatch('test_unique_where', 'dbt_utils')(model, column_name)) }}\r\n{% endtest %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__test_unique_where"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1671050798.5289943}, "macro.dbt_utils.default__test_unique_where": {"unique_id": "macro.dbt_utils.default__test_unique_where", "package_name": "dbt_utils", "root_path": "C:\\Users\\jessi\\git\\axelar-models\\dbt_packages\\dbt_utils", "path": "macros\\generic_tests\\test_unique_where.sql", "original_file_path": "macros\\generic_tests\\test_unique_where.sql", "name": "default__test_unique_where", "macro_sql": "{% macro default__test_unique_where(model, column_name) %}\r\n  {{ return(test_unique(model, column_name)) }}\r\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.test_unique"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1671050798.5289943}, "macro.dbt_utils.test_unique_combination_of_columns": {"unique_id": "macro.dbt_utils.test_unique_combination_of_columns", "package_name": "dbt_utils", "root_path": "C:\\Users\\jessi\\git\\axelar-models\\dbt_packages\\dbt_utils", "path": "macros\\generic_tests\\unique_combination_of_columns.sql", "original_file_path": "macros\\generic_tests\\unique_combination_of_columns.sql", "name": "test_unique_combination_of_columns", "macro_sql": "{% test unique_combination_of_columns(model, combination_of_columns, quote_columns=false) %}\n  {{ return(adapter.dispatch('test_unique_combination_of_columns', 'dbt_utils')(model, combination_of_columns, quote_columns)) }}\n{% endtest %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__test_unique_combination_of_columns"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1671050798.5301235}, "macro.dbt_utils.default__test_unique_combination_of_columns": {"unique_id": "macro.dbt_utils.default__test_unique_combination_of_columns", "package_name": "dbt_utils", "root_path": "C:\\Users\\jessi\\git\\axelar-models\\dbt_packages\\dbt_utils", "path": "macros\\generic_tests\\unique_combination_of_columns.sql", "original_file_path": "macros\\generic_tests\\unique_combination_of_columns.sql", "name": "default__test_unique_combination_of_columns", "macro_sql": "{% macro default__test_unique_combination_of_columns(model, combination_of_columns, quote_columns=false) %}\n\n{% if not quote_columns %}\n    {%- set column_list=combination_of_columns %}\n{% elif quote_columns %}\n    {%- set column_list=[] %}\n        {% for column in combination_of_columns -%}\n            {% set column_list = column_list.append( adapter.quote(column) ) %}\n        {%- endfor %}\n{% else %}\n    {{ exceptions.raise_compiler_error(\n        \"`quote_columns` argument for unique_combination_of_columns test must be one of [True, False] Got: '\" ~ quote ~\"'.'\"\n    ) }}\n{% endif %}\n\n{%- set columns_csv=column_list | join(', ') %}\n\n\nwith validation_errors as (\n\n    select\n        {{ columns_csv }}\n    from {{ model }}\n    group by {{ columns_csv }}\n    having count(*) > 1\n\n)\n\nselect *\nfrom validation_errors\n\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1671050798.5321302}, "macro.dbt_utils.log_info": {"unique_id": "macro.dbt_utils.log_info", "package_name": "dbt_utils", "root_path": "C:\\Users\\jessi\\git\\axelar-models\\dbt_packages\\dbt_utils", "path": "macros\\jinja_helpers\\log_info.sql", "original_file_path": "macros\\jinja_helpers\\log_info.sql", "name": "log_info", "macro_sql": "{% macro log_info(message) %}\n    {{ return(adapter.dispatch('log_info', 'dbt_utils')(message)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__log_info"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1671050798.5330696}, "macro.dbt_utils.default__log_info": {"unique_id": "macro.dbt_utils.default__log_info", "package_name": "dbt_utils", "root_path": "C:\\Users\\jessi\\git\\axelar-models\\dbt_packages\\dbt_utils", "path": "macros\\jinja_helpers\\log_info.sql", "original_file_path": "macros\\jinja_helpers\\log_info.sql", "name": "default__log_info", "macro_sql": "{% macro default__log_info(message) %}\n    {{ log(dbt_utils.pretty_log_format(message), info=True) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.pretty_log_format"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1671050798.5330696}, "macro.dbt_utils.pretty_log_format": {"unique_id": "macro.dbt_utils.pretty_log_format", "package_name": "dbt_utils", "root_path": "C:\\Users\\jessi\\git\\axelar-models\\dbt_packages\\dbt_utils", "path": "macros\\jinja_helpers\\pretty_log_format.sql", "original_file_path": "macros\\jinja_helpers\\pretty_log_format.sql", "name": "pretty_log_format", "macro_sql": "{% macro pretty_log_format(message) %}\n    {{ return(adapter.dispatch('pretty_log_format', 'dbt_utils')(message)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__pretty_log_format"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1671050798.5340326}, "macro.dbt_utils.default__pretty_log_format": {"unique_id": "macro.dbt_utils.default__pretty_log_format", "package_name": "dbt_utils", "root_path": "C:\\Users\\jessi\\git\\axelar-models\\dbt_packages\\dbt_utils", "path": "macros\\jinja_helpers\\pretty_log_format.sql", "original_file_path": "macros\\jinja_helpers\\pretty_log_format.sql", "name": "default__pretty_log_format", "macro_sql": "{% macro default__pretty_log_format(message) %}\n    {{ return( dbt_utils.pretty_time() ~ ' + ' ~ message) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.pretty_time"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1671050798.5340326}, "macro.dbt_utils.pretty_time": {"unique_id": "macro.dbt_utils.pretty_time", "package_name": "dbt_utils", "root_path": "C:\\Users\\jessi\\git\\axelar-models\\dbt_packages\\dbt_utils", "path": "macros\\jinja_helpers\\pretty_time.sql", "original_file_path": "macros\\jinja_helpers\\pretty_time.sql", "name": "pretty_time", "macro_sql": "{% macro pretty_time(format='%H:%M:%S') %}\n    {{ return(adapter.dispatch('pretty_time', 'dbt_utils')(format)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__pretty_time"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1671050798.5350351}, "macro.dbt_utils.default__pretty_time": {"unique_id": "macro.dbt_utils.default__pretty_time", "package_name": "dbt_utils", "root_path": "C:\\Users\\jessi\\git\\axelar-models\\dbt_packages\\dbt_utils", "path": "macros\\jinja_helpers\\pretty_time.sql", "original_file_path": "macros\\jinja_helpers\\pretty_time.sql", "name": "default__pretty_time", "macro_sql": "{% macro default__pretty_time(format='%H:%M:%S') %}\n    {{ return(modules.datetime.datetime.now().strftime(format)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1671050798.5350351}, "macro.dbt_utils.slugify": {"unique_id": "macro.dbt_utils.slugify", "package_name": "dbt_utils", "root_path": "C:\\Users\\jessi\\git\\axelar-models\\dbt_packages\\dbt_utils", "path": "macros\\jinja_helpers\\slugify.sql", "original_file_path": "macros\\jinja_helpers\\slugify.sql", "name": "slugify", "macro_sql": "{% macro slugify(string) %}\n\n{#- Lower case the string -#}\n{% set string = string | lower %}\n{#- Replace spaces and dashes with underscores -#}\n{% set string = modules.re.sub('[ -]+', '_', string) %}\n{#- Only take letters, numbers, and underscores -#}\n{% set string = modules.re.sub('[^a-z0-9_]+', '', string) %}\n\n{{ return(string) }}\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1671050798.5360343}, "macro.dbt_utils._is_ephemeral": {"unique_id": "macro.dbt_utils._is_ephemeral", "package_name": "dbt_utils", "root_path": "C:\\Users\\jessi\\git\\axelar-models\\dbt_packages\\dbt_utils", "path": "macros\\jinja_helpers\\_is_ephemeral.sql", "original_file_path": "macros\\jinja_helpers\\_is_ephemeral.sql", "name": "_is_ephemeral", "macro_sql": "{% macro _is_ephemeral(obj, macro) %}\n    {%- if obj.is_cte -%}\n        {% set ephemeral_prefix = api.Relation.add_ephemeral_prefix('') %}\n        {% if obj.name.startswith(ephemeral_prefix) %}\n            {% set model_name = obj.name[(ephemeral_prefix|length):] %}\n        {% else %}\n            {% set model_name = obj.name %}\n        {%- endif -%}\n        {% set error_message %}\nThe `{{ macro }}` macro cannot be used with ephemeral models, as it relies on the information schema.\n\n`{{ model_name }}` is an ephemeral model. Consider making it a view or table instead.\n        {% endset %}\n        {%- do exceptions.raise_compiler_error(error_message) -%}\n    {%- endif -%}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1671050798.5381353}, "macro.dbt_utils._is_relation": {"unique_id": "macro.dbt_utils._is_relation", "package_name": "dbt_utils", "root_path": "C:\\Users\\jessi\\git\\axelar-models\\dbt_packages\\dbt_utils", "path": "macros\\jinja_helpers\\_is_relation.sql", "original_file_path": "macros\\jinja_helpers\\_is_relation.sql", "name": "_is_relation", "macro_sql": "{% macro _is_relation(obj, macro) %}\n    {%- if not (obj is mapping and obj.get('metadata', {}).get('type', '').endswith('Relation')) -%}\n        {%- do exceptions.raise_compiler_error(\"Macro \" ~ macro ~ \" expected a Relation but received the value: \" ~ obj) -%}\n    {%- endif -%}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1671050798.539114}, "macro.dbt_utils.get_period_boundaries": {"unique_id": "macro.dbt_utils.get_period_boundaries", "package_name": "dbt_utils", "root_path": "C:\\Users\\jessi\\git\\axelar-models\\dbt_packages\\dbt_utils", "path": "macros\\materializations\\insert_by_period_materialization.sql", "original_file_path": "macros\\materializations\\insert_by_period_materialization.sql", "name": "get_period_boundaries", "macro_sql": "{% macro get_period_boundaries(target_schema, target_table, timestamp_field, start_date, stop_date, period) -%}\n    {{ return(adapter.dispatch('get_period_boundaries', 'dbt_utils')(target_schema, target_table, timestamp_field, start_date, stop_date, period)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__get_period_boundaries"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1671050798.5460324}, "macro.dbt_utils.default__get_period_boundaries": {"unique_id": "macro.dbt_utils.default__get_period_boundaries", "package_name": "dbt_utils", "root_path": "C:\\Users\\jessi\\git\\axelar-models\\dbt_packages\\dbt_utils", "path": "macros\\materializations\\insert_by_period_materialization.sql", "original_file_path": "macros\\materializations\\insert_by_period_materialization.sql", "name": "default__get_period_boundaries", "macro_sql": "{% macro default__get_period_boundaries(target_schema, target_table, timestamp_field, start_date, stop_date, period) -%}\n\n  {% call statement('period_boundaries', fetch_result=True) -%}\n    with data as (\n      select\n          coalesce(max(\"{{timestamp_field}}\"), '{{start_date}}')::timestamp as start_timestamp,\n          coalesce(\n            {{ dateadd('millisecond',\n                                -1,\n                                \"nullif('\" ~ stop_date ~ \"','')::timestamp\") }},\n            {{ dbt_utils.current_timestamp() }}\n          ) as stop_timestamp\n      from \"{{target_schema}}\".\"{{target_table}}\"\n    )\n\n    select\n      start_timestamp,\n      stop_timestamp,\n      {{ datediff('start_timestamp',\n                           'stop_timestamp',\n                           period) }}  + 1 as num_periods\n    from data\n  {%- endcall %}\n\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.statement", "macro.dbt_utils.dateadd", "macro.dbt_utils.current_timestamp", "macro.dbt_utils.datediff"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1671050798.5471203}, "macro.dbt_utils.get_period_sql": {"unique_id": "macro.dbt_utils.get_period_sql", "package_name": "dbt_utils", "root_path": "C:\\Users\\jessi\\git\\axelar-models\\dbt_packages\\dbt_utils", "path": "macros\\materializations\\insert_by_period_materialization.sql", "original_file_path": "macros\\materializations\\insert_by_period_materialization.sql", "name": "get_period_sql", "macro_sql": "{% macro get_period_sql(target_cols_csv, sql, timestamp_field, period, start_timestamp, stop_timestamp, offset) -%}\n    {{ return(adapter.dispatch('get_period_sql', 'dbt_utils')(target_cols_csv, sql, timestamp_field, period, start_timestamp, stop_timestamp, offset)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__get_period_sql"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1671050798.5481236}, "macro.dbt_utils.default__get_period_sql": {"unique_id": "macro.dbt_utils.default__get_period_sql", "package_name": "dbt_utils", "root_path": "C:\\Users\\jessi\\git\\axelar-models\\dbt_packages\\dbt_utils", "path": "macros\\materializations\\insert_by_period_materialization.sql", "original_file_path": "macros\\materializations\\insert_by_period_materialization.sql", "name": "default__get_period_sql", "macro_sql": "{% macro default__get_period_sql(target_cols_csv, sql, timestamp_field, period, start_timestamp, stop_timestamp, offset) -%}\n\n  {%- set period_filter -%}\n    (\"{{timestamp_field}}\" >  '{{start_timestamp}}'::timestamp + interval '{{offset}} {{period}}' and\n     \"{{timestamp_field}}\" <= '{{start_timestamp}}'::timestamp + interval '{{offset}} {{period}}' + interval '1 {{period}}' and\n     \"{{timestamp_field}}\" <  '{{stop_timestamp}}'::timestamp)\n  {%- endset -%}\n\n  {%- set filtered_sql = sql | replace(\"__PERIOD_FILTER__\", period_filter) -%}\n\n  select\n    {{target_cols_csv}}\n  from (\n    {{filtered_sql}}\n  )\n\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1671050798.5491126}, "macro.dbt_utils.materialization_insert_by_period_default": {"unique_id": "macro.dbt_utils.materialization_insert_by_period_default", "package_name": "dbt_utils", "root_path": "C:\\Users\\jessi\\git\\axelar-models\\dbt_packages\\dbt_utils", "path": "macros\\materializations\\insert_by_period_materialization.sql", "original_file_path": "macros\\materializations\\insert_by_period_materialization.sql", "name": "materialization_insert_by_period_default", "macro_sql": "{% materialization insert_by_period, default -%}\n  {%- set timestamp_field = config.require('timestamp_field') -%}\n  {%- set start_date = config.require('start_date') -%}\n  {%- set stop_date = config.get('stop_date') or '' -%}\n  {%- set period = config.get('period') or 'week' -%}\n\n  {%- set deprecation_warning = \"Warning: the `insert_by_period` materialization will be removed from dbt_utils in version 1.0.0. Install from dbt-labs/dbt-labs-experimental-features instead (see https://github.com/dbt-labs/dbt-utils/discussions/487). The \" ~ package ~ \".\" ~ model ~ \" model triggered this warning.\" -%}\n  {%- do exceptions.warn(deprecation_warning) -%}\n\n  {%- if sql.find('__PERIOD_FILTER__') == -1 -%}\n    {%- set error_message -%}\n      Model '{{ model.unique_id }}' does not include the required string '__PERIOD_FILTER__' in its sql\n    {%- endset -%}\n    {{ exceptions.raise_compiler_error(error_message) }}\n  {%- endif -%}\n\n  {%- set identifier = model['name'] -%}\n\n  {%- set old_relation = adapter.get_relation(database=database, schema=schema, identifier=identifier) -%}\n  {%- set target_relation = api.Relation.create(identifier=identifier, schema=schema, type='table') -%}\n\n  {%- set non_destructive_mode = (flags.NON_DESTRUCTIVE == True) -%}\n  {%- set full_refresh_mode = (flags.FULL_REFRESH == True) -%}\n\n  {%- set exists_as_table = (old_relation is not none and old_relation.is_table) -%}\n  {%- set exists_not_as_table = (old_relation is not none and not old_relation.is_table) -%}\n\n  {%- set should_truncate = (non_destructive_mode and full_refresh_mode and exists_as_table) -%}\n  {%- set should_drop = (not should_truncate and (full_refresh_mode or exists_not_as_table)) -%}\n  {%- set force_create = (flags.FULL_REFRESH and not flags.NON_DESTRUCTIVE) -%}\n\n  -- setup\n  {% if old_relation is none -%}\n    -- noop\n  {%- elif should_truncate -%}\n    {{adapter.truncate_relation(old_relation)}}\n  {%- elif should_drop -%}\n    {{adapter.drop_relation(old_relation)}}\n    {%- set old_relation = none -%}\n  {%- endif %}\n\n  {{run_hooks(pre_hooks, inside_transaction=False)}}\n\n  -- `begin` happens here, so `commit` after it to finish the transaction\n  {{run_hooks(pre_hooks, inside_transaction=True)}}\n  {% call statement() -%}\n    begin; -- make extra sure we've closed out the transaction\n    commit;\n  {%- endcall %}\n\n  -- build model\n  {% if force_create or old_relation is none -%}\n    {# Create an empty target table -#}\n    {% call statement('main') -%}\n      {%- set empty_sql = sql | replace(\"__PERIOD_FILTER__\", 'false') -%}\n      {{create_table_as(False, target_relation, empty_sql)}}\n    {%- endcall %}\n  {%- endif %}\n\n  {% set _ = dbt_utils.get_period_boundaries(schema,\n                                              identifier,\n                                              timestamp_field,\n                                              start_date,\n                                              stop_date,\n                                              period) %}\n  {%- set start_timestamp = load_result('period_boundaries')['data'][0][0] | string -%}\n  {%- set stop_timestamp = load_result('period_boundaries')['data'][0][1] | string -%}\n  {%- set num_periods = load_result('period_boundaries')['data'][0][2] | int -%}\n\n  {% set target_columns = adapter.get_columns_in_relation(target_relation) %}\n  {%- set target_cols_csv = target_columns | map(attribute='quoted') | join(', ') -%}\n  {%- set loop_vars = {'sum_rows_inserted': 0} -%}\n\n  -- commit each period as a separate transaction\n  {% for i in range(num_periods) -%}\n    {%- set msg = \"Running for \" ~ period ~ \" \" ~ (i + 1) ~ \" of \" ~ (num_periods) -%}\n    {{ dbt_utils.log_info(msg) }}\n\n    {%- set tmp_identifier = model['name'] ~ '__dbt_incremental_period' ~ i ~ '_tmp' -%}\n    {%- set tmp_relation = api.Relation.create(identifier=tmp_identifier,\n                                               schema=schema, type='table') -%}\n    {% call statement() -%}\n      {% set tmp_table_sql = dbt_utils.get_period_sql(target_cols_csv,\n                                                       sql,\n                                                       timestamp_field,\n                                                       period,\n                                                       start_timestamp,\n                                                       stop_timestamp,\n                                                       i) %}\n      {{dbt.create_table_as(True, tmp_relation, tmp_table_sql)}}\n    {%- endcall %}\n\n    {{adapter.expand_target_column_types(from_relation=tmp_relation,\n                                         to_relation=target_relation)}}\n    {%- set name = 'main-' ~ i -%}\n    {% call statement(name, fetch_result=True) -%}\n      insert into {{target_relation}} ({{target_cols_csv}})\n      (\n          select\n              {{target_cols_csv}}\n          from {{tmp_relation.include(schema=False)}}\n      );\n    {%- endcall %}\n    {% set result = load_result('main-' ~ i) %}\n    {% if 'response' in result.keys() %} {# added in v0.19.0 #}\n        {% set rows_inserted = result['response']['rows_affected'] %}\n    {% else %} {# older versions #}\n        {% set rows_inserted = result['status'].split(\" \")[2] | int %}\n    {% endif %}\n\n    {%- set sum_rows_inserted = loop_vars['sum_rows_inserted'] + rows_inserted -%}\n    {%- if loop_vars.update({'sum_rows_inserted': sum_rows_inserted}) %} {% endif -%}\n\n    {%- set msg = \"Ran for \" ~ period ~ \" \" ~ (i + 1) ~ \" of \" ~ (num_periods) ~ \"; \" ~ rows_inserted ~ \" records inserted\" -%}\n    {{ dbt_utils.log_info(msg) }}\n\n  {%- endfor %}\n\n  {% call statement() -%}\n    begin;\n  {%- endcall %}\n\n  {{run_hooks(post_hooks, inside_transaction=True)}}\n\n  {% call statement() -%}\n    commit;\n  {%- endcall %}\n\n  {{run_hooks(post_hooks, inside_transaction=False)}}\n\n  {%- set status_string = \"INSERT \" ~ loop_vars['sum_rows_inserted'] -%}\n\n  {% call noop_statement('main', status_string) -%}\n    -- no-op\n  {%- endcall %}\n\n  -- Return the relations created in this materialization\n  {{ return({'relations': [target_relation]}) }}\n\n{%- endmaterialization %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.run_hooks", "macro.dbt.statement", "macro.dbt.create_table_as", "macro.dbt_utils.get_period_boundaries", "macro.dbt_utils.log_info", "macro.dbt_utils.get_period_sql", "macro.dbt.noop_statement"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1671050798.559131}, "macro.dbt_utils.get_intervals_between": {"unique_id": "macro.dbt_utils.get_intervals_between", "package_name": "dbt_utils", "root_path": "C:\\Users\\jessi\\git\\axelar-models\\dbt_packages\\dbt_utils", "path": "macros\\sql\\date_spine.sql", "original_file_path": "macros\\sql\\date_spine.sql", "name": "get_intervals_between", "macro_sql": "{% macro get_intervals_between(start_date, end_date, datepart) -%}\n    {{ return(adapter.dispatch('get_intervals_between', 'dbt_utils')(start_date, end_date, datepart)) }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__get_intervals_between"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1671050798.5601194}, "macro.dbt_utils.default__get_intervals_between": {"unique_id": "macro.dbt_utils.default__get_intervals_between", "package_name": "dbt_utils", "root_path": "C:\\Users\\jessi\\git\\axelar-models\\dbt_packages\\dbt_utils", "path": "macros\\sql\\date_spine.sql", "original_file_path": "macros\\sql\\date_spine.sql", "name": "default__get_intervals_between", "macro_sql": "{% macro default__get_intervals_between(start_date, end_date, datepart) -%}\n    {%- call statement('get_intervals_between', fetch_result=True) %}\n\n        select {{ datediff(start_date, end_date, datepart) }}\n\n    {%- endcall -%}\n\n    {%- set value_list = load_result('get_intervals_between') -%}\n\n    {%- if value_list and value_list['data'] -%}\n        {%- set values = value_list['data'] | map(attribute=0) | list %}\n        {{ return(values[0]) }}\n    {%- else -%}\n        {{ return(1) }}\n    {%- endif -%}\n\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.statement", "macro.dbt_utils.datediff"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1671050798.5611196}, "macro.dbt_utils.date_spine": {"unique_id": "macro.dbt_utils.date_spine", "package_name": "dbt_utils", "root_path": "C:\\Users\\jessi\\git\\axelar-models\\dbt_packages\\dbt_utils", "path": "macros\\sql\\date_spine.sql", "original_file_path": "macros\\sql\\date_spine.sql", "name": "date_spine", "macro_sql": "{% macro date_spine(datepart, start_date, end_date) %}\n    {{ return(adapter.dispatch('date_spine', 'dbt_utils')(datepart, start_date, end_date)) }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__date_spine"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1671050798.5620413}, "macro.dbt_utils.default__date_spine": {"unique_id": "macro.dbt_utils.default__date_spine", "package_name": "dbt_utils", "root_path": "C:\\Users\\jessi\\git\\axelar-models\\dbt_packages\\dbt_utils", "path": "macros\\sql\\date_spine.sql", "original_file_path": "macros\\sql\\date_spine.sql", "name": "default__date_spine", "macro_sql": "{% macro default__date_spine(datepart, start_date, end_date) %}\n\n\n{# call as follows:\n\ndate_spine(\n    \"day\",\n    \"to_date('01/01/2016', 'mm/dd/yyyy')\",\n    \"dateadd(week, 1, current_date)\"\n) #}\n\n\nwith rawdata as (\n\n    {{dbt_utils.generate_series(\n        dbt_utils.get_intervals_between(start_date, end_date, datepart)\n    )}}\n\n),\n\nall_periods as (\n\n    select (\n        {{\n            dateadd(\n                datepart,\n                \"row_number() over (order by 1) - 1\",\n                start_date\n            )\n        }}\n    ) as date_{{datepart}}\n    from rawdata\n\n),\n\nfiltered as (\n\n    select *\n    from all_periods\n    where date_{{datepart}} <= {{ end_date }}\n\n)\n\nselect * from filtered\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.generate_series", "macro.dbt_utils.get_intervals_between", "macro.dbt_utils.dateadd"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1671050798.5620413}, "macro.dbt_utils.deduplicate": {"unique_id": "macro.dbt_utils.deduplicate", "package_name": "dbt_utils", "root_path": "C:\\Users\\jessi\\git\\axelar-models\\dbt_packages\\dbt_utils", "path": "macros\\sql\\deduplicate.sql", "original_file_path": "macros\\sql\\deduplicate.sql", "name": "deduplicate", "macro_sql": "{%- macro deduplicate(relation, partition_by, order_by=none, relation_alias=none) -%}\n\n    {%- set error_message_group_by -%}\nWarning: the `group_by` parameter of the `deduplicate` macro is no longer supported and will be deprecated in a future release of dbt-utils.\nUse `partition_by` instead.\nThe {{ model.package_name }}.{{ model.name }} model triggered this warning.\n    {%- endset -%}\n\n    {% if kwargs.get('group_by') %}\n    {%- do exceptions.warn(error_message_group_by) -%}\n    {%- endif -%}\n\n    {%- set error_message_order_by -%}\nWarning: `order_by` as an optional parameter of the `deduplicate` macro is no longer supported and will be deprecated in a future release of dbt-utils.\nSupply a non-null value for `order_by` instead.\nThe {{ model.package_name }}.{{ model.name }} model triggered this warning.\n    {%- endset -%}\n\n    {% if not order_by %}\n    {%- do exceptions.warn(error_message_order_by) -%}\n    {%- endif -%}\n\n    {%- set error_message_alias -%}\nWarning: the `relation_alias` parameter of the `deduplicate` macro is no longer supported and will be deprecated in a future release of dbt-utils.\nIf you were using `relation_alias` to point to a CTE previously then you can now pass the alias directly to `relation` instead.\nThe {{ model.package_name }}.{{ model.name }} model triggered this warning.\n    {%- endset -%}\n\n    {% if relation_alias %}\n    {%- do exceptions.warn(error_message_alias) -%}\n    {%- endif -%}\n\n    {% set partition_by = partition_by or kwargs.get('group_by') %}\n    {% set relation = relation_alias or relation %}\n    {% set order_by = order_by or \"'1'\" %}\n\n    {{ return(adapter.dispatch('deduplicate', 'dbt_utils')(relation, partition_by, order_by)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.snowflake__deduplicate"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1671050798.5661242}, "macro.dbt_utils.default__deduplicate": {"unique_id": "macro.dbt_utils.default__deduplicate", "package_name": "dbt_utils", "root_path": "C:\\Users\\jessi\\git\\axelar-models\\dbt_packages\\dbt_utils", "path": "macros\\sql\\deduplicate.sql", "original_file_path": "macros\\sql\\deduplicate.sql", "name": "default__deduplicate", "macro_sql": "\n\n{%- macro default__deduplicate(relation, partition_by, order_by) -%}\n\n    with row_numbered as (\n        select\n            _inner.*,\n            row_number() over (\n                partition by {{ partition_by }}\n                order by {{ order_by }}\n            ) as rn\n        from {{ relation }} as _inner\n    )\n\n    select\n        distinct data.*\n    from {{ relation }} as data\n    {#\n    -- Not all DBs will support natural joins but the ones that do include:\n    -- Oracle, MySQL, SQLite, Redshift, Teradata, Materialize, Databricks\n    -- Apache Spark, SingleStore, Vertica\n    -- Those that do not appear to support natural joins include:\n    -- SQLServer, Trino, Presto, Rockset, Athena\n    #}\n    natural join row_numbered\n    where row_numbered.rn = 1\n\n{%- endmacro -%}\n\n", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1671050798.5671263}, "macro.dbt_utils.redshift__deduplicate": {"unique_id": "macro.dbt_utils.redshift__deduplicate", "package_name": "dbt_utils", "root_path": "C:\\Users\\jessi\\git\\axelar-models\\dbt_packages\\dbt_utils", "path": "macros\\sql\\deduplicate.sql", "original_file_path": "macros\\sql\\deduplicate.sql", "name": "redshift__deduplicate", "macro_sql": "{% macro redshift__deduplicate(relation, partition_by, order_by) -%}\n\n    {{ return(dbt_utils.default__deduplicate(relation, partition_by, order_by=order_by)) }}\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__deduplicate"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1671050798.5671263}, "macro.dbt_utils.postgres__deduplicate": {"unique_id": "macro.dbt_utils.postgres__deduplicate", "package_name": "dbt_utils", "root_path": "C:\\Users\\jessi\\git\\axelar-models\\dbt_packages\\dbt_utils", "path": "macros\\sql\\deduplicate.sql", "original_file_path": "macros\\sql\\deduplicate.sql", "name": "postgres__deduplicate", "macro_sql": "\n{%- macro postgres__deduplicate(relation, partition_by, order_by) -%}\n\n    select\n        distinct on ({{ partition_by }}) *\n    from {{ relation }}\n    order by {{ partition_by }}{{ ',' ~ order_by }}\n\n{%- endmacro -%}\n\n", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1671050798.5671263}, "macro.dbt_utils.snowflake__deduplicate": {"unique_id": "macro.dbt_utils.snowflake__deduplicate", "package_name": "dbt_utils", "root_path": "C:\\Users\\jessi\\git\\axelar-models\\dbt_packages\\dbt_utils", "path": "macros\\sql\\deduplicate.sql", "original_file_path": "macros\\sql\\deduplicate.sql", "name": "snowflake__deduplicate", "macro_sql": "\n{%- macro snowflake__deduplicate(relation, partition_by, order_by) -%}\n\n    select *\n    from {{ relation }}\n    qualify\n        row_number() over (\n            partition by {{ partition_by }}\n            order by {{ order_by }}\n        ) = 1\n\n{%- endmacro -%}\n\n", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1671050798.56812}, "macro.dbt_utils.bigquery__deduplicate": {"unique_id": "macro.dbt_utils.bigquery__deduplicate", "package_name": "dbt_utils", "root_path": "C:\\Users\\jessi\\git\\axelar-models\\dbt_packages\\dbt_utils", "path": "macros\\sql\\deduplicate.sql", "original_file_path": "macros\\sql\\deduplicate.sql", "name": "bigquery__deduplicate", "macro_sql": "\n{%- macro bigquery__deduplicate(relation, partition_by, order_by) -%}\n\n    select unique.*\n    from (\n        select\n            array_agg (\n                original\n                order by {{ order_by }}\n                limit 1\n            )[offset(0)] unique\n        from {{ relation }} original\n        group by {{ partition_by }}\n    )\n\n{%- endmacro -%}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1671050798.56812}, "macro.dbt_utils.get_powers_of_two": {"unique_id": "macro.dbt_utils.get_powers_of_two", "package_name": "dbt_utils", "root_path": "C:\\Users\\jessi\\git\\axelar-models\\dbt_packages\\dbt_utils", "path": "macros\\sql\\generate_series.sql", "original_file_path": "macros\\sql\\generate_series.sql", "name": "get_powers_of_two", "macro_sql": "{% macro get_powers_of_two(upper_bound) %}\n    {{ return(adapter.dispatch('get_powers_of_two', 'dbt_utils')(upper_bound)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__get_powers_of_two"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1671050798.5691185}, "macro.dbt_utils.default__get_powers_of_two": {"unique_id": "macro.dbt_utils.default__get_powers_of_two", "package_name": "dbt_utils", "root_path": "C:\\Users\\jessi\\git\\axelar-models\\dbt_packages\\dbt_utils", "path": "macros\\sql\\generate_series.sql", "original_file_path": "macros\\sql\\generate_series.sql", "name": "default__get_powers_of_two", "macro_sql": "{% macro default__get_powers_of_two(upper_bound) %}\n\n    {% if upper_bound <= 0 %}\n    {{ exceptions.raise_compiler_error(\"upper bound must be positive\") }}\n    {% endif %}\n\n    {% for _ in range(1, 100) %}\n       {% if upper_bound <= 2 ** loop.index %}{{ return(loop.index) }}{% endif %}\n    {% endfor %}\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1671050798.570125}, "macro.dbt_utils.generate_series": {"unique_id": "macro.dbt_utils.generate_series", "package_name": "dbt_utils", "root_path": "C:\\Users\\jessi\\git\\axelar-models\\dbt_packages\\dbt_utils", "path": "macros\\sql\\generate_series.sql", "original_file_path": "macros\\sql\\generate_series.sql", "name": "generate_series", "macro_sql": "{% macro generate_series(upper_bound) %}\n    {{ return(adapter.dispatch('generate_series', 'dbt_utils')(upper_bound)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__generate_series"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1671050798.570125}, "macro.dbt_utils.default__generate_series": {"unique_id": "macro.dbt_utils.default__generate_series", "package_name": "dbt_utils", "root_path": "C:\\Users\\jessi\\git\\axelar-models\\dbt_packages\\dbt_utils", "path": "macros\\sql\\generate_series.sql", "original_file_path": "macros\\sql\\generate_series.sql", "name": "default__generate_series", "macro_sql": "{% macro default__generate_series(upper_bound) %}\n\n    {% set n = dbt_utils.get_powers_of_two(upper_bound) %}\n\n    with p as (\n        select 0 as generated_number union all select 1\n    ), unioned as (\n\n    select\n\n    {% for i in range(n) %}\n    p{{i}}.generated_number * power(2, {{i}})\n    {% if not loop.last %} + {% endif %}\n    {% endfor %}\n    + 1\n    as generated_number\n\n    from\n\n    {% for i in range(n) %}\n    p as p{{i}}\n    {% if not loop.last %} cross join {% endif %}\n    {% endfor %}\n\n    )\n\n    select *\n    from unioned\n    where generated_number <= {{upper_bound}}\n    order by generated_number\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.get_powers_of_two"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1671050798.5711248}, "macro.dbt_utils.get_column_values": {"unique_id": "macro.dbt_utils.get_column_values", "package_name": "dbt_utils", "root_path": "C:\\Users\\jessi\\git\\axelar-models\\dbt_packages\\dbt_utils", "path": "macros\\sql\\get_column_values.sql", "original_file_path": "macros\\sql\\get_column_values.sql", "name": "get_column_values", "macro_sql": "{% macro get_column_values(table, column, order_by='count(*) desc', max_records=none, default=none, where=none) -%}\n    {{ return(adapter.dispatch('get_column_values', 'dbt_utils')(table, column, order_by, max_records, default, where)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__get_column_values"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1671050798.5731153}, "macro.dbt_utils.default__get_column_values": {"unique_id": "macro.dbt_utils.default__get_column_values", "package_name": "dbt_utils", "root_path": "C:\\Users\\jessi\\git\\axelar-models\\dbt_packages\\dbt_utils", "path": "macros\\sql\\get_column_values.sql", "original_file_path": "macros\\sql\\get_column_values.sql", "name": "default__get_column_values", "macro_sql": "{% macro default__get_column_values(table, column, order_by='count(*) desc', max_records=none, default=none, where=none) -%}\n    {#-- Prevent querying of db in parsing mode. This works because this macro does not create any new refs. #}\n    {%- if not execute -%}\n        {% set default = [] if not default %}\n        {{ return(default) }}\n    {% endif %}\n\n    {%- do dbt_utils._is_ephemeral(table, 'get_column_values') -%}\n\n    {# Not all relations are tables. Renaming for internal clarity without breaking functionality for anyone using named arguments #}\n    {# TODO: Change the method signature in a future 0.x.0 release #}\n    {%- set target_relation = table -%}\n\n    {# adapter.load_relation is a convenience wrapper to avoid building a Relation when we already have one #}\n    {% set relation_exists = (load_relation(target_relation)) is not none %}\n\n    {%- call statement('get_column_values', fetch_result=true) %}\n\n        {%- if not relation_exists and default is none -%}\n\n          {{ exceptions.raise_compiler_error(\"In get_column_values(): relation \" ~ target_relation ~ \" does not exist and no default value was provided.\") }}\n\n        {%- elif not relation_exists and default is not none -%}\n\n          {{ log(\"Relation \" ~ target_relation ~ \" does not exist. Returning the default value: \" ~ default) }}\n\n          {{ return(default) }}\n\n        {%- else -%}\n\n\n            select\n                {{ column }} as value\n\n            from {{ target_relation }}\n\n            {% if where is not none %}\n            where {{ where }}\n            {% endif %}\n\n            group by {{ column }}\n            order by {{ order_by }}\n\n            {% if max_records is not none %}\n            limit {{ max_records }}\n            {% endif %}\n\n        {% endif %}\n\n    {%- endcall -%}\n\n    {%- set value_list = load_result('get_column_values') -%}\n\n    {%- if value_list and value_list['data'] -%}\n        {%- set values = value_list['data'] | map(attribute=0) | list %}\n        {{ return(values) }}\n    {%- else -%}\n        {{ return(default) }}\n    {%- endif -%}\n\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils._is_ephemeral", "macro.dbt.load_relation", "macro.dbt.statement"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1671050798.576126}, "macro.dbt_utils.get_filtered_columns_in_relation": {"unique_id": "macro.dbt_utils.get_filtered_columns_in_relation", "package_name": "dbt_utils", "root_path": "C:\\Users\\jessi\\git\\axelar-models\\dbt_packages\\dbt_utils", "path": "macros\\sql\\get_filtered_columns_in_relation.sql", "original_file_path": "macros\\sql\\get_filtered_columns_in_relation.sql", "name": "get_filtered_columns_in_relation", "macro_sql": "{% macro get_filtered_columns_in_relation(from, except=[]) -%}\n    {{ return(adapter.dispatch('get_filtered_columns_in_relation', 'dbt_utils')(from, except)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__get_filtered_columns_in_relation"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1671050798.5771189}, "macro.dbt_utils.default__get_filtered_columns_in_relation": {"unique_id": "macro.dbt_utils.default__get_filtered_columns_in_relation", "package_name": "dbt_utils", "root_path": "C:\\Users\\jessi\\git\\axelar-models\\dbt_packages\\dbt_utils", "path": "macros\\sql\\get_filtered_columns_in_relation.sql", "original_file_path": "macros\\sql\\get_filtered_columns_in_relation.sql", "name": "default__get_filtered_columns_in_relation", "macro_sql": "{% macro default__get_filtered_columns_in_relation(from, except=[]) -%}\n    {%- do dbt_utils._is_relation(from, 'get_filtered_columns_in_relation') -%}\n    {%- do dbt_utils._is_ephemeral(from, 'get_filtered_columns_in_relation') -%}\n\n    {# -- Prevent querying of db in parsing mode. This works because this macro does not create any new refs. #}\n    {%- if not execute -%}\n        {{ return('') }}\n    {% endif %}\n\n    {%- set include_cols = [] %}\n    {%- set cols = adapter.get_columns_in_relation(from) -%}\n    {%- set except = except | map(\"lower\") | list %}\n    {%- for col in cols -%}\n        {%- if col.column|lower not in except -%}\n            {% do include_cols.append(col.column) %}\n        {%- endif %}\n    {%- endfor %}\n\n    {{ return(include_cols) }}\n\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils._is_relation", "macro.dbt_utils._is_ephemeral"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1671050798.5789206}, "macro.dbt_utils.get_query_results_as_dict": {"unique_id": "macro.dbt_utils.get_query_results_as_dict", "package_name": "dbt_utils", "root_path": "C:\\Users\\jessi\\git\\axelar-models\\dbt_packages\\dbt_utils", "path": "macros\\sql\\get_query_results_as_dict.sql", "original_file_path": "macros\\sql\\get_query_results_as_dict.sql", "name": "get_query_results_as_dict", "macro_sql": "{% macro get_query_results_as_dict(query) %}\n    {{ return(adapter.dispatch('get_query_results_as_dict', 'dbt_utils')(query)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__get_query_results_as_dict"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1671050798.5789206}, "macro.dbt_utils.default__get_query_results_as_dict": {"unique_id": "macro.dbt_utils.default__get_query_results_as_dict", "package_name": "dbt_utils", "root_path": "C:\\Users\\jessi\\git\\axelar-models\\dbt_packages\\dbt_utils", "path": "macros\\sql\\get_query_results_as_dict.sql", "original_file_path": "macros\\sql\\get_query_results_as_dict.sql", "name": "default__get_query_results_as_dict", "macro_sql": "{% macro default__get_query_results_as_dict(query) %}\n\n{# This macro returns a dictionary of the form {column_name: (tuple_of_results)} #}\n\n    {%- call statement('get_query_results', fetch_result=True,auto_begin=false) -%}\n\n        {{ query }}\n\n    {%- endcall -%}\n\n    {% set sql_results={} %}\n\n    {%- if execute -%}\n        {% set sql_results_table = load_result('get_query_results').table.columns %}\n        {% for column_name, column in sql_results_table.items() %}\n            {% do sql_results.update({column_name: column.values()}) %}\n        {% endfor %}\n    {%- endif -%}\n\n    {{ return(sql_results) }}\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.statement"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1671050798.5789206}, "macro.dbt_utils.get_relations_by_pattern": {"unique_id": "macro.dbt_utils.get_relations_by_pattern", "package_name": "dbt_utils", "root_path": "C:\\Users\\jessi\\git\\axelar-models\\dbt_packages\\dbt_utils", "path": "macros\\sql\\get_relations_by_pattern.sql", "original_file_path": "macros\\sql\\get_relations_by_pattern.sql", "name": "get_relations_by_pattern", "macro_sql": "{% macro get_relations_by_pattern(schema_pattern, table_pattern, exclude='', database=target.database) %}\n    {{ return(adapter.dispatch('get_relations_by_pattern', 'dbt_utils')(schema_pattern, table_pattern, exclude, database)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__get_relations_by_pattern"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1671050798.5789206}, "macro.dbt_utils.default__get_relations_by_pattern": {"unique_id": "macro.dbt_utils.default__get_relations_by_pattern", "package_name": "dbt_utils", "root_path": "C:\\Users\\jessi\\git\\axelar-models\\dbt_packages\\dbt_utils", "path": "macros\\sql\\get_relations_by_pattern.sql", "original_file_path": "macros\\sql\\get_relations_by_pattern.sql", "name": "default__get_relations_by_pattern", "macro_sql": "{% macro default__get_relations_by_pattern(schema_pattern, table_pattern, exclude='', database=target.database) %}\n\n    {%- call statement('get_tables', fetch_result=True) %}\n\n      {{ dbt_utils.get_tables_by_pattern_sql(schema_pattern, table_pattern, exclude, database) }}\n\n    {%- endcall -%}\n\n    {%- set table_list = load_result('get_tables') -%}\n\n    {%- if table_list and table_list['table'] -%}\n        {%- set tbl_relations = [] -%}\n        {%- for row in table_list['table'] -%}\n            {%- set tbl_relation = api.Relation.create(\n                database=database,\n                schema=row.table_schema,\n                identifier=row.table_name,\n                type=row.table_type\n            ) -%}\n            {%- do tbl_relations.append(tbl_relation) -%}\n        {%- endfor -%}\n\n        {{ return(tbl_relations) }}\n    {%- else -%}\n        {{ return([]) }}\n    {%- endif -%}\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.statement", "macro.dbt_utils.get_tables_by_pattern_sql"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1671050798.5789206}, "macro.dbt_utils.get_relations_by_prefix": {"unique_id": "macro.dbt_utils.get_relations_by_prefix", "package_name": "dbt_utils", "root_path": "C:\\Users\\jessi\\git\\axelar-models\\dbt_packages\\dbt_utils", "path": "macros\\sql\\get_relations_by_prefix.sql", "original_file_path": "macros\\sql\\get_relations_by_prefix.sql", "name": "get_relations_by_prefix", "macro_sql": "{% macro get_relations_by_prefix(schema, prefix, exclude='', database=target.database) %}\n    {{ return(adapter.dispatch('get_relations_by_prefix', 'dbt_utils')(schema, prefix, exclude, database)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__get_relations_by_prefix"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1671050798.5789206}, "macro.dbt_utils.default__get_relations_by_prefix": {"unique_id": "macro.dbt_utils.default__get_relations_by_prefix", "package_name": "dbt_utils", "root_path": "C:\\Users\\jessi\\git\\axelar-models\\dbt_packages\\dbt_utils", "path": "macros\\sql\\get_relations_by_prefix.sql", "original_file_path": "macros\\sql\\get_relations_by_prefix.sql", "name": "default__get_relations_by_prefix", "macro_sql": "{% macro default__get_relations_by_prefix(schema, prefix, exclude='', database=target.database) %}\n\n    {%- call statement('get_tables', fetch_result=True) %}\n\n      {{ dbt_utils.get_tables_by_prefix_sql(schema, prefix, exclude, database) }}\n\n    {%- endcall -%}\n\n    {%- set table_list = load_result('get_tables') -%}\n\n    {%- if table_list and table_list['table'] -%}\n        {%- set tbl_relations = [] -%}\n        {%- for row in table_list['table'] -%}\n            {%- set tbl_relation = api.Relation.create(\n                database=database,\n                schema=row.table_schema,\n                identifier=row.table_name,\n                type=row.table_type\n            ) -%}\n            {%- do tbl_relations.append(tbl_relation) -%}\n        {%- endfor -%}\n\n        {{ return(tbl_relations) }}\n    {%- else -%}\n        {{ return([]) }}\n    {%- endif -%}\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.statement", "macro.dbt_utils.get_tables_by_prefix_sql"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1671050798.5789206}, "macro.dbt_utils.get_tables_by_pattern_sql": {"unique_id": "macro.dbt_utils.get_tables_by_pattern_sql", "package_name": "dbt_utils", "root_path": "C:\\Users\\jessi\\git\\axelar-models\\dbt_packages\\dbt_utils", "path": "macros\\sql\\get_tables_by_pattern_sql.sql", "original_file_path": "macros\\sql\\get_tables_by_pattern_sql.sql", "name": "get_tables_by_pattern_sql", "macro_sql": "{% macro get_tables_by_pattern_sql(schema_pattern, table_pattern, exclude='', database=target.database) %}\n    {{ return(adapter.dispatch('get_tables_by_pattern_sql', 'dbt_utils')\n        (schema_pattern, table_pattern, exclude, database)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__get_tables_by_pattern_sql"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1671050798.5789206}, "macro.dbt_utils.default__get_tables_by_pattern_sql": {"unique_id": "macro.dbt_utils.default__get_tables_by_pattern_sql", "package_name": "dbt_utils", "root_path": "C:\\Users\\jessi\\git\\axelar-models\\dbt_packages\\dbt_utils", "path": "macros\\sql\\get_tables_by_pattern_sql.sql", "original_file_path": "macros\\sql\\get_tables_by_pattern_sql.sql", "name": "default__get_tables_by_pattern_sql", "macro_sql": "{% macro default__get_tables_by_pattern_sql(schema_pattern, table_pattern, exclude='', database=target.database) %}\n\n        select distinct\n            table_schema as {{ adapter.quote('table_schema') }},\n            table_name as {{ adapter.quote('table_name') }},\n            {{ dbt_utils.get_table_types_sql() }}\n        from {{ database }}.information_schema.tables\n        where table_schema ilike '{{ schema_pattern }}'\n        and table_name ilike '{{ table_pattern }}'\n        and table_name not ilike '{{ exclude }}'\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.get_table_types_sql"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1671050798.5789206}, "macro.dbt_utils.bigquery__get_tables_by_pattern_sql": {"unique_id": "macro.dbt_utils.bigquery__get_tables_by_pattern_sql", "package_name": "dbt_utils", "root_path": "C:\\Users\\jessi\\git\\axelar-models\\dbt_packages\\dbt_utils", "path": "macros\\sql\\get_tables_by_pattern_sql.sql", "original_file_path": "macros\\sql\\get_tables_by_pattern_sql.sql", "name": "bigquery__get_tables_by_pattern_sql", "macro_sql": "{% macro bigquery__get_tables_by_pattern_sql(schema_pattern, table_pattern, exclude='', database=target.database) %}\n\n    {% if '%' in schema_pattern %}\n        {% set schemata=dbt_utils._bigquery__get_matching_schemata(schema_pattern, database) %}\n    {% else %}\n        {% set schemata=[schema_pattern] %}\n    {% endif %}\n\n    {% set sql %}\n        {% for schema in schemata %}\n            select distinct\n                table_schema,\n                table_name,\n                {{ dbt_utils.get_table_types_sql() }}\n\n            from {{ adapter.quote(database) }}.{{ schema }}.INFORMATION_SCHEMA.TABLES\n            where lower(table_name) like lower ('{{ table_pattern }}')\n                and lower(table_name) not like lower ('{{ exclude }}')\n\n            {% if not loop.last %} union all {% endif %}\n\n        {% endfor %}\n    {% endset %}\n\n    {{ return(sql) }}\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils._bigquery__get_matching_schemata", "macro.dbt_utils.get_table_types_sql"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1671050798.5789206}, "macro.dbt_utils._bigquery__get_matching_schemata": {"unique_id": "macro.dbt_utils._bigquery__get_matching_schemata", "package_name": "dbt_utils", "root_path": "C:\\Users\\jessi\\git\\axelar-models\\dbt_packages\\dbt_utils", "path": "macros\\sql\\get_tables_by_pattern_sql.sql", "original_file_path": "macros\\sql\\get_tables_by_pattern_sql.sql", "name": "_bigquery__get_matching_schemata", "macro_sql": "{% macro _bigquery__get_matching_schemata(schema_pattern, database) %}\n    {% if execute %}\n\n        {% set sql %}\n        select schema_name from {{ adapter.quote(database) }}.INFORMATION_SCHEMA.SCHEMATA\n        where lower(schema_name) like lower('{{ schema_pattern }}')\n        {% endset %}\n\n        {% set results=run_query(sql) %}\n\n        {% set schemata=results.columns['schema_name'].values() %}\n\n        {{ return(schemata) }}\n\n    {% else %}\n\n        {{ return([]) }}\n\n    {% endif %}\n\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.run_query"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1671050798.5789206}, "macro.dbt_utils.get_tables_by_prefix_sql": {"unique_id": "macro.dbt_utils.get_tables_by_prefix_sql", "package_name": "dbt_utils", "root_path": "C:\\Users\\jessi\\git\\axelar-models\\dbt_packages\\dbt_utils", "path": "macros\\sql\\get_tables_by_prefix_sql.sql", "original_file_path": "macros\\sql\\get_tables_by_prefix_sql.sql", "name": "get_tables_by_prefix_sql", "macro_sql": "{% macro get_tables_by_prefix_sql(schema, prefix, exclude='', database=target.database) %}\n    {{ return(adapter.dispatch('get_tables_by_prefix_sql', 'dbt_utils')(schema, prefix, exclude, database)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__get_tables_by_prefix_sql"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1671050798.5789206}, "macro.dbt_utils.default__get_tables_by_prefix_sql": {"unique_id": "macro.dbt_utils.default__get_tables_by_prefix_sql", "package_name": "dbt_utils", "root_path": "C:\\Users\\jessi\\git\\axelar-models\\dbt_packages\\dbt_utils", "path": "macros\\sql\\get_tables_by_prefix_sql.sql", "original_file_path": "macros\\sql\\get_tables_by_prefix_sql.sql", "name": "default__get_tables_by_prefix_sql", "macro_sql": "{% macro default__get_tables_by_prefix_sql(schema, prefix, exclude='', database=target.database) %}\n\n    {{ dbt_utils.get_tables_by_pattern_sql(\n        schema_pattern = schema,\n        table_pattern = prefix ~ '%',\n        exclude = exclude,\n        database = database\n    ) }}\n    \n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.get_tables_by_pattern_sql"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1671050798.5789206}, "macro.dbt_utils.get_table_types_sql": {"unique_id": "macro.dbt_utils.get_table_types_sql", "package_name": "dbt_utils", "root_path": "C:\\Users\\jessi\\git\\axelar-models\\dbt_packages\\dbt_utils", "path": "macros\\sql\\get_table_types_sql.sql", "original_file_path": "macros\\sql\\get_table_types_sql.sql", "name": "get_table_types_sql", "macro_sql": "{%- macro get_table_types_sql() -%}\n  {{ return(adapter.dispatch('get_table_types_sql', 'dbt_utils')()) }}\n{%- endmacro -%}\n\n", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__get_table_types_sql"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1671050798.5789206}, "macro.dbt_utils.default__get_table_types_sql": {"unique_id": "macro.dbt_utils.default__get_table_types_sql", "package_name": "dbt_utils", "root_path": "C:\\Users\\jessi\\git\\axelar-models\\dbt_packages\\dbt_utils", "path": "macros\\sql\\get_table_types_sql.sql", "original_file_path": "macros\\sql\\get_table_types_sql.sql", "name": "default__get_table_types_sql", "macro_sql": "{% macro default__get_table_types_sql() %}\n            case table_type\n                when 'BASE TABLE' then 'table'\n                when 'EXTERNAL TABLE' then 'external'\n                when 'MATERIALIZED VIEW' then 'materializedview'\n                else lower(table_type)\n            end as {{ adapter.quote('table_type') }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1671050798.5789206}, "macro.dbt_utils.postgres__get_table_types_sql": {"unique_id": "macro.dbt_utils.postgres__get_table_types_sql", "package_name": "dbt_utils", "root_path": "C:\\Users\\jessi\\git\\axelar-models\\dbt_packages\\dbt_utils", "path": "macros\\sql\\get_table_types_sql.sql", "original_file_path": "macros\\sql\\get_table_types_sql.sql", "name": "postgres__get_table_types_sql", "macro_sql": "{% macro postgres__get_table_types_sql() %}\n            case table_type\n                when 'BASE TABLE' then 'table'\n                when 'FOREIGN' then 'external'\n                when 'MATERIALIZED VIEW' then 'materializedview'\n                else lower(table_type)\n            end as {{ adapter.quote('table_type') }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1671050798.5789206}, "macro.dbt_utils.group_by": {"unique_id": "macro.dbt_utils.group_by", "package_name": "dbt_utils", "root_path": "C:\\Users\\jessi\\git\\axelar-models\\dbt_packages\\dbt_utils", "path": "macros\\sql\\groupby.sql", "original_file_path": "macros\\sql\\groupby.sql", "name": "group_by", "macro_sql": "{%- macro group_by(n) -%}\n    {{ return(adapter.dispatch('group_by', 'dbt_utils')(n)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__group_by"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1671050798.5945477}, "macro.dbt_utils.default__group_by": {"unique_id": "macro.dbt_utils.default__group_by", "package_name": "dbt_utils", "root_path": "C:\\Users\\jessi\\git\\axelar-models\\dbt_packages\\dbt_utils", "path": "macros\\sql\\groupby.sql", "original_file_path": "macros\\sql\\groupby.sql", "name": "default__group_by", "macro_sql": "\n\n{%- macro default__group_by(n) -%}\n\n  group by {% for i in range(1, n + 1) -%}\n      {{ i }}{{ ',' if not loop.last }}   \n   {%- endfor -%}\n\n{%- endmacro -%}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1671050798.5945477}, "macro.dbt_utils.degrees_to_radians": {"unique_id": "macro.dbt_utils.degrees_to_radians", "package_name": "dbt_utils", "root_path": "C:\\Users\\jessi\\git\\axelar-models\\dbt_packages\\dbt_utils", "path": "macros\\sql\\haversine_distance.sql", "original_file_path": "macros\\sql\\haversine_distance.sql", "name": "degrees_to_radians", "macro_sql": "{% macro degrees_to_radians(degrees) -%}\n    acos(-1) * {{degrees}} / 180\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1671050798.5945477}, "macro.dbt_utils.haversine_distance": {"unique_id": "macro.dbt_utils.haversine_distance", "package_name": "dbt_utils", "root_path": "C:\\Users\\jessi\\git\\axelar-models\\dbt_packages\\dbt_utils", "path": "macros\\sql\\haversine_distance.sql", "original_file_path": "macros\\sql\\haversine_distance.sql", "name": "haversine_distance", "macro_sql": "{% macro haversine_distance(lat1, lon1, lat2, lon2, unit='mi') -%}\n    {{ return(adapter.dispatch('haversine_distance', 'dbt_utils')(lat1,lon1,lat2,lon2,unit)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__haversine_distance"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1671050798.5945477}, "macro.dbt_utils.default__haversine_distance": {"unique_id": "macro.dbt_utils.default__haversine_distance", "package_name": "dbt_utils", "root_path": "C:\\Users\\jessi\\git\\axelar-models\\dbt_packages\\dbt_utils", "path": "macros\\sql\\haversine_distance.sql", "original_file_path": "macros\\sql\\haversine_distance.sql", "name": "default__haversine_distance", "macro_sql": "{% macro default__haversine_distance(lat1, lon1, lat2, lon2, unit='mi') -%}\n{%- if unit == 'mi' %}\n    {% set conversion_rate = 1 %}\n{% elif unit == 'km' %}\n    {% set conversion_rate = 1.60934 %}\n{% else %}\n    {{ exceptions.raise_compiler_error(\"unit input must be one of 'mi' or 'km'. Got \" ~ unit) }}\n{% endif %}\n\n    2 * 3961 * asin(sqrt(power((sin(radians(({{ lat2 }} - {{ lat1 }}) / 2))), 2) +\n    cos(radians({{lat1}})) * cos(radians({{lat2}})) *\n    power((sin(radians(({{ lon2 }} - {{ lon1 }}) / 2))), 2))) * {{ conversion_rate }}\n\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1671050798.5945477}, "macro.dbt_utils.bigquery__haversine_distance": {"unique_id": "macro.dbt_utils.bigquery__haversine_distance", "package_name": "dbt_utils", "root_path": "C:\\Users\\jessi\\git\\axelar-models\\dbt_packages\\dbt_utils", "path": "macros\\sql\\haversine_distance.sql", "original_file_path": "macros\\sql\\haversine_distance.sql", "name": "bigquery__haversine_distance", "macro_sql": "{% macro bigquery__haversine_distance(lat1, lon1, lat2, lon2, unit='mi') -%}\n{% set radians_lat1 = dbt_utils.degrees_to_radians(lat1) %}\n{% set radians_lat2 = dbt_utils.degrees_to_radians(lat2) %}\n{% set radians_lon1 = dbt_utils.degrees_to_radians(lon1) %}\n{% set radians_lon2 = dbt_utils.degrees_to_radians(lon2) %}\n{%- if unit == 'mi' %}\n    {% set conversion_rate = 1 %}\n{% elif unit == 'km' %}\n    {% set conversion_rate = 1.60934 %}\n{% else %}\n    {{ exceptions.raise_compiler_error(\"unit input must be one of 'mi' or 'km'. Got \" ~ unit) }}\n{% endif %}\n    2 * 3961 * asin(sqrt(power(sin(({{ radians_lat2 }} - {{ radians_lat1 }}) / 2), 2) +\n    cos({{ radians_lat1 }}) * cos({{ radians_lat2 }}) *\n    power(sin(({{ radians_lon2 }} - {{ radians_lon1 }}) / 2), 2))) * {{ conversion_rate }}\n\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.degrees_to_radians"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1671050798.5945477}, "macro.dbt_utils.nullcheck": {"unique_id": "macro.dbt_utils.nullcheck", "package_name": "dbt_utils", "root_path": "C:\\Users\\jessi\\git\\axelar-models\\dbt_packages\\dbt_utils", "path": "macros\\sql\\nullcheck.sql", "original_file_path": "macros\\sql\\nullcheck.sql", "name": "nullcheck", "macro_sql": "{% macro nullcheck(cols) %}\n    {{ return(adapter.dispatch('nullcheck', 'dbt_utils')(cols)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__nullcheck"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1671050798.5945477}, "macro.dbt_utils.default__nullcheck": {"unique_id": "macro.dbt_utils.default__nullcheck", "package_name": "dbt_utils", "root_path": "C:\\Users\\jessi\\git\\axelar-models\\dbt_packages\\dbt_utils", "path": "macros\\sql\\nullcheck.sql", "original_file_path": "macros\\sql\\nullcheck.sql", "name": "default__nullcheck", "macro_sql": "{% macro default__nullcheck(cols) %}\n{%- for col in cols %}\n\n    {% if col.is_string() -%}\n\n    nullif({{col.name}},'') as {{col.name}}\n\n    {%- else -%}\n\n    {{col.name}}\n\n    {%- endif -%}\n\n{%- if not loop.last -%} , {%- endif -%}\n\n{%- endfor -%}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1671050798.5945477}, "macro.dbt_utils.nullcheck_table": {"unique_id": "macro.dbt_utils.nullcheck_table", "package_name": "dbt_utils", "root_path": "C:\\Users\\jessi\\git\\axelar-models\\dbt_packages\\dbt_utils", "path": "macros\\sql\\nullcheck_table.sql", "original_file_path": "macros\\sql\\nullcheck_table.sql", "name": "nullcheck_table", "macro_sql": "{% macro nullcheck_table(relation) %}\n    {{ return(adapter.dispatch('nullcheck_table', 'dbt_utils')(relation)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__nullcheck_table"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1671050798.5945477}, "macro.dbt_utils.default__nullcheck_table": {"unique_id": "macro.dbt_utils.default__nullcheck_table", "package_name": "dbt_utils", "root_path": "C:\\Users\\jessi\\git\\axelar-models\\dbt_packages\\dbt_utils", "path": "macros\\sql\\nullcheck_table.sql", "original_file_path": "macros\\sql\\nullcheck_table.sql", "name": "default__nullcheck_table", "macro_sql": "{% macro default__nullcheck_table(relation) %}\n\n  {%- do dbt_utils._is_relation(relation, 'nullcheck_table') -%}\n  {%- do dbt_utils._is_ephemeral(relation, 'nullcheck_table') -%}\n  {% set cols = adapter.get_columns_in_relation(relation) %}\n\n  select {{ dbt_utils.nullcheck(cols) }}\n  from {{relation}}\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils._is_relation", "macro.dbt_utils._is_ephemeral", "macro.dbt_utils.nullcheck"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1671050798.5945477}, "macro.dbt_utils.pivot": {"unique_id": "macro.dbt_utils.pivot", "package_name": "dbt_utils", "root_path": "C:\\Users\\jessi\\git\\axelar-models\\dbt_packages\\dbt_utils", "path": "macros\\sql\\pivot.sql", "original_file_path": "macros\\sql\\pivot.sql", "name": "pivot", "macro_sql": "{% macro pivot(column,\n               values,\n               alias=True,\n               agg='sum',\n               cmp='=',\n               prefix='',\n               suffix='',\n               then_value=1,\n               else_value=0,\n               quote_identifiers=True,\n               distinct=False) %}\n    {{ return(adapter.dispatch('pivot', 'dbt_utils')(column, values, alias, agg, cmp, prefix, suffix, then_value, else_value, quote_identifiers, distinct)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__pivot"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1671050798.5945477}, "macro.dbt_utils.default__pivot": {"unique_id": "macro.dbt_utils.default__pivot", "package_name": "dbt_utils", "root_path": "C:\\Users\\jessi\\git\\axelar-models\\dbt_packages\\dbt_utils", "path": "macros\\sql\\pivot.sql", "original_file_path": "macros\\sql\\pivot.sql", "name": "default__pivot", "macro_sql": "{% macro default__pivot(column,\n               values,\n               alias=True,\n               agg='sum',\n               cmp='=',\n               prefix='',\n               suffix='',\n               then_value=1,\n               else_value=0,\n               quote_identifiers=True,\n               distinct=False) %}\n  {% for value in values %}\n    {{ agg }}(\n      {% if distinct %} distinct {% endif %}\n      case\n      when {{ column }} {{ cmp }} '{{ dbt_utils.escape_single_quotes(value) }}'\n        then {{ then_value }}\n      else {{ else_value }}\n      end\n    )\n    {% if alias %}\n      {% if quote_identifiers %}\n            as {{ adapter.quote(prefix ~ value ~ suffix) }}\n      {% else %}\n        as {{ dbt_utils.slugify(prefix ~ value ~ suffix) }}\n      {% endif %}\n    {% endif %}\n    {% if not loop.last %},{% endif %}\n  {% endfor %}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.escape_single_quotes", "macro.dbt_utils.slugify"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1671050798.5945477}, "macro.dbt_utils.safe_add": {"unique_id": "macro.dbt_utils.safe_add", "package_name": "dbt_utils", "root_path": "C:\\Users\\jessi\\git\\axelar-models\\dbt_packages\\dbt_utils", "path": "macros\\sql\\safe_add.sql", "original_file_path": "macros\\sql\\safe_add.sql", "name": "safe_add", "macro_sql": "{%- macro safe_add() -%}\n    {# needed for safe_add to allow for non-keyword arguments see SO post #}\n    {# https://stackoverflow.com/questions/13944751/args-kwargs-in-jinja2-macros #}\n    {% set frustrating_jinja_feature = varargs %}\n    {{ return(adapter.dispatch('safe_add', 'dbt_utils')(*varargs)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__safe_add"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1671050798.5945477}, "macro.dbt_utils.default__safe_add": {"unique_id": "macro.dbt_utils.default__safe_add", "package_name": "dbt_utils", "root_path": "C:\\Users\\jessi\\git\\axelar-models\\dbt_packages\\dbt_utils", "path": "macros\\sql\\safe_add.sql", "original_file_path": "macros\\sql\\safe_add.sql", "name": "default__safe_add", "macro_sql": "\n\n{%- macro default__safe_add() -%}\n\n{% set fields = [] %}\n\n{%- for field in varargs -%}\n\n    {% do fields.append(\"coalesce(\" ~ field ~ \", 0)\") %}\n\n{%- endfor -%}\n\n{{ fields|join(' +\\n  ') }}\n\n{%- endmacro -%}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1671050798.5945477}, "macro.dbt_utils.star": {"unique_id": "macro.dbt_utils.star", "package_name": "dbt_utils", "root_path": "C:\\Users\\jessi\\git\\axelar-models\\dbt_packages\\dbt_utils", "path": "macros\\sql\\star.sql", "original_file_path": "macros\\sql\\star.sql", "name": "star", "macro_sql": "{% macro star(from, relation_alias=False, except=[], prefix='', suffix='') -%}\n    {{ return(adapter.dispatch('star', 'dbt_utils')(from, relation_alias, except, prefix, suffix)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__star"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1671050798.5945477}, "macro.dbt_utils.default__star": {"unique_id": "macro.dbt_utils.default__star", "package_name": "dbt_utils", "root_path": "C:\\Users\\jessi\\git\\axelar-models\\dbt_packages\\dbt_utils", "path": "macros\\sql\\star.sql", "original_file_path": "macros\\sql\\star.sql", "name": "default__star", "macro_sql": "{% macro default__star(from, relation_alias=False, except=[], prefix='', suffix='') -%}\n    {%- do dbt_utils._is_relation(from, 'star') -%}\n    {%- do dbt_utils._is_ephemeral(from, 'star') -%}\n\n    {#-- Prevent querying of db in parsing mode. This works because this macro does not create any new refs. #}\n    {%- if not execute -%}\n        {{ return('*') }}\n    {%- endif -%}\n\n    {% set cols = dbt_utils.get_filtered_columns_in_relation(from, except) %}\n\n    {%- if cols|length <= 0 -%}\n      {{- return('*') -}}\n    {%- else -%}\n        {%- for col in cols %}\n            {%- if relation_alias %}{{ relation_alias }}.{% else %}{%- endif -%}{{ adapter.quote(col)|trim }} {%- if prefix!='' or suffix!='' %} as {{ adapter.quote(prefix ~ col ~ suffix)|trim }} {%- endif -%}\n            {%- if not loop.last %},{{ '\\n  ' }}{% endif %}\n        {%- endfor -%}\n    {% endif %}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils._is_relation", "macro.dbt_utils._is_ephemeral", "macro.dbt_utils.get_filtered_columns_in_relation"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1671050798.5945477}, "macro.dbt_utils.surrogate_key": {"unique_id": "macro.dbt_utils.surrogate_key", "package_name": "dbt_utils", "root_path": "C:\\Users\\jessi\\git\\axelar-models\\dbt_packages\\dbt_utils", "path": "macros\\sql\\surrogate_key.sql", "original_file_path": "macros\\sql\\surrogate_key.sql", "name": "surrogate_key", "macro_sql": "{%- macro surrogate_key(field_list) -%}\n    {# needed for safe_add to allow for non-keyword arguments see SO post #}\n    {# https://stackoverflow.com/questions/13944751/args-kwargs-in-jinja2-macros #}\n    {% set frustrating_jinja_feature = varargs %}\n    {{ return(adapter.dispatch('surrogate_key', 'dbt_utils')(field_list, *varargs)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__surrogate_key"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1671050798.5945477}, "macro.dbt_utils.default__surrogate_key": {"unique_id": "macro.dbt_utils.default__surrogate_key", "package_name": "dbt_utils", "root_path": "C:\\Users\\jessi\\git\\axelar-models\\dbt_packages\\dbt_utils", "path": "macros\\sql\\surrogate_key.sql", "original_file_path": "macros\\sql\\surrogate_key.sql", "name": "default__surrogate_key", "macro_sql": "\n\n{%- macro default__surrogate_key(field_list) -%}\n\n{%- if varargs|length >= 1 or field_list is string %}\n\n{%- set error_message = '\nWarning: the `surrogate_key` macro now takes a single list argument instead of \\\nmultiple string arguments. Support for multiple string arguments will be \\\ndeprecated in a future release of dbt-utils. The {}.{} model triggered this warning. \\\n'.format(model.package_name, model.name) -%}\n\n{%- do exceptions.warn(error_message) -%}\n\n{# first argument is not included in varargs, so add first element to field_list_xf #}\n{%- set field_list_xf = [field_list] -%}\n\n{%- for field in varargs %}\n{%- set _ = field_list_xf.append(field) -%}\n{%- endfor -%}\n\n{%- else -%}\n\n{# if using list, just set field_list_xf as field_list #}\n{%- set field_list_xf = field_list -%}\n\n{%- endif -%}\n\n\n{%- set fields = [] -%}\n\n{%- for field in field_list_xf -%}\n\n    {%- set _ = fields.append(\n        \"coalesce(cast(\" ~ field ~ \" as \" ~ type_string() ~ \"), '')\"\n    ) -%}\n\n    {%- if not loop.last %}\n        {%- set _ = fields.append(\"'-'\") -%}\n    {%- endif -%}\n\n{%- endfor -%}\n\n{{ hash(concat(fields)) }}\n\n{%- endmacro -%}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.type_string", "macro.dbt_utils.hash", "macro.dbt_utils.concat"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1671050798.5945477}, "macro.dbt_utils.union_relations": {"unique_id": "macro.dbt_utils.union_relations", "package_name": "dbt_utils", "root_path": "C:\\Users\\jessi\\git\\axelar-models\\dbt_packages\\dbt_utils", "path": "macros\\sql\\union.sql", "original_file_path": "macros\\sql\\union.sql", "name": "union_relations", "macro_sql": "{%- macro union_relations(relations, column_override=none, include=[], exclude=[], source_column_name='_dbt_source_relation', where=none) -%}\n    {{ return(adapter.dispatch('union_relations', 'dbt_utils')(relations, column_override, include, exclude, source_column_name, where)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__union_relations"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1671050798.610266}, "macro.dbt_utils.default__union_relations": {"unique_id": "macro.dbt_utils.default__union_relations", "package_name": "dbt_utils", "root_path": "C:\\Users\\jessi\\git\\axelar-models\\dbt_packages\\dbt_utils", "path": "macros\\sql\\union.sql", "original_file_path": "macros\\sql\\union.sql", "name": "default__union_relations", "macro_sql": "\n\n{%- macro default__union_relations(relations, column_override=none, include=[], exclude=[], source_column_name='_dbt_source_relation', where=none) -%}\n\n    {%- if exclude and include -%}\n        {{ exceptions.raise_compiler_error(\"Both an exclude and include list were provided to the `union` macro. Only one is allowed\") }}\n    {%- endif -%}\n\n    {#-- Prevent querying of db in parsing mode. This works because this macro does not create any new refs. -#}\n    {%- if not execute %}\n        {{ return('') }}\n    {% endif -%}\n\n    {%- set column_override = column_override if column_override is not none else {} -%}\n\n    {%- set relation_columns = {} -%}\n    {%- set column_superset = {} -%}\n\n    {%- for relation in relations -%}\n\n        {%- do relation_columns.update({relation: []}) -%}\n\n        {%- do dbt_utils._is_relation(relation, 'union_relations') -%}\n        {%- do dbt_utils._is_ephemeral(relation, 'union_relations') -%}\n        {%- set cols = adapter.get_columns_in_relation(relation) -%}\n        {%- for col in cols -%}\n\n        {#- If an exclude list was provided and the column is in the list, do nothing -#}\n        {%- if exclude and col.column in exclude -%}\n\n        {#- If an include list was provided and the column is not in the list, do nothing -#}\n        {%- elif include and col.column not in include -%}\n\n        {#- Otherwise add the column to the column superset -#}\n        {%- else -%}\n\n            {#- update the list of columns in this relation -#}\n            {%- do relation_columns[relation].append(col.column) -%}\n\n            {%- if col.column in column_superset -%}\n\n                {%- set stored = column_superset[col.column] -%}\n                {%- if col.is_string() and stored.is_string() and col.string_size() > stored.string_size() -%}\n\n                    {%- do column_superset.update({col.column: col}) -%}\n\n                {%- endif %}\n\n            {%- else -%}\n\n                {%- do column_superset.update({col.column: col}) -%}\n\n            {%- endif -%}\n\n        {%- endif -%}\n\n        {%- endfor -%}\n    {%- endfor -%}\n\n    {%- set ordered_column_names = column_superset.keys() -%}\n    {%- set dbt_command = flags.WHICH -%}\n\n\n    {% if dbt_command in ['run', 'build'] %}\n    {% if (include | length > 0 or exclude | length > 0) and not column_superset.keys() %}\n        {%- set relations_string -%}\n            {%- for relation in relations -%}\n                {{ relation.name }}\n            {%- if not loop.last %}, {% endif -%}\n            {%- endfor -%}\n        {%- endset -%}\n\n        {%- set error_message -%}\n            There were no columns found to union for relations {{ relations_string }}\n        {%- endset -%}\n\n        {{ exceptions.raise_compiler_error(error_message) }}\n    {%- endif -%}\n    {%- endif -%}\n\n    {%- for relation in relations %}\n\n        (\n            select\n\n                {%- if source_column_name is not none %}\n                cast({{ string_literal(relation) }} as {{ type_string() }}) as {{ source_column_name }},\n                {%- endif %}\n\n                {% for col_name in ordered_column_names -%}\n\n                    {%- set col = column_superset[col_name] %}\n                    {%- set col_type = column_override.get(col.column, col.data_type) %}\n                    {%- set col_name = adapter.quote(col_name) if col_name in relation_columns[relation] else 'null' %}\n                    cast({{ col_name }} as {{ col_type }}) as {{ col.quoted }} {% if not loop.last %},{% endif -%}\n\n                {%- endfor %}\n\n            from {{ relation }}\n\n            {% if where -%}\n            where {{ where }}\n            {%- endif %}\n        )\n\n        {% if not loop.last -%}\n            union all\n        {% endif -%}\n\n    {%- endfor -%}\n\n{%- endmacro -%}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils._is_relation", "macro.dbt_utils._is_ephemeral", "macro.dbt_utils.string_literal", "macro.dbt_utils.type_string"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1671050798.610266}, "macro.dbt_utils.unpivot": {"unique_id": "macro.dbt_utils.unpivot", "package_name": "dbt_utils", "root_path": "C:\\Users\\jessi\\git\\axelar-models\\dbt_packages\\dbt_utils", "path": "macros\\sql\\unpivot.sql", "original_file_path": "macros\\sql\\unpivot.sql", "name": "unpivot", "macro_sql": "{% macro unpivot(relation=none, cast_to='varchar', exclude=none, remove=none, field_name='field_name', value_name='value', table=none) -%}\n    {{ return(adapter.dispatch('unpivot', 'dbt_utils')(relation, cast_to, exclude, remove, field_name, value_name, table)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__unpivot"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1671050798.610266}, "macro.dbt_utils.default__unpivot": {"unique_id": "macro.dbt_utils.default__unpivot", "package_name": "dbt_utils", "root_path": "C:\\Users\\jessi\\git\\axelar-models\\dbt_packages\\dbt_utils", "path": "macros\\sql\\unpivot.sql", "original_file_path": "macros\\sql\\unpivot.sql", "name": "default__unpivot", "macro_sql": "{% macro default__unpivot(relation=none, cast_to='varchar', exclude=none, remove=none, field_name='field_name', value_name='value', table=none) -%}\n\n    {% if table %}\n        {%- set error_message = '\n            Warning: the `unpivot` macro no longer accepts a `table` parameter. \\\n            This parameter will be deprecated in a future release of dbt-utils. Use the `relation` parameter instead. \\\n            The {}.{} model triggered this warning. \\\n            '.format(model.package_name, model.name) -%}\n        {%- do exceptions.warn(error_message) -%}\n    {% endif %}\n\n    {% if relation and table %}\n        {{ exceptions.raise_compiler_error(\"Error: both the `relation` and `table` parameters were provided to `unpivot` macro. Choose one only (we recommend `relation`).\") }}\n    {% elif not relation and table %}\n        {% set relation=table %}\n    {% elif not relation and not table %}\n        {{ exceptions.raise_compiler_error(\"Error: argument `relation` is required for `unpivot` macro.\") }}\n    {% endif %}\n\n  {%- set exclude = exclude if exclude is not none else [] %}\n  {%- set remove = remove if remove is not none else [] %}\n\n  {%- set include_cols = [] %}\n\n  {%- set table_columns = {} %}\n\n  {%- do table_columns.update({relation: []}) %}\n\n  {%- do dbt_utils._is_relation(relation, 'unpivot') -%}\n  {%- do dbt_utils._is_ephemeral(relation, 'unpivot') -%}\n  {%- set cols = adapter.get_columns_in_relation(relation) %}\n\n  {%- for col in cols -%}\n    {%- if col.column.lower() not in remove|map('lower') and col.column.lower() not in exclude|map('lower') -%}\n      {% do include_cols.append(col) %}\n    {%- endif %}\n  {%- endfor %}\n\n\n  {%- for col in include_cols -%}\n    select\n      {%- for exclude_col in exclude %}\n        {{ exclude_col }},\n      {%- endfor %}\n\n      cast('{{ col.column }}' as {{ type_string() }}) as {{ field_name }},\n      cast(  {% if col.data_type == 'boolean' %}\n           {{ cast_bool_to_text(col.column) }}\n             {% else %}\n           {{ col.column }}\n             {% endif %}\n           as {{ cast_to }}) as {{ value_name }}\n\n    from {{ relation }}\n\n    {% if not loop.last -%}\n      union all\n    {% endif -%}\n  {%- endfor -%}\n\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils._is_relation", "macro.dbt_utils._is_ephemeral", "macro.dbt_utils.type_string", "macro.dbt_utils.cast_bool_to_text"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1671050798.610266}, "macro.dbt_utils.width_bucket": {"unique_id": "macro.dbt_utils.width_bucket", "package_name": "dbt_utils", "root_path": "C:\\Users\\jessi\\git\\axelar-models\\dbt_packages\\dbt_utils", "path": "macros\\sql\\width_bucket.sql", "original_file_path": "macros\\sql\\width_bucket.sql", "name": "width_bucket", "macro_sql": "{% macro width_bucket(expr, min_value, max_value, num_buckets) %}\n  {{ return(adapter.dispatch('width_bucket', 'dbt_utils') (expr, min_value, max_value, num_buckets)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.snowflake__width_bucket"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1671050798.610266}, "macro.dbt_utils.default__width_bucket": {"unique_id": "macro.dbt_utils.default__width_bucket", "package_name": "dbt_utils", "root_path": "C:\\Users\\jessi\\git\\axelar-models\\dbt_packages\\dbt_utils", "path": "macros\\sql\\width_bucket.sql", "original_file_path": "macros\\sql\\width_bucket.sql", "name": "default__width_bucket", "macro_sql": "{% macro default__width_bucket(expr, min_value, max_value, num_buckets) -%}\n\n    {% set bin_size -%}\n    (( {{ max_value }} - {{ min_value }} ) / {{ num_buckets }} )\n    {%- endset %}\n    (\n        -- to break ties when the amount is eaxtly at the bucket egde\n        case\n            when\n                mod(\n                    {{ dbt.safe_cast(expr, type_numeric() ) }},\n                    {{ dbt.safe_cast(bin_size, type_numeric() ) }}\n                ) = 0\n            then 1\n            else 0\n        end\n    ) +\n      -- Anything over max_value goes the N+1 bucket\n    least(\n        ceil(\n            ({{ expr }} - {{ min_value }})/{{ bin_size }}\n        ),\n        {{ num_buckets }} + 1\n    )\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.safe_cast", "macro.dbt_utils.type_numeric"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1671050798.610266}, "macro.dbt_utils.redshift__width_bucket": {"unique_id": "macro.dbt_utils.redshift__width_bucket", "package_name": "dbt_utils", "root_path": "C:\\Users\\jessi\\git\\axelar-models\\dbt_packages\\dbt_utils", "path": "macros\\sql\\width_bucket.sql", "original_file_path": "macros\\sql\\width_bucket.sql", "name": "redshift__width_bucket", "macro_sql": "{% macro redshift__width_bucket(expr, min_value, max_value, num_buckets) -%}\n\n    {% set bin_size -%}\n    (( {{ max_value }} - {{ min_value }} ) / {{ num_buckets }} )\n    {%- endset %}\n    (\n        -- to break ties when the amount is exactly at the bucket edge\n        case\n            when\n                {{ dbt.safe_cast(expr, type_numeric() ) }} %\n                {{ dbt.safe_cast(bin_size, type_numeric() ) }}\n                 = 0\n            then 1\n            else 0\n        end\n    ) +\n      -- Anything over max_value goes the N+1 bucket\n    least(\n        ceil(\n            ({{ expr }} - {{ min_value }})/{{ bin_size }}\n        ),\n        {{ num_buckets }} + 1\n    )\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.safe_cast", "macro.dbt_utils.type_numeric"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1671050798.610266}, "macro.dbt_utils.snowflake__width_bucket": {"unique_id": "macro.dbt_utils.snowflake__width_bucket", "package_name": "dbt_utils", "root_path": "C:\\Users\\jessi\\git\\axelar-models\\dbt_packages\\dbt_utils", "path": "macros\\sql\\width_bucket.sql", "original_file_path": "macros\\sql\\width_bucket.sql", "name": "snowflake__width_bucket", "macro_sql": "{% macro snowflake__width_bucket(expr, min_value, max_value, num_buckets) %}\n    width_bucket({{ expr }}, {{ min_value }}, {{ max_value }}, {{ num_buckets }} )\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1671050798.610266}, "macro.dbt_utils.get_url_host": {"unique_id": "macro.dbt_utils.get_url_host", "package_name": "dbt_utils", "root_path": "C:\\Users\\jessi\\git\\axelar-models\\dbt_packages\\dbt_utils", "path": "macros\\web\\get_url_host.sql", "original_file_path": "macros\\web\\get_url_host.sql", "name": "get_url_host", "macro_sql": "{% macro get_url_host(field) -%}\n    {{ return(adapter.dispatch('get_url_host', 'dbt_utils')(field)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__get_url_host"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1671050798.610266}, "macro.dbt_utils.default__get_url_host": {"unique_id": "macro.dbt_utils.default__get_url_host", "package_name": "dbt_utils", "root_path": "C:\\Users\\jessi\\git\\axelar-models\\dbt_packages\\dbt_utils", "path": "macros\\web\\get_url_host.sql", "original_file_path": "macros\\web\\get_url_host.sql", "name": "default__get_url_host", "macro_sql": "{% macro default__get_url_host(field) -%}\n\n{%- set parsed =\n    split_part(\n        split_part(\n            replace(\n                replace(\n                    replace(field, \"'android-app://'\", \"''\"\n                    ), \"'http://'\", \"''\"\n                ), \"'https://'\", \"''\"\n            ), \"'/'\", 1\n        ), \"'?'\", 1\n    )\n\n-%}\n\n\n    {{ dbt.safe_cast(\n        parsed,\n        type_string()\n        )}}\n\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.split_part", "macro.dbt_utils.replace", "macro.dbt_utils.safe_cast", "macro.dbt_utils.type_string"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1671050798.610266}, "macro.dbt_utils.get_url_parameter": {"unique_id": "macro.dbt_utils.get_url_parameter", "package_name": "dbt_utils", "root_path": "C:\\Users\\jessi\\git\\axelar-models\\dbt_packages\\dbt_utils", "path": "macros\\web\\get_url_parameter.sql", "original_file_path": "macros\\web\\get_url_parameter.sql", "name": "get_url_parameter", "macro_sql": "{% macro get_url_parameter(field, url_parameter) -%}\n    {{ return(adapter.dispatch('get_url_parameter', 'dbt_utils')(field, url_parameter)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__get_url_parameter"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1671050798.62589}, "macro.dbt_utils.default__get_url_parameter": {"unique_id": "macro.dbt_utils.default__get_url_parameter", "package_name": "dbt_utils", "root_path": "C:\\Users\\jessi\\git\\axelar-models\\dbt_packages\\dbt_utils", "path": "macros\\web\\get_url_parameter.sql", "original_file_path": "macros\\web\\get_url_parameter.sql", "name": "default__get_url_parameter", "macro_sql": "{% macro default__get_url_parameter(field, url_parameter) -%}\n\n{%- set formatted_url_parameter = \"'\" + url_parameter + \"='\" -%}\n\n{%- set split = split_part(split_part(field, formatted_url_parameter, 2), \"'&'\", 1) -%}\n\nnullif({{ split }},'')\n\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.split_part"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1671050798.62589}, "macro.dbt_utils.get_url_path": {"unique_id": "macro.dbt_utils.get_url_path", "package_name": "dbt_utils", "root_path": "C:\\Users\\jessi\\git\\axelar-models\\dbt_packages\\dbt_utils", "path": "macros\\web\\get_url_path.sql", "original_file_path": "macros\\web\\get_url_path.sql", "name": "get_url_path", "macro_sql": "{% macro get_url_path(field) -%}\n    {{ return(adapter.dispatch('get_url_path', 'dbt_utils')(field)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__get_url_path"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1671050798.62589}, "macro.dbt_utils.default__get_url_path": {"unique_id": "macro.dbt_utils.default__get_url_path", "package_name": "dbt_utils", "root_path": "C:\\Users\\jessi\\git\\axelar-models\\dbt_packages\\dbt_utils", "path": "macros\\web\\get_url_path.sql", "original_file_path": "macros\\web\\get_url_path.sql", "name": "default__get_url_path", "macro_sql": "{% macro default__get_url_path(field) -%}\n\n    {%- set stripped_url =\n        replace(\n            replace(field, \"'http://'\", \"''\"), \"'https://'\", \"''\")\n    -%}\n\n    {%- set first_slash_pos -%}\n        coalesce(\n            nullif({{ position(\"'/'\", stripped_url) }}, 0),\n            {{ position(\"'?'\", stripped_url) }} - 1\n            )\n    {%- endset -%}\n\n    {%- set parsed_path =\n        split_part(\n            right(\n                stripped_url,\n                length(stripped_url) ~ \"-\" ~ first_slash_pos\n                ),\n            \"'?'\", 1\n            )\n    -%}\n\n    {{ safe_cast(\n        parsed_path,\n        type_string()\n    )}}\n\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.replace", "macro.dbt_utils.position", "macro.dbt_utils.split_part", "macro.dbt_utils.right", "macro.dbt_utils.length", "macro.dbt_utils.safe_cast", "macro.dbt_utils.type_string"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1671050798.62589}}, "docs": {"axelar.address": {"unique_id": "axelar.address", "package_name": "axelar", "root_path": "C:\\Users\\jessi\\git\\axelar-models", "path": "descriptions\\address.md", "original_file_path": "models\\descriptions\\address.md", "name": "address", "block_contents": "Address unique to an individual wallet, validator, or token."}, "axelar.amount": {"unique_id": "axelar.amount", "package_name": "axelar", "root_path": "C:\\Users\\jessi\\git\\axelar-models", "path": "descriptions\\amount.md", "original_file_path": "models\\descriptions\\amount.md", "name": "amount", "block_contents": "The amount that was used in the transaction message."}, "axelar.blockchain": {"unique_id": "axelar.blockchain", "package_name": "axelar", "root_path": "C:\\Users\\jessi\\git\\axelar-models", "path": "descriptions\\blockchain.md", "original_file_path": "models\\descriptions\\blockchain.md", "name": "blockchain", "block_contents": "In this table, always Axelar. Used to join to cross-chain tables."}, "axelar.block_id": {"unique_id": "axelar.block_id", "package_name": "axelar", "root_path": "C:\\Users\\jessi\\git\\axelar-models", "path": "descriptions\\block_id.md", "original_file_path": "models\\descriptions\\block_id.md", "name": "block_id", "block_contents": "The block height the block was recorded at."}, "axelar.block_timestamp": {"unique_id": "axelar.block_timestamp", "package_name": "axelar", "root_path": "C:\\Users\\jessi\\git\\axelar-models", "path": "descriptions\\block_timestamp.md", "original_file_path": "models\\descriptions\\block_timestamp.md", "name": "block_timestamp", "block_contents": "The date and time at which the block began."}, "axelar.chain_id": {"unique_id": "axelar.chain_id", "package_name": "axelar", "root_path": "C:\\Users\\jessi\\git\\axelar-models", "path": "descriptions\\chain_id.md", "original_file_path": "models\\descriptions\\chain_id.md", "name": "chain_id", "block_contents": "The name and version of the blockchain."}, "axelar.codespace": {"unique_id": "axelar.codespace", "package_name": "axelar", "root_path": "C:\\Users\\jessi\\git\\axelar-models", "path": "descriptions\\codespace.md", "original_file_path": "models\\descriptions\\codespace.md", "name": "codespace", "block_contents": "Namespace for the code."}, "axelar.creator": {"unique_id": "axelar.creator", "package_name": "axelar", "root_path": "C:\\Users\\jessi\\git\\axelar-models", "path": "descriptions\\creator.md", "original_file_path": "models\\descriptions\\creator.md", "name": "creator", "block_contents": "Name of the label creator - for now, this will always be \"Flipside.\""}, "axelar.currency": {"unique_id": "axelar.currency", "package_name": "axelar", "root_path": "C:\\Users\\jessi\\git\\axelar-models", "path": "descriptions\\currency.md", "original_file_path": "models\\descriptions\\currency.md", "name": "currency", "block_contents": "The currency that was used in the transaction message."}, "axelar.decimal": {"unique_id": "axelar.decimal", "package_name": "axelar", "root_path": "C:\\Users\\jessi\\git\\axelar-models", "path": "descriptions\\decimal.md", "original_file_path": "models\\descriptions\\decimal.md", "name": "decimal", "block_contents": "Divide amount by decimal to get the actual amount of currency being transferred."}, "axelar.fee": {"unique_id": "axelar.fee", "package_name": "axelar", "root_path": "C:\\Users\\jessi\\git\\axelar-models", "path": "descriptions\\fee.md", "original_file_path": "models\\descriptions\\fee.md", "name": "fee", "block_contents": "The fee is paid by the initiator of the transaction. Fee = gas * gas price and is given in micro-AXL."}, "axelar.fee_denom": {"unique_id": "axelar.fee_denom", "package_name": "axelar", "root_path": "C:\\Users\\jessi\\git\\axelar-models", "path": "descriptions\\fee_denom.md", "original_file_path": "models\\descriptions\\fee_denom.md", "name": "fee_denom", "block_contents": "The denominator of the transaction fee."}, "axelar.gas_used": {"unique_id": "axelar.gas_used", "package_name": "axelar", "root_path": "C:\\Users\\jessi\\git\\axelar-models", "path": "descriptions\\gas_used.md", "original_file_path": "models\\descriptions\\gas_used.md", "name": "gas_used", "block_contents": "The amount of gas consumed by the transaction."}, "axelar.gas_wanted": {"unique_id": "axelar.gas_wanted", "package_name": "axelar", "root_path": "C:\\Users\\jessi\\git\\axelar-models", "path": "descriptions\\gas_wanted.md", "original_file_path": "models\\descriptions\\gas_wanted.md", "name": "gas_wanted", "block_contents": "Amount of gas requested for a transaction. It is provided by users when the transaction is generated."}, "axelar.label": {"unique_id": "axelar.label", "package_name": "axelar", "root_path": "C:\\Users\\jessi\\git\\axelar-models", "path": "descriptions\\label.md", "original_file_path": "models\\descriptions\\label.md", "name": "label", "block_contents": "The label or name of the address."}, "axelar.label_subtype": {"unique_id": "axelar.label_subtype", "package_name": "axelar", "root_path": "C:\\Users\\jessi\\git\\axelar-models", "path": "descriptions\\label_subtype.md", "original_file_path": "models\\descriptions\\label_subtype.md", "name": "label_subtype", "block_contents": "Adds more detail to the label type."}, "axelar.label_type": {"unique_id": "axelar.label_type", "package_name": "axelar", "root_path": "C:\\Users\\jessi\\git\\axelar-models", "path": "descriptions\\label_type.md", "original_file_path": "models\\descriptions\\label_type.md", "name": "label_type", "block_contents": "A broad category that describes what a label is representing."}, "axelar.msg_group": {"unique_id": "axelar.msg_group", "package_name": "axelar", "root_path": "C:\\Users\\jessi\\git\\axelar-models", "path": "descriptions\\msg_group.md", "original_file_path": "models\\descriptions\\msg_group.md", "name": "msg_group", "block_contents": "Value grouping different messages together to represent a single action. Format will include the numeric msg_group and msg_sub_group with a \":\" seperator. The subgroup will always be 0 except for \"Exec\" actions. NULL group means messages are related to the header (overall transaction)"}, "axelar.msg_index": {"unique_id": "axelar.msg_index", "package_name": "axelar", "root_path": "C:\\Users\\jessi\\git\\axelar-models", "path": "descriptions\\msg_index.md", "original_file_path": "models\\descriptions\\msg_index.md", "name": "msg_index", "block_contents": "Short for \"message index,\" the position in which messages occur in a transaction."}, "axelar.msg_sub_group": {"unique_id": "axelar.msg_sub_group", "package_name": "axelar", "root_path": "C:\\Users\\jessi\\git\\axelar-models", "path": "descriptions\\msg_sub_group.md", "original_file_path": "models\\descriptions\\msg_sub_group.md", "name": "msg_sub_group", "block_contents": "Silver only -- Numeric value grouping different messages together to represent a single action within a group. This is relevent for exec actions that contain mutiple underlying actions. NULL sub group means messages are related to the header (overall transaction)"}, "axelar.msg_type": {"unique_id": "axelar.msg_type", "package_name": "axelar", "root_path": "C:\\Users\\jessi\\git\\axelar-models", "path": "descriptions\\msg_type.md", "original_file_path": "models\\descriptions\\msg_type.md", "name": "msg_type", "block_contents": "A string containing information about the type of message occurring."}, "axelar.partition_by_block_id": {"unique_id": "axelar.partition_by_block_id", "package_name": "axelar", "root_path": "C:\\Users\\jessi\\git\\axelar-models", "path": "descriptions\\partition_by_block_id.md", "original_file_path": "models\\descriptions\\partition_by_block_id.md", "name": "partition_by_block_id", "block_contents": "An internal column allowing incremental logic to be used in the code."}, "axelar.project_name": {"unique_id": "axelar.project_name", "package_name": "axelar", "root_path": "C:\\Users\\jessi\\git\\axelar-models", "path": "descriptions\\project_name.md", "original_file_path": "models\\descriptions\\project_name.md", "name": "project_name", "block_contents": "The name of the project the label belongs to."}, "axelar.proposer_address": {"unique_id": "axelar.proposer_address", "package_name": "axelar", "root_path": "C:\\Users\\jessi\\git\\axelar-models", "path": "descriptions\\proposer_address.md", "original_file_path": "models\\descriptions\\proposer_address.md", "name": "proposer_address", "block_contents": "The address of the validator that proposed the block."}, "axelar.raw_metadata": {"unique_id": "axelar.raw_metadata", "package_name": "axelar", "root_path": "C:\\Users\\jessi\\git\\axelar-models", "path": "descriptions\\raw_metadata.md", "original_file_path": "models\\descriptions\\raw_metadata.md", "name": "raw_metadata", "block_contents": "Additional details about the validator or token in json format."}, "axelar.receiver": {"unique_id": "axelar.receiver", "package_name": "axelar", "root_path": "C:\\Users\\jessi\\git\\axelar-models", "path": "descriptions\\receiver.md", "original_file_path": "models\\descriptions\\receiver.md", "name": "receiver", "block_contents": "The wallet address of the individual received tokens in the transfer."}, "axelar.sender": {"unique_id": "axelar.sender", "package_name": "axelar", "root_path": "C:\\Users\\jessi\\git\\axelar-models", "path": "descriptions\\sender.md", "original_file_path": "models\\descriptions\\sender.md", "name": "sender", "block_contents": "The wallet address of the individual sent tokens in the transfer."}, "axelar.transfer_type": {"unique_id": "axelar.transfer_type", "package_name": "axelar", "root_path": "C:\\Users\\jessi\\git\\axelar-models", "path": "descriptions\\transfer_type.md", "original_file_path": "models\\descriptions\\transfer_type.md", "name": "transfer_type", "block_contents": "Details on the type of transfer occurring during the transaction. \"Transfer_In\" = depositing tokens onto Axelar. \"Transfer_out\" = withdrawing tokens from Axelar. \"Axelar\" = wallet to wallet transfer on Axelar."}, "axelar.tx_code": {"unique_id": "axelar.tx_code", "package_name": "axelar", "root_path": "C:\\Users\\jessi\\git\\axelar-models", "path": "descriptions\\tx_code.md", "original_file_path": "models\\descriptions\\tx_code.md", "name": "tx_code", "block_contents": "A number that corresponds to various error codes. When \"0\", the transaction is successful. Non-zero numbers signify different types of transaction failures."}, "axelar.tx_count": {"unique_id": "axelar.tx_count", "package_name": "axelar", "root_path": "C:\\Users\\jessi\\git\\axelar-models", "path": "descriptions\\tx_count.md", "original_file_path": "models\\descriptions\\tx_count.md", "name": "tx_count", "block_contents": "The number of transactions that occurred during a block."}, "axelar.tx_from": {"unique_id": "axelar.tx_from", "package_name": "axelar", "root_path": "C:\\Users\\jessi\\git\\axelar-models", "path": "descriptions\\tx_from.md", "original_file_path": "models\\descriptions\\tx_from.md", "name": "tx_from", "block_contents": "The wallet address of the individual who initiated the transaction"}, "axelar.tx_id": {"unique_id": "axelar.tx_id", "package_name": "axelar", "root_path": "C:\\Users\\jessi\\git\\axelar-models", "path": "descriptions\\tx_id.md", "original_file_path": "models\\descriptions\\tx_id.md", "name": "tx_id", "block_contents": "A unique key that identifies a transaction. Called \"TxHash\" on block explorers."}, "axelar.tx_log": {"unique_id": "axelar.tx_log", "package_name": "axelar", "root_path": "C:\\Users\\jessi\\git\\axelar-models", "path": "descriptions\\tx_log.md", "original_file_path": "models\\descriptions\\tx_log.md", "name": "tx_log", "block_contents": "A string that contains the transaction logs, which are logs written by the program interacted with during the transaction."}, "axelar.tx_succeeded": {"unique_id": "axelar.tx_succeeded", "package_name": "axelar", "root_path": "C:\\Users\\jessi\\git\\axelar-models", "path": "descriptions\\tx_succeeded.md", "original_file_path": "models\\descriptions\\tx_succeeded.md", "name": "tx_succeeded", "block_contents": "Transaction status is \"TRUE\" if the transaction went through, \"FALSE\" if the transaction failed."}, "axelar.validator_hash": {"unique_id": "axelar.validator_hash", "package_name": "axelar", "root_path": "C:\\Users\\jessi\\git\\axelar-models", "path": "descriptions\\validator_hash.md", "original_file_path": "models\\descriptions\\validator_hash.md", "name": "validator_hash", "block_contents": "The root hash of the new validator set."}, "axelar._unique_key": {"unique_id": "axelar._unique_key", "package_name": "axelar", "root_path": "C:\\Users\\jessi\\git\\axelar-models", "path": "descriptions\\_unique_key.md", "original_file_path": "models\\descriptions\\_unique_key.md", "name": "_unique_key", "block_contents": "The unique key for the table."}, "dbt.__overview__": {"unique_id": "dbt.__overview__", "package_name": "dbt", "root_path": "C:\\Python310\\lib\\site-packages\\dbt\\include\\global_project", "path": "overview.md", "original_file_path": "docs\\overview.md", "name": "__overview__", "block_contents": "### Welcome!\n\nWelcome to the auto-generated documentation for your dbt project!\n\n### Navigation\n\nYou can use the `Project` and `Database` navigation tabs on the left side of the window to explore the models\nin your project.\n\n#### Project Tab\nThe `Project` tab mirrors the directory structure of your dbt project. In this tab, you can see all of the\nmodels defined in your dbt project, as well as models imported from dbt packages.\n\n#### Database Tab\nThe `Database` tab also exposes your models, but in a format that looks more like a database explorer. This view\nshows relations (tables and views) grouped into database schemas. Note that ephemeral models are _not_ shown\nin this interface, as they do not exist in the database.\n\n### Graph Exploration\nYou can click the blue icon on the bottom-right corner of the page to view the lineage graph of your models.\n\nOn model pages, you'll see the immediate parents and children of the model you're exploring. By clicking the `Expand`\nbutton at the top-right of this lineage pane, you'll be able to see all of the models that are used to build,\nor are built from, the model you're exploring.\n\nOnce expanded, you'll be able to use the `--select` and `--exclude` model selection syntax to filter the\nmodels in the graph. For more information on model selection, check out the [dbt docs](https://docs.getdbt.com/docs/model-selection-syntax).\n\nNote that you can also right-click on models to interactively filter and explore the graph.\n\n---\n\n### More information\n\n- [What is dbt](https://docs.getdbt.com/docs/introduction)?\n- Read the [dbt viewpoint](https://docs.getdbt.com/docs/viewpoint)\n- [Installation](https://docs.getdbt.com/docs/installation)\n- Join the [dbt Community](https://www.getdbt.com/community/) for questions and discussion"}}, "exposures": {}, "metrics": {}, "selectors": {}, "disabled": {}, "parent_map": {"model.axelar.bronze__blocks": ["source.axelar.bronze.blocks"], "model.axelar.bronze__transactions": ["source.axelar.bronze.txs_details"], "model.axelar.core__dim_tokens": ["source.axelar.osmo.asset_metadata"], "model.axelar.core__fact_blocks": ["model.axelar.silver__blocks"], "model.axelar.core__fact_msgs": ["model.axelar.silver__msgs"], "model.axelar.core__fact_msg_attributes": ["model.axelar.silver__msg_attributes"], "model.axelar.core__fact_transactions": ["model.axelar.silver__msg_attributes", "model.axelar.silver__msg_attributes", "model.axelar.silver__transactions"], "model.axelar.core__fact_transfers": ["model.axelar.silver__transfers"], "model.axelar.silver__blocks": ["model.axelar.bronze__blocks"], "model.axelar.silver__msgs": ["model.axelar.silver__transactions"], "model.axelar.silver__msg_attributes": ["model.axelar.silver__msgs"], "model.axelar.silver__transactions": ["model.axelar.bronze__transactions", "model.axelar.silver__blocks"], "model.axelar.silver__transfers": ["model.axelar.core__dim_labels", "model.axelar.core__dim_labels", "model.axelar.silver__msg_attributes", "model.axelar.silver__msg_attributes", "model.axelar.silver__msg_attributes", "model.axelar.silver__msg_attributes", "model.axelar.silver__msg_attributes", "model.axelar.silver__msg_attributes", "model.axelar.silver__msg_attributes", "model.axelar.silver__msg_attributes", "model.axelar.silver__transactions"], "model.axelar.streamline__blocks_history": ["source.axelar.bronze_streamline.blocks"], "model.axelar.streamline__blocks_realtime": ["model.axelar.streamline__blocks_history"], "model.axelar.streamline__txs_history": ["source.axelar.bronze_streamline.txs_details"], "model.axelar.streamline__txs_realtime": ["model.axelar.streamline__txs_history", "source.axelar.bronze.blocks"], "operation.axelar.axelar-on-run-start-0": [], "test.axelar.dbt_expectations_expect_column_to_exist_core__dim_tokens_ADDRESS.adf98dac75": ["model.axelar.core__dim_tokens"], "test.axelar.dbt_expectations_expect_column_to_exist_core__dim_tokens_BLOCKCHAIN.5d98f45895": ["model.axelar.core__dim_tokens"], "test.axelar.dbt_expectations_expect_column_to_exist_core__dim_tokens_CREATOR.8ee1250b60": ["model.axelar.core__dim_tokens"], "test.axelar.dbt_expectations_expect_column_to_exist_core__dim_tokens_LABEL_TYPE.acd943c593": ["model.axelar.core__dim_tokens"], "test.axelar.dbt_expectations_expect_column_to_exist_core__dim_tokens_LABEL_SUBTYPE.5c4b83673d": ["model.axelar.core__dim_tokens"], "test.axelar.dbt_expectations_expect_column_to_exist_core__dim_tokens_LABEL.63e745c91d": ["model.axelar.core__dim_tokens"], "test.axelar.dbt_expectations_expect_column_to_exist_core__dim_tokens_PROJECT_NAME.2275550428": ["model.axelar.core__dim_tokens"], "test.axelar.dbt_expectations_expect_column_to_exist_core__dim_tokens_ALIAS.46f836a959": ["model.axelar.core__dim_tokens"], "test.axelar.dbt_expectations_expect_column_to_exist_core__dim_tokens_DECIMAL.9ed902b8c6": ["model.axelar.core__dim_tokens"], "test.axelar.dbt_expectations_expect_column_to_exist_core__dim_tokens_RAW_METADATA.35e66014b2": ["model.axelar.core__dim_tokens"], "test.axelar.dbt_expectations_expect_column_to_exist_core__dim_tokens_UNIQUE_KEY.2c98bfa4bd": ["model.axelar.core__dim_tokens"], "test.axelar.dbt_expectations_expect_column_to_exist_core__fact_blocks_BLOCK_ID.1758defefc": ["model.axelar.core__fact_blocks"], "test.axelar.dbt_expectations_expect_column_to_exist_core__fact_blocks_BLOCK_TIMESTAMP.c36a4acd9b": ["model.axelar.core__fact_blocks"], "test.axelar.dbt_expectations_expect_column_to_exist_core__fact_blocks_CHAIN_ID.d97c339232": ["model.axelar.core__fact_blocks"], "test.axelar.dbt_expectations_expect_column_to_exist_core__fact_blocks_TX_COUNT.cba858f6da": ["model.axelar.core__fact_blocks"], "test.axelar.dbt_expectations_expect_column_to_exist_core__fact_blocks_PROPOSER_ADDRESS.33eacc997a": ["model.axelar.core__fact_blocks"], "test.axelar.dbt_expectations_expect_column_to_exist_core__fact_blocks_VALIDATOR_HASH.74e26a3ed2": ["model.axelar.core__fact_blocks"], "test.axelar.dbt_expectations_expect_column_to_exist_core__fact_msgs_BLOCK_ID.faa38255c9": ["model.axelar.core__fact_msgs"], "test.axelar.dbt_expectations_expect_column_to_exist_core__fact_msgs_BLOCK_TIMESTAMP.cb0d0e3790": ["model.axelar.core__fact_msgs"], "test.axelar.dbt_expectations_expect_column_to_exist_core__fact_msgs_BLOCKCHAIN.ae346ad8fd": ["model.axelar.core__fact_msgs"], "test.axelar.dbt_expectations_expect_column_to_exist_core__fact_msgs_CHAIN_ID.de462fe441": ["model.axelar.core__fact_msgs"], "test.axelar.dbt_expectations_expect_column_to_exist_core__fact_msgs_TX_ID.c4b71cafbe": ["model.axelar.core__fact_msgs"], "test.axelar.dbt_expectations_expect_column_to_exist_core__fact_msgs_TX_SUCCEEDED.8b88dec946": ["model.axelar.core__fact_msgs"], "test.axelar.dbt_expectations_expect_column_to_exist_core__fact_msgs_MSG_GROUP.32d74436d2": ["model.axelar.core__fact_msgs"], "test.axelar.dbt_expectations_expect_column_to_exist_core__fact_msgs_MSG_INDEX.32d6a4e7cb": ["model.axelar.core__fact_msgs"], "test.axelar.dbt_expectations_expect_column_to_exist_core__fact_msgs_MSG_TYPE.e48648d983": ["model.axelar.core__fact_msgs"], "test.axelar.dbt_expectations_expect_column_to_exist_core__fact_msgs_MSG.f1f3ebfcd4": ["model.axelar.core__fact_msgs"], "test.axelar.dbt_expectations_expect_column_to_exist_core__fact_msg_attributes_BLOCK_ID.7b9a016433": ["model.axelar.core__fact_msg_attributes"], "test.axelar.dbt_expectations_expect_column_to_exist_core__fact_msg_attributes_BLOCK_TIMESTAMP.11e5f5562c": ["model.axelar.core__fact_msg_attributes"], "test.axelar.dbt_expectations_expect_column_to_exist_core__fact_msg_attributes_BLOCKCHAIN.356c2dfa46": ["model.axelar.core__fact_msg_attributes"], "test.axelar.dbt_expectations_expect_column_to_exist_core__fact_msg_attributes_CHAIN_ID.2983b83289": ["model.axelar.core__fact_msg_attributes"], "test.axelar.dbt_expectations_expect_column_to_exist_core__fact_msg_attributes_TX_ID.cab7fab11b": ["model.axelar.core__fact_msg_attributes"], "test.axelar.dbt_expectations_expect_column_to_exist_core__fact_msg_attributes_TX_SUCCEEDED.d0b118ebcb": ["model.axelar.core__fact_msg_attributes"], "test.axelar.dbt_expectations_expect_column_to_exist_core__fact_msg_attributes_MSG_GROUP.f1ed86ed4e": ["model.axelar.core__fact_msg_attributes"], "test.axelar.dbt_expectations_expect_column_to_exist_core__fact_msg_attributes_MSG_INDEX.d0e91438b3": ["model.axelar.core__fact_msg_attributes"], "test.axelar.dbt_expectations_expect_column_to_exist_core__fact_msg_attributes_MSG_TYPE.b2b48e2e7f": ["model.axelar.core__fact_msg_attributes"], "test.axelar.dbt_expectations_expect_column_to_exist_core__fact_msg_attributes_ATTRIBUTE_INDEX.c041ee26dd": ["model.axelar.core__fact_msg_attributes"], "test.axelar.dbt_expectations_expect_column_to_exist_core__fact_msg_attributes_ATTRIBUTE_KEY.978c26f41e": ["model.axelar.core__fact_msg_attributes"], "test.axelar.dbt_expectations_expect_column_to_exist_core__fact_msg_attributes_ATTRIBUTE_VALUE.f316cfca60": ["model.axelar.core__fact_msg_attributes"], "test.axelar.dbt_expectations_expect_column_to_exist_core__fact_transactions_BLOCK_ID.37c1b7e860": ["model.axelar.core__fact_transactions"], "test.axelar.dbt_expectations_expect_column_to_exist_core__fact_transactions_BLOCK_TIMESTAMP.84e94e706b": ["model.axelar.core__fact_transactions"], "test.axelar.dbt_expectations_expect_column_to_exist_core__fact_transactions_BLOCKCHAIN.8f714681bd": ["model.axelar.core__fact_transactions"], "test.axelar.dbt_expectations_expect_column_to_exist_core__fact_transactions_CHAIN_ID.a3a8b966b5": ["model.axelar.core__fact_transactions"], "test.axelar.dbt_expectations_expect_column_to_exist_core__fact_transactions_TX_ID.f616a284b6": ["model.axelar.core__fact_transactions"], "test.axelar.not_null_core__fact_transactions_TX_FROM.7ddc5dd2a3": ["model.axelar.core__fact_transactions"], "test.axelar.dbt_expectations_expect_column_to_exist_core__fact_transactions_TX_SUCCEEDED.35dccdcf3e": ["model.axelar.core__fact_transactions"], "test.axelar.dbt_expectations_expect_column_to_exist_core__fact_transactions_CODESPACE.31e919d605": ["model.axelar.core__fact_transactions"], "test.axelar.not_null_core__fact_transactions_FEE.f477aa43d7": ["model.axelar.core__fact_transactions"], "test.axelar.not_null_core__fact_transactions_FEE_DENOM.2f1e97f1ae": ["model.axelar.core__fact_transactions"], "test.axelar.dbt_expectations_expect_column_to_exist_core__fact_transactions_GAS_USED.330cc6bb7e": ["model.axelar.core__fact_transactions"], "test.axelar.dbt_expectations_expect_column_to_exist_core__fact_transactions_GAS_WANTED.8717751539": ["model.axelar.core__fact_transactions"], "test.axelar.dbt_expectations_expect_column_to_exist_core__fact_transactions_TX_CODE.8a8b1c8b5d": ["model.axelar.core__fact_transactions"], "test.axelar.dbt_expectations_expect_column_to_exist_core__fact_transactions_TX_LOG.9983486fda": ["model.axelar.core__fact_transactions"], "test.axelar.dbt_expectations_expect_column_to_exist_core__fact_transactions_MSGS.aee52badd9": ["model.axelar.core__fact_transactions"], "test.axelar.dbt_utils_unique_combination_of_columns_core__fact_transactions_TX_ID.57efb72c3f": ["model.axelar.core__fact_transactions"], "test.axelar.dbt_expectations_expect_column_to_exist_core__fact_transfers_BLOCK_ID.2c6f7e05cc": ["model.axelar.core__fact_transfers"], "test.axelar.dbt_expectations_expect_column_to_exist_core__fact_transfers_BLOCK_TIMESTAMP.0f58d69ae8": ["model.axelar.core__fact_transfers"], "test.axelar.dbt_expectations_expect_column_to_exist_core__fact_transfers_BLOCKCHAIN.9239785984": ["model.axelar.core__fact_transfers"], "test.axelar.dbt_expectations_expect_column_to_exist_core__fact_transfers_CHAIN_ID.5fc5a9ebd8": ["model.axelar.core__fact_transfers"], "test.axelar.dbt_expectations_expect_column_to_exist_core__fact_transfers_TX_ID.9cf9dd8a23": ["model.axelar.core__fact_transfers"], "test.axelar.dbt_expectations_expect_column_to_exist_core__fact_transfers_TX_SUCCEEDED.bf6be5c382": ["model.axelar.core__fact_transfers"], "test.axelar.dbt_expectations_expect_column_to_exist_core__fact_transfers_TRANSFER_TYPE.ee95d8d48f": ["model.axelar.core__fact_transfers"], "test.axelar.dbt_expectations_expect_column_to_exist_core__fact_transfers_SENDER.5acfdb6d48": ["model.axelar.core__fact_transfers"], "test.axelar.dbt_expectations_expect_column_to_exist_core__fact_transfers_AMOUNT.dfd5f028ff": ["model.axelar.core__fact_transfers"], "test.axelar.dbt_expectations_expect_column_to_exist_core__fact_transfers_CURRENCY.cea97ef73f": ["model.axelar.core__fact_transfers"], "test.axelar.dbt_expectations_expect_column_to_exist_core__fact_transfers_DECIMAL.20f673d71f": ["model.axelar.core__fact_transfers"], "test.axelar.dbt_expectations_expect_column_to_exist_core__fact_transfers_RECEIVER.442acc3f94": ["model.axelar.core__fact_transfers"], "test.axelar.not_null_silver__blocks_BLOCK_ID.2e78c008c9": ["model.axelar.silver__blocks"], "test.axelar.not_null_silver__blocks_BLOCK_TIMESTAMP.b65a1fcead": ["model.axelar.silver__blocks"], "test.axelar.dbt_expectations_expect_row_values_to_have_recent_data_silver__blocks_BLOCK_TIMESTAMP__day__1.3844f6e7d3": ["model.axelar.silver__blocks"], "test.axelar.not_null_silver__blocks_CHAIN_ID.a10569ee35": ["model.axelar.silver__blocks"], "test.axelar.not_null_silver__blocks_TX_COUNT.34525b51e6": ["model.axelar.silver__blocks"], "test.axelar.not_null_silver__blocks_PROPOSER_ADDRESS.00f683ae74": ["model.axelar.silver__blocks"], "test.axelar.not_null_silver__blocks_VALIDATOR_HASH.27e6c22877": ["model.axelar.silver__blocks"], "test.axelar.not_null_silver__blocks__PARTITION_BY_BLOCK_ID.6110aa251a": ["model.axelar.silver__blocks"], "test.axelar.dbt_utils_unique_combination_of_columns_silver__blocks__UNIQUE_KEY.eee2c4d204": ["model.axelar.silver__blocks"], "test.axelar.sequence_gaps_silver__blocks_block_ID.ccd7e47b6e": ["model.axelar.silver__blocks"], "test.axelar.not_null_silver__msgs_BLOCK_ID.1de1a37994": ["model.axelar.silver__msgs"], "test.axelar.not_null_silver__msgs_BLOCK_TIMESTAMP.5896b5fc79": ["model.axelar.silver__msgs"], "test.axelar.dbt_expectations_expect_row_values_to_have_recent_data_silver__msgs_BLOCK_TIMESTAMP__day__1.7d26c028d2": ["model.axelar.silver__msgs"], "test.axelar.dbt_expectations_expect_column_values_to_be_in_type_list_silver__msgs_BLOCK_TIMESTAMP__TIMESTAMP_NTZ.dfd05a3d5b": ["model.axelar.silver__msgs"], "test.axelar.not_null_silver__msgs_CHAIN_ID.41ac59beba": ["model.axelar.silver__msgs"], "test.axelar.not_null_silver__msgs_TX_ID.59a107fa1e": ["model.axelar.silver__msgs"], "test.axelar.not_null_silver__msgs_TX_SUCCEEDED.e7c82779e2": ["model.axelar.silver__msgs"], "test.axelar.not_null_silver__msgs_MSG_INDEX.227765e0bf": ["model.axelar.silver__msgs"], "test.axelar.dbt_expectations_expect_column_values_to_be_in_type_list_silver__msgs_MSG_INDEX__NUMBER__FLOAT.fd6bcc57f5": ["model.axelar.silver__msgs"], "test.axelar.not_null_silver__msgs_MSG_TYPE.312b195565": ["model.axelar.silver__msgs"], "test.axelar.dbt_utils_unique_combination_of_columns_silver__msgs__UNIQUE_KEY.979f01aaa2": ["model.axelar.silver__msgs"], "test.axelar.not_null_silver__msg_attributes_BLOCK_ID.73b2e37ccf": ["model.axelar.silver__msg_attributes"], "test.axelar.not_null_silver__msg_attributes_BLOCK_TIMESTAMP.ef8fb181e9": ["model.axelar.silver__msg_attributes"], "test.axelar.dbt_expectations_expect_row_values_to_have_recent_data_silver__msg_attributes_BLOCK_TIMESTAMP__day__1.e267a0033b": ["model.axelar.silver__msg_attributes"], "test.axelar.dbt_expectations_expect_column_values_to_be_in_type_list_silver__msg_attributes_BLOCK_TIMESTAMP__TIMESTAMP_NTZ.683e76fd93": ["model.axelar.silver__msg_attributes"], "test.axelar.not_null_silver__msg_attributes_CHAIN_ID.000bd705a4": ["model.axelar.silver__msg_attributes"], "test.axelar.not_null_silver__msg_attributes_TX_ID.34f30240c0": ["model.axelar.silver__msg_attributes"], "test.axelar.not_null_silver__msg_attributes_MSG_INDEX.38b80c3717": ["model.axelar.silver__msg_attributes"], "test.axelar.dbt_expectations_expect_column_values_to_be_in_type_list_silver__msg_attributes_MSG_INDEX__NUMBER__FLOAT.970dc74b0d": ["model.axelar.silver__msg_attributes"], "test.axelar.not_null_silver__msg_attributes_MSG_TYPE.6fb2c6c361": ["model.axelar.silver__msg_attributes"], "test.axelar.dbt_utils_unique_combination_of_columns_silver__msg_attributes__UNIQUE_KEY.8c412560f5": ["model.axelar.silver__msg_attributes"], "test.axelar.not_null_silver__transactions_BLOCK_ID.ba1565770d": ["model.axelar.silver__transactions"], "test.axelar.dbt_expectations_expect_column_values_to_be_in_type_list_silver__transactions_BLOCK_ID__NUMBER__FLOAT.f4d0275a3e": ["model.axelar.silver__transactions"], "test.axelar.not_null_silver__transactions_BLOCK_TIMESTAMP.3ffe21fe8d": ["model.axelar.silver__transactions"], "test.axelar.dbt_expectations_expect_row_values_to_have_recent_data_silver__transactions_BLOCK_TIMESTAMP__day__1.cf074498fc": ["model.axelar.silver__transactions"], "test.axelar.dbt_expectations_expect_column_values_to_be_in_type_list_silver__transactions_BLOCK_TIMESTAMP__TIMESTAMP_NTZ.bc42693f6e": ["model.axelar.silver__transactions"], "test.axelar.not_null_silver__transactions_TX_ID.5bc0e20339": ["model.axelar.silver__transactions"], "test.axelar.not_null_silver__transactions_CHAIN_ID.d90596c439": ["model.axelar.silver__transactions"], "test.axelar.not_null_silver__transactions_GAS_USED.1c943486c0": ["model.axelar.silver__transactions"], "test.axelar.dbt_expectations_expect_column_values_to_be_in_type_list_silver__transactions_GAS_USED__NUMBER__FLOAT.5308f986d3": ["model.axelar.silver__transactions"], "test.axelar.not_null_silver__transactions_GAS_WANTED.440469f6c5": ["model.axelar.silver__transactions"], "test.axelar.dbt_expectations_expect_column_values_to_be_in_type_list_silver__transactions_GAS_WANTED__NUMBER__FLOAT.b15ebe8eff": ["model.axelar.silver__transactions"], "test.axelar.not_null_silver__transactions_TX_SUCCEEDED.7fbadde885": ["model.axelar.silver__transactions"], "test.axelar.not_null_silver__transactions_TX_CODE.080a71cc61": ["model.axelar.silver__transactions"], "test.axelar.dbt_expectations_expect_column_values_to_be_in_type_list_silver__transactions_TX_CODE__NUMBER__FLOAT.7a08ebe064": ["model.axelar.silver__transactions"], "test.axelar.not_null_silver__transactions_MSGS.e30a3fea27": ["model.axelar.silver__transactions"], "test.axelar.not_null_silver__transactions_TX_LOG.1ceefab63d": ["model.axelar.silver__transactions"], "test.axelar.not_null_silver__transactions__PARTITION_BY_BLOCK_ID.75adbd93e1": ["model.axelar.silver__transactions"], "test.axelar.dbt_utils_unique_combination_of_columns_silver__transactions_TX_ID.215714589b": ["model.axelar.silver__transactions"], "test.axelar.not_null_silver__transfers_BLOCK_ID.81767d6c3c": ["model.axelar.silver__transfers"], "test.axelar.dbt_expectations_expect_column_values_to_be_in_type_list_silver__transfers_BLOCK_ID__NUMBER__FLOAT.e08ee6d46c": ["model.axelar.silver__transfers"], "test.axelar.not_null_silver__transfers_BLOCK_TIMESTAMP.d599dc282c": ["model.axelar.silver__transfers"], "test.axelar.dbt_expectations_expect_row_values_to_have_recent_data_silver__transfers_BLOCK_TIMESTAMP__day__1.aef2ec1111": ["model.axelar.silver__transfers"], "test.axelar.dbt_expectations_expect_column_values_to_be_in_type_list_silver__transfers_BLOCK_TIMESTAMP__TIMESTAMP_NTZ.4ccf9184cd": ["model.axelar.silver__transfers"], "test.axelar.not_null_silver__transfers_BLOCKCHAIN.0d49ed494c": ["model.axelar.silver__transfers"], "test.axelar.not_null_silver__transfers_CHAIN_ID.f332cbbf7c": ["model.axelar.silver__transfers"], "test.axelar.not_null_silver__transfers_TX_ID.1be05d8ee2": ["model.axelar.silver__transfers"], "test.axelar.not_null_silver__transfers_TX_SUCCEEDED.e11534b2af": ["model.axelar.silver__transfers"], "test.axelar.not_null_silver__transfers_TRANSFER_TYPE.280bc9914f": ["model.axelar.silver__transfers"], "test.axelar.not_null_silver__transfers_SENDER.0abbede6fe": ["model.axelar.silver__transfers"], "test.axelar.not_null_silver__transfers_AMOUNT.ba102cb51b": ["model.axelar.silver__transfers"], "test.axelar.not_null_silver__transfers_CURRENCY.4a8953d5ec": ["model.axelar.silver__transfers"], "test.axelar.not_null_silver__transfers_RECEIVER.965c9f325d": ["model.axelar.silver__transfers"], "test.axelar.not_null_silver__transfers__PARTITION_BY_BLOCK_ID.26915645ba": ["model.axelar.silver__transfers"], "test.axelar.dbt_utils_unique_combination_of_columns_silver__transfers_TX_ID__MSG_INDEX__CURRENCY.e9d94ef7c9": ["model.axelar.silver__transfers"], "model.axelar.bronze_api__get_validator_metadata": [], "model.axelar.silver__validators": ["model.axelar.bronze_api__get_validator_metadata"], "test.axelar.not_null_silver__validators_ADDRESS.044bdd0fb3": ["model.axelar.silver__validators"], "test.axelar.dbt_expectations_expect_column_values_to_be_in_type_list_silver__validators_ADDRESS__STRING__VARCHAR.639b5ecd2e": ["model.axelar.silver__validators"], "test.axelar.not_null_silver__validators_BLOCKCHAIN.8d62ff2215": ["model.axelar.silver__validators"], "test.axelar.dbt_expectations_expect_column_values_to_be_in_type_list_silver__validators_BLOCKCHAIN__STRING__VARCHAR.5367cc76f5": ["model.axelar.silver__validators"], "test.axelar.dbt_expectations_expect_column_values_to_be_in_set_silver__validators_BLOCKCHAIN__axelar.ff7788dcdb": ["model.axelar.silver__validators"], "test.axelar.not_null_silver__validators_CREATOR.29e051ca7b": ["model.axelar.silver__validators"], "test.axelar.dbt_expectations_expect_column_values_to_be_in_type_list_silver__validators_CREATOR__STRING__VARCHAR.f793a7bf59": ["model.axelar.silver__validators"], "test.axelar.not_null_silver__validators_LABEL_TYPE.9ac3147d2a": ["model.axelar.silver__validators"], "test.axelar.dbt_expectations_expect_column_values_to_be_in_type_list_silver__validators_LABEL_TYPE__STRING__VARCHAR.84e4acabd9": ["model.axelar.silver__validators"], "test.axelar.dbt_expectations_expect_column_values_to_be_in_set_silver__validators_LABEL_TYPE__operator.32484733b8": ["model.axelar.silver__validators"], "test.axelar.not_null_silver__validators_LABEL_SUBTYPE.64be738825": ["model.axelar.silver__validators"], "test.axelar.dbt_expectations_expect_column_values_to_be_in_type_list_silver__validators_LABEL_SUBTYPE__STRING__VARCHAR.00e4e3f12b": ["model.axelar.silver__validators"], "test.axelar.dbt_expectations_expect_column_values_to_be_in_set_silver__validators_LABEL_SUBTYPE__validator.522d73b50b": ["model.axelar.silver__validators"], "test.axelar.not_null_silver__validators_LABEL.5e8c7267ff": ["model.axelar.silver__validators"], "test.axelar.dbt_expectations_expect_column_values_to_be_in_type_list_silver__validators_LABEL__STRING__VARCHAR.f694d1a0e3": ["model.axelar.silver__validators"], "test.axelar.not_null_silver__validators_PROJECT_NAME.b8f893f8e7": ["model.axelar.silver__validators"], "test.axelar.dbt_expectations_expect_column_values_to_be_in_type_list_silver__validators_PROJECT_NAME__STRING__VARCHAR.0767218579": ["model.axelar.silver__validators"], "test.axelar.not_null_silver__validators_DELEGATOR_SHARES.89b722f278": ["model.axelar.silver__validators"], "test.axelar.dbt_expectations_expect_column_values_to_be_in_type_list_silver__validators_DELEGATOR_SHARES__NUMBER__FLOAT.153a8d0cdb": ["model.axelar.silver__validators"], "test.axelar.not_null_silver__validators_JAILED.f85ae4ab21": ["model.axelar.silver__validators"], "test.axelar.dbt_expectations_expect_column_values_to_be_in_type_list_silver__validators_JAILED__BOOLEAN.34313ede18": ["model.axelar.silver__validators"], "test.axelar.not_null_silver__validators_RATE.fea467fa10": ["model.axelar.silver__validators"], "test.axelar.dbt_expectations_expect_column_values_to_be_in_type_list_silver__validators_RATE__NUMBER__FLOAT.b620a8dc1d": ["model.axelar.silver__validators"], "test.axelar.not_null_silver__validators_MAX_CHANGE_RATE.6156472781": ["model.axelar.silver__validators"], "test.axelar.dbt_expectations_expect_column_values_to_be_in_type_list_silver__validators_MAX_CHANGE_RATE__NUMBER__FLOAT.ce20b99a85": ["model.axelar.silver__validators"], "test.axelar.not_null_silver__validators_MAX_RATE.24b5d3c90d": ["model.axelar.silver__validators"], "test.axelar.dbt_expectations_expect_column_values_to_be_in_type_list_silver__validators_MAX_RATE__NUMBER__FLOAT.3b0f40cf38": ["model.axelar.silver__validators"], "test.axelar.not_null_silver__validators_MIN_SELF_DELEGATION.fcab1b0eb9": ["model.axelar.silver__validators"], "test.axelar.dbt_expectations_expect_column_values_to_be_in_type_list_silver__validators_MIN_SELF_DELEGATION__NUMBER__FLOAT.2b4fca8ff2": ["model.axelar.silver__validators"], "test.axelar.not_null_silver__validators_RANK.2e8e4ef4a4": ["model.axelar.silver__validators"], "test.axelar.dbt_expectations_expect_column_values_to_be_in_type_list_silver__validators_RANK__NUMBER__FLOAT.40bed35bb0": ["model.axelar.silver__validators"], "test.axelar.not_null_silver__validators_RAW_METADATA.fb6370f348": ["model.axelar.silver__validators"], "test.axelar.not_null_silver__validators_UNIQUE_KEY.cf923edd07": ["model.axelar.silver__validators"], "test.axelar.dbt_expectations_expect_column_values_to_be_in_type_list_silver__validators_UNIQUE_KEY__STRING__VARCHAR.0953163d95": ["model.axelar.silver__validators"], "test.axelar.dbt_utils_unique_combination_of_columns_silver__validators_UNIQUE_KEY.1a5d96d3a9": ["model.axelar.silver__validators"], "model.axelar.core__fact_validators": ["model.axelar.silver__validators", "model.axelar.silver__validators"], "test.axelar.dbt_expectations_expect_column_to_exist_core__fact_validators_ADDRESS.28ea232145": ["model.axelar.core__fact_validators"], "test.axelar.dbt_expectations_expect_column_to_exist_core__fact_validators_BLOCKCHAIN.8c212981c8": ["model.axelar.core__fact_validators"], "test.axelar.dbt_expectations_expect_column_to_exist_core__fact_validators_CREATOR.937fa2f10c": ["model.axelar.core__fact_validators"], "test.axelar.dbt_expectations_expect_column_to_exist_core__fact_validators_LABEL_TYPE.d259f1a775": ["model.axelar.core__fact_validators"], "test.axelar.dbt_expectations_expect_column_to_exist_core__fact_validators_LABEL_SUBTYPE.545516ad48": ["model.axelar.core__fact_validators"], "test.axelar.dbt_expectations_expect_column_to_exist_core__fact_validators_LABEL.58ea9d5501": ["model.axelar.core__fact_validators"], "test.axelar.dbt_expectations_expect_column_to_exist_core__fact_validators_PROJECT_NAME.580ffece96": ["model.axelar.core__fact_validators"], "test.axelar.dbt_expectations_expect_column_to_exist_core__fact_validators_DELEGATOR_SHARES.24690650ef": ["model.axelar.core__fact_validators"], "test.axelar.dbt_expectations_expect_column_to_exist_core__fact_validators_JAILED.a889f6621b": ["model.axelar.core__fact_validators"], "test.axelar.dbt_expectations_expect_column_to_exist_core__fact_validators_RATE.dbf93b6f73": ["model.axelar.core__fact_validators"], "test.axelar.dbt_expectations_expect_column_to_exist_core__fact_validators_MAX_CHANGE_RATE.2b5ddeda55": ["model.axelar.core__fact_validators"], "test.axelar.dbt_expectations_expect_column_to_exist_core__fact_validators_MAX_RATE.e02041b45d": ["model.axelar.core__fact_validators"], "test.axelar.dbt_expectations_expect_column_to_exist_core__fact_validators_MIN_SELF_DELEGATION.a456038134": ["model.axelar.core__fact_validators"], "test.axelar.dbt_expectations_expect_column_to_exist_core__fact_validators_RANK.8ccac4f170": ["model.axelar.core__fact_validators"], "test.axelar.dbt_expectations_expect_column_to_exist_core__fact_validators_RAW_METADATA.935f630216": ["model.axelar.core__fact_validators"], "test.axelar.dbt_expectations_expect_column_to_exist_core__fact_validators_UNIQUE_KEY.f3f4e0c31e": ["model.axelar.core__fact_validators"], "test.axelar.dbt_utils_unique_combination_of_columns_core__fact_validators_UNIQUE_KEY.d1d5c77f77": ["model.axelar.core__fact_validators"], "model.axelar.core__dim_labels": ["model.axelar.core__dim_tokens", "model.axelar.core__fact_validators", "source.axelar.crosschain.address_labels"], "test.axelar.not_null_core__dim_labels_BLOCKCHAIN.a4e09054d7": ["model.axelar.core__dim_labels"], "test.axelar.not_null_core__dim_labels_CREATOR.0c77d5749c": ["model.axelar.core__dim_labels"], "test.axelar.not_null_core__dim_labels_LABEL_TYPE.65b0f6f1ed": ["model.axelar.core__dim_labels"], "test.axelar.dbt_expectations_expect_column_values_to_be_in_set_core__dim_labels_LABEL_TYPE__flotsam__nft__defi__dex__cex__dapp__token__operator__layer2__chadmin.aa3909a8f8": ["model.axelar.core__dim_labels"], "test.axelar.not_null_core__dim_labels_LABEL_SUBTYPE.556a65235c": ["model.axelar.core__dim_labels"], "test.axelar.not_null_core__dim_labels_LABEL.05696d692d": ["model.axelar.core__dim_labels"], "test.axelar.not_null_core__dim_labels_ADDRESS.ddf35f62af": ["model.axelar.core__dim_labels"], "source.axelar.bronze.blocks": [], "source.axelar.bronze.txs": [], "source.axelar.bronze.txs_details": [], "source.axelar.tokens.dim_labels": [], "source.axelar.crosschain.address_labels": [], "source.axelar.bronze_streamline.blocks": [], "source.axelar.bronze_streamline.txs": [], "source.axelar.bronze_streamline.txs_details": [], "source.axelar.osmo.asset_metadata": []}, "child_map": {"model.axelar.bronze__blocks": ["model.axelar.silver__blocks"], "model.axelar.bronze__transactions": ["model.axelar.silver__transactions"], "model.axelar.core__dim_tokens": ["model.axelar.core__dim_labels", "test.axelar.dbt_expectations_expect_column_to_exist_core__dim_tokens_ADDRESS.adf98dac75", "test.axelar.dbt_expectations_expect_column_to_exist_core__dim_tokens_ALIAS.46f836a959", "test.axelar.dbt_expectations_expect_column_to_exist_core__dim_tokens_BLOCKCHAIN.5d98f45895", "test.axelar.dbt_expectations_expect_column_to_exist_core__dim_tokens_CREATOR.8ee1250b60", "test.axelar.dbt_expectations_expect_column_to_exist_core__dim_tokens_DECIMAL.9ed902b8c6", "test.axelar.dbt_expectations_expect_column_to_exist_core__dim_tokens_LABEL.63e745c91d", "test.axelar.dbt_expectations_expect_column_to_exist_core__dim_tokens_LABEL_SUBTYPE.5c4b83673d", "test.axelar.dbt_expectations_expect_column_to_exist_core__dim_tokens_LABEL_TYPE.acd943c593", "test.axelar.dbt_expectations_expect_column_to_exist_core__dim_tokens_PROJECT_NAME.2275550428", "test.axelar.dbt_expectations_expect_column_to_exist_core__dim_tokens_RAW_METADATA.35e66014b2", "test.axelar.dbt_expectations_expect_column_to_exist_core__dim_tokens_UNIQUE_KEY.2c98bfa4bd"], "model.axelar.core__fact_blocks": ["test.axelar.dbt_expectations_expect_column_to_exist_core__fact_blocks_BLOCK_ID.1758defefc", "test.axelar.dbt_expectations_expect_column_to_exist_core__fact_blocks_BLOCK_TIMESTAMP.c36a4acd9b", "test.axelar.dbt_expectations_expect_column_to_exist_core__fact_blocks_CHAIN_ID.d97c339232", "test.axelar.dbt_expectations_expect_column_to_exist_core__fact_blocks_PROPOSER_ADDRESS.33eacc997a", "test.axelar.dbt_expectations_expect_column_to_exist_core__fact_blocks_TX_COUNT.cba858f6da", "test.axelar.dbt_expectations_expect_column_to_exist_core__fact_blocks_VALIDATOR_HASH.74e26a3ed2"], "model.axelar.core__fact_msgs": ["test.axelar.dbt_expectations_expect_column_to_exist_core__fact_msgs_BLOCKCHAIN.ae346ad8fd", "test.axelar.dbt_expectations_expect_column_to_exist_core__fact_msgs_BLOCK_ID.faa38255c9", "test.axelar.dbt_expectations_expect_column_to_exist_core__fact_msgs_BLOCK_TIMESTAMP.cb0d0e3790", "test.axelar.dbt_expectations_expect_column_to_exist_core__fact_msgs_CHAIN_ID.de462fe441", "test.axelar.dbt_expectations_expect_column_to_exist_core__fact_msgs_MSG.f1f3ebfcd4", "test.axelar.dbt_expectations_expect_column_to_exist_core__fact_msgs_MSG_GROUP.32d74436d2", "test.axelar.dbt_expectations_expect_column_to_exist_core__fact_msgs_MSG_INDEX.32d6a4e7cb", "test.axelar.dbt_expectations_expect_column_to_exist_core__fact_msgs_MSG_TYPE.e48648d983", "test.axelar.dbt_expectations_expect_column_to_exist_core__fact_msgs_TX_ID.c4b71cafbe", "test.axelar.dbt_expectations_expect_column_to_exist_core__fact_msgs_TX_SUCCEEDED.8b88dec946"], "model.axelar.core__fact_msg_attributes": ["test.axelar.dbt_expectations_expect_column_to_exist_core__fact_msg_attributes_ATTRIBUTE_INDEX.c041ee26dd", "test.axelar.dbt_expectations_expect_column_to_exist_core__fact_msg_attributes_ATTRIBUTE_KEY.978c26f41e", "test.axelar.dbt_expectations_expect_column_to_exist_core__fact_msg_attributes_ATTRIBUTE_VALUE.f316cfca60", "test.axelar.dbt_expectations_expect_column_to_exist_core__fact_msg_attributes_BLOCKCHAIN.356c2dfa46", "test.axelar.dbt_expectations_expect_column_to_exist_core__fact_msg_attributes_BLOCK_ID.7b9a016433", "test.axelar.dbt_expectations_expect_column_to_exist_core__fact_msg_attributes_BLOCK_TIMESTAMP.11e5f5562c", "test.axelar.dbt_expectations_expect_column_to_exist_core__fact_msg_attributes_CHAIN_ID.2983b83289", "test.axelar.dbt_expectations_expect_column_to_exist_core__fact_msg_attributes_MSG_GROUP.f1ed86ed4e", "test.axelar.dbt_expectations_expect_column_to_exist_core__fact_msg_attributes_MSG_INDEX.d0e91438b3", "test.axelar.dbt_expectations_expect_column_to_exist_core__fact_msg_attributes_MSG_TYPE.b2b48e2e7f", "test.axelar.dbt_expectations_expect_column_to_exist_core__fact_msg_attributes_TX_ID.cab7fab11b", "test.axelar.dbt_expectations_expect_column_to_exist_core__fact_msg_attributes_TX_SUCCEEDED.d0b118ebcb"], "model.axelar.core__fact_transactions": ["test.axelar.dbt_expectations_expect_column_to_exist_core__fact_transactions_BLOCKCHAIN.8f714681bd", "test.axelar.dbt_expectations_expect_column_to_exist_core__fact_transactions_BLOCK_ID.37c1b7e860", "test.axelar.dbt_expectations_expect_column_to_exist_core__fact_transactions_BLOCK_TIMESTAMP.84e94e706b", "test.axelar.dbt_expectations_expect_column_to_exist_core__fact_transactions_CHAIN_ID.a3a8b966b5", "test.axelar.dbt_expectations_expect_column_to_exist_core__fact_transactions_CODESPACE.31e919d605", "test.axelar.dbt_expectations_expect_column_to_exist_core__fact_transactions_GAS_USED.330cc6bb7e", "test.axelar.dbt_expectations_expect_column_to_exist_core__fact_transactions_GAS_WANTED.8717751539", "test.axelar.dbt_expectations_expect_column_to_exist_core__fact_transactions_MSGS.aee52badd9", "test.axelar.dbt_expectations_expect_column_to_exist_core__fact_transactions_TX_CODE.8a8b1c8b5d", "test.axelar.dbt_expectations_expect_column_to_exist_core__fact_transactions_TX_ID.f616a284b6", "test.axelar.dbt_expectations_expect_column_to_exist_core__fact_transactions_TX_LOG.9983486fda", "test.axelar.dbt_expectations_expect_column_to_exist_core__fact_transactions_TX_SUCCEEDED.35dccdcf3e", "test.axelar.dbt_utils_unique_combination_of_columns_core__fact_transactions_TX_ID.57efb72c3f", "test.axelar.not_null_core__fact_transactions_FEE.f477aa43d7", "test.axelar.not_null_core__fact_transactions_FEE_DENOM.2f1e97f1ae", "test.axelar.not_null_core__fact_transactions_TX_FROM.7ddc5dd2a3"], "model.axelar.core__fact_transfers": ["test.axelar.dbt_expectations_expect_column_to_exist_core__fact_transfers_AMOUNT.dfd5f028ff", "test.axelar.dbt_expectations_expect_column_to_exist_core__fact_transfers_BLOCKCHAIN.9239785984", "test.axelar.dbt_expectations_expect_column_to_exist_core__fact_transfers_BLOCK_ID.2c6f7e05cc", "test.axelar.dbt_expectations_expect_column_to_exist_core__fact_transfers_BLOCK_TIMESTAMP.0f58d69ae8", "test.axelar.dbt_expectations_expect_column_to_exist_core__fact_transfers_CHAIN_ID.5fc5a9ebd8", "test.axelar.dbt_expectations_expect_column_to_exist_core__fact_transfers_CURRENCY.cea97ef73f", "test.axelar.dbt_expectations_expect_column_to_exist_core__fact_transfers_DECIMAL.20f673d71f", "test.axelar.dbt_expectations_expect_column_to_exist_core__fact_transfers_RECEIVER.442acc3f94", "test.axelar.dbt_expectations_expect_column_to_exist_core__fact_transfers_SENDER.5acfdb6d48", "test.axelar.dbt_expectations_expect_column_to_exist_core__fact_transfers_TRANSFER_TYPE.ee95d8d48f", "test.axelar.dbt_expectations_expect_column_to_exist_core__fact_transfers_TX_ID.9cf9dd8a23", "test.axelar.dbt_expectations_expect_column_to_exist_core__fact_transfers_TX_SUCCEEDED.bf6be5c382"], "model.axelar.silver__blocks": ["model.axelar.core__fact_blocks", "model.axelar.silver__transactions", "test.axelar.dbt_expectations_expect_row_values_to_have_recent_data_silver__blocks_BLOCK_TIMESTAMP__day__1.3844f6e7d3", "test.axelar.dbt_utils_unique_combination_of_columns_silver__blocks__UNIQUE_KEY.eee2c4d204", "test.axelar.not_null_silver__blocks_BLOCK_ID.2e78c008c9", "test.axelar.not_null_silver__blocks_BLOCK_TIMESTAMP.b65a1fcead", "test.axelar.not_null_silver__blocks_CHAIN_ID.a10569ee35", "test.axelar.not_null_silver__blocks_PROPOSER_ADDRESS.00f683ae74", "test.axelar.not_null_silver__blocks_TX_COUNT.34525b51e6", "test.axelar.not_null_silver__blocks_VALIDATOR_HASH.27e6c22877", "test.axelar.not_null_silver__blocks__PARTITION_BY_BLOCK_ID.6110aa251a", "test.axelar.sequence_gaps_silver__blocks_block_ID.ccd7e47b6e"], "model.axelar.silver__msgs": ["model.axelar.core__fact_msgs", "model.axelar.silver__msg_attributes", "test.axelar.dbt_expectations_expect_column_values_to_be_in_type_list_silver__msgs_BLOCK_TIMESTAMP__TIMESTAMP_NTZ.dfd05a3d5b", "test.axelar.dbt_expectations_expect_column_values_to_be_in_type_list_silver__msgs_MSG_INDEX__NUMBER__FLOAT.fd6bcc57f5", "test.axelar.dbt_expectations_expect_row_values_to_have_recent_data_silver__msgs_BLOCK_TIMESTAMP__day__1.7d26c028d2", "test.axelar.dbt_utils_unique_combination_of_columns_silver__msgs__UNIQUE_KEY.979f01aaa2", "test.axelar.not_null_silver__msgs_BLOCK_ID.1de1a37994", "test.axelar.not_null_silver__msgs_BLOCK_TIMESTAMP.5896b5fc79", "test.axelar.not_null_silver__msgs_CHAIN_ID.41ac59beba", "test.axelar.not_null_silver__msgs_MSG_INDEX.227765e0bf", "test.axelar.not_null_silver__msgs_MSG_TYPE.312b195565", "test.axelar.not_null_silver__msgs_TX_ID.59a107fa1e", "test.axelar.not_null_silver__msgs_TX_SUCCEEDED.e7c82779e2"], "model.axelar.silver__msg_attributes": ["model.axelar.core__fact_msg_attributes", "model.axelar.core__fact_transactions", "model.axelar.core__fact_transactions", "model.axelar.silver__transfers", "model.axelar.silver__transfers", "model.axelar.silver__transfers", "model.axelar.silver__transfers", "model.axelar.silver__transfers", "model.axelar.silver__transfers", "model.axelar.silver__transfers", "model.axelar.silver__transfers", "test.axelar.dbt_expectations_expect_column_values_to_be_in_type_list_silver__msg_attributes_BLOCK_TIMESTAMP__TIMESTAMP_NTZ.683e76fd93", "test.axelar.dbt_expectations_expect_column_values_to_be_in_type_list_silver__msg_attributes_MSG_INDEX__NUMBER__FLOAT.970dc74b0d", "test.axelar.dbt_expectations_expect_row_values_to_have_recent_data_silver__msg_attributes_BLOCK_TIMESTAMP__day__1.e267a0033b", "test.axelar.dbt_utils_unique_combination_of_columns_silver__msg_attributes__UNIQUE_KEY.8c412560f5", "test.axelar.not_null_silver__msg_attributes_BLOCK_ID.73b2e37ccf", "test.axelar.not_null_silver__msg_attributes_BLOCK_TIMESTAMP.ef8fb181e9", "test.axelar.not_null_silver__msg_attributes_CHAIN_ID.000bd705a4", "test.axelar.not_null_silver__msg_attributes_MSG_INDEX.38b80c3717", "test.axelar.not_null_silver__msg_attributes_MSG_TYPE.6fb2c6c361", "test.axelar.not_null_silver__msg_attributes_TX_ID.34f30240c0"], "model.axelar.silver__transactions": ["model.axelar.core__fact_transactions", "model.axelar.silver__msgs", "model.axelar.silver__transfers", "test.axelar.dbt_expectations_expect_column_values_to_be_in_type_list_silver__transactions_BLOCK_ID__NUMBER__FLOAT.f4d0275a3e", "test.axelar.dbt_expectations_expect_column_values_to_be_in_type_list_silver__transactions_BLOCK_TIMESTAMP__TIMESTAMP_NTZ.bc42693f6e", "test.axelar.dbt_expectations_expect_column_values_to_be_in_type_list_silver__transactions_GAS_USED__NUMBER__FLOAT.5308f986d3", "test.axelar.dbt_expectations_expect_column_values_to_be_in_type_list_silver__transactions_GAS_WANTED__NUMBER__FLOAT.b15ebe8eff", "test.axelar.dbt_expectations_expect_column_values_to_be_in_type_list_silver__transactions_TX_CODE__NUMBER__FLOAT.7a08ebe064", "test.axelar.dbt_expectations_expect_row_values_to_have_recent_data_silver__transactions_BLOCK_TIMESTAMP__day__1.cf074498fc", "test.axelar.dbt_utils_unique_combination_of_columns_silver__transactions_TX_ID.215714589b", "test.axelar.not_null_silver__transactions_BLOCK_ID.ba1565770d", "test.axelar.not_null_silver__transactions_BLOCK_TIMESTAMP.3ffe21fe8d", "test.axelar.not_null_silver__transactions_CHAIN_ID.d90596c439", "test.axelar.not_null_silver__transactions_GAS_USED.1c943486c0", "test.axelar.not_null_silver__transactions_GAS_WANTED.440469f6c5", "test.axelar.not_null_silver__transactions_MSGS.e30a3fea27", "test.axelar.not_null_silver__transactions_TX_CODE.080a71cc61", "test.axelar.not_null_silver__transactions_TX_ID.5bc0e20339", "test.axelar.not_null_silver__transactions_TX_LOG.1ceefab63d", "test.axelar.not_null_silver__transactions_TX_SUCCEEDED.7fbadde885", "test.axelar.not_null_silver__transactions__PARTITION_BY_BLOCK_ID.75adbd93e1"], "model.axelar.silver__transfers": ["model.axelar.core__fact_transfers", "test.axelar.dbt_expectations_expect_column_values_to_be_in_type_list_silver__transfers_BLOCK_ID__NUMBER__FLOAT.e08ee6d46c", "test.axelar.dbt_expectations_expect_column_values_to_be_in_type_list_silver__transfers_BLOCK_TIMESTAMP__TIMESTAMP_NTZ.4ccf9184cd", "test.axelar.dbt_expectations_expect_row_values_to_have_recent_data_silver__transfers_BLOCK_TIMESTAMP__day__1.aef2ec1111", "test.axelar.dbt_utils_unique_combination_of_columns_silver__transfers_TX_ID__MSG_INDEX__CURRENCY.e9d94ef7c9", "test.axelar.not_null_silver__transfers_AMOUNT.ba102cb51b", "test.axelar.not_null_silver__transfers_BLOCKCHAIN.0d49ed494c", "test.axelar.not_null_silver__transfers_BLOCK_ID.81767d6c3c", "test.axelar.not_null_silver__transfers_BLOCK_TIMESTAMP.d599dc282c", "test.axelar.not_null_silver__transfers_CHAIN_ID.f332cbbf7c", "test.axelar.not_null_silver__transfers_CURRENCY.4a8953d5ec", "test.axelar.not_null_silver__transfers_RECEIVER.965c9f325d", "test.axelar.not_null_silver__transfers_SENDER.0abbede6fe", "test.axelar.not_null_silver__transfers_TRANSFER_TYPE.280bc9914f", "test.axelar.not_null_silver__transfers_TX_ID.1be05d8ee2", "test.axelar.not_null_silver__transfers_TX_SUCCEEDED.e11534b2af", "test.axelar.not_null_silver__transfers__PARTITION_BY_BLOCK_ID.26915645ba"], "model.axelar.streamline__blocks_history": ["model.axelar.streamline__blocks_realtime"], "model.axelar.streamline__blocks_realtime": [], "model.axelar.streamline__txs_history": ["model.axelar.streamline__txs_realtime"], "model.axelar.streamline__txs_realtime": [], "operation.axelar.axelar-on-run-start-0": [], "test.axelar.dbt_expectations_expect_column_to_exist_core__dim_tokens_ADDRESS.adf98dac75": [], "test.axelar.dbt_expectations_expect_column_to_exist_core__dim_tokens_BLOCKCHAIN.5d98f45895": [], "test.axelar.dbt_expectations_expect_column_to_exist_core__dim_tokens_CREATOR.8ee1250b60": [], "test.axelar.dbt_expectations_expect_column_to_exist_core__dim_tokens_LABEL_TYPE.acd943c593": [], "test.axelar.dbt_expectations_expect_column_to_exist_core__dim_tokens_LABEL_SUBTYPE.5c4b83673d": [], "test.axelar.dbt_expectations_expect_column_to_exist_core__dim_tokens_LABEL.63e745c91d": [], "test.axelar.dbt_expectations_expect_column_to_exist_core__dim_tokens_PROJECT_NAME.2275550428": [], "test.axelar.dbt_expectations_expect_column_to_exist_core__dim_tokens_ALIAS.46f836a959": [], "test.axelar.dbt_expectations_expect_column_to_exist_core__dim_tokens_DECIMAL.9ed902b8c6": [], "test.axelar.dbt_expectations_expect_column_to_exist_core__dim_tokens_RAW_METADATA.35e66014b2": [], "test.axelar.dbt_expectations_expect_column_to_exist_core__dim_tokens_UNIQUE_KEY.2c98bfa4bd": [], "test.axelar.dbt_expectations_expect_column_to_exist_core__fact_blocks_BLOCK_ID.1758defefc": [], "test.axelar.dbt_expectations_expect_column_to_exist_core__fact_blocks_BLOCK_TIMESTAMP.c36a4acd9b": [], "test.axelar.dbt_expectations_expect_column_to_exist_core__fact_blocks_CHAIN_ID.d97c339232": [], "test.axelar.dbt_expectations_expect_column_to_exist_core__fact_blocks_TX_COUNT.cba858f6da": [], "test.axelar.dbt_expectations_expect_column_to_exist_core__fact_blocks_PROPOSER_ADDRESS.33eacc997a": [], "test.axelar.dbt_expectations_expect_column_to_exist_core__fact_blocks_VALIDATOR_HASH.74e26a3ed2": [], "test.axelar.dbt_expectations_expect_column_to_exist_core__fact_msgs_BLOCK_ID.faa38255c9": [], "test.axelar.dbt_expectations_expect_column_to_exist_core__fact_msgs_BLOCK_TIMESTAMP.cb0d0e3790": [], "test.axelar.dbt_expectations_expect_column_to_exist_core__fact_msgs_BLOCKCHAIN.ae346ad8fd": [], "test.axelar.dbt_expectations_expect_column_to_exist_core__fact_msgs_CHAIN_ID.de462fe441": [], "test.axelar.dbt_expectations_expect_column_to_exist_core__fact_msgs_TX_ID.c4b71cafbe": [], "test.axelar.dbt_expectations_expect_column_to_exist_core__fact_msgs_TX_SUCCEEDED.8b88dec946": [], "test.axelar.dbt_expectations_expect_column_to_exist_core__fact_msgs_MSG_GROUP.32d74436d2": [], "test.axelar.dbt_expectations_expect_column_to_exist_core__fact_msgs_MSG_INDEX.32d6a4e7cb": [], "test.axelar.dbt_expectations_expect_column_to_exist_core__fact_msgs_MSG_TYPE.e48648d983": [], "test.axelar.dbt_expectations_expect_column_to_exist_core__fact_msgs_MSG.f1f3ebfcd4": [], "test.axelar.dbt_expectations_expect_column_to_exist_core__fact_msg_attributes_BLOCK_ID.7b9a016433": [], "test.axelar.dbt_expectations_expect_column_to_exist_core__fact_msg_attributes_BLOCK_TIMESTAMP.11e5f5562c": [], "test.axelar.dbt_expectations_expect_column_to_exist_core__fact_msg_attributes_BLOCKCHAIN.356c2dfa46": [], "test.axelar.dbt_expectations_expect_column_to_exist_core__fact_msg_attributes_CHAIN_ID.2983b83289": [], "test.axelar.dbt_expectations_expect_column_to_exist_core__fact_msg_attributes_TX_ID.cab7fab11b": [], "test.axelar.dbt_expectations_expect_column_to_exist_core__fact_msg_attributes_TX_SUCCEEDED.d0b118ebcb": [], "test.axelar.dbt_expectations_expect_column_to_exist_core__fact_msg_attributes_MSG_GROUP.f1ed86ed4e": [], "test.axelar.dbt_expectations_expect_column_to_exist_core__fact_msg_attributes_MSG_INDEX.d0e91438b3": [], "test.axelar.dbt_expectations_expect_column_to_exist_core__fact_msg_attributes_MSG_TYPE.b2b48e2e7f": [], "test.axelar.dbt_expectations_expect_column_to_exist_core__fact_msg_attributes_ATTRIBUTE_INDEX.c041ee26dd": [], "test.axelar.dbt_expectations_expect_column_to_exist_core__fact_msg_attributes_ATTRIBUTE_KEY.978c26f41e": [], "test.axelar.dbt_expectations_expect_column_to_exist_core__fact_msg_attributes_ATTRIBUTE_VALUE.f316cfca60": [], "test.axelar.dbt_expectations_expect_column_to_exist_core__fact_transactions_BLOCK_ID.37c1b7e860": [], "test.axelar.dbt_expectations_expect_column_to_exist_core__fact_transactions_BLOCK_TIMESTAMP.84e94e706b": [], "test.axelar.dbt_expectations_expect_column_to_exist_core__fact_transactions_BLOCKCHAIN.8f714681bd": [], "test.axelar.dbt_expectations_expect_column_to_exist_core__fact_transactions_CHAIN_ID.a3a8b966b5": [], "test.axelar.dbt_expectations_expect_column_to_exist_core__fact_transactions_TX_ID.f616a284b6": [], "test.axelar.not_null_core__fact_transactions_TX_FROM.7ddc5dd2a3": [], "test.axelar.dbt_expectations_expect_column_to_exist_core__fact_transactions_TX_SUCCEEDED.35dccdcf3e": [], "test.axelar.dbt_expectations_expect_column_to_exist_core__fact_transactions_CODESPACE.31e919d605": [], "test.axelar.not_null_core__fact_transactions_FEE.f477aa43d7": [], "test.axelar.not_null_core__fact_transactions_FEE_DENOM.2f1e97f1ae": [], "test.axelar.dbt_expectations_expect_column_to_exist_core__fact_transactions_GAS_USED.330cc6bb7e": [], "test.axelar.dbt_expectations_expect_column_to_exist_core__fact_transactions_GAS_WANTED.8717751539": [], "test.axelar.dbt_expectations_expect_column_to_exist_core__fact_transactions_TX_CODE.8a8b1c8b5d": [], "test.axelar.dbt_expectations_expect_column_to_exist_core__fact_transactions_TX_LOG.9983486fda": [], "test.axelar.dbt_expectations_expect_column_to_exist_core__fact_transactions_MSGS.aee52badd9": [], "test.axelar.dbt_utils_unique_combination_of_columns_core__fact_transactions_TX_ID.57efb72c3f": [], "test.axelar.dbt_expectations_expect_column_to_exist_core__fact_transfers_BLOCK_ID.2c6f7e05cc": [], "test.axelar.dbt_expectations_expect_column_to_exist_core__fact_transfers_BLOCK_TIMESTAMP.0f58d69ae8": [], "test.axelar.dbt_expectations_expect_column_to_exist_core__fact_transfers_BLOCKCHAIN.9239785984": [], "test.axelar.dbt_expectations_expect_column_to_exist_core__fact_transfers_CHAIN_ID.5fc5a9ebd8": [], "test.axelar.dbt_expectations_expect_column_to_exist_core__fact_transfers_TX_ID.9cf9dd8a23": [], "test.axelar.dbt_expectations_expect_column_to_exist_core__fact_transfers_TX_SUCCEEDED.bf6be5c382": [], "test.axelar.dbt_expectations_expect_column_to_exist_core__fact_transfers_TRANSFER_TYPE.ee95d8d48f": [], "test.axelar.dbt_expectations_expect_column_to_exist_core__fact_transfers_SENDER.5acfdb6d48": [], "test.axelar.dbt_expectations_expect_column_to_exist_core__fact_transfers_AMOUNT.dfd5f028ff": [], "test.axelar.dbt_expectations_expect_column_to_exist_core__fact_transfers_CURRENCY.cea97ef73f": [], "test.axelar.dbt_expectations_expect_column_to_exist_core__fact_transfers_DECIMAL.20f673d71f": [], "test.axelar.dbt_expectations_expect_column_to_exist_core__fact_transfers_RECEIVER.442acc3f94": [], "test.axelar.not_null_silver__blocks_BLOCK_ID.2e78c008c9": [], "test.axelar.not_null_silver__blocks_BLOCK_TIMESTAMP.b65a1fcead": [], "test.axelar.dbt_expectations_expect_row_values_to_have_recent_data_silver__blocks_BLOCK_TIMESTAMP__day__1.3844f6e7d3": [], "test.axelar.not_null_silver__blocks_CHAIN_ID.a10569ee35": [], "test.axelar.not_null_silver__blocks_TX_COUNT.34525b51e6": [], "test.axelar.not_null_silver__blocks_PROPOSER_ADDRESS.00f683ae74": [], "test.axelar.not_null_silver__blocks_VALIDATOR_HASH.27e6c22877": [], "test.axelar.not_null_silver__blocks__PARTITION_BY_BLOCK_ID.6110aa251a": [], "test.axelar.dbt_utils_unique_combination_of_columns_silver__blocks__UNIQUE_KEY.eee2c4d204": [], "test.axelar.sequence_gaps_silver__blocks_block_ID.ccd7e47b6e": [], "test.axelar.not_null_silver__msgs_BLOCK_ID.1de1a37994": [], "test.axelar.not_null_silver__msgs_BLOCK_TIMESTAMP.5896b5fc79": [], "test.axelar.dbt_expectations_expect_row_values_to_have_recent_data_silver__msgs_BLOCK_TIMESTAMP__day__1.7d26c028d2": [], "test.axelar.dbt_expectations_expect_column_values_to_be_in_type_list_silver__msgs_BLOCK_TIMESTAMP__TIMESTAMP_NTZ.dfd05a3d5b": [], "test.axelar.not_null_silver__msgs_CHAIN_ID.41ac59beba": [], "test.axelar.not_null_silver__msgs_TX_ID.59a107fa1e": [], "test.axelar.not_null_silver__msgs_TX_SUCCEEDED.e7c82779e2": [], "test.axelar.not_null_silver__msgs_MSG_INDEX.227765e0bf": [], "test.axelar.dbt_expectations_expect_column_values_to_be_in_type_list_silver__msgs_MSG_INDEX__NUMBER__FLOAT.fd6bcc57f5": [], "test.axelar.not_null_silver__msgs_MSG_TYPE.312b195565": [], "test.axelar.dbt_utils_unique_combination_of_columns_silver__msgs__UNIQUE_KEY.979f01aaa2": [], "test.axelar.not_null_silver__msg_attributes_BLOCK_ID.73b2e37ccf": [], "test.axelar.not_null_silver__msg_attributes_BLOCK_TIMESTAMP.ef8fb181e9": [], "test.axelar.dbt_expectations_expect_row_values_to_have_recent_data_silver__msg_attributes_BLOCK_TIMESTAMP__day__1.e267a0033b": [], "test.axelar.dbt_expectations_expect_column_values_to_be_in_type_list_silver__msg_attributes_BLOCK_TIMESTAMP__TIMESTAMP_NTZ.683e76fd93": [], "test.axelar.not_null_silver__msg_attributes_CHAIN_ID.000bd705a4": [], "test.axelar.not_null_silver__msg_attributes_TX_ID.34f30240c0": [], "test.axelar.not_null_silver__msg_attributes_MSG_INDEX.38b80c3717": [], "test.axelar.dbt_expectations_expect_column_values_to_be_in_type_list_silver__msg_attributes_MSG_INDEX__NUMBER__FLOAT.970dc74b0d": [], "test.axelar.not_null_silver__msg_attributes_MSG_TYPE.6fb2c6c361": [], "test.axelar.dbt_utils_unique_combination_of_columns_silver__msg_attributes__UNIQUE_KEY.8c412560f5": [], "test.axelar.not_null_silver__transactions_BLOCK_ID.ba1565770d": [], "test.axelar.dbt_expectations_expect_column_values_to_be_in_type_list_silver__transactions_BLOCK_ID__NUMBER__FLOAT.f4d0275a3e": [], "test.axelar.not_null_silver__transactions_BLOCK_TIMESTAMP.3ffe21fe8d": [], "test.axelar.dbt_expectations_expect_row_values_to_have_recent_data_silver__transactions_BLOCK_TIMESTAMP__day__1.cf074498fc": [], "test.axelar.dbt_expectations_expect_column_values_to_be_in_type_list_silver__transactions_BLOCK_TIMESTAMP__TIMESTAMP_NTZ.bc42693f6e": [], "test.axelar.not_null_silver__transactions_TX_ID.5bc0e20339": [], "test.axelar.not_null_silver__transactions_CHAIN_ID.d90596c439": [], "test.axelar.not_null_silver__transactions_GAS_USED.1c943486c0": [], "test.axelar.dbt_expectations_expect_column_values_to_be_in_type_list_silver__transactions_GAS_USED__NUMBER__FLOAT.5308f986d3": [], "test.axelar.not_null_silver__transactions_GAS_WANTED.440469f6c5": [], "test.axelar.dbt_expectations_expect_column_values_to_be_in_type_list_silver__transactions_GAS_WANTED__NUMBER__FLOAT.b15ebe8eff": [], "test.axelar.not_null_silver__transactions_TX_SUCCEEDED.7fbadde885": [], "test.axelar.not_null_silver__transactions_TX_CODE.080a71cc61": [], "test.axelar.dbt_expectations_expect_column_values_to_be_in_type_list_silver__transactions_TX_CODE__NUMBER__FLOAT.7a08ebe064": [], "test.axelar.not_null_silver__transactions_MSGS.e30a3fea27": [], "test.axelar.not_null_silver__transactions_TX_LOG.1ceefab63d": [], "test.axelar.not_null_silver__transactions__PARTITION_BY_BLOCK_ID.75adbd93e1": [], "test.axelar.dbt_utils_unique_combination_of_columns_silver__transactions_TX_ID.215714589b": [], "test.axelar.not_null_silver__transfers_BLOCK_ID.81767d6c3c": [], "test.axelar.dbt_expectations_expect_column_values_to_be_in_type_list_silver__transfers_BLOCK_ID__NUMBER__FLOAT.e08ee6d46c": [], "test.axelar.not_null_silver__transfers_BLOCK_TIMESTAMP.d599dc282c": [], "test.axelar.dbt_expectations_expect_row_values_to_have_recent_data_silver__transfers_BLOCK_TIMESTAMP__day__1.aef2ec1111": [], "test.axelar.dbt_expectations_expect_column_values_to_be_in_type_list_silver__transfers_BLOCK_TIMESTAMP__TIMESTAMP_NTZ.4ccf9184cd": [], "test.axelar.not_null_silver__transfers_BLOCKCHAIN.0d49ed494c": [], "test.axelar.not_null_silver__transfers_CHAIN_ID.f332cbbf7c": [], "test.axelar.not_null_silver__transfers_TX_ID.1be05d8ee2": [], "test.axelar.not_null_silver__transfers_TX_SUCCEEDED.e11534b2af": [], "test.axelar.not_null_silver__transfers_TRANSFER_TYPE.280bc9914f": [], "test.axelar.not_null_silver__transfers_SENDER.0abbede6fe": [], "test.axelar.not_null_silver__transfers_AMOUNT.ba102cb51b": [], "test.axelar.not_null_silver__transfers_CURRENCY.4a8953d5ec": [], "test.axelar.not_null_silver__transfers_RECEIVER.965c9f325d": [], "test.axelar.not_null_silver__transfers__PARTITION_BY_BLOCK_ID.26915645ba": [], "test.axelar.dbt_utils_unique_combination_of_columns_silver__transfers_TX_ID__MSG_INDEX__CURRENCY.e9d94ef7c9": [], "model.axelar.bronze_api__get_validator_metadata": ["model.axelar.silver__validators"], "model.axelar.silver__validators": ["model.axelar.core__fact_validators", "model.axelar.core__fact_validators", "test.axelar.dbt_expectations_expect_column_values_to_be_in_set_silver__validators_BLOCKCHAIN__axelar.ff7788dcdb", "test.axelar.dbt_expectations_expect_column_values_to_be_in_set_silver__validators_LABEL_SUBTYPE__validator.522d73b50b", "test.axelar.dbt_expectations_expect_column_values_to_be_in_set_silver__validators_LABEL_TYPE__operator.32484733b8", "test.axelar.dbt_expectations_expect_column_values_to_be_in_type_list_silver__validators_ADDRESS__STRING__VARCHAR.639b5ecd2e", "test.axelar.dbt_expectations_expect_column_values_to_be_in_type_list_silver__validators_BLOCKCHAIN__STRING__VARCHAR.5367cc76f5", "test.axelar.dbt_expectations_expect_column_values_to_be_in_type_list_silver__validators_CREATOR__STRING__VARCHAR.f793a7bf59", "test.axelar.dbt_expectations_expect_column_values_to_be_in_type_list_silver__validators_DELEGATOR_SHARES__NUMBER__FLOAT.153a8d0cdb", "test.axelar.dbt_expectations_expect_column_values_to_be_in_type_list_silver__validators_JAILED__BOOLEAN.34313ede18", "test.axelar.dbt_expectations_expect_column_values_to_be_in_type_list_silver__validators_LABEL_SUBTYPE__STRING__VARCHAR.00e4e3f12b", "test.axelar.dbt_expectations_expect_column_values_to_be_in_type_list_silver__validators_LABEL_TYPE__STRING__VARCHAR.84e4acabd9", "test.axelar.dbt_expectations_expect_column_values_to_be_in_type_list_silver__validators_LABEL__STRING__VARCHAR.f694d1a0e3", "test.axelar.dbt_expectations_expect_column_values_to_be_in_type_list_silver__validators_MAX_CHANGE_RATE__NUMBER__FLOAT.ce20b99a85", "test.axelar.dbt_expectations_expect_column_values_to_be_in_type_list_silver__validators_MAX_RATE__NUMBER__FLOAT.3b0f40cf38", "test.axelar.dbt_expectations_expect_column_values_to_be_in_type_list_silver__validators_MIN_SELF_DELEGATION__NUMBER__FLOAT.2b4fca8ff2", "test.axelar.dbt_expectations_expect_column_values_to_be_in_type_list_silver__validators_PROJECT_NAME__STRING__VARCHAR.0767218579", "test.axelar.dbt_expectations_expect_column_values_to_be_in_type_list_silver__validators_RANK__NUMBER__FLOAT.40bed35bb0", "test.axelar.dbt_expectations_expect_column_values_to_be_in_type_list_silver__validators_RATE__NUMBER__FLOAT.b620a8dc1d", "test.axelar.dbt_expectations_expect_column_values_to_be_in_type_list_silver__validators_UNIQUE_KEY__STRING__VARCHAR.0953163d95", "test.axelar.dbt_utils_unique_combination_of_columns_silver__validators_UNIQUE_KEY.1a5d96d3a9", "test.axelar.not_null_silver__validators_ADDRESS.044bdd0fb3", "test.axelar.not_null_silver__validators_BLOCKCHAIN.8d62ff2215", "test.axelar.not_null_silver__validators_CREATOR.29e051ca7b", "test.axelar.not_null_silver__validators_DELEGATOR_SHARES.89b722f278", "test.axelar.not_null_silver__validators_JAILED.f85ae4ab21", "test.axelar.not_null_silver__validators_LABEL.5e8c7267ff", "test.axelar.not_null_silver__validators_LABEL_SUBTYPE.64be738825", "test.axelar.not_null_silver__validators_LABEL_TYPE.9ac3147d2a", "test.axelar.not_null_silver__validators_MAX_CHANGE_RATE.6156472781", "test.axelar.not_null_silver__validators_MAX_RATE.24b5d3c90d", "test.axelar.not_null_silver__validators_MIN_SELF_DELEGATION.fcab1b0eb9", "test.axelar.not_null_silver__validators_PROJECT_NAME.b8f893f8e7", "test.axelar.not_null_silver__validators_RANK.2e8e4ef4a4", "test.axelar.not_null_silver__validators_RATE.fea467fa10", "test.axelar.not_null_silver__validators_RAW_METADATA.fb6370f348", "test.axelar.not_null_silver__validators_UNIQUE_KEY.cf923edd07"], "test.axelar.not_null_silver__validators_ADDRESS.044bdd0fb3": [], "test.axelar.dbt_expectations_expect_column_values_to_be_in_type_list_silver__validators_ADDRESS__STRING__VARCHAR.639b5ecd2e": [], "test.axelar.not_null_silver__validators_BLOCKCHAIN.8d62ff2215": [], "test.axelar.dbt_expectations_expect_column_values_to_be_in_type_list_silver__validators_BLOCKCHAIN__STRING__VARCHAR.5367cc76f5": [], "test.axelar.dbt_expectations_expect_column_values_to_be_in_set_silver__validators_BLOCKCHAIN__axelar.ff7788dcdb": [], "test.axelar.not_null_silver__validators_CREATOR.29e051ca7b": [], "test.axelar.dbt_expectations_expect_column_values_to_be_in_type_list_silver__validators_CREATOR__STRING__VARCHAR.f793a7bf59": [], "test.axelar.not_null_silver__validators_LABEL_TYPE.9ac3147d2a": [], "test.axelar.dbt_expectations_expect_column_values_to_be_in_type_list_silver__validators_LABEL_TYPE__STRING__VARCHAR.84e4acabd9": [], "test.axelar.dbt_expectations_expect_column_values_to_be_in_set_silver__validators_LABEL_TYPE__operator.32484733b8": [], "test.axelar.not_null_silver__validators_LABEL_SUBTYPE.64be738825": [], "test.axelar.dbt_expectations_expect_column_values_to_be_in_type_list_silver__validators_LABEL_SUBTYPE__STRING__VARCHAR.00e4e3f12b": [], "test.axelar.dbt_expectations_expect_column_values_to_be_in_set_silver__validators_LABEL_SUBTYPE__validator.522d73b50b": [], "test.axelar.not_null_silver__validators_LABEL.5e8c7267ff": [], "test.axelar.dbt_expectations_expect_column_values_to_be_in_type_list_silver__validators_LABEL__STRING__VARCHAR.f694d1a0e3": [], "test.axelar.not_null_silver__validators_PROJECT_NAME.b8f893f8e7": [], "test.axelar.dbt_expectations_expect_column_values_to_be_in_type_list_silver__validators_PROJECT_NAME__STRING__VARCHAR.0767218579": [], "test.axelar.not_null_silver__validators_DELEGATOR_SHARES.89b722f278": [], "test.axelar.dbt_expectations_expect_column_values_to_be_in_type_list_silver__validators_DELEGATOR_SHARES__NUMBER__FLOAT.153a8d0cdb": [], "test.axelar.not_null_silver__validators_JAILED.f85ae4ab21": [], "test.axelar.dbt_expectations_expect_column_values_to_be_in_type_list_silver__validators_JAILED__BOOLEAN.34313ede18": [], "test.axelar.not_null_silver__validators_RATE.fea467fa10": [], "test.axelar.dbt_expectations_expect_column_values_to_be_in_type_list_silver__validators_RATE__NUMBER__FLOAT.b620a8dc1d": [], "test.axelar.not_null_silver__validators_MAX_CHANGE_RATE.6156472781": [], "test.axelar.dbt_expectations_expect_column_values_to_be_in_type_list_silver__validators_MAX_CHANGE_RATE__NUMBER__FLOAT.ce20b99a85": [], "test.axelar.not_null_silver__validators_MAX_RATE.24b5d3c90d": [], "test.axelar.dbt_expectations_expect_column_values_to_be_in_type_list_silver__validators_MAX_RATE__NUMBER__FLOAT.3b0f40cf38": [], "test.axelar.not_null_silver__validators_MIN_SELF_DELEGATION.fcab1b0eb9": [], "test.axelar.dbt_expectations_expect_column_values_to_be_in_type_list_silver__validators_MIN_SELF_DELEGATION__NUMBER__FLOAT.2b4fca8ff2": [], "test.axelar.not_null_silver__validators_RANK.2e8e4ef4a4": [], "test.axelar.dbt_expectations_expect_column_values_to_be_in_type_list_silver__validators_RANK__NUMBER__FLOAT.40bed35bb0": [], "test.axelar.not_null_silver__validators_RAW_METADATA.fb6370f348": [], "test.axelar.not_null_silver__validators_UNIQUE_KEY.cf923edd07": [], "test.axelar.dbt_expectations_expect_column_values_to_be_in_type_list_silver__validators_UNIQUE_KEY__STRING__VARCHAR.0953163d95": [], "test.axelar.dbt_utils_unique_combination_of_columns_silver__validators_UNIQUE_KEY.1a5d96d3a9": [], "model.axelar.core__fact_validators": ["model.axelar.core__dim_labels", "test.axelar.dbt_expectations_expect_column_to_exist_core__fact_validators_ADDRESS.28ea232145", "test.axelar.dbt_expectations_expect_column_to_exist_core__fact_validators_BLOCKCHAIN.8c212981c8", "test.axelar.dbt_expectations_expect_column_to_exist_core__fact_validators_CREATOR.937fa2f10c", "test.axelar.dbt_expectations_expect_column_to_exist_core__fact_validators_DELEGATOR_SHARES.24690650ef", "test.axelar.dbt_expectations_expect_column_to_exist_core__fact_validators_JAILED.a889f6621b", "test.axelar.dbt_expectations_expect_column_to_exist_core__fact_validators_LABEL.58ea9d5501", "test.axelar.dbt_expectations_expect_column_to_exist_core__fact_validators_LABEL_SUBTYPE.545516ad48", "test.axelar.dbt_expectations_expect_column_to_exist_core__fact_validators_LABEL_TYPE.d259f1a775", "test.axelar.dbt_expectations_expect_column_to_exist_core__fact_validators_MAX_CHANGE_RATE.2b5ddeda55", "test.axelar.dbt_expectations_expect_column_to_exist_core__fact_validators_MAX_RATE.e02041b45d", "test.axelar.dbt_expectations_expect_column_to_exist_core__fact_validators_MIN_SELF_DELEGATION.a456038134", "test.axelar.dbt_expectations_expect_column_to_exist_core__fact_validators_PROJECT_NAME.580ffece96", "test.axelar.dbt_expectations_expect_column_to_exist_core__fact_validators_RANK.8ccac4f170", "test.axelar.dbt_expectations_expect_column_to_exist_core__fact_validators_RATE.dbf93b6f73", "test.axelar.dbt_expectations_expect_column_to_exist_core__fact_validators_RAW_METADATA.935f630216", "test.axelar.dbt_expectations_expect_column_to_exist_core__fact_validators_UNIQUE_KEY.f3f4e0c31e", "test.axelar.dbt_utils_unique_combination_of_columns_core__fact_validators_UNIQUE_KEY.d1d5c77f77"], "test.axelar.dbt_expectations_expect_column_to_exist_core__fact_validators_ADDRESS.28ea232145": [], "test.axelar.dbt_expectations_expect_column_to_exist_core__fact_validators_BLOCKCHAIN.8c212981c8": [], "test.axelar.dbt_expectations_expect_column_to_exist_core__fact_validators_CREATOR.937fa2f10c": [], "test.axelar.dbt_expectations_expect_column_to_exist_core__fact_validators_LABEL_TYPE.d259f1a775": [], "test.axelar.dbt_expectations_expect_column_to_exist_core__fact_validators_LABEL_SUBTYPE.545516ad48": [], "test.axelar.dbt_expectations_expect_column_to_exist_core__fact_validators_LABEL.58ea9d5501": [], "test.axelar.dbt_expectations_expect_column_to_exist_core__fact_validators_PROJECT_NAME.580ffece96": [], "test.axelar.dbt_expectations_expect_column_to_exist_core__fact_validators_DELEGATOR_SHARES.24690650ef": [], "test.axelar.dbt_expectations_expect_column_to_exist_core__fact_validators_JAILED.a889f6621b": [], "test.axelar.dbt_expectations_expect_column_to_exist_core__fact_validators_RATE.dbf93b6f73": [], "test.axelar.dbt_expectations_expect_column_to_exist_core__fact_validators_MAX_CHANGE_RATE.2b5ddeda55": [], "test.axelar.dbt_expectations_expect_column_to_exist_core__fact_validators_MAX_RATE.e02041b45d": [], "test.axelar.dbt_expectations_expect_column_to_exist_core__fact_validators_MIN_SELF_DELEGATION.a456038134": [], "test.axelar.dbt_expectations_expect_column_to_exist_core__fact_validators_RANK.8ccac4f170": [], "test.axelar.dbt_expectations_expect_column_to_exist_core__fact_validators_RAW_METADATA.935f630216": [], "test.axelar.dbt_expectations_expect_column_to_exist_core__fact_validators_UNIQUE_KEY.f3f4e0c31e": [], "test.axelar.dbt_utils_unique_combination_of_columns_core__fact_validators_UNIQUE_KEY.d1d5c77f77": [], "model.axelar.core__dim_labels": ["model.axelar.silver__transfers", "model.axelar.silver__transfers", "test.axelar.dbt_expectations_expect_column_values_to_be_in_set_core__dim_labels_LABEL_TYPE__flotsam__nft__defi__dex__cex__dapp__token__operator__layer2__chadmin.aa3909a8f8", "test.axelar.not_null_core__dim_labels_ADDRESS.ddf35f62af", "test.axelar.not_null_core__dim_labels_BLOCKCHAIN.a4e09054d7", "test.axelar.not_null_core__dim_labels_CREATOR.0c77d5749c", "test.axelar.not_null_core__dim_labels_LABEL.05696d692d", "test.axelar.not_null_core__dim_labels_LABEL_SUBTYPE.556a65235c", "test.axelar.not_null_core__dim_labels_LABEL_TYPE.65b0f6f1ed"], "test.axelar.not_null_core__dim_labels_BLOCKCHAIN.a4e09054d7": [], "test.axelar.not_null_core__dim_labels_CREATOR.0c77d5749c": [], "test.axelar.not_null_core__dim_labels_LABEL_TYPE.65b0f6f1ed": [], "test.axelar.dbt_expectations_expect_column_values_to_be_in_set_core__dim_labels_LABEL_TYPE__flotsam__nft__defi__dex__cex__dapp__token__operator__layer2__chadmin.aa3909a8f8": [], "test.axelar.not_null_core__dim_labels_LABEL_SUBTYPE.556a65235c": [], "test.axelar.not_null_core__dim_labels_LABEL.05696d692d": [], "test.axelar.not_null_core__dim_labels_ADDRESS.ddf35f62af": [], "source.axelar.bronze.blocks": ["model.axelar.bronze__blocks", "model.axelar.streamline__txs_realtime"], "source.axelar.bronze.txs": [], "source.axelar.bronze.txs_details": ["model.axelar.bronze__transactions"], "source.axelar.tokens.dim_labels": [], "source.axelar.crosschain.address_labels": ["model.axelar.core__dim_labels"], "source.axelar.bronze_streamline.blocks": ["model.axelar.streamline__blocks_history"], "source.axelar.bronze_streamline.txs": [], "source.axelar.bronze_streamline.txs_details": ["model.axelar.streamline__txs_history"], "source.axelar.osmo.asset_metadata": ["model.axelar.core__dim_tokens"]}}